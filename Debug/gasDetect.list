
gasDetect.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012cbc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0005b1d0  08012e4c  08012e4c  00022e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0806e01c  0806e01c  000806a0  2**0
                  CONTENTS
  4 .ARM          00000008  0806e01c  0806e01c  0007e01c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0806e024  0806e024  000806a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0806e024  0806e024  0007e024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0806e028  0806e028  0007e028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006a0  20000000  0806e02c  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009624  200006a0  0806e6cc  000806a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20009cc4  0806e6cc  00089cc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000806a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029869  00000000  00000000  000806d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005478  00000000  00000000  000a9f39  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001bc8  00000000  00000000  000af3b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001958  00000000  00000000  000b0f80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028b24  00000000  00000000  000b28d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001b4f0  00000000  00000000  000db3fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000daf75  00000000  00000000  000f68ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001d1861  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007434  00000000  00000000  001d18dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200006a0 	.word	0x200006a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012e34 	.word	0x08012e34

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200006a4 	.word	0x200006a4
 80001cc:	08012e34 	.word	0x08012e34

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000574:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <HAL_Init+0x40>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a0d      	ldr	r2, [pc, #52]	; (80005b0 <HAL_Init+0x40>)
 800057a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800057e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000580:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <HAL_Init+0x40>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a0a      	ldr	r2, [pc, #40]	; (80005b0 <HAL_Init+0x40>)
 8000586:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800058a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <HAL_Init+0x40>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a07      	ldr	r2, [pc, #28]	; (80005b0 <HAL_Init+0x40>)
 8000592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000596:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000598:	2003      	movs	r0, #3
 800059a:	f001 f837 	bl	800160c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800059e:	200f      	movs	r0, #15
 80005a0:	f000 f808 	bl	80005b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005a4:	f011 fa36 	bl	8011a14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005a8:	2300      	movs	r3, #0
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40023c00 	.word	0x40023c00

080005b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005bc:	4b12      	ldr	r3, [pc, #72]	; (8000608 <HAL_InitTick+0x54>)
 80005be:	681a      	ldr	r2, [r3, #0]
 80005c0:	4b12      	ldr	r3, [pc, #72]	; (800060c <HAL_InitTick+0x58>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	4619      	mov	r1, r3
 80005c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 f84f 	bl	8001676 <HAL_SYSTICK_Config>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005de:	2301      	movs	r3, #1
 80005e0:	e00e      	b.n	8000600 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2b0f      	cmp	r3, #15
 80005e6:	d80a      	bhi.n	80005fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005e8:	2200      	movs	r2, #0
 80005ea:	6879      	ldr	r1, [r7, #4]
 80005ec:	f04f 30ff 	mov.w	r0, #4294967295
 80005f0:	f001 f817 	bl	8001622 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005f4:	4a06      	ldr	r2, [pc, #24]	; (8000610 <HAL_InitTick+0x5c>)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005fa:	2300      	movs	r3, #0
 80005fc:	e000      	b.n	8000600 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005fe:	2301      	movs	r3, #1
}
 8000600:	4618      	mov	r0, r3
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000638 	.word	0x20000638
 800060c:	20000004 	.word	0x20000004
 8000610:	20000000 	.word	0x20000000

08000614 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <HAL_IncTick+0x20>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	461a      	mov	r2, r3
 800061e:	4b06      	ldr	r3, [pc, #24]	; (8000638 <HAL_IncTick+0x24>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4413      	add	r3, r2
 8000624:	4a04      	ldr	r2, [pc, #16]	; (8000638 <HAL_IncTick+0x24>)
 8000626:	6013      	str	r3, [r2, #0]
}
 8000628:	bf00      	nop
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	20000004 	.word	0x20000004
 8000638:	20006ad0 	.word	0x20006ad0

0800063c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  return uwTick;
 8000640:	4b03      	ldr	r3, [pc, #12]	; (8000650 <HAL_GetTick+0x14>)
 8000642:	681b      	ldr	r3, [r3, #0]
}
 8000644:	4618      	mov	r0, r3
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	20006ad0 	.word	0x20006ad0

08000654 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800065c:	f7ff ffee 	bl	800063c <HAL_GetTick>
 8000660:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800066c:	d005      	beq.n	800067a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <HAL_Delay+0x40>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	461a      	mov	r2, r3
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	4413      	add	r3, r2
 8000678:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800067a:	bf00      	nop
 800067c:	f7ff ffde 	bl	800063c <HAL_GetTick>
 8000680:	4602      	mov	r2, r0
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	1ad3      	subs	r3, r2, r3
 8000686:	68fa      	ldr	r2, [r7, #12]
 8000688:	429a      	cmp	r2, r3
 800068a:	d8f7      	bhi.n	800067c <HAL_Delay+0x28>
  {
  }
}
 800068c:	bf00      	nop
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000004 	.word	0x20000004

08000698 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d101      	bne.n	80006aa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80006a6:	2301      	movs	r3, #1
 80006a8:	e11c      	b.n	80008e4 <HAL_CAN_Init+0x24c>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d131      	bne.n	800071a <HAL_CAN_Init+0x82>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4a8c      	ldr	r2, [pc, #560]	; (80008ec <HAL_CAN_Init+0x254>)
 80006ba:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	4a8c      	ldr	r2, [pc, #560]	; (80008f0 <HAL_CAN_Init+0x258>)
 80006c0:	645a      	str	r2, [r3, #68]	; 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4a8b      	ldr	r2, [pc, #556]	; (80008f4 <HAL_CAN_Init+0x25c>)
 80006c6:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	4a8b      	ldr	r2, [pc, #556]	; (80008f8 <HAL_CAN_Init+0x260>)
 80006cc:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	4a8a      	ldr	r2, [pc, #552]	; (80008fc <HAL_CAN_Init+0x264>)
 80006d2:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	4a8a      	ldr	r2, [pc, #552]	; (8000900 <HAL_CAN_Init+0x268>)
 80006d8:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4a89      	ldr	r2, [pc, #548]	; (8000904 <HAL_CAN_Init+0x26c>)
 80006de:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4a89      	ldr	r2, [pc, #548]	; (8000908 <HAL_CAN_Init+0x270>)
 80006e4:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	4a88      	ldr	r2, [pc, #544]	; (800090c <HAL_CAN_Init+0x274>)
 80006ea:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	4a88      	ldr	r2, [pc, #544]	; (8000910 <HAL_CAN_Init+0x278>)
 80006f0:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4a87      	ldr	r2, [pc, #540]	; (8000914 <HAL_CAN_Init+0x27c>)
 80006f6:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4a87      	ldr	r2, [pc, #540]	; (8000918 <HAL_CAN_Init+0x280>)
 80006fc:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4a86      	ldr	r2, [pc, #536]	; (800091c <HAL_CAN_Init+0x284>)
 8000702:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000708:	2b00      	cmp	r3, #0
 800070a:	d102      	bne.n	8000712 <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	4a84      	ldr	r2, [pc, #528]	; (8000920 <HAL_CAN_Init+0x288>)
 8000710:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000716:	6878      	ldr	r0, [r7, #4]
 8000718:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	681a      	ldr	r2, [r3, #0]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f022 0202 	bic.w	r2, r2, #2
 8000728:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800072a:	f7ff ff87 	bl	800063c <HAL_GetTick>
 800072e:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000730:	e012      	b.n	8000758 <HAL_CAN_Init+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000732:	f7ff ff83 	bl	800063c <HAL_GetTick>
 8000736:	4602      	mov	r2, r0
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	1ad3      	subs	r3, r2, r3
 800073c:	2b0a      	cmp	r3, #10
 800073e:	d90b      	bls.n	8000758 <HAL_CAN_Init+0xc0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000744:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	2205      	movs	r2, #5
 8000750:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000754:	2301      	movs	r3, #1
 8000756:	e0c5      	b.n	80008e4 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	685b      	ldr	r3, [r3, #4]
 800075e:	f003 0302 	and.w	r3, r3, #2
 8000762:	2b00      	cmp	r3, #0
 8000764:	d1e5      	bne.n	8000732 <HAL_CAN_Init+0x9a>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f042 0201 	orr.w	r2, r2, #1
 8000774:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000776:	f7ff ff61 	bl	800063c <HAL_GetTick>
 800077a:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800077c:	e012      	b.n	80007a4 <HAL_CAN_Init+0x10c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800077e:	f7ff ff5d 	bl	800063c <HAL_GetTick>
 8000782:	4602      	mov	r2, r0
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	1ad3      	subs	r3, r2, r3
 8000788:	2b0a      	cmp	r3, #10
 800078a:	d90b      	bls.n	80007a4 <HAL_CAN_Init+0x10c>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000790:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2205      	movs	r2, #5
 800079c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80007a0:	2301      	movs	r3, #1
 80007a2:	e09f      	b.n	80008e4 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	685b      	ldr	r3, [r3, #4]
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d0e5      	beq.n	800077e <HAL_CAN_Init+0xe6>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	7e1b      	ldrb	r3, [r3, #24]
 80007b6:	2b01      	cmp	r3, #1
 80007b8:	d108      	bne.n	80007cc <HAL_CAN_Init+0x134>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	e007      	b.n	80007dc <HAL_CAN_Init+0x144>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80007da:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	7e5b      	ldrb	r3, [r3, #25]
 80007e0:	2b01      	cmp	r3, #1
 80007e2:	d108      	bne.n	80007f6 <HAL_CAN_Init+0x15e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	681a      	ldr	r2, [r3, #0]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	e007      	b.n	8000806 <HAL_CAN_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000804:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	7e9b      	ldrb	r3, [r3, #26]
 800080a:	2b01      	cmp	r3, #1
 800080c:	d108      	bne.n	8000820 <HAL_CAN_Init+0x188>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f042 0220 	orr.w	r2, r2, #32
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	e007      	b.n	8000830 <HAL_CAN_Init+0x198>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	681a      	ldr	r2, [r3, #0]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	f022 0220 	bic.w	r2, r2, #32
 800082e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	7edb      	ldrb	r3, [r3, #27]
 8000834:	2b01      	cmp	r3, #1
 8000836:	d108      	bne.n	800084a <HAL_CAN_Init+0x1b2>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f022 0210 	bic.w	r2, r2, #16
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	e007      	b.n	800085a <HAL_CAN_Init+0x1c2>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	681a      	ldr	r2, [r3, #0]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f042 0210 	orr.w	r2, r2, #16
 8000858:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	7f1b      	ldrb	r3, [r3, #28]
 800085e:	2b01      	cmp	r3, #1
 8000860:	d108      	bne.n	8000874 <HAL_CAN_Init+0x1dc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f042 0208 	orr.w	r2, r2, #8
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	e007      	b.n	8000884 <HAL_CAN_Init+0x1ec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	681a      	ldr	r2, [r3, #0]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	f022 0208 	bic.w	r2, r2, #8
 8000882:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	7f5b      	ldrb	r3, [r3, #29]
 8000888:	2b01      	cmp	r3, #1
 800088a:	d108      	bne.n	800089e <HAL_CAN_Init+0x206>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	f042 0204 	orr.w	r2, r2, #4
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	e007      	b.n	80008ae <HAL_CAN_Init+0x216>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f022 0204 	bic.w	r2, r2, #4
 80008ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	689a      	ldr	r2, [r3, #8]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	68db      	ldr	r3, [r3, #12]
 80008b6:	431a      	orrs	r2, r3
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	691b      	ldr	r3, [r3, #16]
 80008bc:	431a      	orrs	r2, r3
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	695b      	ldr	r3, [r3, #20]
 80008c2:	ea42 0103 	orr.w	r1, r2, r3
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	1e5a      	subs	r2, r3, #1
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	430a      	orrs	r2, r1
 80008d2:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2200      	movs	r2, #0
 80008d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2201      	movs	r2, #1
 80008de:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80008e2:	2300      	movs	r3, #0
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3710      	adds	r7, #16
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	0800d765 	.word	0x0800d765
 80008f0:	080013f5 	.word	0x080013f5
 80008f4:	08001409 	.word	0x08001409
 80008f8:	0800141d 	.word	0x0800141d
 80008fc:	0800137d 	.word	0x0800137d
 8000900:	08001391 	.word	0x08001391
 8000904:	080013a5 	.word	0x080013a5
 8000908:	080013b9 	.word	0x080013b9
 800090c:	080013cd 	.word	0x080013cd
 8000910:	080013e1 	.word	0x080013e1
 8000914:	08001431 	.word	0x08001431
 8000918:	08001445 	.word	0x08001445
 800091c:	08001459 	.word	0x08001459
 8000920:	08011a6d 	.word	0x08011a6d

08000924 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000924:	b480      	push	{r7}
 8000926:	b087      	sub	sp, #28
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	f893 3020 	ldrb.w	r3, [r3, #32]
 800093a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800093c:	7cfb      	ldrb	r3, [r7, #19]
 800093e:	2b01      	cmp	r3, #1
 8000940:	d003      	beq.n	800094a <HAL_CAN_ConfigFilter+0x26>
 8000942:	7cfb      	ldrb	r3, [r7, #19]
 8000944:	2b02      	cmp	r3, #2
 8000946:	f040 80be 	bne.w	8000ac6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800094a:	4b65      	ldr	r3, [pc, #404]	; (8000ae0 <HAL_CAN_ConfigFilter+0x1bc>)
 800094c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000954:	f043 0201 	orr.w	r2, r3, #1
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000964:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000978:	021b      	lsls	r3, r3, #8
 800097a:	431a      	orrs	r2, r3
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	695b      	ldr	r3, [r3, #20]
 8000986:	f003 031f 	and.w	r3, r3, #31
 800098a:	2201      	movs	r2, #1
 800098c:	fa02 f303 	lsl.w	r3, r2, r3
 8000990:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	43db      	mvns	r3, r3
 800099c:	401a      	ands	r2, r3
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	69db      	ldr	r3, [r3, #28]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d123      	bne.n	80009f4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	43db      	mvns	r3, r3
 80009b6:	401a      	ands	r2, r3
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	68db      	ldr	r3, [r3, #12]
 80009c2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80009ca:	683a      	ldr	r2, [r7, #0]
 80009cc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80009ce:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	3248      	adds	r2, #72	; 0x48
 80009d4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	689b      	ldr	r3, [r3, #8]
 80009dc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80009e8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80009ea:	6979      	ldr	r1, [r7, #20]
 80009ec:	3348      	adds	r3, #72	; 0x48
 80009ee:	00db      	lsls	r3, r3, #3
 80009f0:	440b      	add	r3, r1
 80009f2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	69db      	ldr	r3, [r3, #28]
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d122      	bne.n	8000a42 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	431a      	orrs	r2, r3
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a18:	683a      	ldr	r2, [r7, #0]
 8000a1a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000a1c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	3248      	adds	r2, #72	; 0x48
 8000a22:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	689b      	ldr	r3, [r3, #8]
 8000a2a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a36:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a38:	6979      	ldr	r1, [r7, #20]
 8000a3a:	3348      	adds	r3, #72	; 0x48
 8000a3c:	00db      	lsls	r3, r3, #3
 8000a3e:	440b      	add	r3, r1
 8000a40:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	699b      	ldr	r3, [r3, #24]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d109      	bne.n	8000a5e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	43db      	mvns	r3, r3
 8000a54:	401a      	ands	r2, r3
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000a5c:	e007      	b.n	8000a6e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	431a      	orrs	r2, r3
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	691b      	ldr	r3, [r3, #16]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d109      	bne.n	8000a8a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	43db      	mvns	r3, r3
 8000a80:	401a      	ands	r2, r3
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000a88:	e007      	b.n	8000a9a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	431a      	orrs	r2, r3
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	6a1b      	ldr	r3, [r3, #32]
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d107      	bne.n	8000ab2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	431a      	orrs	r2, r3
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000ab8:	f023 0201 	bic.w	r2, r3, #1
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	e006      	b.n	8000ad4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
  }
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	371c      	adds	r7, #28
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	40006400 	.word	0x40006400

08000ae4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d12e      	bne.n	8000b56 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2202      	movs	r2, #2
 8000afc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f022 0201 	bic.w	r2, r2, #1
 8000b0e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000b10:	f7ff fd94 	bl	800063c <HAL_GetTick>
 8000b14:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000b16:	e012      	b.n	8000b3e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b18:	f7ff fd90 	bl	800063c <HAL_GetTick>
 8000b1c:	4602      	mov	r2, r0
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	2b0a      	cmp	r3, #10
 8000b24:	d90b      	bls.n	8000b3e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b2a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2205      	movs	r2, #5
 8000b36:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e012      	b.n	8000b64 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	f003 0301 	and.w	r3, r3, #1
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d1e5      	bne.n	8000b18 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2200      	movs	r2, #0
 8000b50:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000b52:	2300      	movs	r3, #0
 8000b54:	e006      	b.n	8000b64 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b5a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
  }
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3710      	adds	r7, #16
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b089      	sub	sp, #36	; 0x24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
 8000b78:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b80:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	689b      	ldr	r3, [r3, #8]
 8000b88:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000b8a:	7ffb      	ldrb	r3, [r7, #31]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d003      	beq.n	8000b98 <HAL_CAN_AddTxMessage+0x2c>
 8000b90:	7ffb      	ldrb	r3, [r7, #31]
 8000b92:	2b02      	cmp	r3, #2
 8000b94:	f040 80b8 	bne.w	8000d08 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000b98:	69bb      	ldr	r3, [r7, #24]
 8000b9a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d10a      	bne.n	8000bb8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000ba2:	69bb      	ldr	r3, [r7, #24]
 8000ba4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d105      	bne.n	8000bb8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000bac:	69bb      	ldr	r3, [r7, #24]
 8000bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	f000 80a0 	beq.w	8000cf8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	0e1b      	lsrs	r3, r3, #24
 8000bbc:	f003 0303 	and.w	r3, r3, #3
 8000bc0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	2b02      	cmp	r3, #2
 8000bc6:	d907      	bls.n	8000bd8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bcc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	e09e      	b.n	8000d16 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000bd8:	2201      	movs	r2, #1
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	409a      	lsls	r2, r3
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d10d      	bne.n	8000c06 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000bf4:	68f9      	ldr	r1, [r7, #12]
 8000bf6:	6809      	ldr	r1, [r1, #0]
 8000bf8:	431a      	orrs	r2, r3
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	3318      	adds	r3, #24
 8000bfe:	011b      	lsls	r3, r3, #4
 8000c00:	440b      	add	r3, r1
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	e00f      	b.n	8000c26 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c10:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c16:	68f9      	ldr	r1, [r7, #12]
 8000c18:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000c1a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	3318      	adds	r3, #24
 8000c20:	011b      	lsls	r3, r3, #4
 8000c22:	440b      	add	r3, r1
 8000c24:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	6819      	ldr	r1, [r3, #0]
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	691a      	ldr	r2, [r3, #16]
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	3318      	adds	r3, #24
 8000c32:	011b      	lsls	r3, r3, #4
 8000c34:	440b      	add	r3, r1
 8000c36:	3304      	adds	r3, #4
 8000c38:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	7d1b      	ldrb	r3, [r3, #20]
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d111      	bne.n	8000c66 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	3318      	adds	r3, #24
 8000c4a:	011b      	lsls	r3, r3, #4
 8000c4c:	4413      	add	r3, r2
 8000c4e:	3304      	adds	r3, #4
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	68fa      	ldr	r2, [r7, #12]
 8000c54:	6811      	ldr	r1, [r2, #0]
 8000c56:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	3318      	adds	r3, #24
 8000c5e:	011b      	lsls	r3, r3, #4
 8000c60:	440b      	add	r3, r1
 8000c62:	3304      	adds	r3, #4
 8000c64:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	3307      	adds	r3, #7
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	061a      	lsls	r2, r3, #24
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	3306      	adds	r3, #6
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	041b      	lsls	r3, r3, #16
 8000c76:	431a      	orrs	r2, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3305      	adds	r3, #5
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	021b      	lsls	r3, r3, #8
 8000c80:	4313      	orrs	r3, r2
 8000c82:	687a      	ldr	r2, [r7, #4]
 8000c84:	3204      	adds	r2, #4
 8000c86:	7812      	ldrb	r2, [r2, #0]
 8000c88:	4610      	mov	r0, r2
 8000c8a:	68fa      	ldr	r2, [r7, #12]
 8000c8c:	6811      	ldr	r1, [r2, #0]
 8000c8e:	ea43 0200 	orr.w	r2, r3, r0
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	011b      	lsls	r3, r3, #4
 8000c96:	440b      	add	r3, r1
 8000c98:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000c9c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	3303      	adds	r3, #3
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	061a      	lsls	r2, r3, #24
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	3302      	adds	r3, #2
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	041b      	lsls	r3, r3, #16
 8000cae:	431a      	orrs	r2, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	021b      	lsls	r3, r3, #8
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	7812      	ldrb	r2, [r2, #0]
 8000cbe:	4610      	mov	r0, r2
 8000cc0:	68fa      	ldr	r2, [r7, #12]
 8000cc2:	6811      	ldr	r1, [r2, #0]
 8000cc4:	ea43 0200 	orr.w	r2, r3, r0
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	011b      	lsls	r3, r3, #4
 8000ccc:	440b      	add	r3, r1
 8000cce:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000cd2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	3318      	adds	r3, #24
 8000cdc:	011b      	lsls	r3, r3, #4
 8000cde:	4413      	add	r3, r2
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	68fa      	ldr	r2, [r7, #12]
 8000ce4:	6811      	ldr	r1, [r2, #0]
 8000ce6:	f043 0201 	orr.w	r2, r3, #1
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	3318      	adds	r3, #24
 8000cee:	011b      	lsls	r3, r3, #4
 8000cf0:	440b      	add	r3, r1
 8000cf2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	e00e      	b.n	8000d16 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cfc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000d04:	2301      	movs	r3, #1
 8000d06:	e006      	b.n	8000d16 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d0c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d14:	2301      	movs	r3, #1
  }
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3724      	adds	r7, #36	; 0x24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8000d22:	b480      	push	{r7}
 8000d24:	b085      	sub	sp, #20
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d34:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8000d36:	7afb      	ldrb	r3, [r7, #11]
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d002      	beq.n	8000d42 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8000d3c:	7afb      	ldrb	r3, [r7, #11]
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	d11d      	bne.n	8000d7e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	689b      	ldr	r3, [r3, #8]
 8000d48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d002      	beq.n	8000d56 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	3301      	adds	r3, #1
 8000d54:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d002      	beq.n	8000d6a <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	3301      	adds	r3, #1
 8000d68:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d002      	beq.n	8000d7e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8000d7e:	68fb      	ldr	r3, [r7, #12]
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3714      	adds	r7, #20
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b087      	sub	sp, #28
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
 8000d98:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000da0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000da2:	7dfb      	ldrb	r3, [r7, #23]
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d003      	beq.n	8000db0 <HAL_CAN_GetRxMessage+0x24>
 8000da8:	7dfb      	ldrb	r3, [r7, #23]
 8000daa:	2b02      	cmp	r3, #2
 8000dac:	f040 80f4 	bne.w	8000f98 <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d10e      	bne.n	8000dd4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	f003 0303 	and.w	r3, r3, #3
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d116      	bne.n	8000df2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	e0e8      	b.n	8000fa6 <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	691b      	ldr	r3, [r3, #16]
 8000dda:	f003 0303 	and.w	r3, r3, #3
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d107      	bne.n	8000df2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e0d9      	b.n	8000fa6 <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	331b      	adds	r3, #27
 8000dfa:	011b      	lsls	r3, r3, #4
 8000dfc:	4413      	add	r3, r2
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f003 0204 	and.w	r2, r3, #4
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d10c      	bne.n	8000e2a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	331b      	adds	r3, #27
 8000e18:	011b      	lsls	r3, r3, #4
 8000e1a:	4413      	add	r3, r2
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	0d5b      	lsrs	r3, r3, #21
 8000e20:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	e00b      	b.n	8000e42 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	331b      	adds	r3, #27
 8000e32:	011b      	lsls	r3, r3, #4
 8000e34:	4413      	add	r3, r2
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	08db      	lsrs	r3, r3, #3
 8000e3a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	331b      	adds	r3, #27
 8000e4a:	011b      	lsls	r3, r3, #4
 8000e4c:	4413      	add	r3, r2
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	085b      	lsrs	r3, r3, #1
 8000e52:	f003 0201 	and.w	r2, r3, #1
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	331b      	adds	r3, #27
 8000e62:	011b      	lsls	r3, r3, #4
 8000e64:	4413      	add	r3, r2
 8000e66:	3304      	adds	r3, #4
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f003 020f 	and.w	r2, r3, #15
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	331b      	adds	r3, #27
 8000e7a:	011b      	lsls	r3, r3, #4
 8000e7c:	4413      	add	r3, r2
 8000e7e:	3304      	adds	r3, #4
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	0a1b      	lsrs	r3, r3, #8
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	331b      	adds	r3, #27
 8000e92:	011b      	lsls	r3, r3, #4
 8000e94:	4413      	add	r3, r2
 8000e96:	3304      	adds	r3, #4
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	0c1b      	lsrs	r3, r3, #16
 8000e9c:	b29a      	uxth	r2, r3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	011b      	lsls	r3, r3, #4
 8000eaa:	4413      	add	r3, r2
 8000eac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	b2da      	uxtb	r2, r3
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	011b      	lsls	r3, r3, #4
 8000ec0:	4413      	add	r3, r2
 8000ec2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	0a1a      	lsrs	r2, r3, #8
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	b2d2      	uxtb	r2, r2
 8000ed0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	011b      	lsls	r3, r3, #4
 8000eda:	4413      	add	r3, r2
 8000edc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	0c1a      	lsrs	r2, r3, #16
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	3302      	adds	r3, #2
 8000ee8:	b2d2      	uxtb	r2, r2
 8000eea:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	011b      	lsls	r3, r3, #4
 8000ef4:	4413      	add	r3, r2
 8000ef6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	0e1a      	lsrs	r2, r3, #24
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	3303      	adds	r3, #3
 8000f02:	b2d2      	uxtb	r2, r2
 8000f04:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	011b      	lsls	r3, r3, #4
 8000f0e:	4413      	add	r3, r2
 8000f10:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	3304      	adds	r3, #4
 8000f1a:	b2d2      	uxtb	r2, r2
 8000f1c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	011b      	lsls	r3, r3, #4
 8000f26:	4413      	add	r3, r2
 8000f28:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	0a1a      	lsrs	r2, r3, #8
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	3305      	adds	r3, #5
 8000f34:	b2d2      	uxtb	r2, r2
 8000f36:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	011b      	lsls	r3, r3, #4
 8000f40:	4413      	add	r3, r2
 8000f42:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	0c1a      	lsrs	r2, r3, #16
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	3306      	adds	r3, #6
 8000f4e:	b2d2      	uxtb	r2, r2
 8000f50:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	011b      	lsls	r3, r3, #4
 8000f5a:	4413      	add	r3, r2
 8000f5c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	0e1a      	lsrs	r2, r3, #24
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	3307      	adds	r3, #7
 8000f68:	b2d2      	uxtb	r2, r2
 8000f6a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d108      	bne.n	8000f84 <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	68da      	ldr	r2, [r3, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f042 0220 	orr.w	r2, r2, #32
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	e007      	b.n	8000f94 <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	691a      	ldr	r2, [r3, #16]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f042 0220 	orr.w	r2, r2, #32
 8000f92:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000f94:	2300      	movs	r3, #0
 8000f96:	e006      	b.n	8000fa6 <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f9c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
  }
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	371c      	adds	r7, #28
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	b085      	sub	sp, #20
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
 8000fba:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fc2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000fc4:	7bfb      	ldrb	r3, [r7, #15]
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d002      	beq.n	8000fd0 <HAL_CAN_ActivateNotification+0x1e>
 8000fca:	7bfb      	ldrb	r3, [r7, #15]
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d109      	bne.n	8000fe4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	6959      	ldr	r1, [r3, #20]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	683a      	ldr	r2, [r7, #0]
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	e006      	b.n	8000ff2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
  }
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3714      	adds	r7, #20
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b08a      	sub	sp, #40	; 0x28
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001006:	2300      	movs	r3, #0
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	695b      	ldr	r3, [r3, #20]
 8001010:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	691b      	ldr	r3, [r3, #16]
 8001030:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800103a:	6a3b      	ldr	r3, [r7, #32]
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	2b00      	cmp	r3, #0
 8001042:	f000 8083 	beq.w	800114c <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	2b00      	cmp	r3, #0
 800104e:	d025      	beq.n	800109c <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2201      	movs	r2, #1
 8001056:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	2b00      	cmp	r3, #0
 8001060:	d004      	beq.n	800106c <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	4798      	blx	r3
 800106a:	e017      	b.n	800109c <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	f003 0304 	and.w	r3, r3, #4
 8001072:	2b00      	cmp	r3, #0
 8001074:	d004      	beq.n	8001080 <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001078:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
 800107e:	e00d      	b.n	800109c <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	f003 0308 	and.w	r3, r3, #8
 8001086:	2b00      	cmp	r3, #0
 8001088:	d004      	beq.n	8001094 <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800108a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
 8001092:	e003      	b.n	800109c <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d026      	beq.n	80010f4 <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010ae:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d004      	beq.n	80010c4 <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	4798      	blx	r3
 80010c2:	e017      	b.n	80010f4 <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d004      	beq.n	80010d8 <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80010ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
 80010d6:	e00d      	b.n	80010f4 <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d004      	beq.n	80010ec <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80010e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
 80010ea:	e003      	b.n	80010f4 <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d026      	beq.n	800114c <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001106:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d004      	beq.n	800111c <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	4798      	blx	r3
 800111a:	e017      	b.n	800114c <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d004      	beq.n	8001130 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001128:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800112c:	627b      	str	r3, [r7, #36]	; 0x24
 800112e:	e00d      	b.n	800114c <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d004      	beq.n	8001144 <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800113a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001140:	627b      	str	r3, [r7, #36]	; 0x24
 8001142:	e003      	b.n	800114c <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800114c:	6a3b      	ldr	r3, [r7, #32]
 800114e:	f003 0308 	and.w	r3, r3, #8
 8001152:	2b00      	cmp	r3, #0
 8001154:	d00c      	beq.n	8001170 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	f003 0310 	and.w	r3, r3, #16
 800115c:	2b00      	cmp	r3, #0
 800115e:	d007      	beq.n	8001170 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001162:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001166:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2210      	movs	r2, #16
 800116e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001170:	6a3b      	ldr	r3, [r7, #32]
 8001172:	f003 0304 	and.w	r3, r3, #4
 8001176:	2b00      	cmp	r3, #0
 8001178:	d00c      	beq.n	8001194 <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	f003 0308 	and.w	r3, r3, #8
 8001180:	2b00      	cmp	r3, #0
 8001182:	d007      	beq.n	8001194 <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2208      	movs	r2, #8
 800118a:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001194:	6a3b      	ldr	r3, [r7, #32]
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	2b00      	cmp	r3, #0
 800119c:	d00a      	beq.n	80011b4 <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	f003 0303 	and.w	r3, r3, #3
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d003      	beq.n	80011b4 <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 mesage pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80011b4:	6a3b      	ldr	r3, [r7, #32]
 80011b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d00c      	beq.n	80011d8 <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	f003 0310 	and.w	r3, r3, #16
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d007      	beq.n	80011d8 <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80011c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2210      	movs	r2, #16
 80011d6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80011d8:	6a3b      	ldr	r3, [r7, #32]
 80011da:	f003 0320 	and.w	r3, r3, #32
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d00c      	beq.n	80011fc <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	f003 0308 	and.w	r3, r3, #8
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d007      	beq.n	80011fc <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2208      	movs	r2, #8
 80011f2:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80011fc:	6a3b      	ldr	r3, [r7, #32]
 80011fe:	f003 0310 	and.w	r3, r3, #16
 8001202:	2b00      	cmp	r3, #0
 8001204:	d00a      	beq.n	800121c <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	691b      	ldr	r3, [r3, #16]
 800120c:	f003 0303 	and.w	r3, r3, #3
 8001210:	2b00      	cmp	r3, #0
 8001212:	d003      	beq.n	800121c <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 mesage pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800121c:	6a3b      	ldr	r3, [r7, #32]
 800121e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d00c      	beq.n	8001240 <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	f003 0310 	and.w	r3, r3, #16
 800122c:	2b00      	cmp	r3, #0
 800122e:	d007      	beq.n	8001240 <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2210      	movs	r2, #16
 8001236:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001240:	6a3b      	ldr	r3, [r7, #32]
 8001242:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d00c      	beq.n	8001264 <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	f003 0308 	and.w	r3, r3, #8
 8001250:	2b00      	cmp	r3, #0
 8001252:	d007      	beq.n	8001264 <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2208      	movs	r2, #8
 800125a:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001264:	6a3b      	ldr	r3, [r7, #32]
 8001266:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d075      	beq.n	800135a <HAL_CAN_IRQHandler+0x35c>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	f003 0304 	and.w	r3, r3, #4
 8001274:	2b00      	cmp	r3, #0
 8001276:	d06c      	beq.n	8001352 <HAL_CAN_IRQHandler+0x354>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001278:	6a3b      	ldr	r3, [r7, #32]
 800127a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800127e:	2b00      	cmp	r3, #0
 8001280:	d008      	beq.n	8001294 <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001288:	2b00      	cmp	r3, #0
 800128a:	d003      	beq.n	8001294 <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800128c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128e:	f043 0301 	orr.w	r3, r3, #1
 8001292:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001294:	6a3b      	ldr	r3, [r7, #32]
 8001296:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800129a:	2b00      	cmp	r3, #0
 800129c:	d008      	beq.n	80012b0 <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d003      	beq.n	80012b0 <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80012a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012aa:	f043 0302 	orr.w	r3, r3, #2
 80012ae:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80012b0:	6a3b      	ldr	r3, [r7, #32]
 80012b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d008      	beq.n	80012cc <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d003      	beq.n	80012cc <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80012c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c6:	f043 0304 	orr.w	r3, r3, #4
 80012ca:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80012cc:	6a3b      	ldr	r3, [r7, #32]
 80012ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d03d      	beq.n	8001352 <HAL_CAN_IRQHandler+0x354>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d038      	beq.n	8001352 <HAL_CAN_IRQHandler+0x354>
      {
        switch (esrflags & CAN_ESR_LEC)
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80012e6:	2b30      	cmp	r3, #48	; 0x30
 80012e8:	d017      	beq.n	800131a <HAL_CAN_IRQHandler+0x31c>
 80012ea:	2b30      	cmp	r3, #48	; 0x30
 80012ec:	d804      	bhi.n	80012f8 <HAL_CAN_IRQHandler+0x2fa>
 80012ee:	2b10      	cmp	r3, #16
 80012f0:	d009      	beq.n	8001306 <HAL_CAN_IRQHandler+0x308>
 80012f2:	2b20      	cmp	r3, #32
 80012f4:	d00c      	beq.n	8001310 <HAL_CAN_IRQHandler+0x312>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80012f6:	e024      	b.n	8001342 <HAL_CAN_IRQHandler+0x344>
        switch (esrflags & CAN_ESR_LEC)
 80012f8:	2b50      	cmp	r3, #80	; 0x50
 80012fa:	d018      	beq.n	800132e <HAL_CAN_IRQHandler+0x330>
 80012fc:	2b60      	cmp	r3, #96	; 0x60
 80012fe:	d01b      	beq.n	8001338 <HAL_CAN_IRQHandler+0x33a>
 8001300:	2b40      	cmp	r3, #64	; 0x40
 8001302:	d00f      	beq.n	8001324 <HAL_CAN_IRQHandler+0x326>
            break;
 8001304:	e01d      	b.n	8001342 <HAL_CAN_IRQHandler+0x344>
            errorcode |= HAL_CAN_ERROR_STF;
 8001306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001308:	f043 0308 	orr.w	r3, r3, #8
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800130e:	e018      	b.n	8001342 <HAL_CAN_IRQHandler+0x344>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001312:	f043 0310 	orr.w	r3, r3, #16
 8001316:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001318:	e013      	b.n	8001342 <HAL_CAN_IRQHandler+0x344>
            errorcode |= HAL_CAN_ERROR_ACK;
 800131a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131c:	f043 0320 	orr.w	r3, r3, #32
 8001320:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001322:	e00e      	b.n	8001342 <HAL_CAN_IRQHandler+0x344>
            errorcode |= HAL_CAN_ERROR_BR;
 8001324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001326:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800132c:	e009      	b.n	8001342 <HAL_CAN_IRQHandler+0x344>
            errorcode |= HAL_CAN_ERROR_BD;
 800132e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001336:	e004      	b.n	8001342 <HAL_CAN_IRQHandler+0x344>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800133e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001340:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	699a      	ldr	r2, [r3, #24]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001350:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2204      	movs	r2, #4
 8001358:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800135a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135c:	2b00      	cmp	r3, #0
 800135e:	d009      	beq.n	8001374 <HAL_CAN_IRQHandler+0x376>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001366:	431a      	orrs	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001374:	bf00      	nop
 8001376:	3728      	adds	r7, #40	; 0x28
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800144c:	bf00      	nop
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f003 0307 	and.w	r3, r3, #7
 800147a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800147c:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <__NVIC_SetPriorityGrouping+0x44>)
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001482:	68ba      	ldr	r2, [r7, #8]
 8001484:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001488:	4013      	ands	r3, r2
 800148a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001494:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800149c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800149e:	4a04      	ldr	r2, [pc, #16]	; (80014b0 <__NVIC_SetPriorityGrouping+0x44>)
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	60d3      	str	r3, [r2, #12]
}
 80014a4:	bf00      	nop
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014b8:	4b04      	ldr	r3, [pc, #16]	; (80014cc <__NVIC_GetPriorityGrouping+0x18>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	0a1b      	lsrs	r3, r3, #8
 80014be:	f003 0307 	and.w	r3, r3, #7
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	db0b      	blt.n	80014fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	f003 021f 	and.w	r2, r3, #31
 80014e8:	4907      	ldr	r1, [pc, #28]	; (8001508 <__NVIC_EnableIRQ+0x38>)
 80014ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ee:	095b      	lsrs	r3, r3, #5
 80014f0:	2001      	movs	r0, #1
 80014f2:	fa00 f202 	lsl.w	r2, r0, r2
 80014f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014fa:	bf00      	nop
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	e000e100 	.word	0xe000e100

0800150c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	6039      	str	r1, [r7, #0]
 8001516:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151c:	2b00      	cmp	r3, #0
 800151e:	db0a      	blt.n	8001536 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	b2da      	uxtb	r2, r3
 8001524:	490c      	ldr	r1, [pc, #48]	; (8001558 <__NVIC_SetPriority+0x4c>)
 8001526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152a:	0112      	lsls	r2, r2, #4
 800152c:	b2d2      	uxtb	r2, r2
 800152e:	440b      	add	r3, r1
 8001530:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001534:	e00a      	b.n	800154c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	b2da      	uxtb	r2, r3
 800153a:	4908      	ldr	r1, [pc, #32]	; (800155c <__NVIC_SetPriority+0x50>)
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	f003 030f 	and.w	r3, r3, #15
 8001542:	3b04      	subs	r3, #4
 8001544:	0112      	lsls	r2, r2, #4
 8001546:	b2d2      	uxtb	r2, r2
 8001548:	440b      	add	r3, r1
 800154a:	761a      	strb	r2, [r3, #24]
}
 800154c:	bf00      	nop
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	e000e100 	.word	0xe000e100
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001560:	b480      	push	{r7}
 8001562:	b089      	sub	sp, #36	; 0x24
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	f1c3 0307 	rsb	r3, r3, #7
 800157a:	2b04      	cmp	r3, #4
 800157c:	bf28      	it	cs
 800157e:	2304      	movcs	r3, #4
 8001580:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	3304      	adds	r3, #4
 8001586:	2b06      	cmp	r3, #6
 8001588:	d902      	bls.n	8001590 <NVIC_EncodePriority+0x30>
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	3b03      	subs	r3, #3
 800158e:	e000      	b.n	8001592 <NVIC_EncodePriority+0x32>
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001594:	f04f 32ff 	mov.w	r2, #4294967295
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	43da      	mvns	r2, r3
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	401a      	ands	r2, r3
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015a8:	f04f 31ff 	mov.w	r1, #4294967295
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	fa01 f303 	lsl.w	r3, r1, r3
 80015b2:	43d9      	mvns	r1, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b8:	4313      	orrs	r3, r2
         );
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3724      	adds	r7, #36	; 0x24
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
	...

080015c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	3b01      	subs	r3, #1
 80015d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015d8:	d301      	bcc.n	80015de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015da:	2301      	movs	r3, #1
 80015dc:	e00f      	b.n	80015fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015de:	4a0a      	ldr	r2, [pc, #40]	; (8001608 <SysTick_Config+0x40>)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	3b01      	subs	r3, #1
 80015e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015e6:	210f      	movs	r1, #15
 80015e8:	f04f 30ff 	mov.w	r0, #4294967295
 80015ec:	f7ff ff8e 	bl	800150c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015f0:	4b05      	ldr	r3, [pc, #20]	; (8001608 <SysTick_Config+0x40>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015f6:	4b04      	ldr	r3, [pc, #16]	; (8001608 <SysTick_Config+0x40>)
 80015f8:	2207      	movs	r2, #7
 80015fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	e000e010 	.word	0xe000e010

0800160c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f7ff ff29 	bl	800146c <__NVIC_SetPriorityGrouping>
}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001622:	b580      	push	{r7, lr}
 8001624:	b086      	sub	sp, #24
 8001626:	af00      	add	r7, sp, #0
 8001628:	4603      	mov	r3, r0
 800162a:	60b9      	str	r1, [r7, #8]
 800162c:	607a      	str	r2, [r7, #4]
 800162e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001634:	f7ff ff3e 	bl	80014b4 <__NVIC_GetPriorityGrouping>
 8001638:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	68b9      	ldr	r1, [r7, #8]
 800163e:	6978      	ldr	r0, [r7, #20]
 8001640:	f7ff ff8e 	bl	8001560 <NVIC_EncodePriority>
 8001644:	4602      	mov	r2, r0
 8001646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800164a:	4611      	mov	r1, r2
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff ff5d 	bl	800150c <__NVIC_SetPriority>
}
 8001652:	bf00      	nop
 8001654:	3718      	adds	r7, #24
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b082      	sub	sp, #8
 800165e:	af00      	add	r7, sp, #0
 8001660:	4603      	mov	r3, r0
 8001662:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff ff31 	bl	80014d0 <__NVIC_EnableIRQ>
}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b082      	sub	sp, #8
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f7ff ffa2 	bl	80015c8 <SysTick_Config>
 8001684:	4603      	mov	r3, r0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
	...

08001690 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001698:	2300      	movs	r3, #0
 800169a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800169c:	f7fe ffce 	bl	800063c <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d101      	bne.n	80016ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e099      	b.n	80017e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2202      	movs	r2, #2
 80016b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f022 0201 	bic.w	r2, r2, #1
 80016ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016cc:	e00f      	b.n	80016ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016ce:	f7fe ffb5 	bl	800063c <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b05      	cmp	r3, #5
 80016da:	d908      	bls.n	80016ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2220      	movs	r2, #32
 80016e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2203      	movs	r2, #3
 80016e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e078      	b.n	80017e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d1e8      	bne.n	80016ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001704:	697a      	ldr	r2, [r7, #20]
 8001706:	4b38      	ldr	r3, [pc, #224]	; (80017e8 <HAL_DMA_Init+0x158>)
 8001708:	4013      	ands	r3, r2
 800170a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685a      	ldr	r2, [r3, #4]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800171a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	691b      	ldr	r3, [r3, #16]
 8001720:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001726:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001732:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a1b      	ldr	r3, [r3, #32]
 8001738:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800173a:	697a      	ldr	r2, [r7, #20]
 800173c:	4313      	orrs	r3, r2
 800173e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001744:	2b04      	cmp	r3, #4
 8001746:	d107      	bne.n	8001758 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001750:	4313      	orrs	r3, r2
 8001752:	697a      	ldr	r2, [r7, #20]
 8001754:	4313      	orrs	r3, r2
 8001756:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	697a      	ldr	r2, [r7, #20]
 800175e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	695b      	ldr	r3, [r3, #20]
 8001766:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	f023 0307 	bic.w	r3, r3, #7
 800176e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001774:	697a      	ldr	r2, [r7, #20]
 8001776:	4313      	orrs	r3, r2
 8001778:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177e:	2b04      	cmp	r3, #4
 8001780:	d117      	bne.n	80017b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001786:	697a      	ldr	r2, [r7, #20]
 8001788:	4313      	orrs	r3, r2
 800178a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001790:	2b00      	cmp	r3, #0
 8001792:	d00e      	beq.n	80017b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f000 fa99 	bl	8001ccc <DMA_CheckFifoParam>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d008      	beq.n	80017b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2240      	movs	r2, #64	; 0x40
 80017a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2201      	movs	r2, #1
 80017aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80017ae:	2301      	movs	r3, #1
 80017b0:	e016      	b.n	80017e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	697a      	ldr	r2, [r7, #20]
 80017b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f000 fa50 	bl	8001c60 <DMA_CalcBaseAndBitshift>
 80017c0:	4603      	mov	r3, r0
 80017c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017c8:	223f      	movs	r2, #63	; 0x3f
 80017ca:	409a      	lsls	r2, r3
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2201      	movs	r2, #1
 80017da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3718      	adds	r7, #24
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	f010803f 	.word	0xf010803f

080017ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
 80017f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80017fa:	2300      	movs	r3, #0
 80017fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001802:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800180a:	2b01      	cmp	r3, #1
 800180c:	d101      	bne.n	8001812 <HAL_DMA_Start_IT+0x26>
 800180e:	2302      	movs	r3, #2
 8001810:	e048      	b.n	80018a4 <HAL_DMA_Start_IT+0xb8>
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2201      	movs	r2, #1
 8001816:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001820:	b2db      	uxtb	r3, r3
 8001822:	2b01      	cmp	r3, #1
 8001824:	d137      	bne.n	8001896 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2202      	movs	r2, #2
 800182a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2200      	movs	r2, #0
 8001832:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	68b9      	ldr	r1, [r7, #8]
 800183a:	68f8      	ldr	r0, [r7, #12]
 800183c:	f000 f9e2 	bl	8001c04 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001844:	223f      	movs	r2, #63	; 0x3f
 8001846:	409a      	lsls	r2, r3
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f042 0216 	orr.w	r2, r2, #22
 800185a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	695a      	ldr	r2, [r3, #20]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800186a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001870:	2b00      	cmp	r3, #0
 8001872:	d007      	beq.n	8001884 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f042 0208 	orr.w	r2, r2, #8
 8001882:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f042 0201 	orr.w	r2, r2, #1
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	e005      	b.n	80018a2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2200      	movs	r2, #0
 800189a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800189e:	2302      	movs	r3, #2
 80018a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80018a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3718      	adds	r7, #24
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d004      	beq.n	80018ca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2280      	movs	r2, #128	; 0x80
 80018c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e00c      	b.n	80018e4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2205      	movs	r2, #5
 80018ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f022 0201 	bic.w	r2, r2, #1
 80018e0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80018e2:	2300      	movs	r3, #0
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80018f8:	2300      	movs	r3, #0
 80018fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80018fc:	4b92      	ldr	r3, [pc, #584]	; (8001b48 <HAL_DMA_IRQHandler+0x258>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a92      	ldr	r2, [pc, #584]	; (8001b4c <HAL_DMA_IRQHandler+0x25c>)
 8001902:	fba2 2303 	umull	r2, r3, r2, r3
 8001906:	0a9b      	lsrs	r3, r3, #10
 8001908:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800191a:	2208      	movs	r2, #8
 800191c:	409a      	lsls	r2, r3
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	4013      	ands	r3, r2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d01a      	beq.n	800195c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0304 	and.w	r3, r3, #4
 8001930:	2b00      	cmp	r3, #0
 8001932:	d013      	beq.n	800195c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f022 0204 	bic.w	r2, r2, #4
 8001942:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001948:	2208      	movs	r2, #8
 800194a:	409a      	lsls	r2, r3
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001954:	f043 0201 	orr.w	r2, r3, #1
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001960:	2201      	movs	r2, #1
 8001962:	409a      	lsls	r2, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	4013      	ands	r3, r2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d012      	beq.n	8001992 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	695b      	ldr	r3, [r3, #20]
 8001972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001976:	2b00      	cmp	r3, #0
 8001978:	d00b      	beq.n	8001992 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800197e:	2201      	movs	r2, #1
 8001980:	409a      	lsls	r2, r3
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800198a:	f043 0202 	orr.w	r2, r3, #2
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001996:	2204      	movs	r2, #4
 8001998:	409a      	lsls	r2, r3
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	4013      	ands	r3, r2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d012      	beq.n	80019c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d00b      	beq.n	80019c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019b4:	2204      	movs	r2, #4
 80019b6:	409a      	lsls	r2, r3
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019c0:	f043 0204 	orr.w	r2, r3, #4
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019cc:	2210      	movs	r2, #16
 80019ce:	409a      	lsls	r2, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	4013      	ands	r3, r2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d043      	beq.n	8001a60 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0308 	and.w	r3, r3, #8
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d03c      	beq.n	8001a60 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ea:	2210      	movs	r2, #16
 80019ec:	409a      	lsls	r2, r3
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d018      	beq.n	8001a32 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d108      	bne.n	8001a20 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d024      	beq.n	8001a60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	4798      	blx	r3
 8001a1e:	e01f      	b.n	8001a60 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d01b      	beq.n	8001a60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	4798      	blx	r3
 8001a30:	e016      	b.n	8001a60 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d107      	bne.n	8001a50 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f022 0208 	bic.w	r2, r2, #8
 8001a4e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d003      	beq.n	8001a60 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a64:	2220      	movs	r2, #32
 8001a66:	409a      	lsls	r2, r3
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f000 808e 	beq.w	8001b8e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0310 	and.w	r3, r3, #16
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	f000 8086 	beq.w	8001b8e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a86:	2220      	movs	r2, #32
 8001a88:	409a      	lsls	r2, r3
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b05      	cmp	r3, #5
 8001a98:	d136      	bne.n	8001b08 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f022 0216 	bic.w	r2, r2, #22
 8001aa8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	695a      	ldr	r2, [r3, #20]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ab8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d103      	bne.n	8001aca <HAL_DMA_IRQHandler+0x1da>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d007      	beq.n	8001ada <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f022 0208 	bic.w	r2, r2, #8
 8001ad8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ade:	223f      	movs	r2, #63	; 0x3f
 8001ae0:	409a      	lsls	r2, r3
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2201      	movs	r2, #1
 8001af2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d07d      	beq.n	8001bfa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	4798      	blx	r3
        }
        return;
 8001b06:	e078      	b.n	8001bfa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d01c      	beq.n	8001b50 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d108      	bne.n	8001b36 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d030      	beq.n	8001b8e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	4798      	blx	r3
 8001b34:	e02b      	b.n	8001b8e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d027      	beq.n	8001b8e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	4798      	blx	r3
 8001b46:	e022      	b.n	8001b8e <HAL_DMA_IRQHandler+0x29e>
 8001b48:	20000638 	.word	0x20000638
 8001b4c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d10f      	bne.n	8001b7e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f022 0210 	bic.w	r2, r2, #16
 8001b6c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d003      	beq.n	8001b8e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d032      	beq.n	8001bfc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d022      	beq.n	8001be8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2205      	movs	r2, #5
 8001ba6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 0201 	bic.w	r2, r2, #1
 8001bb8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	60bb      	str	r3, [r7, #8]
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d307      	bcc.n	8001bd6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1f2      	bne.n	8001bba <HAL_DMA_IRQHandler+0x2ca>
 8001bd4:	e000      	b.n	8001bd8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001bd6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d005      	beq.n	8001bfc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	4798      	blx	r3
 8001bf8:	e000      	b.n	8001bfc <HAL_DMA_IRQHandler+0x30c>
        return;
 8001bfa:	bf00      	nop
    }
  }
}
 8001bfc:	3718      	adds	r7, #24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop

08001c04 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
 8001c10:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c20:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	2b40      	cmp	r3, #64	; 0x40
 8001c30:	d108      	bne.n	8001c44 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	68ba      	ldr	r2, [r7, #8]
 8001c40:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001c42:	e007      	b.n	8001c54 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	68ba      	ldr	r2, [r7, #8]
 8001c4a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	60da      	str	r2, [r3, #12]
}
 8001c54:	bf00      	nop
 8001c56:	3714      	adds	r7, #20
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	3b10      	subs	r3, #16
 8001c70:	4a14      	ldr	r2, [pc, #80]	; (8001cc4 <DMA_CalcBaseAndBitshift+0x64>)
 8001c72:	fba2 2303 	umull	r2, r3, r2, r3
 8001c76:	091b      	lsrs	r3, r3, #4
 8001c78:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c7a:	4a13      	ldr	r2, [pc, #76]	; (8001cc8 <DMA_CalcBaseAndBitshift+0x68>)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	4413      	add	r3, r2
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	461a      	mov	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2b03      	cmp	r3, #3
 8001c8c:	d909      	bls.n	8001ca2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c96:	f023 0303 	bic.w	r3, r3, #3
 8001c9a:	1d1a      	adds	r2, r3, #4
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	659a      	str	r2, [r3, #88]	; 0x58
 8001ca0:	e007      	b.n	8001cb2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001caa:	f023 0303 	bic.w	r3, r3, #3
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3714      	adds	r7, #20
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	aaaaaaab 	.word	0xaaaaaaab
 8001cc8:	08013170 	.word	0x08013170

08001ccc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cdc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	699b      	ldr	r3, [r3, #24]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d11f      	bne.n	8001d26 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	2b03      	cmp	r3, #3
 8001cea:	d855      	bhi.n	8001d98 <DMA_CheckFifoParam+0xcc>
 8001cec:	a201      	add	r2, pc, #4	; (adr r2, 8001cf4 <DMA_CheckFifoParam+0x28>)
 8001cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cf2:	bf00      	nop
 8001cf4:	08001d05 	.word	0x08001d05
 8001cf8:	08001d17 	.word	0x08001d17
 8001cfc:	08001d05 	.word	0x08001d05
 8001d00:	08001d99 	.word	0x08001d99
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d045      	beq.n	8001d9c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d14:	e042      	b.n	8001d9c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d1e:	d13f      	bne.n	8001da0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d24:	e03c      	b.n	8001da0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d2e:	d121      	bne.n	8001d74 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	2b03      	cmp	r3, #3
 8001d34:	d836      	bhi.n	8001da4 <DMA_CheckFifoParam+0xd8>
 8001d36:	a201      	add	r2, pc, #4	; (adr r2, 8001d3c <DMA_CheckFifoParam+0x70>)
 8001d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d3c:	08001d4d 	.word	0x08001d4d
 8001d40:	08001d53 	.word	0x08001d53
 8001d44:	08001d4d 	.word	0x08001d4d
 8001d48:	08001d65 	.word	0x08001d65
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	73fb      	strb	r3, [r7, #15]
      break;
 8001d50:	e02f      	b.n	8001db2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d024      	beq.n	8001da8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d62:	e021      	b.n	8001da8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d68:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d6c:	d11e      	bne.n	8001dac <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001d72:	e01b      	b.n	8001dac <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d902      	bls.n	8001d80 <DMA_CheckFifoParam+0xb4>
 8001d7a:	2b03      	cmp	r3, #3
 8001d7c:	d003      	beq.n	8001d86 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d7e:	e018      	b.n	8001db2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	73fb      	strb	r3, [r7, #15]
      break;
 8001d84:	e015      	b.n	8001db2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d00e      	beq.n	8001db0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	73fb      	strb	r3, [r7, #15]
      break;
 8001d96:	e00b      	b.n	8001db0 <DMA_CheckFifoParam+0xe4>
      break;
 8001d98:	bf00      	nop
 8001d9a:	e00a      	b.n	8001db2 <DMA_CheckFifoParam+0xe6>
      break;
 8001d9c:	bf00      	nop
 8001d9e:	e008      	b.n	8001db2 <DMA_CheckFifoParam+0xe6>
      break;
 8001da0:	bf00      	nop
 8001da2:	e006      	b.n	8001db2 <DMA_CheckFifoParam+0xe6>
      break;
 8001da4:	bf00      	nop
 8001da6:	e004      	b.n	8001db2 <DMA_CheckFifoParam+0xe6>
      break;
 8001da8:	bf00      	nop
 8001daa:	e002      	b.n	8001db2 <DMA_CheckFifoParam+0xe6>
      break;   
 8001dac:	bf00      	nop
 8001dae:	e000      	b.n	8001db2 <DMA_CheckFifoParam+0xe6>
      break;
 8001db0:	bf00      	nop
    }
  } 
  
  return status; 
 8001db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3714      	adds	r7, #20
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b089      	sub	sp, #36	; 0x24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61fb      	str	r3, [r7, #28]
 8001dda:	e16b      	b.n	80020b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ddc:	2201      	movs	r2, #1
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	4013      	ands	r3, r2
 8001dee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	f040 815a 	bne.w	80020ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d003      	beq.n	8001e0a <HAL_GPIO_Init+0x4a>
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2b12      	cmp	r3, #18
 8001e08:	d123      	bne.n	8001e52 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	08da      	lsrs	r2, r3, #3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	3208      	adds	r2, #8
 8001e12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	220f      	movs	r2, #15
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43db      	mvns	r3, r3
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	691a      	ldr	r2, [r3, #16]
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	08da      	lsrs	r2, r3, #3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3208      	adds	r2, #8
 8001e4c:	69b9      	ldr	r1, [r7, #24]
 8001e4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	2203      	movs	r2, #3
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43db      	mvns	r3, r3
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	4013      	ands	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f003 0203 	and.w	r2, r3, #3
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d00b      	beq.n	8001ea6 <HAL_GPIO_Init+0xe6>
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d007      	beq.n	8001ea6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e9a:	2b11      	cmp	r3, #17
 8001e9c:	d003      	beq.n	8001ea6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	2b12      	cmp	r3, #18
 8001ea4:	d130      	bne.n	8001f08 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	2203      	movs	r2, #3
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	68da      	ldr	r2, [r3, #12]
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001edc:	2201      	movs	r2, #1
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	091b      	lsrs	r3, r3, #4
 8001ef2:	f003 0201 	and.w	r2, r3, #1
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	2203      	movs	r2, #3
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f000 80b4 	beq.w	80020ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	60fb      	str	r3, [r7, #12]
 8001f4a:	4b5f      	ldr	r3, [pc, #380]	; (80020c8 <HAL_GPIO_Init+0x308>)
 8001f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4e:	4a5e      	ldr	r2, [pc, #376]	; (80020c8 <HAL_GPIO_Init+0x308>)
 8001f50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f54:	6453      	str	r3, [r2, #68]	; 0x44
 8001f56:	4b5c      	ldr	r3, [pc, #368]	; (80020c8 <HAL_GPIO_Init+0x308>)
 8001f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f62:	4a5a      	ldr	r2, [pc, #360]	; (80020cc <HAL_GPIO_Init+0x30c>)
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	089b      	lsrs	r3, r3, #2
 8001f68:	3302      	adds	r3, #2
 8001f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	f003 0303 	and.w	r3, r3, #3
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	220f      	movs	r2, #15
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4013      	ands	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a51      	ldr	r2, [pc, #324]	; (80020d0 <HAL_GPIO_Init+0x310>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d02b      	beq.n	8001fe6 <HAL_GPIO_Init+0x226>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a50      	ldr	r2, [pc, #320]	; (80020d4 <HAL_GPIO_Init+0x314>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d025      	beq.n	8001fe2 <HAL_GPIO_Init+0x222>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a4f      	ldr	r2, [pc, #316]	; (80020d8 <HAL_GPIO_Init+0x318>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d01f      	beq.n	8001fde <HAL_GPIO_Init+0x21e>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a4e      	ldr	r2, [pc, #312]	; (80020dc <HAL_GPIO_Init+0x31c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d019      	beq.n	8001fda <HAL_GPIO_Init+0x21a>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a4d      	ldr	r2, [pc, #308]	; (80020e0 <HAL_GPIO_Init+0x320>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d013      	beq.n	8001fd6 <HAL_GPIO_Init+0x216>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a4c      	ldr	r2, [pc, #304]	; (80020e4 <HAL_GPIO_Init+0x324>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d00d      	beq.n	8001fd2 <HAL_GPIO_Init+0x212>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a4b      	ldr	r2, [pc, #300]	; (80020e8 <HAL_GPIO_Init+0x328>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d007      	beq.n	8001fce <HAL_GPIO_Init+0x20e>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a4a      	ldr	r2, [pc, #296]	; (80020ec <HAL_GPIO_Init+0x32c>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d101      	bne.n	8001fca <HAL_GPIO_Init+0x20a>
 8001fc6:	2307      	movs	r3, #7
 8001fc8:	e00e      	b.n	8001fe8 <HAL_GPIO_Init+0x228>
 8001fca:	2308      	movs	r3, #8
 8001fcc:	e00c      	b.n	8001fe8 <HAL_GPIO_Init+0x228>
 8001fce:	2306      	movs	r3, #6
 8001fd0:	e00a      	b.n	8001fe8 <HAL_GPIO_Init+0x228>
 8001fd2:	2305      	movs	r3, #5
 8001fd4:	e008      	b.n	8001fe8 <HAL_GPIO_Init+0x228>
 8001fd6:	2304      	movs	r3, #4
 8001fd8:	e006      	b.n	8001fe8 <HAL_GPIO_Init+0x228>
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e004      	b.n	8001fe8 <HAL_GPIO_Init+0x228>
 8001fde:	2302      	movs	r3, #2
 8001fe0:	e002      	b.n	8001fe8 <HAL_GPIO_Init+0x228>
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e000      	b.n	8001fe8 <HAL_GPIO_Init+0x228>
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	69fa      	ldr	r2, [r7, #28]
 8001fea:	f002 0203 	and.w	r2, r2, #3
 8001fee:	0092      	lsls	r2, r2, #2
 8001ff0:	4093      	lsls	r3, r2
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ff8:	4934      	ldr	r1, [pc, #208]	; (80020cc <HAL_GPIO_Init+0x30c>)
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	089b      	lsrs	r3, r3, #2
 8001ffe:	3302      	adds	r3, #2
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002006:	4b3a      	ldr	r3, [pc, #232]	; (80020f0 <HAL_GPIO_Init+0x330>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	43db      	mvns	r3, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4013      	ands	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	4313      	orrs	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800202a:	4a31      	ldr	r2, [pc, #196]	; (80020f0 <HAL_GPIO_Init+0x330>)
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002030:	4b2f      	ldr	r3, [pc, #188]	; (80020f0 <HAL_GPIO_Init+0x330>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	43db      	mvns	r3, r3
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	4013      	ands	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d003      	beq.n	8002054 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	4313      	orrs	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002054:	4a26      	ldr	r2, [pc, #152]	; (80020f0 <HAL_GPIO_Init+0x330>)
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800205a:	4b25      	ldr	r3, [pc, #148]	; (80020f0 <HAL_GPIO_Init+0x330>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	43db      	mvns	r3, r3
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4013      	ands	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	4313      	orrs	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800207e:	4a1c      	ldr	r2, [pc, #112]	; (80020f0 <HAL_GPIO_Init+0x330>)
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002084:	4b1a      	ldr	r3, [pc, #104]	; (80020f0 <HAL_GPIO_Init+0x330>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	43db      	mvns	r3, r3
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	4013      	ands	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d003      	beq.n	80020a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020a8:	4a11      	ldr	r2, [pc, #68]	; (80020f0 <HAL_GPIO_Init+0x330>)
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	3301      	adds	r3, #1
 80020b2:	61fb      	str	r3, [r7, #28]
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	2b0f      	cmp	r3, #15
 80020b8:	f67f ae90 	bls.w	8001ddc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020bc:	bf00      	nop
 80020be:	3724      	adds	r7, #36	; 0x24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	40023800 	.word	0x40023800
 80020cc:	40013800 	.word	0x40013800
 80020d0:	40020000 	.word	0x40020000
 80020d4:	40020400 	.word	0x40020400
 80020d8:	40020800 	.word	0x40020800
 80020dc:	40020c00 	.word	0x40020c00
 80020e0:	40021000 	.word	0x40021000
 80020e4:	40021400 	.word	0x40021400
 80020e8:	40021800 	.word	0x40021800
 80020ec:	40021c00 	.word	0x40021c00
 80020f0:	40013c00 	.word	0x40013c00

080020f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	460b      	mov	r3, r1
 80020fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	691a      	ldr	r2, [r3, #16]
 8002104:	887b      	ldrh	r3, [r7, #2]
 8002106:	4013      	ands	r3, r2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d002      	beq.n	8002112 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800210c:	2301      	movs	r3, #1
 800210e:	73fb      	strb	r3, [r7, #15]
 8002110:	e001      	b.n	8002116 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002112:	2300      	movs	r3, #0
 8002114:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002116:	7bfb      	ldrb	r3, [r7, #15]
}
 8002118:	4618      	mov	r0, r3
 800211a:	3714      	adds	r7, #20
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	460b      	mov	r3, r1
 800212e:	807b      	strh	r3, [r7, #2]
 8002130:	4613      	mov	r3, r2
 8002132:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002134:	787b      	ldrb	r3, [r7, #1]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d003      	beq.n	8002142 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800213a:	887a      	ldrh	r2, [r7, #2]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002140:	e003      	b.n	800214a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002142:	887b      	ldrh	r3, [r7, #2]
 8002144:	041a      	lsls	r2, r3, #16
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	619a      	str	r2, [r3, #24]
}
 800214a:	bf00      	nop
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
	...

08002158 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	4603      	mov	r3, r0
 8002160:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002162:	4b08      	ldr	r3, [pc, #32]	; (8002184 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002164:	695a      	ldr	r2, [r3, #20]
 8002166:	88fb      	ldrh	r3, [r7, #6]
 8002168:	4013      	ands	r3, r2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d006      	beq.n	800217c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800216e:	4a05      	ldr	r2, [pc, #20]	; (8002184 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002170:	88fb      	ldrh	r3, [r7, #6]
 8002172:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002174:	88fb      	ldrh	r3, [r7, #6]
 8002176:	4618      	mov	r0, r3
 8002178:	f00b fe6b 	bl	800de52 <HAL_GPIO_EXTI_Callback>
  }
}
 800217c:	bf00      	nop
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40013c00 	.word	0x40013c00

08002188 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e22d      	b.n	80025f6 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d075      	beq.n	8002292 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021a6:	4ba3      	ldr	r3, [pc, #652]	; (8002434 <HAL_RCC_OscConfig+0x2ac>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f003 030c 	and.w	r3, r3, #12
 80021ae:	2b04      	cmp	r3, #4
 80021b0:	d00c      	beq.n	80021cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021b2:	4ba0      	ldr	r3, [pc, #640]	; (8002434 <HAL_RCC_OscConfig+0x2ac>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021ba:	2b08      	cmp	r3, #8
 80021bc:	d112      	bne.n	80021e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021be:	4b9d      	ldr	r3, [pc, #628]	; (8002434 <HAL_RCC_OscConfig+0x2ac>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021ca:	d10b      	bne.n	80021e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021cc:	4b99      	ldr	r3, [pc, #612]	; (8002434 <HAL_RCC_OscConfig+0x2ac>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d05b      	beq.n	8002290 <HAL_RCC_OscConfig+0x108>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d157      	bne.n	8002290 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e208      	b.n	80025f6 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021ec:	d106      	bne.n	80021fc <HAL_RCC_OscConfig+0x74>
 80021ee:	4b91      	ldr	r3, [pc, #580]	; (8002434 <HAL_RCC_OscConfig+0x2ac>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a90      	ldr	r2, [pc, #576]	; (8002434 <HAL_RCC_OscConfig+0x2ac>)
 80021f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	e01d      	b.n	8002238 <HAL_RCC_OscConfig+0xb0>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002204:	d10c      	bne.n	8002220 <HAL_RCC_OscConfig+0x98>
 8002206:	4b8b      	ldr	r3, [pc, #556]	; (8002434 <HAL_RCC_OscConfig+0x2ac>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a8a      	ldr	r2, [pc, #552]	; (8002434 <HAL_RCC_OscConfig+0x2ac>)
 800220c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002210:	6013      	str	r3, [r2, #0]
 8002212:	4b88      	ldr	r3, [pc, #544]	; (8002434 <HAL_RCC_OscConfig+0x2ac>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a87      	ldr	r2, [pc, #540]	; (8002434 <HAL_RCC_OscConfig+0x2ac>)
 8002218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800221c:	6013      	str	r3, [r2, #0]
 800221e:	e00b      	b.n	8002238 <HAL_RCC_OscConfig+0xb0>
 8002220:	4b84      	ldr	r3, [pc, #528]	; (8002434 <HAL_RCC_OscConfig+0x2ac>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a83      	ldr	r2, [pc, #524]	; (8002434 <HAL_RCC_OscConfig+0x2ac>)
 8002226:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800222a:	6013      	str	r3, [r2, #0]
 800222c:	4b81      	ldr	r3, [pc, #516]	; (8002434 <HAL_RCC_OscConfig+0x2ac>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a80      	ldr	r2, [pc, #512]	; (8002434 <HAL_RCC_OscConfig+0x2ac>)
 8002232:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002236:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d013      	beq.n	8002268 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002240:	f7fe f9fc 	bl	800063c <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002248:	f7fe f9f8 	bl	800063c <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b64      	cmp	r3, #100	; 0x64
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e1cd      	b.n	80025f6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800225a:	4b76      	ldr	r3, [pc, #472]	; (8002434 <HAL_RCC_OscConfig+0x2ac>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d0f0      	beq.n	8002248 <HAL_RCC_OscConfig+0xc0>
 8002266:	e014      	b.n	8002292 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002268:	f7fe f9e8 	bl	800063c <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002270:	f7fe f9e4 	bl	800063c <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b64      	cmp	r3, #100	; 0x64
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e1b9      	b.n	80025f6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002282:	4b6c      	ldr	r3, [pc, #432]	; (8002434 <HAL_RCC_OscConfig+0x2ac>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1f0      	bne.n	8002270 <HAL_RCC_OscConfig+0xe8>
 800228e:	e000      	b.n	8002292 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002290:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d063      	beq.n	8002366 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800229e:	4b65      	ldr	r3, [pc, #404]	; (8002434 <HAL_RCC_OscConfig+0x2ac>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f003 030c 	and.w	r3, r3, #12
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00b      	beq.n	80022c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022aa:	4b62      	ldr	r3, [pc, #392]	; (8002434 <HAL_RCC_OscConfig+0x2ac>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022b2:	2b08      	cmp	r3, #8
 80022b4:	d11c      	bne.n	80022f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022b6:	4b5f      	ldr	r3, [pc, #380]	; (8002434 <HAL_RCC_OscConfig+0x2ac>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d116      	bne.n	80022f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022c2:	4b5c      	ldr	r3, [pc, #368]	; (8002434 <HAL_RCC_OscConfig+0x2ac>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d005      	beq.n	80022da <HAL_RCC_OscConfig+0x152>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d001      	beq.n	80022da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e18d      	b.n	80025f6 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022da:	4b56      	ldr	r3, [pc, #344]	; (8002434 <HAL_RCC_OscConfig+0x2ac>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	4952      	ldr	r1, [pc, #328]	; (8002434 <HAL_RCC_OscConfig+0x2ac>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ee:	e03a      	b.n	8002366 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d020      	beq.n	800233a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022f8:	4b4f      	ldr	r3, [pc, #316]	; (8002438 <HAL_RCC_OscConfig+0x2b0>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fe:	f7fe f99d 	bl	800063c <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002304:	e008      	b.n	8002318 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002306:	f7fe f999 	bl	800063c <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e16e      	b.n	80025f6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002318:	4b46      	ldr	r3, [pc, #280]	; (8002434 <HAL_RCC_OscConfig+0x2ac>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d0f0      	beq.n	8002306 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002324:	4b43      	ldr	r3, [pc, #268]	; (8002434 <HAL_RCC_OscConfig+0x2ac>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	4940      	ldr	r1, [pc, #256]	; (8002434 <HAL_RCC_OscConfig+0x2ac>)
 8002334:	4313      	orrs	r3, r2
 8002336:	600b      	str	r3, [r1, #0]
 8002338:	e015      	b.n	8002366 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800233a:	4b3f      	ldr	r3, [pc, #252]	; (8002438 <HAL_RCC_OscConfig+0x2b0>)
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002340:	f7fe f97c 	bl	800063c <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002348:	f7fe f978 	bl	800063c <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e14d      	b.n	80025f6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800235a:	4b36      	ldr	r3, [pc, #216]	; (8002434 <HAL_RCC_OscConfig+0x2ac>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1f0      	bne.n	8002348 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0308 	and.w	r3, r3, #8
 800236e:	2b00      	cmp	r3, #0
 8002370:	d030      	beq.n	80023d4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d016      	beq.n	80023a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800237a:	4b30      	ldr	r3, [pc, #192]	; (800243c <HAL_RCC_OscConfig+0x2b4>)
 800237c:	2201      	movs	r2, #1
 800237e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002380:	f7fe f95c 	bl	800063c <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002386:	e008      	b.n	800239a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002388:	f7fe f958 	bl	800063c <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e12d      	b.n	80025f6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800239a:	4b26      	ldr	r3, [pc, #152]	; (8002434 <HAL_RCC_OscConfig+0x2ac>)
 800239c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d0f0      	beq.n	8002388 <HAL_RCC_OscConfig+0x200>
 80023a6:	e015      	b.n	80023d4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023a8:	4b24      	ldr	r3, [pc, #144]	; (800243c <HAL_RCC_OscConfig+0x2b4>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ae:	f7fe f945 	bl	800063c <HAL_GetTick>
 80023b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023b4:	e008      	b.n	80023c8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023b6:	f7fe f941 	bl	800063c <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e116      	b.n	80025f6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023c8:	4b1a      	ldr	r3, [pc, #104]	; (8002434 <HAL_RCC_OscConfig+0x2ac>)
 80023ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1f0      	bne.n	80023b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0304 	and.w	r3, r3, #4
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f000 80a0 	beq.w	8002522 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023e2:	2300      	movs	r3, #0
 80023e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023e6:	4b13      	ldr	r3, [pc, #76]	; (8002434 <HAL_RCC_OscConfig+0x2ac>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d10f      	bne.n	8002412 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	60fb      	str	r3, [r7, #12]
 80023f6:	4b0f      	ldr	r3, [pc, #60]	; (8002434 <HAL_RCC_OscConfig+0x2ac>)
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	4a0e      	ldr	r2, [pc, #56]	; (8002434 <HAL_RCC_OscConfig+0x2ac>)
 80023fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002400:	6413      	str	r3, [r2, #64]	; 0x40
 8002402:	4b0c      	ldr	r3, [pc, #48]	; (8002434 <HAL_RCC_OscConfig+0x2ac>)
 8002404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240a:	60fb      	str	r3, [r7, #12]
 800240c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800240e:	2301      	movs	r3, #1
 8002410:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002412:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <HAL_RCC_OscConfig+0x2b8>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800241a:	2b00      	cmp	r3, #0
 800241c:	d121      	bne.n	8002462 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800241e:	4b08      	ldr	r3, [pc, #32]	; (8002440 <HAL_RCC_OscConfig+0x2b8>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a07      	ldr	r2, [pc, #28]	; (8002440 <HAL_RCC_OscConfig+0x2b8>)
 8002424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002428:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800242a:	f7fe f907 	bl	800063c <HAL_GetTick>
 800242e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002430:	e011      	b.n	8002456 <HAL_RCC_OscConfig+0x2ce>
 8002432:	bf00      	nop
 8002434:	40023800 	.word	0x40023800
 8002438:	42470000 	.word	0x42470000
 800243c:	42470e80 	.word	0x42470e80
 8002440:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002444:	f7fe f8fa 	bl	800063c <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e0cf      	b.n	80025f6 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002456:	4b6a      	ldr	r3, [pc, #424]	; (8002600 <HAL_RCC_OscConfig+0x478>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800245e:	2b00      	cmp	r3, #0
 8002460:	d0f0      	beq.n	8002444 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d106      	bne.n	8002478 <HAL_RCC_OscConfig+0x2f0>
 800246a:	4b66      	ldr	r3, [pc, #408]	; (8002604 <HAL_RCC_OscConfig+0x47c>)
 800246c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246e:	4a65      	ldr	r2, [pc, #404]	; (8002604 <HAL_RCC_OscConfig+0x47c>)
 8002470:	f043 0301 	orr.w	r3, r3, #1
 8002474:	6713      	str	r3, [r2, #112]	; 0x70
 8002476:	e01c      	b.n	80024b2 <HAL_RCC_OscConfig+0x32a>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	2b05      	cmp	r3, #5
 800247e:	d10c      	bne.n	800249a <HAL_RCC_OscConfig+0x312>
 8002480:	4b60      	ldr	r3, [pc, #384]	; (8002604 <HAL_RCC_OscConfig+0x47c>)
 8002482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002484:	4a5f      	ldr	r2, [pc, #380]	; (8002604 <HAL_RCC_OscConfig+0x47c>)
 8002486:	f043 0304 	orr.w	r3, r3, #4
 800248a:	6713      	str	r3, [r2, #112]	; 0x70
 800248c:	4b5d      	ldr	r3, [pc, #372]	; (8002604 <HAL_RCC_OscConfig+0x47c>)
 800248e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002490:	4a5c      	ldr	r2, [pc, #368]	; (8002604 <HAL_RCC_OscConfig+0x47c>)
 8002492:	f043 0301 	orr.w	r3, r3, #1
 8002496:	6713      	str	r3, [r2, #112]	; 0x70
 8002498:	e00b      	b.n	80024b2 <HAL_RCC_OscConfig+0x32a>
 800249a:	4b5a      	ldr	r3, [pc, #360]	; (8002604 <HAL_RCC_OscConfig+0x47c>)
 800249c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800249e:	4a59      	ldr	r2, [pc, #356]	; (8002604 <HAL_RCC_OscConfig+0x47c>)
 80024a0:	f023 0301 	bic.w	r3, r3, #1
 80024a4:	6713      	str	r3, [r2, #112]	; 0x70
 80024a6:	4b57      	ldr	r3, [pc, #348]	; (8002604 <HAL_RCC_OscConfig+0x47c>)
 80024a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024aa:	4a56      	ldr	r2, [pc, #344]	; (8002604 <HAL_RCC_OscConfig+0x47c>)
 80024ac:	f023 0304 	bic.w	r3, r3, #4
 80024b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d015      	beq.n	80024e6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ba:	f7fe f8bf 	bl	800063c <HAL_GetTick>
 80024be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c0:	e00a      	b.n	80024d8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024c2:	f7fe f8bb 	bl	800063c <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e08e      	b.n	80025f6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024d8:	4b4a      	ldr	r3, [pc, #296]	; (8002604 <HAL_RCC_OscConfig+0x47c>)
 80024da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d0ee      	beq.n	80024c2 <HAL_RCC_OscConfig+0x33a>
 80024e4:	e014      	b.n	8002510 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024e6:	f7fe f8a9 	bl	800063c <HAL_GetTick>
 80024ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ec:	e00a      	b.n	8002504 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024ee:	f7fe f8a5 	bl	800063c <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e078      	b.n	80025f6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002504:	4b3f      	ldr	r3, [pc, #252]	; (8002604 <HAL_RCC_OscConfig+0x47c>)
 8002506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1ee      	bne.n	80024ee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002510:	7dfb      	ldrb	r3, [r7, #23]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d105      	bne.n	8002522 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002516:	4b3b      	ldr	r3, [pc, #236]	; (8002604 <HAL_RCC_OscConfig+0x47c>)
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	4a3a      	ldr	r2, [pc, #232]	; (8002604 <HAL_RCC_OscConfig+0x47c>)
 800251c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002520:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d064      	beq.n	80025f4 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800252a:	4b36      	ldr	r3, [pc, #216]	; (8002604 <HAL_RCC_OscConfig+0x47c>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 030c 	and.w	r3, r3, #12
 8002532:	2b08      	cmp	r3, #8
 8002534:	d05c      	beq.n	80025f0 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	2b02      	cmp	r3, #2
 800253c:	d141      	bne.n	80025c2 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800253e:	4b32      	ldr	r3, [pc, #200]	; (8002608 <HAL_RCC_OscConfig+0x480>)
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002544:	f7fe f87a 	bl	800063c <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800254c:	f7fe f876 	bl	800063c <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e04b      	b.n	80025f6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800255e:	4b29      	ldr	r3, [pc, #164]	; (8002604 <HAL_RCC_OscConfig+0x47c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1f0      	bne.n	800254c <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	69da      	ldr	r2, [r3, #28]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	431a      	orrs	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002578:	019b      	lsls	r3, r3, #6
 800257a:	431a      	orrs	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002580:	085b      	lsrs	r3, r3, #1
 8002582:	3b01      	subs	r3, #1
 8002584:	041b      	lsls	r3, r3, #16
 8002586:	431a      	orrs	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258c:	061b      	lsls	r3, r3, #24
 800258e:	491d      	ldr	r1, [pc, #116]	; (8002604 <HAL_RCC_OscConfig+0x47c>)
 8002590:	4313      	orrs	r3, r2
 8002592:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002594:	4b1c      	ldr	r3, [pc, #112]	; (8002608 <HAL_RCC_OscConfig+0x480>)
 8002596:	2201      	movs	r2, #1
 8002598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259a:	f7fe f84f 	bl	800063c <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025a0:	e008      	b.n	80025b4 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025a2:	f7fe f84b 	bl	800063c <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e020      	b.n	80025f6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025b4:	4b13      	ldr	r3, [pc, #76]	; (8002604 <HAL_RCC_OscConfig+0x47c>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d0f0      	beq.n	80025a2 <HAL_RCC_OscConfig+0x41a>
 80025c0:	e018      	b.n	80025f4 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025c2:	4b11      	ldr	r3, [pc, #68]	; (8002608 <HAL_RCC_OscConfig+0x480>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c8:	f7fe f838 	bl	800063c <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025d0:	f7fe f834 	bl	800063c <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e009      	b.n	80025f6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025e2:	4b08      	ldr	r3, [pc, #32]	; (8002604 <HAL_RCC_OscConfig+0x47c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1f0      	bne.n	80025d0 <HAL_RCC_OscConfig+0x448>
 80025ee:	e001      	b.n	80025f4 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e000      	b.n	80025f6 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40007000 	.word	0x40007000
 8002604:	40023800 	.word	0x40023800
 8002608:	42470060 	.word	0x42470060

0800260c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d101      	bne.n	8002620 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e0ca      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002620:	4b67      	ldr	r3, [pc, #412]	; (80027c0 <HAL_RCC_ClockConfig+0x1b4>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 030f 	and.w	r3, r3, #15
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	429a      	cmp	r2, r3
 800262c:	d90c      	bls.n	8002648 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800262e:	4b64      	ldr	r3, [pc, #400]	; (80027c0 <HAL_RCC_ClockConfig+0x1b4>)
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	b2d2      	uxtb	r2, r2
 8002634:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002636:	4b62      	ldr	r3, [pc, #392]	; (80027c0 <HAL_RCC_ClockConfig+0x1b4>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 030f 	and.w	r3, r3, #15
 800263e:	683a      	ldr	r2, [r7, #0]
 8002640:	429a      	cmp	r2, r3
 8002642:	d001      	beq.n	8002648 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e0b6      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d020      	beq.n	8002696 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0304 	and.w	r3, r3, #4
 800265c:	2b00      	cmp	r3, #0
 800265e:	d005      	beq.n	800266c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002660:	4b58      	ldr	r3, [pc, #352]	; (80027c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	4a57      	ldr	r2, [pc, #348]	; (80027c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002666:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800266a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0308 	and.w	r3, r3, #8
 8002674:	2b00      	cmp	r3, #0
 8002676:	d005      	beq.n	8002684 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002678:	4b52      	ldr	r3, [pc, #328]	; (80027c4 <HAL_RCC_ClockConfig+0x1b8>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	4a51      	ldr	r2, [pc, #324]	; (80027c4 <HAL_RCC_ClockConfig+0x1b8>)
 800267e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002682:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002684:	4b4f      	ldr	r3, [pc, #316]	; (80027c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	494c      	ldr	r1, [pc, #304]	; (80027c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002692:	4313      	orrs	r3, r2
 8002694:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d044      	beq.n	800272c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d107      	bne.n	80026ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026aa:	4b46      	ldr	r3, [pc, #280]	; (80027c4 <HAL_RCC_ClockConfig+0x1b8>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d119      	bne.n	80026ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e07d      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d003      	beq.n	80026ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026c6:	2b03      	cmp	r3, #3
 80026c8:	d107      	bne.n	80026da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ca:	4b3e      	ldr	r3, [pc, #248]	; (80027c4 <HAL_RCC_ClockConfig+0x1b8>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d109      	bne.n	80026ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e06d      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026da:	4b3a      	ldr	r3, [pc, #232]	; (80027c4 <HAL_RCC_ClockConfig+0x1b8>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e065      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026ea:	4b36      	ldr	r3, [pc, #216]	; (80027c4 <HAL_RCC_ClockConfig+0x1b8>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f023 0203 	bic.w	r2, r3, #3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	4933      	ldr	r1, [pc, #204]	; (80027c4 <HAL_RCC_ClockConfig+0x1b8>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026fc:	f7fd ff9e 	bl	800063c <HAL_GetTick>
 8002700:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002702:	e00a      	b.n	800271a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002704:	f7fd ff9a 	bl	800063c <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002712:	4293      	cmp	r3, r2
 8002714:	d901      	bls.n	800271a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e04d      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800271a:	4b2a      	ldr	r3, [pc, #168]	; (80027c4 <HAL_RCC_ClockConfig+0x1b8>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f003 020c 	and.w	r2, r3, #12
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	429a      	cmp	r2, r3
 800272a:	d1eb      	bne.n	8002704 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800272c:	4b24      	ldr	r3, [pc, #144]	; (80027c0 <HAL_RCC_ClockConfig+0x1b4>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 030f 	and.w	r3, r3, #15
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	429a      	cmp	r2, r3
 8002738:	d20c      	bcs.n	8002754 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800273a:	4b21      	ldr	r3, [pc, #132]	; (80027c0 <HAL_RCC_ClockConfig+0x1b4>)
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002742:	4b1f      	ldr	r3, [pc, #124]	; (80027c0 <HAL_RCC_ClockConfig+0x1b4>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 030f 	and.w	r3, r3, #15
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	429a      	cmp	r2, r3
 800274e:	d001      	beq.n	8002754 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e030      	b.n	80027b6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	2b00      	cmp	r3, #0
 800275e:	d008      	beq.n	8002772 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002760:	4b18      	ldr	r3, [pc, #96]	; (80027c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	4915      	ldr	r1, [pc, #84]	; (80027c4 <HAL_RCC_ClockConfig+0x1b8>)
 800276e:	4313      	orrs	r3, r2
 8002770:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0308 	and.w	r3, r3, #8
 800277a:	2b00      	cmp	r3, #0
 800277c:	d009      	beq.n	8002792 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800277e:	4b11      	ldr	r3, [pc, #68]	; (80027c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	490d      	ldr	r1, [pc, #52]	; (80027c4 <HAL_RCC_ClockConfig+0x1b8>)
 800278e:	4313      	orrs	r3, r2
 8002790:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002792:	f000 f81d 	bl	80027d0 <HAL_RCC_GetSysClockFreq>
 8002796:	4601      	mov	r1, r0
 8002798:	4b0a      	ldr	r3, [pc, #40]	; (80027c4 <HAL_RCC_ClockConfig+0x1b8>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	091b      	lsrs	r3, r3, #4
 800279e:	f003 030f 	and.w	r3, r3, #15
 80027a2:	4a09      	ldr	r2, [pc, #36]	; (80027c8 <HAL_RCC_ClockConfig+0x1bc>)
 80027a4:	5cd3      	ldrb	r3, [r2, r3]
 80027a6:	fa21 f303 	lsr.w	r3, r1, r3
 80027aa:	4a08      	ldr	r2, [pc, #32]	; (80027cc <HAL_RCC_ClockConfig+0x1c0>)
 80027ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80027ae:	200f      	movs	r0, #15
 80027b0:	f7fd ff00 	bl	80005b4 <HAL_InitTick>

  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	40023c00 	.word	0x40023c00
 80027c4:	40023800 	.word	0x40023800
 80027c8:	0806dfd0 	.word	0x0806dfd0
 80027cc:	20000638 	.word	0x20000638

080027d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027d6:	2300      	movs	r3, #0
 80027d8:	607b      	str	r3, [r7, #4]
 80027da:	2300      	movs	r3, #0
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	2300      	movs	r3, #0
 80027e0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80027e2:	2300      	movs	r3, #0
 80027e4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027e6:	4b63      	ldr	r3, [pc, #396]	; (8002974 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 030c 	and.w	r3, r3, #12
 80027ee:	2b04      	cmp	r3, #4
 80027f0:	d007      	beq.n	8002802 <HAL_RCC_GetSysClockFreq+0x32>
 80027f2:	2b08      	cmp	r3, #8
 80027f4:	d008      	beq.n	8002808 <HAL_RCC_GetSysClockFreq+0x38>
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f040 80b4 	bne.w	8002964 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027fc:	4b5e      	ldr	r3, [pc, #376]	; (8002978 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80027fe:	60bb      	str	r3, [r7, #8]
       break;
 8002800:	e0b3      	b.n	800296a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002802:	4b5e      	ldr	r3, [pc, #376]	; (800297c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002804:	60bb      	str	r3, [r7, #8]
      break;
 8002806:	e0b0      	b.n	800296a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002808:	4b5a      	ldr	r3, [pc, #360]	; (8002974 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002810:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002812:	4b58      	ldr	r3, [pc, #352]	; (8002974 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d04a      	beq.n	80028b4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800281e:	4b55      	ldr	r3, [pc, #340]	; (8002974 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	099b      	lsrs	r3, r3, #6
 8002824:	f04f 0400 	mov.w	r4, #0
 8002828:	f240 11ff 	movw	r1, #511	; 0x1ff
 800282c:	f04f 0200 	mov.w	r2, #0
 8002830:	ea03 0501 	and.w	r5, r3, r1
 8002834:	ea04 0602 	and.w	r6, r4, r2
 8002838:	4629      	mov	r1, r5
 800283a:	4632      	mov	r2, r6
 800283c:	f04f 0300 	mov.w	r3, #0
 8002840:	f04f 0400 	mov.w	r4, #0
 8002844:	0154      	lsls	r4, r2, #5
 8002846:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800284a:	014b      	lsls	r3, r1, #5
 800284c:	4619      	mov	r1, r3
 800284e:	4622      	mov	r2, r4
 8002850:	1b49      	subs	r1, r1, r5
 8002852:	eb62 0206 	sbc.w	r2, r2, r6
 8002856:	f04f 0300 	mov.w	r3, #0
 800285a:	f04f 0400 	mov.w	r4, #0
 800285e:	0194      	lsls	r4, r2, #6
 8002860:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002864:	018b      	lsls	r3, r1, #6
 8002866:	1a5b      	subs	r3, r3, r1
 8002868:	eb64 0402 	sbc.w	r4, r4, r2
 800286c:	f04f 0100 	mov.w	r1, #0
 8002870:	f04f 0200 	mov.w	r2, #0
 8002874:	00e2      	lsls	r2, r4, #3
 8002876:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800287a:	00d9      	lsls	r1, r3, #3
 800287c:	460b      	mov	r3, r1
 800287e:	4614      	mov	r4, r2
 8002880:	195b      	adds	r3, r3, r5
 8002882:	eb44 0406 	adc.w	r4, r4, r6
 8002886:	f04f 0100 	mov.w	r1, #0
 800288a:	f04f 0200 	mov.w	r2, #0
 800288e:	0262      	lsls	r2, r4, #9
 8002890:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002894:	0259      	lsls	r1, r3, #9
 8002896:	460b      	mov	r3, r1
 8002898:	4614      	mov	r4, r2
 800289a:	4618      	mov	r0, r3
 800289c:	4621      	mov	r1, r4
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f04f 0400 	mov.w	r4, #0
 80028a4:	461a      	mov	r2, r3
 80028a6:	4623      	mov	r3, r4
 80028a8:	f7fd fce2 	bl	8000270 <__aeabi_uldivmod>
 80028ac:	4603      	mov	r3, r0
 80028ae:	460c      	mov	r4, r1
 80028b0:	60fb      	str	r3, [r7, #12]
 80028b2:	e049      	b.n	8002948 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028b4:	4b2f      	ldr	r3, [pc, #188]	; (8002974 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	099b      	lsrs	r3, r3, #6
 80028ba:	f04f 0400 	mov.w	r4, #0
 80028be:	f240 11ff 	movw	r1, #511	; 0x1ff
 80028c2:	f04f 0200 	mov.w	r2, #0
 80028c6:	ea03 0501 	and.w	r5, r3, r1
 80028ca:	ea04 0602 	and.w	r6, r4, r2
 80028ce:	4629      	mov	r1, r5
 80028d0:	4632      	mov	r2, r6
 80028d2:	f04f 0300 	mov.w	r3, #0
 80028d6:	f04f 0400 	mov.w	r4, #0
 80028da:	0154      	lsls	r4, r2, #5
 80028dc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80028e0:	014b      	lsls	r3, r1, #5
 80028e2:	4619      	mov	r1, r3
 80028e4:	4622      	mov	r2, r4
 80028e6:	1b49      	subs	r1, r1, r5
 80028e8:	eb62 0206 	sbc.w	r2, r2, r6
 80028ec:	f04f 0300 	mov.w	r3, #0
 80028f0:	f04f 0400 	mov.w	r4, #0
 80028f4:	0194      	lsls	r4, r2, #6
 80028f6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80028fa:	018b      	lsls	r3, r1, #6
 80028fc:	1a5b      	subs	r3, r3, r1
 80028fe:	eb64 0402 	sbc.w	r4, r4, r2
 8002902:	f04f 0100 	mov.w	r1, #0
 8002906:	f04f 0200 	mov.w	r2, #0
 800290a:	00e2      	lsls	r2, r4, #3
 800290c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002910:	00d9      	lsls	r1, r3, #3
 8002912:	460b      	mov	r3, r1
 8002914:	4614      	mov	r4, r2
 8002916:	195b      	adds	r3, r3, r5
 8002918:	eb44 0406 	adc.w	r4, r4, r6
 800291c:	f04f 0100 	mov.w	r1, #0
 8002920:	f04f 0200 	mov.w	r2, #0
 8002924:	02a2      	lsls	r2, r4, #10
 8002926:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800292a:	0299      	lsls	r1, r3, #10
 800292c:	460b      	mov	r3, r1
 800292e:	4614      	mov	r4, r2
 8002930:	4618      	mov	r0, r3
 8002932:	4621      	mov	r1, r4
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f04f 0400 	mov.w	r4, #0
 800293a:	461a      	mov	r2, r3
 800293c:	4623      	mov	r3, r4
 800293e:	f7fd fc97 	bl	8000270 <__aeabi_uldivmod>
 8002942:	4603      	mov	r3, r0
 8002944:	460c      	mov	r4, r1
 8002946:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002948:	4b0a      	ldr	r3, [pc, #40]	; (8002974 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	0c1b      	lsrs	r3, r3, #16
 800294e:	f003 0303 	and.w	r3, r3, #3
 8002952:	3301      	adds	r3, #1
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002960:	60bb      	str	r3, [r7, #8]
      break;
 8002962:	e002      	b.n	800296a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002964:	4b04      	ldr	r3, [pc, #16]	; (8002978 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002966:	60bb      	str	r3, [r7, #8]
      break;
 8002968:	bf00      	nop
    }
  }
  return sysclockfreq;
 800296a:	68bb      	ldr	r3, [r7, #8]
}
 800296c:	4618      	mov	r0, r3
 800296e:	3714      	adds	r7, #20
 8002970:	46bd      	mov	sp, r7
 8002972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002974:	40023800 	.word	0x40023800
 8002978:	00f42400 	.word	0x00f42400
 800297c:	007a1200 	.word	0x007a1200

08002980 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002984:	4b03      	ldr	r3, [pc, #12]	; (8002994 <HAL_RCC_GetHCLKFreq+0x14>)
 8002986:	681b      	ldr	r3, [r3, #0]
}
 8002988:	4618      	mov	r0, r3
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	20000638 	.word	0x20000638

08002998 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800299c:	f7ff fff0 	bl	8002980 <HAL_RCC_GetHCLKFreq>
 80029a0:	4601      	mov	r1, r0
 80029a2:	4b05      	ldr	r3, [pc, #20]	; (80029b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	0a9b      	lsrs	r3, r3, #10
 80029a8:	f003 0307 	and.w	r3, r3, #7
 80029ac:	4a03      	ldr	r2, [pc, #12]	; (80029bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80029ae:	5cd3      	ldrb	r3, [r2, r3]
 80029b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40023800 	.word	0x40023800
 80029bc:	0806dfe0 	.word	0x0806dfe0

080029c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80029c4:	f7ff ffdc 	bl	8002980 <HAL_RCC_GetHCLKFreq>
 80029c8:	4601      	mov	r1, r0
 80029ca:	4b05      	ldr	r3, [pc, #20]	; (80029e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	0b5b      	lsrs	r3, r3, #13
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	4a03      	ldr	r2, [pc, #12]	; (80029e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029d6:	5cd3      	ldrb	r3, [r2, r3]
 80029d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80029dc:	4618      	mov	r0, r3
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40023800 	.word	0x40023800
 80029e4:	0806dfe0 	.word	0x0806dfe0

080029e8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e01d      	b.n	8002a36 <HAL_SD_Init+0x4e>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d105      	bne.n	8002a12 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f00f f887 	bl	8011b20 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2203      	movs	r2, #3
 8002a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 f810 	bl	8002a40 <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
	...

08002a40 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002a40:	b5b0      	push	{r4, r5, r7, lr}
 8002a42:	b08e      	sub	sp, #56	; 0x38
 8002a44:	af04      	add	r7, sp, #16
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002a50:	2300      	movs	r3, #0
 8002a52:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002a54:	2300      	movs	r3, #0
 8002a56:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002a60:	2376      	movs	r3, #118	; 0x76
 8002a62:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681d      	ldr	r5, [r3, #0]
 8002a68:	466c      	mov	r4, sp
 8002a6a:	f107 0318 	add.w	r3, r7, #24
 8002a6e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002a72:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002a76:	f107 030c 	add.w	r3, r7, #12
 8002a7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a7c:	4628      	mov	r0, r5
 8002a7e:	f002 f971 	bl	8004d64 <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd); 
 8002a82:	4b1c      	ldr	r3, [pc, #112]	; (8002af4 <HAL_SD_InitCard+0xb4>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]
  
  /* Set Power State to ON */
  SDIO_PowerState_ON(hsd->Instance);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f002 f9b2 	bl	8004df6 <SDIO_PowerState_ON>
  
  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002a92:	4b18      	ldr	r3, [pc, #96]	; (8002af4 <HAL_SD_InitCard+0xb4>)
 8002a94:	2201      	movs	r2, #1
 8002a96:	601a      	str	r2, [r3, #0]
  
  /* Required power up waiting time before starting the SD initialization 
  sequence */
  HAL_Delay(2U);
 8002a98:	2002      	movs	r0, #2
 8002a9a:	f7fd fddb 	bl	8000654 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 fffe 	bl	8003aa0 <SD_PowerON>
 8002aa4:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d00b      	beq.n	8002ac4 <HAL_SD_InitCard+0x84>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aba:	431a      	orrs	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e013      	b.n	8002aec <HAL_SD_InitCard+0xac>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 ff22 	bl	800390e <SD_InitCard>
 8002aca:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8002acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00b      	beq.n	8002aea <HAL_SD_InitCard+0xaa>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e000      	b.n	8002aec <HAL_SD_InitCard+0xac>
  }

  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3728      	adds	r7, #40	; 0x28
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bdb0      	pop	{r4, r5, r7, pc}
 8002af4:	422580a0 	.word	0x422580a0

08002af8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read  
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b08c      	sub	sp, #48	; 0x30
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
 8002b04:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002b06:	2300      	movs	r3, #0
 8002b08:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d107      	bne.n	8002b20 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b14:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e0ad      	b.n	8002c7c <HAL_SD_ReadBlocks_DMA+0x184>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	f040 80a6 	bne.w	8002c7a <HAL_SD_ReadBlocks_DMA+0x182>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	441a      	add	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d907      	bls.n	8002b52 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b46:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e094      	b.n	8002c7c <HAL_SD_ReadBlocks_DMA+0x184>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2203      	movs	r2, #3
 8002b56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	62da      	str	r2, [r3, #44]	; 0x2c
    
#ifdef SDIO_STA_STBITERR
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	6812      	ldr	r2, [r2, #0]
 8002b6c:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8002b70:	f043 0302 	orr.w	r3, r3, #2
 8002b74:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */
    
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b7a:	4a42      	ldr	r2, [pc, #264]	; (8002c84 <HAL_SD_ReadBlocks_DMA+0x18c>)
 8002b7c:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b82:	4a41      	ldr	r2, [pc, #260]	; (8002c88 <HAL_SD_ReadBlocks_DMA+0x190>)
 8002b84:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	3380      	adds	r3, #128	; 0x80
 8002b98:	4619      	mov	r1, r3
 8002b9a:	68ba      	ldr	r2, [r7, #8]
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	025b      	lsls	r3, r3, #9
 8002ba0:	089b      	lsrs	r3, r3, #2
 8002ba2:	f7fe fe23 	bl	80017ec <HAL_DMA_Start_IT>
    
    /* Enable SD DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8002ba6:	4b39      	ldr	r3, [pc, #228]	; (8002c8c <HAL_SD_ReadBlocks_DMA+0x194>)
 8002ba8:	2201      	movs	r2, #1
 8002baa:	601a      	str	r2, [r3, #0]
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d002      	beq.n	8002bba <HAL_SD_ReadBlocks_DMA+0xc2>
    {
      BlockAdd *= 512U;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	025b      	lsls	r3, r3, #9
 8002bb8:	607b      	str	r3, [r7, #4]
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002bba:	f04f 33ff 	mov.w	r3, #4294967295
 8002bbe:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	025b      	lsls	r3, r3, #9
 8002bc4:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002bc6:	2390      	movs	r3, #144	; 0x90
 8002bc8:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002bca:	2302      	movs	r3, #2
 8002bcc:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	62bb      	str	r3, [r7, #40]	; 0x28
    SDIO_ConfigData(hsd->Instance, &config);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f107 0214 	add.w	r2, r7, #20
 8002bde:	4611      	mov	r1, r2
 8002be0:	4618      	mov	r0, r3
 8002be2:	f002 f970 	bl	8004ec6 <SDIO_ConfigData>

    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f002 f995 	bl	8004f1e <SDMMC_CmdBlockLength>
 8002bf4:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d010      	beq.n	8002c1e <HAL_SD_ReadBlocks_DMA+0x126>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002c04:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c0c:	431a      	orrs	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e02e      	b.n	8002c7c <HAL_SD_ReadBlocks_DMA+0x184>
    }
        
    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d90a      	bls.n	8002c3a <HAL_SD_ReadBlocks_DMA+0x142>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2282      	movs	r2, #130	; 0x82
 8002c28:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	6879      	ldr	r1, [r7, #4]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f002 f9bc 	bl	8004fae <SDMMC_CmdReadMultiBlock>
 8002c36:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002c38:	e009      	b.n	8002c4e <HAL_SD_ReadBlocks_DMA+0x156>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2281      	movs	r2, #129	; 0x81
 8002c3e:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */ 
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f002 f98d 	bl	8004f66 <SDMMC_CmdReadSingleBlock>
 8002c4c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d010      	beq.n	8002c76 <HAL_SD_ReadBlocks_DMA+0x17e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002c5c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c64:	431a      	orrs	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e002      	b.n	8002c7c <HAL_SD_ReadBlocks_DMA+0x184>
    }

    return HAL_OK;
 8002c76:	2300      	movs	r3, #0
 8002c78:	e000      	b.n	8002c7c <HAL_SD_ReadBlocks_DMA+0x184>
  }
  else
  {
    return HAL_BUSY;
 8002c7a:	2302      	movs	r3, #2
  }
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3730      	adds	r7, #48	; 0x30
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	0800371f 	.word	0x0800371f
 8002c88:	0800378d 	.word	0x0800378d
 8002c8c:	4225858c 	.word	0x4225858c

08002c90 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written  
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b08c      	sub	sp, #48	; 0x30
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
 8002c9c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d107      	bne.n	8002cb8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cac:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e0ad      	b.n	8002e14 <HAL_SD_WriteBlocks_DMA+0x184>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	f040 80a6 	bne.w	8002e12 <HAL_SD_WriteBlocks_DMA+0x182>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	441a      	add	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d907      	bls.n	8002cea <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cde:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e094      	b.n	8002e14 <HAL_SD_WriteBlocks_DMA+0x184>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2203      	movs	r2, #3
 8002cee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Enable SD Error interrupts */  
#ifdef SDIO_STA_STBITERR
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));    
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	6812      	ldr	r2, [r2, #0]
 8002d04:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8002d08:	f043 0302 	orr.w	r3, r3, #2
 8002d0c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));    
#endif /* SDIO_STA_STBITERR */
    
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	4a42      	ldr	r2, [pc, #264]	; (8002e1c <HAL_SD_WriteBlocks_DMA+0x18c>)
 8002d14:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	4a41      	ldr	r2, [pc, #260]	; (8002e20 <HAL_SD_WriteBlocks_DMA+0x190>)
 8002d1c:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	2200      	movs	r2, #0
 8002d24:	651a      	str	r2, [r3, #80]	; 0x50
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d002      	beq.n	8002d34 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      BlockAdd *= 512U;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	025b      	lsls	r3, r3, #9
 8002d32:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f002 f8ee 	bl	8004f1e <SDMMC_CmdBlockLength>
 8002d42:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d010      	beq.n	8002d6c <HAL_SD_WriteBlocks_DMA+0xdc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002d52:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e053      	b.n	8002e14 <HAL_SD_WriteBlocks_DMA+0x184>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d90a      	bls.n	8002d88 <HAL_SD_WriteBlocks_DMA+0xf8>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	22a0      	movs	r2, #160	; 0xa0
 8002d76:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6879      	ldr	r1, [r7, #4]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f002 f95d 	bl	800503e <SDMMC_CmdWriteMultiBlock>
 8002d84:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002d86:	e009      	b.n	8002d9c <HAL_SD_WriteBlocks_DMA+0x10c>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2290      	movs	r2, #144	; 0x90
 8002d8c:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	6879      	ldr	r1, [r7, #4]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f002 f92e 	bl	8004ff6 <SDMMC_CmdWriteSingleBlock>
 8002d9a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d010      	beq.n	8002dc4 <HAL_SD_WriteBlocks_DMA+0x134>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002daa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db2:	431a      	orrs	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e027      	b.n	8002e14 <HAL_SD_WriteBlocks_DMA+0x184>
    }
    
    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8002dc4:	4b17      	ldr	r3, [pc, #92]	; (8002e24 <HAL_SD_WriteBlocks_DMA+0x194>)
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8002dce:	68b9      	ldr	r1, [r7, #8]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	3380      	adds	r3, #128	; 0x80
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	025b      	lsls	r3, r3, #9
 8002ddc:	089b      	lsrs	r3, r3, #2
 8002dde:	f7fe fd05 	bl	80017ec <HAL_DMA_Start_IT>
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002de2:	f04f 33ff 	mov.w	r3, #4294967295
 8002de6:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	025b      	lsls	r3, r3, #9
 8002dec:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002dee:	2390      	movs	r3, #144	; 0x90
 8002df0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002df2:	2300      	movs	r3, #0
 8002df4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002df6:	2300      	movs	r3, #0
 8002df8:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	62bb      	str	r3, [r7, #40]	; 0x28
    SDIO_ConfigData(hsd->Instance, &config);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f107 0214 	add.w	r2, r7, #20
 8002e06:	4611      	mov	r1, r2
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f002 f85c 	bl	8004ec6 <SDIO_ConfigData>
    
    return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	e000      	b.n	8002e14 <HAL_SD_WriteBlocks_DMA+0x184>
  }
  else
  {
    return HAL_BUSY;
 8002e12:	2302      	movs	r3, #2
  }
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3730      	adds	r7, #48	; 0x30
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	080036f5 	.word	0x080036f5
 8002e20:	0800378d 	.word	0x0800378d
 8002e24:	4225858c 	.word	0x4225858c

08002e28 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002e30:	2300      	movs	r3, #0
 8002e32:	60fb      	str	r3, [r7, #12]
  
  /* Check for SDIO interrupt flags */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DATAEND) != RESET)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f000 808d 	beq.w	8002f5e <HAL_SD_IRQHandler+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND); 
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e4c:	639a      	str	r2, [r3, #56]	; 0x38
    
#ifdef SDIO_STA_STBITERR
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	6812      	ldr	r2, [r2, #0]
 8002e58:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8002e5c:	f023 0302 	bic.w	r3, r3, #2
 8002e60:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);
#endif
    
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	f003 0308 	and.w	r3, r3, #8
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d03a      	beq.n	8002ee4 <HAL_SD_IRQHandler+0xbc>
    {
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d105      	bne.n	8002e86 <HAL_SD_IRQHandler+0x5e>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7e:	f003 0320 	and.w	r3, r3, #32
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d011      	beq.n	8002eaa <HAL_SD_IRQHandler+0x82>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f002 f8fc 	bl	8005088 <SDMMC_CmdStopTransfer>
 8002e90:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d008      	beq.n	8002eaa <HAL_SD_IRQHandler+0x82>
        {
          hsd->ErrorCode |= errorstate;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 f925 	bl	80030f4 <HAL_SD_ErrorCallback>
#endif
        }
      }
      
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002eb2:	639a      	str	r2, [r3, #56]	; 0x38
      
      hsd->State = HAL_SD_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d105      	bne.n	8002ed4 <HAL_SD_IRQHandler+0xac>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d003      	beq.n	8002edc <HAL_SD_IRQHandler+0xb4>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f009 fbb3 	bl	800c640 <HAL_SD_RxCpltCallback>
      hsd->State = HAL_SD_STATE_READY;
      HAL_SD_ErrorCallback(hsd);
    }
  }
#endif
}
 8002eda:	e103      	b.n	80030e4 <HAL_SD_IRQHandler+0x2bc>
        HAL_SD_TxCpltCallback(hsd);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f009 fba5 	bl	800c62c <HAL_SD_TxCpltCallback>
}
 8002ee2:	e0ff      	b.n	80030e4 <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f000 80f9 	beq.w	80030e4 <HAL_SD_IRQHandler+0x2bc>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef6:	f003 0320 	and.w	r3, r3, #32
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d011      	beq.n	8002f22 <HAL_SD_IRQHandler+0xfa>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f002 f8c0 	bl	8005088 <SDMMC_CmdStopTransfer>
 8002f08:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d008      	beq.n	8002f22 <HAL_SD_IRQHandler+0xfa>
          hsd->ErrorCode |= errorstate;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	431a      	orrs	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 f8e9 	bl	80030f4 <HAL_SD_ErrorCallback>
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET) && ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == RESET))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f040 80da 	bne.w	80030e4 <HAL_SD_IRQHandler+0x2bc>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f040 80d3 	bne.w	80030e4 <HAL_SD_IRQHandler+0x2bc>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 0208 	bic.w	r2, r2, #8
 8002f4c:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f009 fb68 	bl	800c62c <HAL_SD_TxCpltCallback>
}
 8002f5c:	e0c2      	b.n	80030e4 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXFIFOHE) != RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d008      	beq.n	8002f7e <HAL_SD_IRQHandler+0x156>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_TXFIFOHE);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f74:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Write_IT(hsd);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 ffef 	bl	8003f5a <SD_Write_IT>
}
 8002f7c:	e0b2      	b.n	80030e4 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXFIFOHF) != RESET)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d008      	beq.n	8002f9e <HAL_SD_IRQHandler+0x176>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXFIFOHF);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002f94:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Read_IT(hsd);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 ffb7 	bl	8003f0a <SD_Read_IT>
}
 8002f9c:	e0a2      	b.n	80030e4 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR) != RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fa4:	f240 233a 	movw	r3, #570	; 0x23a
 8002fa8:	4013      	ands	r3, r2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f000 809a 	beq.w	80030e4 <HAL_SD_IRQHandler+0x2bc>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL) != RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d005      	beq.n	8002fca <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc2:	f043 0202 	orr.w	r2, r3, #2
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DTIMEOUT) != RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fd0:	f003 0308 	and.w	r3, r3, #8
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d005      	beq.n	8002fe4 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT; 
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fdc:	f043 0208 	orr.w	r2, r3, #8
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXOVERR) != RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fea:	f003 0320 	and.w	r3, r3, #32
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d005      	beq.n	8002ffe <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN; 
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff6:	f043 0220 	orr.w	r2, r3, #32
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXUNDERR) != RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003004:	f003 0310 	and.w	r3, r3, #16
 8003008:	2b00      	cmp	r3, #0
 800300a:	d005      	beq.n	8003018 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003010:	f043 0210 	orr.w	r2, r3, #16
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_STBITERR) != RESET)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800301e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003022:	2b00      	cmp	r3, #0
 8003024:	d005      	beq.n	8003032 <HAL_SD_IRQHandler+0x20a>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302a:	f043 0208 	orr.w	r2, r3, #8
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS | SDIO_FLAG_STBITERR);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800303a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	6812      	ldr	r2, [r2, #0]
 8003046:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800304a:	f023 0302 	bic.w	r3, r3, #2
 800304e:	63d3      	str	r3, [r2, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003058:	2b00      	cmp	r3, #0
 800305a:	d036      	beq.n	80030ca <HAL_SD_IRQHandler+0x2a2>
      if(hsd->hdmatx != NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003060:	2b00      	cmp	r3, #0
 8003062:	d011      	beq.n	8003088 <HAL_SD_IRQHandler+0x260>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003068:	4a20      	ldr	r2, [pc, #128]	; (80030ec <HAL_SD_IRQHandler+0x2c4>)
 800306a:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003070:	4618      	mov	r0, r3
 8003072:	f7fe fc1b 	bl	80018ac <HAL_DMA_Abort_IT>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d033      	beq.n	80030e4 <HAL_SD_IRQHandler+0x2bc>
          SD_DMATxAbort(hsd->hdmatx);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003080:	4618      	mov	r0, r3
 8003082:	f000 fbc8 	bl	8003816 <SD_DMATxAbort>
}
 8003086:	e02d      	b.n	80030e4 <HAL_SD_IRQHandler+0x2bc>
      else if(hsd->hdmarx != NULL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800308c:	2b00      	cmp	r3, #0
 800308e:	d011      	beq.n	80030b4 <HAL_SD_IRQHandler+0x28c>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003094:	4a16      	ldr	r2, [pc, #88]	; (80030f0 <HAL_SD_IRQHandler+0x2c8>)
 8003096:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800309c:	4618      	mov	r0, r3
 800309e:	f7fe fc05 	bl	80018ac <HAL_DMA_Abort_IT>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d01d      	beq.n	80030e4 <HAL_SD_IRQHandler+0x2bc>
          SD_DMARxAbort(hsd->hdmarx);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ac:	4618      	mov	r0, r3
 80030ae:	f000 fbf0 	bl	8003892 <SD_DMARxAbort>
}
 80030b2:	e017      	b.n	80030e4 <HAL_SD_IRQHandler+0x2bc>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_AbortCallback(hsd);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f009 faa8 	bl	800c618 <HAL_SD_AbortCallback>
}
 80030c8:	e00c      	b.n	80030e4 <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_IT) != RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ce:	f003 0308 	and.w	r3, r3, #8
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d006      	beq.n	80030e4 <HAL_SD_IRQHandler+0x2bc>
      hsd->State = HAL_SD_STATE_READY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      HAL_SD_ErrorCallback(hsd);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 f808 	bl	80030f4 <HAL_SD_ErrorCallback>
}
 80030e4:	bf00      	nop
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	08003817 	.word	0x08003817
 80030f0:	08003893 	.word	0x08003893

080030f4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003108:	b480      	push	{r7}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8003112:	2300      	movs	r3, #0
 8003114:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800311a:	0e1b      	lsrs	r3, r3, #24
 800311c:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	099b      	lsrs	r3, r3, #6
 8003122:	b2db      	uxtb	r3, r3
 8003124:	f003 0303 	and.w	r3, r3, #3
 8003128:	b2da      	uxtb	r2, r3
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	089b      	lsrs	r3, r3, #2
 8003132:	b2db      	uxtb	r3, r3
 8003134:	f003 030f 	and.w	r3, r3, #15
 8003138:	b2da      	uxtb	r2, r3
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	b2db      	uxtb	r3, r3
 8003142:	f003 0303 	and.w	r3, r3, #3
 8003146:	b2da      	uxtb	r2, r3
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0U] & 0x00FF0000U) >> 16U;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003150:	0c1b      	lsrs	r3, r3, #16
 8003152:	b2db      	uxtb	r3, r3
 8003154:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	b2da      	uxtb	r2, r3
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0U] & 0x0000FF00U) >> 8U;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003162:	0a1b      	lsrs	r3, r3, #8
 8003164:	b2db      	uxtb	r3, r3
 8003166:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	b2da      	uxtb	r2, r3
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0U] & 0x000000FFU;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003174:	b2db      	uxtb	r3, r3
 8003176:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	b2da      	uxtb	r2, r3
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003184:	0e1b      	lsrs	r3, r3, #24
 8003186:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	b29b      	uxth	r3, r3
 800318c:	011b      	lsls	r3, r3, #4
 800318e:	b29a      	uxth	r2, r3
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1U] & 0x00FF0000U) >> 16U;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003198:	0c1b      	lsrs	r3, r3, #16
 800319a:	b2db      	uxtb	r3, r3
 800319c:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	88db      	ldrh	r3, [r3, #6]
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	091b      	lsrs	r3, r3, #4
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	f003 030f 	and.w	r3, r3, #15
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	4313      	orrs	r3, r2
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	f003 030f 	and.w	r3, r3, #15
 80031c0:	b2da      	uxtb	r2, r3
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031ca:	0a1b      	lsrs	r3, r3, #8
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	09db      	lsrs	r3, r3, #7
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	b2da      	uxtb	r2, r3
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	099b      	lsrs	r3, r3, #6
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	b2da      	uxtb	r2, r3
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	095b      	lsrs	r3, r3, #5
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	b2da      	uxtb	r2, r3
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	091b      	lsrs	r3, r3, #4
 8003204:	b2db      	uxtb	r3, r3
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	b2da      	uxtb	r2, r3
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	2200      	movs	r2, #0
 8003214:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321a:	2b00      	cmp	r3, #0
 800321c:	f040 8087 	bne.w	800332e <HAL_SD_GetCardCSD+0x226>
  {
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	029b      	lsls	r3, r3, #10
 8003224:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003230:	b2db      	uxtb	r3, r3
 8003232:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2U;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	691a      	ldr	r2, [r3, #16]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	431a      	orrs	r2, r3
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003246:	0e1b      	lsrs	r3, r3, #24
 8003248:	b2db      	uxtb	r3, r3
 800324a:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	691a      	ldr	r2, [r3, #16]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	099b      	lsrs	r3, r3, #6
 8003254:	f003 0303 	and.w	r3, r3, #3
 8003258:	431a      	orrs	r2, r3
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	08db      	lsrs	r3, r3, #3
 8003262:	b2db      	uxtb	r3, r3
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	b2da      	uxtb	r2, r3
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	b2db      	uxtb	r3, r3
 8003272:	f003 0307 	and.w	r3, r3, #7
 8003276:	b2da      	uxtb	r2, r3
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003280:	0c1b      	lsrs	r3, r3, #16
 8003282:	b2db      	uxtb	r3, r3
 8003284:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	095b      	lsrs	r3, r3, #5
 800328a:	b2db      	uxtb	r3, r3
 800328c:	f003 0307 	and.w	r3, r3, #7
 8003290:	b2da      	uxtb	r2, r3
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	089b      	lsrs	r3, r3, #2
 800329a:	b2db      	uxtb	r3, r3
 800329c:	f003 0307 	and.w	r3, r3, #7
 80032a0:	b2da      	uxtb	r2, r3
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	f003 0306 	and.w	r3, r3, #6
 80032b2:	b2da      	uxtb	r2, r3
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032bc:	0a1b      	lsrs	r3, r3, #8
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	7e1b      	ldrb	r3, [r3, #24]
 80032c6:	b2da      	uxtb	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	09db      	lsrs	r3, r3, #7
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	4313      	orrs	r3, r2
 80032d6:	b2da      	uxtb	r2, r3
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	1c5a      	adds	r2, r3, #1
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	7e1b      	ldrb	r3, [r3, #24]
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	3302      	adds	r3, #2
 80032ee:	2201      	movs	r2, #1
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80032f8:	fb02 f203 	mul.w	r2, r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	7a1b      	ldrb	r3, [r3, #8]
 8003304:	b2db      	uxtb	r3, r3
 8003306:	461a      	mov	r2, r3
 8003308:	2301      	movs	r3, #1
 800330a:	fa03 f202 	lsl.w	r2, r3, r2
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800331a:	0a52      	lsrs	r2, r2, #9
 800331c:	fb02 f203 	mul.w	r2, r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f44f 7200 	mov.w	r2, #512	; 0x200
 800332a:	661a      	str	r2, [r3, #96]	; 0x60
 800332c:	e04d      	b.n	80033ca <HAL_SD_GetCardCSD+0x2c2>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003332:	2b01      	cmp	r3, #1
 8003334:	d138      	bne.n	80033a8 <HAL_SD_GetCardCSD+0x2a0>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800333a:	b2db      	uxtb	r3, r3
 800333c:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	041b      	lsls	r3, r3, #16
 8003342:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800334e:	0e1b      	lsrs	r3, r3, #24
 8003350:	b2db      	uxtb	r3, r3
 8003352:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8U);
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	691a      	ldr	r2, [r3, #16]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	021b      	lsls	r3, r3, #8
 800335c:	431a      	orrs	r2, r3
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003366:	0c1b      	lsrs	r3, r3, #16
 8003368:	b2db      	uxtb	r3, r3
 800336a:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	691a      	ldr	r2, [r3, #16]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	431a      	orrs	r2, r3
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800337c:	0a1b      	lsrs	r3, r3, #8
 800337e:	b2db      	uxtb	r3, r3
 8003380:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	3301      	adds	r3, #1
 8003388:	029a      	lsls	r2, r3, #10
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	655a      	str	r2, [r3, #84]	; 0x54
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f44f 7200 	mov.w	r2, #512	; 0x200
 800339c:	659a      	str	r2, [r3, #88]	; 0x58
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	661a      	str	r2, [r3, #96]	; 0x60
 80033a6:	e010      	b.n	80033ca <HAL_SD_GetCardCSD+0x2c2>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80033b0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e0c1      	b.n	800354e <HAL_SD_GetCardCSD+0x446>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	099b      	lsrs	r3, r3, #6
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	f003 0301 	and.w	r3, r3, #1
 80033d4:	b2da      	uxtb	r2, r3
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80033e6:	b2da      	uxtb	r2, r3
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	7e9b      	ldrb	r3, [r3, #26]
 80033f8:	b2da      	uxtb	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	09db      	lsrs	r3, r3, #7
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	b2db      	uxtb	r3, r3
 8003406:	4313      	orrs	r3, r2
 8003408:	b2da      	uxtb	r2, r3
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	b2db      	uxtb	r3, r3
 8003412:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003416:	b2da      	uxtb	r2, r3
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003420:	0e1b      	lsrs	r3, r3, #24
 8003422:	b2db      	uxtb	r3, r3
 8003424:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	09db      	lsrs	r3, r3, #7
 800342a:	b2db      	uxtb	r3, r3
 800342c:	f003 0301 	and.w	r3, r3, #1
 8003430:	b2da      	uxtb	r2, r3
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	095b      	lsrs	r3, r3, #5
 800343a:	b2db      	uxtb	r3, r3
 800343c:	f003 0303 	and.w	r3, r3, #3
 8003440:	b2da      	uxtb	r2, r3
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	089b      	lsrs	r3, r3, #2
 800344a:	b2db      	uxtb	r3, r3
 800344c:	f003 0307 	and.w	r3, r3, #7
 8003450:	b2da      	uxtb	r2, r3
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	b2db      	uxtb	r3, r3
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	b2db      	uxtb	r3, r3
 800345e:	f003 030c 	and.w	r3, r3, #12
 8003462:	b2da      	uxtb	r2, r3
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x00FF0000U) >> 16U);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800346c:	0c1b      	lsrs	r3, r3, #16
 800346e:	b2db      	uxtb	r3, r3
 8003470:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	7fdb      	ldrb	r3, [r3, #31]
 8003476:	b2da      	uxtb	r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	099b      	lsrs	r3, r3, #6
 800347c:	b2db      	uxtb	r3, r3
 800347e:	f003 0303 	and.w	r3, r3, #3
 8003482:	b2db      	uxtb	r3, r3
 8003484:	4313      	orrs	r3, r2
 8003486:	b2da      	uxtb	r2, r3
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	095b      	lsrs	r3, r3, #5
 8003490:	b2db      	uxtb	r3, r3
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	b2da      	uxtb	r2, r3
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0U;
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	b2da      	uxtb	r2, r3
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x0000FF00U) >> 8U);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ba:	0a1b      	lsrs	r3, r3, #8
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	09db      	lsrs	r3, r3, #7
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	b2da      	uxtb	r2, r3
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	099b      	lsrs	r3, r3, #6
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	b2da      	uxtb	r2, r3
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	095b      	lsrs	r3, r3, #5
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	b2da      	uxtb	r2, r3
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	091b      	lsrs	r3, r3, #4
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	b2da      	uxtb	r2, r3
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	089b      	lsrs	r3, r3, #2
 800350c:	b2db      	uxtb	r3, r3
 800350e:	f003 0303 	and.w	r3, r3, #3
 8003512:	b2da      	uxtb	r2, r3
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	b2db      	uxtb	r3, r3
 800351e:	f003 0303 	and.w	r3, r3, #3
 8003522:	b2da      	uxtb	r2, r3
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3U] & 0x000000FFU);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352e:	b2db      	uxtb	r3, r3
 8003530:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	085b      	lsrs	r3, r3, #1
 8003536:	b2db      	uxtb	r3, r3
 8003538:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800353c:	b2da      	uxtb	r2, r3
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3714      	adds	r7, #20
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr

0800355a <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800355a:	b480      	push	{r7}
 800355c:	b083      	sub	sp, #12
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
 8003562:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr

080035b2 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80035b2:	b5b0      	push	{r4, r5, r7, lr}
 80035b4:	b08e      	sub	sp, #56	; 0x38
 80035b6:	af04      	add	r7, sp, #16
 80035b8:	6078      	str	r0, [r7, #4]
 80035ba:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80035bc:	2300      	movs	r3, #0
 80035be:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2203      	movs	r2, #3
 80035c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035cc:	2b03      	cmp	r3, #3
 80035ce:	d02e      	beq.n	800362e <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035d6:	d106      	bne.n	80035e6 <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035dc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	639a      	str	r2, [r3, #56]	; 0x38
 80035e4:	e029      	b.n	800363a <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035ec:	d10a      	bne.n	8003604 <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 fb28 	bl	8003c44 <SD_WideBus_Enable>
 80035f4:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	431a      	orrs	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	639a      	str	r2, [r3, #56]	; 0x38
 8003602:	e01a      	b.n	800363a <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10a      	bne.n	8003620 <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 fb67 	bl	8003cde <SD_WideBus_Disable>
 8003610:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003618:	431a      	orrs	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	639a      	str	r2, [r3, #56]	; 0x38
 800361e:	e00c      	b.n	800363a <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003624:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	639a      	str	r2, [r3, #56]	; 0x38
 800362c:	e005      	b.n	800363a <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003632:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00a      	beq.n	8003658 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800364a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e024      	b.n	80036a2 <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	623b      	str	r3, [r7, #32]
    SDIO_Init(hsd->Instance, Init);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681d      	ldr	r5, [r3, #0]
 800367e:	466c      	mov	r4, sp
 8003680:	f107 0318 	add.w	r3, r7, #24
 8003684:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003688:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800368c:	f107 030c 	add.w	r3, r7, #12
 8003690:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003692:	4628      	mov	r0, r5
 8003694:	f001 fb66 	bl	8004d64 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3728      	adds	r7, #40	; 0x28
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bdb0      	pop	{r4, r5, r7, pc}

080036aa <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b086      	sub	sp, #24
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 80036b2:	2304      	movs	r3, #4
 80036b4:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80036b6:	2300      	movs	r3, #0
 80036b8:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 80036ba:	2300      	movs	r3, #0
 80036bc:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 80036be:	f107 030c 	add.w	r3, r7, #12
 80036c2:	4619      	mov	r1, r3
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 fa93 	bl	8003bf0 <SD_SendStatus>
 80036ca:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d005      	beq.n	80036de <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	431a      	orrs	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9U) & 0x0FU);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	0a5b      	lsrs	r3, r3, #9
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	f003 030f 	and.w	r3, r3, #15
 80036e8:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 80036ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3718      	adds	r7, #24
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003700:	60fb      	str	r3, [r7, #12]
  
  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003710:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003712:	bf00      	nop
 8003714:	3714      	adds	r7, #20
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr

0800371e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)  
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b084      	sub	sp, #16
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800372c:	2300      	movs	r3, #0
 800372e:	60bb      	str	r3, [r7, #8]
  
  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003734:	2b82      	cmp	r3, #130	; 0x82
 8003736:	d111      	bne.n	800375c <SD_DMAReceiveCplt+0x3e>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4618      	mov	r0, r3
 800373e:	f001 fca3 	bl	8005088 <SDMMC_CmdStopTransfer>
 8003742:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d008      	beq.n	800375c <SD_DMAReceiveCplt+0x3e>
    {
      hsd->ErrorCode |= errorstate;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	431a      	orrs	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f7ff fccc 	bl	80030f4 <HAL_SD_ErrorCallback>
    }
  }
  
  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f022 0208 	bic.w	r2, r2, #8
 800376a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003774:	639a      	str	r2, [r3, #56]	; 0x38
  
  hsd->State = HAL_SD_STATE_READY;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f008 ff5e 	bl	800c640 <HAL_SD_RxCpltCallback>
#endif
}
 8003784:	bf00      	nop
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <SD_DMAError>:
  * @brief  DMA SD communication error callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)   
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003798:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if((hsd->hdmarx->ErrorCode == HAL_DMA_ERROR_TE) || (hsd->hdmatx->ErrorCode == HAL_DMA_ERROR_TE))
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800379e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d004      	beq.n	80037ae <SD_DMAError+0x22>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d12c      	bne.n	8003808 <SD_DMAError+0x7c>
  {
    /* Clear All flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80037b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable All interrupts */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80037c6:	63da      	str	r2, [r3, #60]	; 0x3c
      SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);
    
    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	639a      	str	r2, [r3, #56]	; 0x38
    CardState = HAL_SD_GetCardState(hsd);
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f7ff ff68 	bl	80036aa <HAL_SD_GetCardState>
 80037da:	4603      	mov	r3, r0
 80037dc:	72fb      	strb	r3, [r7, #11]
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80037de:	7afb      	ldrb	r3, [r7, #11]
 80037e0:	2b06      	cmp	r3, #6
 80037e2:	d002      	beq.n	80037ea <SD_DMAError+0x5e>
 80037e4:	7afb      	ldrb	r3, [r7, #11]
 80037e6:	2b05      	cmp	r3, #5
 80037e8:	d10a      	bne.n	8003800 <SD_DMAError+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f001 fc4a 	bl	8005088 <SDMMC_CmdStopTransfer>
 80037f4:	4602      	mov	r2, r0
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fa:	431a      	orrs	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    hsd->State= HAL_SD_STATE_READY;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
  HAL_SD_ErrorCallback(hsd);
 8003808:	68f8      	ldr	r0, [r7, #12]
 800380a:	f7ff fc73 	bl	80030f4 <HAL_SD_ErrorCallback>
#endif
}
 800380e:	bf00      	nop
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)   
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b084      	sub	sp, #16
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003822:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmatx != NULL)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003828:	2b00      	cmp	r3, #0
 800382a:	d002      	beq.n	8003832 <SD_DMATxAbort+0x1c>
  {
    hsd->hdmatx = NULL;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmarx == NULL)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003836:	2b00      	cmp	r3, #0
 8003838:	d127      	bne.n	800388a <SD_DMATxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 800383a:	68f8      	ldr	r0, [r7, #12]
 800383c:	f7ff ff35 	bl	80036aa <HAL_SD_GetCardState>
 8003840:	4603      	mov	r3, r0
 8003842:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003852:	7afb      	ldrb	r3, [r7, #11]
 8003854:	2b06      	cmp	r3, #6
 8003856:	d002      	beq.n	800385e <SD_DMATxAbort+0x48>
 8003858:	7afb      	ldrb	r3, [r7, #11]
 800385a:	2b05      	cmp	r3, #5
 800385c:	d115      	bne.n	800388a <SD_DMATxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4618      	mov	r0, r3
 8003864:	f001 fc10 	bl	8005088 <SDMMC_CmdStopTransfer>
 8003868:	4602      	mov	r2, r0
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800386e:	431a      	orrs	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003878:	2b00      	cmp	r3, #0
 800387a:	d003      	beq.n	8003884 <SD_DMATxAbort+0x6e>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->AbortCpltCallback(hsd);
#else
        HAL_SD_AbortCallback(hsd);
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	f008 fecb 	bl	800c618 <HAL_SD_AbortCallback>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 8003882:	e002      	b.n	800388a <SD_DMATxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f7ff fc35 	bl	80030f4 <HAL_SD_ErrorCallback>
}
 800388a:	bf00      	nop
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)   
{
 8003892:	b580      	push	{r7, lr}
 8003894:	b084      	sub	sp, #16
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmarx != NULL)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d002      	beq.n	80038ae <SD_DMARxAbort+0x1c>
  {
    hsd->hdmarx = NULL;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmatx == NULL)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d127      	bne.n	8003906 <SD_DMARxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f7ff fef7 	bl	80036aa <HAL_SD_GetCardState>
 80038bc:	4603      	mov	r3, r0
 80038be:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80038ce:	7afb      	ldrb	r3, [r7, #11]
 80038d0:	2b06      	cmp	r3, #6
 80038d2:	d002      	beq.n	80038da <SD_DMARxAbort+0x48>
 80038d4:	7afb      	ldrb	r3, [r7, #11]
 80038d6:	2b05      	cmp	r3, #5
 80038d8:	d115      	bne.n	8003906 <SD_DMARxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4618      	mov	r0, r3
 80038e0:	f001 fbd2 	bl	8005088 <SDMMC_CmdStopTransfer>
 80038e4:	4602      	mov	r2, r0
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ea:	431a      	orrs	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d003      	beq.n	8003900 <SD_DMARxAbort+0x6e>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->AbortCpltCallback(hsd);
#else
        HAL_SD_AbortCallback(hsd);
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	f008 fe8d 	bl	800c618 <HAL_SD_AbortCallback>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 80038fe:	e002      	b.n	8003906 <SD_DMARxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	f7ff fbf7 	bl	80030f4 <HAL_SD_ErrorCallback>
}
 8003906:	bf00      	nop
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800390e:	b5b0      	push	{r4, r5, r7, lr}
 8003910:	b094      	sub	sp, #80	; 0x50
 8003912:	af04      	add	r7, sp, #16
 8003914:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003916:	2300      	movs	r3, #0
 8003918:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1U;
 800391a:	2301      	movs	r3, #1
 800391c:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4618      	mov	r0, r3
 8003924:	f001 fa75 	bl	8004e12 <SDIO_GetPowerState>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d102      	bne.n	8003934 <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800392e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003932:	e0b1      	b.n	8003a98 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003938:	2b03      	cmp	r3, #3
 800393a:	d02f      	beq.n	800399c <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4618      	mov	r0, r3
 8003942:	f001 fcbb 	bl	80052bc <SDMMC_CmdSendCID>
 8003946:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <SD_InitCard+0x44>
    {
      return errorstate;
 800394e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003950:	e0a2      	b.n	8003a98 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2100      	movs	r1, #0
 8003958:	4618      	mov	r0, r3
 800395a:	f001 fa9f 	bl	8004e9c <SDIO_GetResponse>
 800395e:	4602      	mov	r2, r0
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2104      	movs	r1, #4
 800396a:	4618      	mov	r0, r3
 800396c:	f001 fa96 	bl	8004e9c <SDIO_GetResponse>
 8003970:	4602      	mov	r2, r0
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2108      	movs	r1, #8
 800397c:	4618      	mov	r0, r3
 800397e:	f001 fa8d 	bl	8004e9c <SDIO_GetResponse>
 8003982:	4602      	mov	r2, r0
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	210c      	movs	r1, #12
 800398e:	4618      	mov	r0, r3
 8003990:	f001 fa84 	bl	8004e9c <SDIO_GetResponse>
 8003994:	4602      	mov	r2, r0
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a0:	2b03      	cmp	r3, #3
 80039a2:	d00d      	beq.n	80039c0 <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f107 020e 	add.w	r2, r7, #14
 80039ac:	4611      	mov	r1, r2
 80039ae:	4618      	mov	r0, r3
 80039b0:	f001 fcc5 	bl	800533e <SDMMC_CmdSetRelAdd>
 80039b4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80039b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d001      	beq.n	80039c0 <SD_InitCard+0xb2>
    {
      return errorstate;
 80039bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039be:	e06b      	b.n	8003a98 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c4:	2b03      	cmp	r3, #3
 80039c6:	d036      	beq.n	8003a36 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80039c8:	89fb      	ldrh	r3, [r7, #14]
 80039ca:	461a      	mov	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039d8:	041b      	lsls	r3, r3, #16
 80039da:	4619      	mov	r1, r3
 80039dc:	4610      	mov	r0, r2
 80039de:	f001 fc8d 	bl	80052fc <SDMMC_CmdSendCSD>
 80039e2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80039e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <SD_InitCard+0xe0>
    {
      return errorstate;
 80039ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039ec:	e054      	b.n	8003a98 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2100      	movs	r1, #0
 80039f4:	4618      	mov	r0, r3
 80039f6:	f001 fa51 	bl	8004e9c <SDIO_GetResponse>
 80039fa:	4602      	mov	r2, r0
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2104      	movs	r1, #4
 8003a06:	4618      	mov	r0, r3
 8003a08:	f001 fa48 	bl	8004e9c <SDIO_GetResponse>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2108      	movs	r1, #8
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f001 fa3f 	bl	8004e9c <SDIO_GetResponse>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	210c      	movs	r1, #12
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f001 fa36 	bl	8004e9c <SDIO_GetResponse>
 8003a30:	4602      	mov	r2, r0
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2104      	movs	r1, #4
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f001 fa2d 	bl	8004e9c <SDIO_GetResponse>
 8003a42:	4603      	mov	r3, r0
 8003a44:	0d1a      	lsrs	r2, r3, #20
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 8003a4a:	f107 0310 	add.w	r3, r7, #16
 8003a4e:	4619      	mov	r1, r3
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f7ff fb59 	bl	8003108 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6819      	ldr	r1, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a5e:	041b      	lsls	r3, r3, #16
 8003a60:	f04f 0400 	mov.w	r4, #0
 8003a64:	461a      	mov	r2, r3
 8003a66:	4623      	mov	r3, r4
 8003a68:	4608      	mov	r0, r1
 8003a6a:	f001 fb31 	bl	80050d0 <SDMMC_CmdSelDesel>
 8003a6e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <SD_InitCard+0x16c>
  {
    return errorstate;
 8003a76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a78:	e00e      	b.n	8003a98 <SD_InitCard+0x18a>
  }

  /* Configure SDIO peripheral interface */     
  SDIO_Init(hsd->Instance, hsd->Init);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681d      	ldr	r5, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	466c      	mov	r4, sp
 8003a82:	f103 0210 	add.w	r2, r3, #16
 8003a86:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a88:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003a8c:	3304      	adds	r3, #4
 8003a8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a90:	4628      	mov	r0, r5
 8003a92:	f001 f967 	bl	8004d64 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3740      	adds	r7, #64	; 0x40
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bdb0      	pop	{r4, r5, r7, pc}

08003aa0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003aac:	2300      	movs	r3, #0
 8003aae:	617b      	str	r3, [r7, #20]
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f001 fb2c 	bl	800511a <SDMMC_CmdGoIdleState>
 8003ac2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d001      	beq.n	8003ace <SD_PowerON+0x2e>
  {
    return errorstate;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	e08c      	b.n	8003be8 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f001 fb41 	bl	800515a <SDMMC_CmdOperCond>
 8003ad8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d03d      	beq.n	8003b5c <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 8003ae6:	e032      	b.n	8003b4e <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	1c5a      	adds	r2, r3, #1
 8003aec:	60ba      	str	r2, [r7, #8]
 8003aee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d102      	bne.n	8003afc <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003af6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003afa:	e075      	b.n	8003be8 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2100      	movs	r1, #0
 8003b02:	4618      	mov	r0, r3
 8003b04:	f001 fb4a 	bl	800519c <SDMMC_CmdAppCommand>
 8003b08:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d002      	beq.n	8003b16 <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003b10:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003b14:	e068      	b.n	8003be8 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f001 fb61 	bl	80051e4 <SDMMC_CmdAppOperCommand>
 8003b22:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d002      	beq.n	8003b30 <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003b2a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003b2e:	e05b      	b.n	8003be8 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2100      	movs	r1, #0
 8003b36:	4618      	mov	r0, r3
 8003b38:	f001 f9b0 	bl	8004e9c <SDIO_GetResponse>
 8003b3c:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	0fdb      	lsrs	r3, r3, #31
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d101      	bne.n	8003b4a <SD_PowerON+0xaa>
 8003b46:	2301      	movs	r3, #1
 8003b48:	e000      	b.n	8003b4c <SD_PowerON+0xac>
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d0c9      	beq.n	8003ae8 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	645a      	str	r2, [r3, #68]	; 0x44
 8003b5a:	e044      	b.n	8003be6 <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 8003b62:	e031      	b.n	8003bc8 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	1c5a      	adds	r2, r3, #1
 8003b68:	60ba      	str	r2, [r7, #8]
 8003b6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d102      	bne.n	8003b78 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003b72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b76:	e037      	b.n	8003be8 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f001 fb0c 	bl	800519c <SDMMC_CmdAppCommand>
 8003b84:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d001      	beq.n	8003b90 <SD_PowerON+0xf0>
      {
        return errorstate;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	e02b      	b.n	8003be8 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f001 fb23 	bl	80051e4 <SDMMC_CmdAppOperCommand>
 8003b9e:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d001      	beq.n	8003baa <SD_PowerON+0x10a>
      {
        return errorstate;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	e01e      	b.n	8003be8 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2100      	movs	r1, #0
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f001 f973 	bl	8004e9c <SDIO_GetResponse>
 8003bb6:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	0fdb      	lsrs	r3, r3, #31
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d101      	bne.n	8003bc4 <SD_PowerON+0x124>
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e000      	b.n	8003bc6 <SD_PowerON+0x126>
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d0ca      	beq.n	8003b64 <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d003      	beq.n	8003be0 <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	645a      	str	r2, [r3, #68]	; 0x44
 8003bde:	e002      	b.n	8003be6 <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3718      	adds	r7, #24
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d102      	bne.n	8003c0a <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 8003c04:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c08:	e018      	b.n	8003c3c <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c12:	041b      	lsls	r3, r3, #16
 8003c14:	4619      	mov	r1, r3
 8003c16:	4610      	mov	r0, r2
 8003c18:	f001 fbb4 	bl	8005384 <SDMMC_CmdSendStatus>
 8003c1c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d001      	beq.n	8003c28 <SD_SendStatus+0x38>
  {
    return errorstate;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	e009      	b.n	8003c3c <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f001 f934 	bl	8004e9c <SDIO_GetResponse>
 8003c34:	4602      	mov	r2, r0
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b086      	sub	sp, #24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	60fb      	str	r3, [r7, #12]
 8003c50:	2300      	movs	r3, #0
 8003c52:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003c54:	2300      	movs	r3, #0
 8003c56:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2100      	movs	r1, #0
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f001 f91c 	bl	8004e9c <SDIO_GetResponse>
 8003c64:	4603      	mov	r3, r0
 8003c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c6e:	d102      	bne.n	8003c76 <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003c70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c74:	e02f      	b.n	8003cd6 <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003c76:	f107 030c 	add.w	r3, r7, #12
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 f87b 	bl	8003d78 <SD_FindSCR>
 8003c82:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	e023      	b.n	8003cd6 <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d01c      	beq.n	8003cd2 <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ca0:	041b      	lsls	r3, r3, #16
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	4610      	mov	r0, r2
 8003ca6:	f001 fa79 	bl	800519c <SDMMC_CmdAppCommand>
 8003caa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	e00f      	b.n	8003cd6 <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2102      	movs	r1, #2
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f001 fab6 	bl	800522e <SDMMC_CmdBusWidth>
 8003cc2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d001      	beq.n	8003cce <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	e003      	b.n	8003cd6 <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	e001      	b.n	8003cd6 <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003cd2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3718      	adds	r7, #24
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b086      	sub	sp, #24
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	60fb      	str	r3, [r7, #12]
 8003cea:	2300      	movs	r3, #0
 8003cec:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f001 f8cf 	bl	8004e9c <SDIO_GetResponse>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d08:	d102      	bne.n	8003d10 <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003d0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d0e:	e02f      	b.n	8003d70 <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003d10:	f107 030c 	add.w	r3, r7, #12
 8003d14:	4619      	mov	r1, r3
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 f82e 	bl	8003d78 <SD_FindSCR>
 8003d1c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d001      	beq.n	8003d28 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	e023      	b.n	8003d70 <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d01c      	beq.n	8003d6c <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d3a:	041b      	lsls	r3, r3, #16
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	4610      	mov	r0, r2
 8003d40:	f001 fa2c 	bl	800519c <SDMMC_CmdAppCommand>
 8003d44:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	e00f      	b.n	8003d70 <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2100      	movs	r1, #0
 8003d56:	4618      	mov	r0, r3
 8003d58:	f001 fa69 	bl	800522e <SDMMC_CmdBusWidth>
 8003d5c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d001      	beq.n	8003d68 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	e003      	b.n	8003d70 <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	e001      	b.n	8003d70 <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003d6c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3718      	adds	r7, #24
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8003d78:	b590      	push	{r4, r7, lr}
 8003d7a:	b08f      	sub	sp, #60	; 0x3c
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003d82:	2300      	movs	r3, #0
 8003d84:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8003d86:	f7fc fc59 	bl	800063c <HAL_GetTick>
 8003d8a:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0U;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8003d90:	2300      	movs	r3, #0
 8003d92:	60fb      	str	r3, [r7, #12]
 8003d94:	2300      	movs	r3, #0
 8003d96:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2108      	movs	r1, #8
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f001 f8bd 	bl	8004f1e <SDMMC_CmdBlockLength>
 8003da4:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8003da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d001      	beq.n	8003db0 <SD_FindSCR+0x38>
  {
    return errorstate;
 8003dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dae:	e0a8      	b.n	8003f02 <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003db8:	041b      	lsls	r3, r3, #16
 8003dba:	4619      	mov	r1, r3
 8003dbc:	4610      	mov	r0, r2
 8003dbe:	f001 f9ed 	bl	800519c <SDMMC_CmdAppCommand>
 8003dc2:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8003dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <SD_FindSCR+0x56>
  {
    return errorstate;
 8003dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dcc:	e099      	b.n	8003f02 <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003dce:	f04f 33ff 	mov.w	r3, #4294967295
 8003dd2:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8U;
 8003dd4:	2308      	movs	r3, #8
 8003dd6:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8003dd8:	2330      	movs	r3, #48	; 0x30
 8003dda:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003ddc:	2302      	movs	r3, #2
 8003dde:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003de0:	2300      	movs	r3, #0
 8003de2:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDIO_DPSM_ENABLE;
 8003de4:	2301      	movs	r3, #1
 8003de6:	62bb      	str	r3, [r7, #40]	; 0x28
  SDIO_ConfigData(hsd->Instance, &config);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f107 0214 	add.w	r2, r7, #20
 8003df0:	4611      	mov	r1, r2
 8003df2:	4618      	mov	r0, r3
 8003df4:	f001 f867 	bl	8004ec6 <SDIO_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f001 fa3a 	bl	8005276 <SDMMC_CmdSendSCR>
 8003e02:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8003e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d022      	beq.n	8003e50 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8003e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e0c:	e079      	b.n	8003f02 <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00e      	beq.n	8003e3a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6819      	ldr	r1, [r3, #0]
 8003e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	f107 020c 	add.w	r2, r7, #12
 8003e28:	18d4      	adds	r4, r2, r3
 8003e2a:	4608      	mov	r0, r1
 8003e2c:	f000 ffc5 	bl	8004dba <SDIO_ReadFIFO>
 8003e30:	4603      	mov	r3, r0
 8003e32:	6023      	str	r3, [r4, #0]
      index++;
 8003e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e36:	3301      	adds	r3, #1
 8003e38:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003e3a:	f7fc fbff 	bl	800063c <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e48:	d102      	bne.n	8003e50 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8003e4a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003e4e:	e058      	b.n	8003f02 <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e56:	f240 432a 	movw	r3, #1066	; 0x42a
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d0d6      	beq.n	8003e0e <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e66:	f003 0308 	and.w	r3, r3, #8
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d005      	beq.n	8003e7a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2208      	movs	r2, #8
 8003e74:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8003e76:	2308      	movs	r3, #8
 8003e78:	e043      	b.n	8003f02 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e80:	f003 0302 	and.w	r3, r3, #2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d005      	beq.n	8003e94 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2202      	movs	r2, #2
 8003e8e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8003e90:	2302      	movs	r3, #2
 8003e92:	e036      	b.n	8003f02 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e9a:	f003 0320 	and.w	r3, r3, #32
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d005      	beq.n	8003eae <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 8003eaa:	2320      	movs	r3, #32
 8003eac:	e029      	b.n	8003f02 <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003eb6:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	061a      	lsls	r2, r3, #24
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	021b      	lsls	r3, r3, #8
 8003ec0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003ec4:	431a      	orrs	r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	0a1b      	lsrs	r3, r3, #8
 8003eca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8003ece:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	3304      	adds	r3, #4
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8003eda:	430a      	orrs	r2, r1
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8003edc:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	061a      	lsls	r2, r3, #24
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	021b      	lsls	r3, r3, #8
 8003ee6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003eea:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	0a1b      	lsrs	r3, r3, #8
 8003ef0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8003ef4:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	0e1b      	lsrs	r3, r3, #24
 8003efa:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	373c      	adds	r7, #60	; 0x3c
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd90      	pop	{r4, r7, pc}

08003f0a <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8003f0a:	b590      	push	{r4, r7, lr}
 8003f0c:	b085      	sub	sp, #20
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003f12:	2300      	movs	r3, #0
 8003f14:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;

  tmp = (uint32_t*)hsd->pRxBuffPtr;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1a:	60bb      	str	r3, [r7, #8]
  
  /* Read data from SDIO Rx FIFO */
  for(count = 0U; count < 8U; count++)
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	60fb      	str	r3, [r7, #12]
 8003f20:	e00d      	b.n	8003f3e <SD_Read_IT+0x34>
  {
    *(tmp + count) = SDIO_ReadFIFO(hsd->Instance);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6819      	ldr	r1, [r3, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	68ba      	ldr	r2, [r7, #8]
 8003f2c:	18d4      	adds	r4, r2, r3
 8003f2e:	4608      	mov	r0, r1
 8003f30:	f000 ff43 	bl	8004dba <SDIO_ReadFIFO>
 8003f34:	4603      	mov	r3, r0
 8003f36:	6023      	str	r3, [r4, #0]
  for(count = 0U; count < 8U; count++)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	60fb      	str	r3, [r7, #12]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2b07      	cmp	r3, #7
 8003f42:	d9ee      	bls.n	8003f22 <SD_Read_IT+0x18>
  }
  
  hsd->pRxBuffPtr += 8U;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f48:	f103 0220 	add.w	r2, r3, #32
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	629a      	str	r2, [r3, #40]	; 0x28
  
  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3714      	adds	r7, #20
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd90      	pop	{r4, r7, pc}

08003f5a <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b084      	sub	sp, #16
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003f62:	2300      	movs	r3, #0
 8003f64:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	60bb      	str	r3, [r7, #8]
  
  /* Write data to SDIO Tx FIFO */
  for(count = 0U; count < 8U; count++)
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	60fb      	str	r3, [r7, #12]
 8003f70:	e00b      	b.n	8003f8a <SD_Write_IT+0x30>
  {
    SDIO_WriteFIFO(hsd->Instance, (tmp + count));
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6818      	ldr	r0, [r3, #0]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	4619      	mov	r1, r3
 8003f80:	f000 ff28 	bl	8004dd4 <SDIO_WriteFIFO>
  for(count = 0U; count < 8U; count++)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	3301      	adds	r3, #1
 8003f88:	60fb      	str	r3, [r7, #12]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2b07      	cmp	r3, #7
 8003f8e:	d9f0      	bls.n	8003f72 <SD_Write_IT+0x18>
  }
  
  hsd->pTxBuffPtr += 8U;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a1b      	ldr	r3, [r3, #32]
 8003f94:	f103 0220 	add.w	r2, r3, #32
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	621a      	str	r2, [r3, #32]
  
  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3710      	adds	r7, #16
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	b084      	sub	sp, #16
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	60f8      	str	r0, [r7, #12]
 8003fae:	60b9      	str	r1, [r7, #8]
 8003fb0:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d101      	bne.n	8003fbc <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e034      	b.n	8004026 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d106      	bne.n	8003fd6 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f00d ff6d 	bl	8011eb0 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	3308      	adds	r3, #8
 8003fde:	4619      	mov	r1, r3
 8003fe0:	4610      	mov	r0, r2
 8003fe2:	f000 fdef 	bl	8004bc4 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6818      	ldr	r0, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	461a      	mov	r2, r3
 8003ff0:	68b9      	ldr	r1, [r7, #8]
 8003ff2:	f000 fe39 	bl	8004c68 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6858      	ldr	r0, [r3, #4]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	689a      	ldr	r2, [r3, #8]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004002:	6879      	ldr	r1, [r7, #4]
 8004004:	f000 fe6e 	bl	8004ce4 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	6892      	ldr	r2, [r2, #8]
 8004010:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	6892      	ldr	r2, [r2, #8]
 800401c:	f041 0101 	orr.w	r1, r1, #1
 8004020:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b082      	sub	sp, #8
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d101      	bne.n	8004040 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e03f      	b.n	80040c0 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b00      	cmp	r3, #0
 800404a:	d106      	bne.n	800405a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f00d fe53 	bl	8011d00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2224      	movs	r2, #36	; 0x24
 800405e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68da      	ldr	r2, [r3, #12]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004070:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 fb9c 	bl	80047b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	691a      	ldr	r2, [r3, #16]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004086:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	695a      	ldr	r2, [r3, #20]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004096:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68da      	ldr	r2, [r3, #12]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040a6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2220      	movs	r2, #32
 80040b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2220      	movs	r2, #32
 80040ba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3708      	adds	r7, #8
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <HAL_UART_Transmit>:
extern void sendEnable(void);
extern void sendDIsEnable(void);
extern UART_HandleTypeDef huart1;
extern UART_HandleTypeDef huart2;
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b088      	sub	sp, #32
 80040cc:	af02      	add	r7, sp, #8
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	603b      	str	r3, [r7, #0]
 80040d4:	4613      	mov	r3, r2
 80040d6:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80040d8:	2300      	movs	r3, #0
 80040da:	617b      	str	r3, [r7, #20]
  if(huart == &huart2)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	4a4a      	ldr	r2, [pc, #296]	; (8004208 <HAL_UART_Transmit+0x140>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d101      	bne.n	80040e8 <HAL_UART_Transmit+0x20>
	  sendEnable();
 80040e4:	f007 fbe4 	bl	800b8b0 <sendEnable>
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	2b20      	cmp	r3, #32
 80040f2:	f040 8083 	bne.w	80041fc <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d002      	beq.n	8004102 <HAL_UART_Transmit+0x3a>
 80040fc:	88fb      	ldrh	r3, [r7, #6]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <HAL_UART_Transmit+0x3e>
    {
      return  HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e07b      	b.n	80041fe <HAL_UART_Transmit+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800410c:	2b01      	cmp	r3, #1
 800410e:	d101      	bne.n	8004114 <HAL_UART_Transmit+0x4c>
 8004110:	2302      	movs	r3, #2
 8004112:	e074      	b.n	80041fe <HAL_UART_Transmit+0x136>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2221      	movs	r2, #33	; 0x21
 8004126:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800412a:	f7fc fa87 	bl	800063c <HAL_GetTick>
 800412e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	88fa      	ldrh	r2, [r7, #6]
 8004134:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	88fa      	ldrh	r2, [r7, #6]
 800413a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800413c:	e042      	b.n	80041c4 <HAL_UART_Transmit+0xfc>
    {
      huart->TxXferCount--;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004142:	b29b      	uxth	r3, r3
 8004144:	3b01      	subs	r3, #1
 8004146:	b29a      	uxth	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004154:	d122      	bne.n	800419c <HAL_UART_Transmit+0xd4>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	9300      	str	r3, [sp, #0]
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	2200      	movs	r2, #0
 800415e:	2180      	movs	r1, #128	; 0x80
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f000 f9b9 	bl	80044d8 <UART_WaitOnFlagUntilTimeout>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <HAL_UART_Transmit+0xa8>
        {
          return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e046      	b.n	80041fe <HAL_UART_Transmit+0x136>
        }
        tmp = (uint16_t *) pData;
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	881b      	ldrh	r3, [r3, #0]
 8004178:	461a      	mov	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004182:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d103      	bne.n	8004194 <HAL_UART_Transmit+0xcc>
        {
          pData += 2U;
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	3302      	adds	r3, #2
 8004190:	60bb      	str	r3, [r7, #8]
 8004192:	e017      	b.n	80041c4 <HAL_UART_Transmit+0xfc>
        }
        else
        {
          pData += 1U;
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	3301      	adds	r3, #1
 8004198:	60bb      	str	r3, [r7, #8]
 800419a:	e013      	b.n	80041c4 <HAL_UART_Transmit+0xfc>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	2200      	movs	r2, #0
 80041a4:	2180      	movs	r1, #128	; 0x80
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f000 f996 	bl	80044d8 <UART_WaitOnFlagUntilTimeout>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <HAL_UART_Transmit+0xee>
        {
          return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e023      	b.n	80041fe <HAL_UART_Transmit+0x136>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	1c5a      	adds	r2, r3, #1
 80041ba:	60ba      	str	r2, [r7, #8]
 80041bc:	781a      	ldrb	r2, [r3, #0]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1b7      	bne.n	800413e <HAL_UART_Transmit+0x76>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	9300      	str	r3, [sp, #0]
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	2200      	movs	r2, #0
 80041d6:	2140      	movs	r1, #64	; 0x40
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f000 f97d 	bl	80044d8 <UART_WaitOnFlagUntilTimeout>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d001      	beq.n	80041e8 <HAL_UART_Transmit+0x120>
    {
      return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e00a      	b.n	80041fe <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2220      	movs	r2, #32
 80041ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80041f8:	2300      	movs	r3, #0
 80041fa:	e000      	b.n	80041fe <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80041fc:	2302      	movs	r3, #2
  }
  if(huart == &huart2)
	  sendDIsEnable();
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3718      	adds	r7, #24
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	20006fc8 	.word	0x20006fc8

0800420c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	4613      	mov	r3, r2
 8004218:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b20      	cmp	r3, #32
 8004224:	d140      	bne.n	80042a8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d002      	beq.n	8004232 <HAL_UART_Receive_IT+0x26>
 800422c:	88fb      	ldrh	r3, [r7, #6]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d101      	bne.n	8004236 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e039      	b.n	80042aa <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800423c:	2b01      	cmp	r3, #1
 800423e:	d101      	bne.n	8004244 <HAL_UART_Receive_IT+0x38>
 8004240:	2302      	movs	r3, #2
 8004242:	e032      	b.n	80042aa <HAL_UART_Receive_IT+0x9e>
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	68ba      	ldr	r2, [r7, #8]
 8004250:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	88fa      	ldrh	r2, [r7, #6]
 8004256:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	88fa      	ldrh	r2, [r7, #6]
 800425c:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2222      	movs	r2, #34	; 0x22
 8004268:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68da      	ldr	r2, [r3, #12]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004282:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	695a      	ldr	r2, [r3, #20]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f042 0201 	orr.w	r2, r2, #1
 8004292:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68da      	ldr	r2, [r3, #12]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f042 0220 	orr.w	r2, r2, #32
 80042a2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80042a4:	2300      	movs	r3, #0
 80042a6:	e000      	b.n	80042aa <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80042a8:	2302      	movs	r3, #2
  }
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3714      	adds	r7, #20
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
	...

080042b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b088      	sub	sp, #32
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80042d8:	2300      	movs	r3, #0
 80042da:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80042dc:	2300      	movs	r3, #0
 80042de:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	f003 030f 	and.w	r3, r3, #15
 80042e6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d10d      	bne.n	800430a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	f003 0320 	and.w	r3, r3, #32
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d008      	beq.n	800430a <HAL_UART_IRQHandler+0x52>
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	f003 0320 	and.w	r3, r3, #32
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d003      	beq.n	800430a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f9d2 	bl	80046ac <UART_Receive_IT>
      return;
 8004308:	e0cc      	b.n	80044a4 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	2b00      	cmp	r3, #0
 800430e:	f000 80ab 	beq.w	8004468 <HAL_UART_IRQHandler+0x1b0>
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	f003 0301 	and.w	r3, r3, #1
 8004318:	2b00      	cmp	r3, #0
 800431a:	d105      	bne.n	8004328 <HAL_UART_IRQHandler+0x70>
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004322:	2b00      	cmp	r3, #0
 8004324:	f000 80a0 	beq.w	8004468 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00a      	beq.n	8004348 <HAL_UART_IRQHandler+0x90>
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004338:	2b00      	cmp	r3, #0
 800433a:	d005      	beq.n	8004348 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004340:	f043 0201 	orr.w	r2, r3, #1
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	f003 0304 	and.w	r3, r3, #4
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00a      	beq.n	8004368 <HAL_UART_IRQHandler+0xb0>
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	2b00      	cmp	r3, #0
 800435a:	d005      	beq.n	8004368 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004360:	f043 0202 	orr.w	r2, r3, #2
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00a      	beq.n	8004388 <HAL_UART_IRQHandler+0xd0>
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	f003 0301 	and.w	r3, r3, #1
 8004378:	2b00      	cmp	r3, #0
 800437a:	d005      	beq.n	8004388 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004380:	f043 0204 	orr.w	r2, r3, #4
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	f003 0308 	and.w	r3, r3, #8
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00a      	beq.n	80043a8 <HAL_UART_IRQHandler+0xf0>
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	f003 0301 	and.w	r3, r3, #1
 8004398:	2b00      	cmp	r3, #0
 800439a:	d005      	beq.n	80043a8 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a0:	f043 0208 	orr.w	r2, r3, #8
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d078      	beq.n	80044a2 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	f003 0320 	and.w	r3, r3, #32
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d007      	beq.n	80043ca <HAL_UART_IRQHandler+0x112>
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	f003 0320 	and.w	r3, r3, #32
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d002      	beq.n	80043ca <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f000 f971 	bl	80046ac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d4:	2b40      	cmp	r3, #64	; 0x40
 80043d6:	bf0c      	ite	eq
 80043d8:	2301      	moveq	r3, #1
 80043da:	2300      	movne	r3, #0
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e4:	f003 0308 	and.w	r3, r3, #8
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d102      	bne.n	80043f2 <HAL_UART_IRQHandler+0x13a>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d031      	beq.n	8004456 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 f8ba 	bl	800456c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004402:	2b40      	cmp	r3, #64	; 0x40
 8004404:	d123      	bne.n	800444e <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	695a      	ldr	r2, [r3, #20]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004414:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800441a:	2b00      	cmp	r3, #0
 800441c:	d013      	beq.n	8004446 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004422:	4a22      	ldr	r2, [pc, #136]	; (80044ac <HAL_UART_IRQHandler+0x1f4>)
 8004424:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800442a:	4618      	mov	r0, r3
 800442c:	f7fd fa3e 	bl	80018ac <HAL_DMA_Abort_IT>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d016      	beq.n	8004464 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800443a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004440:	4610      	mov	r0, r2
 8004442:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004444:	e00e      	b.n	8004464 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 f83c 	bl	80044c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800444c:	e00a      	b.n	8004464 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f838 	bl	80044c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004454:	e006      	b.n	8004464 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f834 	bl	80044c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004462:	e01e      	b.n	80044a2 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004464:	bf00      	nop
    return;
 8004466:	e01c      	b.n	80044a2 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800446e:	2b00      	cmp	r3, #0
 8004470:	d008      	beq.n	8004484 <HAL_UART_IRQHandler+0x1cc>
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004478:	2b00      	cmp	r3, #0
 800447a:	d003      	beq.n	8004484 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 f8a7 	bl	80045d0 <UART_Transmit_IT>
    return;
 8004482:	e00f      	b.n	80044a4 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00a      	beq.n	80044a4 <HAL_UART_IRQHandler+0x1ec>
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004494:	2b00      	cmp	r3, #0
 8004496:	d005      	beq.n	80044a4 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 f8ef 	bl	800467c <UART_EndTransmit_IT>
    return;
 800449e:	bf00      	nop
 80044a0:	e000      	b.n	80044a4 <HAL_UART_IRQHandler+0x1ec>
    return;
 80044a2:	bf00      	nop
  }
}
 80044a4:	3720      	adds	r7, #32
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	080045a9 	.word	0x080045a9

080044b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80044b8:	bf00      	nop
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80044cc:	bf00      	nop
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	603b      	str	r3, [r7, #0]
 80044e4:	4613      	mov	r3, r2
 80044e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044e8:	e02c      	b.n	8004544 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f0:	d028      	beq.n	8004544 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d007      	beq.n	8004508 <UART_WaitOnFlagUntilTimeout+0x30>
 80044f8:	f7fc f8a0 	bl	800063c <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	69ba      	ldr	r2, [r7, #24]
 8004504:	429a      	cmp	r2, r3
 8004506:	d21d      	bcs.n	8004544 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68da      	ldr	r2, [r3, #12]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004516:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	695a      	ldr	r2, [r3, #20]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f022 0201 	bic.w	r2, r2, #1
 8004526:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2220      	movs	r2, #32
 800452c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2220      	movs	r2, #32
 8004534:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e00f      	b.n	8004564 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	4013      	ands	r3, r2
 800454e:	68ba      	ldr	r2, [r7, #8]
 8004550:	429a      	cmp	r2, r3
 8004552:	bf0c      	ite	eq
 8004554:	2301      	moveq	r3, #1
 8004556:	2300      	movne	r3, #0
 8004558:	b2db      	uxtb	r3, r3
 800455a:	461a      	mov	r2, r3
 800455c:	79fb      	ldrb	r3, [r7, #7]
 800455e:	429a      	cmp	r2, r3
 8004560:	d0c3      	beq.n	80044ea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	3710      	adds	r7, #16
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68da      	ldr	r2, [r3, #12]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004582:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	695a      	ldr	r2, [r3, #20]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 0201 	bic.w	r2, r2, #1
 8004592:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2220      	movs	r2, #32
 8004598:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800459c:	bf00      	nop
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	f7ff ff7e 	bl	80044c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045c8:	bf00      	nop
 80045ca:	3710      	adds	r7, #16
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	2b21      	cmp	r3, #33	; 0x21
 80045e2:	d144      	bne.n	800466e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045ec:	d11a      	bne.n	8004624 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a1b      	ldr	r3, [r3, #32]
 80045f2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	881b      	ldrh	r3, [r3, #0]
 80045f8:	461a      	mov	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004602:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d105      	bne.n	8004618 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a1b      	ldr	r3, [r3, #32]
 8004610:	1c9a      	adds	r2, r3, #2
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	621a      	str	r2, [r3, #32]
 8004616:	e00e      	b.n	8004636 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a1b      	ldr	r3, [r3, #32]
 800461c:	1c5a      	adds	r2, r3, #1
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	621a      	str	r2, [r3, #32]
 8004622:	e008      	b.n	8004636 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	1c59      	adds	r1, r3, #1
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	6211      	str	r1, [r2, #32]
 800462e:	781a      	ldrb	r2, [r3, #0]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800463a:	b29b      	uxth	r3, r3
 800463c:	3b01      	subs	r3, #1
 800463e:	b29b      	uxth	r3, r3
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	4619      	mov	r1, r3
 8004644:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10f      	bne.n	800466a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68da      	ldr	r2, [r3, #12]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004658:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68da      	ldr	r2, [r3, #12]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004668:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800466a:	2300      	movs	r3, #0
 800466c:	e000      	b.n	8004670 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800466e:	2302      	movs	r3, #2
  }
}
 8004670:	4618      	mov	r0, r3
 8004672:	3714      	adds	r7, #20
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68da      	ldr	r2, [r3, #12]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004692:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2220      	movs	r2, #32
 8004698:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f7ff ff07 	bl	80044b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3708      	adds	r7, #8
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	2b22      	cmp	r3, #34	; 0x22
 80046be:	d171      	bne.n	80047a4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046c8:	d123      	bne.n	8004712 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ce:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d10e      	bne.n	80046f6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	b29b      	uxth	r3, r3
 80046e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046e4:	b29a      	uxth	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ee:	1c9a      	adds	r2, r3, #2
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	629a      	str	r2, [r3, #40]	; 0x28
 80046f4:	e029      	b.n	800474a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	b29a      	uxth	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800470a:	1c5a      	adds	r2, r3, #1
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	629a      	str	r2, [r3, #40]	; 0x28
 8004710:	e01b      	b.n	800474a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d10a      	bne.n	8004730 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	6858      	ldr	r0, [r3, #4]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004724:	1c59      	adds	r1, r3, #1
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	6291      	str	r1, [r2, #40]	; 0x28
 800472a:	b2c2      	uxtb	r2, r0
 800472c:	701a      	strb	r2, [r3, #0]
 800472e:	e00c      	b.n	800474a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	b2da      	uxtb	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473c:	1c58      	adds	r0, r3, #1
 800473e:	6879      	ldr	r1, [r7, #4]
 8004740:	6288      	str	r0, [r1, #40]	; 0x28
 8004742:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004746:	b2d2      	uxtb	r2, r2
 8004748:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800474e:	b29b      	uxth	r3, r3
 8004750:	3b01      	subs	r3, #1
 8004752:	b29b      	uxth	r3, r3
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	4619      	mov	r1, r3
 8004758:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800475a:	2b00      	cmp	r3, #0
 800475c:	d120      	bne.n	80047a0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68da      	ldr	r2, [r3, #12]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f022 0220 	bic.w	r2, r2, #32
 800476c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68da      	ldr	r2, [r3, #12]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800477c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	695a      	ldr	r2, [r3, #20]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f022 0201 	bic.w	r2, r2, #1
 800478c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2220      	movs	r2, #32
 8004792:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f007 fc02 	bl	800bfa0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800479c:	2300      	movs	r3, #0
 800479e:	e002      	b.n	80047a6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80047a0:	2300      	movs	r3, #0
 80047a2:	e000      	b.n	80047a6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80047a4:	2302      	movs	r3, #2
  }
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3710      	adds	r7, #16
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
	...

080047b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047b0:	b5b0      	push	{r4, r5, r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	68da      	ldr	r2, [r3, #12]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	430a      	orrs	r2, r1
 80047cc:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	689a      	ldr	r2, [r3, #8]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	431a      	orrs	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	431a      	orrs	r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	69db      	ldr	r3, [r3, #28]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80047f0:	f023 030c 	bic.w	r3, r3, #12
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	6812      	ldr	r2, [r2, #0]
 80047f8:	68f9      	ldr	r1, [r7, #12]
 80047fa:	430b      	orrs	r3, r1
 80047fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	699a      	ldr	r2, [r3, #24]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	430a      	orrs	r2, r1
 8004812:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	69db      	ldr	r3, [r3, #28]
 8004818:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800481c:	f040 80e4 	bne.w	80049e8 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4aab      	ldr	r2, [pc, #684]	; (8004ad4 <UART_SetConfig+0x324>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d004      	beq.n	8004834 <UART_SetConfig+0x84>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4aaa      	ldr	r2, [pc, #680]	; (8004ad8 <UART_SetConfig+0x328>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d16c      	bne.n	800490e <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004834:	f7fe f8c4 	bl	80029c0 <HAL_RCC_GetPCLK2Freq>
 8004838:	4602      	mov	r2, r0
 800483a:	4613      	mov	r3, r2
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	4413      	add	r3, r2
 8004840:	009a      	lsls	r2, r3, #2
 8004842:	441a      	add	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	005b      	lsls	r3, r3, #1
 800484a:	fbb2 f3f3 	udiv	r3, r2, r3
 800484e:	4aa3      	ldr	r2, [pc, #652]	; (8004adc <UART_SetConfig+0x32c>)
 8004850:	fba2 2303 	umull	r2, r3, r2, r3
 8004854:	095b      	lsrs	r3, r3, #5
 8004856:	011c      	lsls	r4, r3, #4
 8004858:	f7fe f8b2 	bl	80029c0 <HAL_RCC_GetPCLK2Freq>
 800485c:	4602      	mov	r2, r0
 800485e:	4613      	mov	r3, r2
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	4413      	add	r3, r2
 8004864:	009a      	lsls	r2, r3, #2
 8004866:	441a      	add	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	005b      	lsls	r3, r3, #1
 800486e:	fbb2 f5f3 	udiv	r5, r2, r3
 8004872:	f7fe f8a5 	bl	80029c0 <HAL_RCC_GetPCLK2Freq>
 8004876:	4602      	mov	r2, r0
 8004878:	4613      	mov	r3, r2
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	4413      	add	r3, r2
 800487e:	009a      	lsls	r2, r3, #2
 8004880:	441a      	add	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	005b      	lsls	r3, r3, #1
 8004888:	fbb2 f3f3 	udiv	r3, r2, r3
 800488c:	4a93      	ldr	r2, [pc, #588]	; (8004adc <UART_SetConfig+0x32c>)
 800488e:	fba2 2303 	umull	r2, r3, r2, r3
 8004892:	095b      	lsrs	r3, r3, #5
 8004894:	2264      	movs	r2, #100	; 0x64
 8004896:	fb02 f303 	mul.w	r3, r2, r3
 800489a:	1aeb      	subs	r3, r5, r3
 800489c:	00db      	lsls	r3, r3, #3
 800489e:	3332      	adds	r3, #50	; 0x32
 80048a0:	4a8e      	ldr	r2, [pc, #568]	; (8004adc <UART_SetConfig+0x32c>)
 80048a2:	fba2 2303 	umull	r2, r3, r2, r3
 80048a6:	095b      	lsrs	r3, r3, #5
 80048a8:	005b      	lsls	r3, r3, #1
 80048aa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80048ae:	441c      	add	r4, r3
 80048b0:	f7fe f886 	bl	80029c0 <HAL_RCC_GetPCLK2Freq>
 80048b4:	4602      	mov	r2, r0
 80048b6:	4613      	mov	r3, r2
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	4413      	add	r3, r2
 80048bc:	009a      	lsls	r2, r3, #2
 80048be:	441a      	add	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	005b      	lsls	r3, r3, #1
 80048c6:	fbb2 f5f3 	udiv	r5, r2, r3
 80048ca:	f7fe f879 	bl	80029c0 <HAL_RCC_GetPCLK2Freq>
 80048ce:	4602      	mov	r2, r0
 80048d0:	4613      	mov	r3, r2
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	4413      	add	r3, r2
 80048d6:	009a      	lsls	r2, r3, #2
 80048d8:	441a      	add	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	005b      	lsls	r3, r3, #1
 80048e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e4:	4a7d      	ldr	r2, [pc, #500]	; (8004adc <UART_SetConfig+0x32c>)
 80048e6:	fba2 2303 	umull	r2, r3, r2, r3
 80048ea:	095b      	lsrs	r3, r3, #5
 80048ec:	2264      	movs	r2, #100	; 0x64
 80048ee:	fb02 f303 	mul.w	r3, r2, r3
 80048f2:	1aeb      	subs	r3, r5, r3
 80048f4:	00db      	lsls	r3, r3, #3
 80048f6:	3332      	adds	r3, #50	; 0x32
 80048f8:	4a78      	ldr	r2, [pc, #480]	; (8004adc <UART_SetConfig+0x32c>)
 80048fa:	fba2 2303 	umull	r2, r3, r2, r3
 80048fe:	095b      	lsrs	r3, r3, #5
 8004900:	f003 0207 	and.w	r2, r3, #7
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4422      	add	r2, r4
 800490a:	609a      	str	r2, [r3, #8]
 800490c:	e154      	b.n	8004bb8 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800490e:	f7fe f843 	bl	8002998 <HAL_RCC_GetPCLK1Freq>
 8004912:	4602      	mov	r2, r0
 8004914:	4613      	mov	r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4413      	add	r3, r2
 800491a:	009a      	lsls	r2, r3, #2
 800491c:	441a      	add	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	005b      	lsls	r3, r3, #1
 8004924:	fbb2 f3f3 	udiv	r3, r2, r3
 8004928:	4a6c      	ldr	r2, [pc, #432]	; (8004adc <UART_SetConfig+0x32c>)
 800492a:	fba2 2303 	umull	r2, r3, r2, r3
 800492e:	095b      	lsrs	r3, r3, #5
 8004930:	011c      	lsls	r4, r3, #4
 8004932:	f7fe f831 	bl	8002998 <HAL_RCC_GetPCLK1Freq>
 8004936:	4602      	mov	r2, r0
 8004938:	4613      	mov	r3, r2
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	4413      	add	r3, r2
 800493e:	009a      	lsls	r2, r3, #2
 8004940:	441a      	add	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	005b      	lsls	r3, r3, #1
 8004948:	fbb2 f5f3 	udiv	r5, r2, r3
 800494c:	f7fe f824 	bl	8002998 <HAL_RCC_GetPCLK1Freq>
 8004950:	4602      	mov	r2, r0
 8004952:	4613      	mov	r3, r2
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	4413      	add	r3, r2
 8004958:	009a      	lsls	r2, r3, #2
 800495a:	441a      	add	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	005b      	lsls	r3, r3, #1
 8004962:	fbb2 f3f3 	udiv	r3, r2, r3
 8004966:	4a5d      	ldr	r2, [pc, #372]	; (8004adc <UART_SetConfig+0x32c>)
 8004968:	fba2 2303 	umull	r2, r3, r2, r3
 800496c:	095b      	lsrs	r3, r3, #5
 800496e:	2264      	movs	r2, #100	; 0x64
 8004970:	fb02 f303 	mul.w	r3, r2, r3
 8004974:	1aeb      	subs	r3, r5, r3
 8004976:	00db      	lsls	r3, r3, #3
 8004978:	3332      	adds	r3, #50	; 0x32
 800497a:	4a58      	ldr	r2, [pc, #352]	; (8004adc <UART_SetConfig+0x32c>)
 800497c:	fba2 2303 	umull	r2, r3, r2, r3
 8004980:	095b      	lsrs	r3, r3, #5
 8004982:	005b      	lsls	r3, r3, #1
 8004984:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004988:	441c      	add	r4, r3
 800498a:	f7fe f805 	bl	8002998 <HAL_RCC_GetPCLK1Freq>
 800498e:	4602      	mov	r2, r0
 8004990:	4613      	mov	r3, r2
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	4413      	add	r3, r2
 8004996:	009a      	lsls	r2, r3, #2
 8004998:	441a      	add	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	005b      	lsls	r3, r3, #1
 80049a0:	fbb2 f5f3 	udiv	r5, r2, r3
 80049a4:	f7fd fff8 	bl	8002998 <HAL_RCC_GetPCLK1Freq>
 80049a8:	4602      	mov	r2, r0
 80049aa:	4613      	mov	r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	4413      	add	r3, r2
 80049b0:	009a      	lsls	r2, r3, #2
 80049b2:	441a      	add	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	005b      	lsls	r3, r3, #1
 80049ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80049be:	4a47      	ldr	r2, [pc, #284]	; (8004adc <UART_SetConfig+0x32c>)
 80049c0:	fba2 2303 	umull	r2, r3, r2, r3
 80049c4:	095b      	lsrs	r3, r3, #5
 80049c6:	2264      	movs	r2, #100	; 0x64
 80049c8:	fb02 f303 	mul.w	r3, r2, r3
 80049cc:	1aeb      	subs	r3, r5, r3
 80049ce:	00db      	lsls	r3, r3, #3
 80049d0:	3332      	adds	r3, #50	; 0x32
 80049d2:	4a42      	ldr	r2, [pc, #264]	; (8004adc <UART_SetConfig+0x32c>)
 80049d4:	fba2 2303 	umull	r2, r3, r2, r3
 80049d8:	095b      	lsrs	r3, r3, #5
 80049da:	f003 0207 	and.w	r2, r3, #7
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4422      	add	r2, r4
 80049e4:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80049e6:	e0e7      	b.n	8004bb8 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a39      	ldr	r2, [pc, #228]	; (8004ad4 <UART_SetConfig+0x324>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d004      	beq.n	80049fc <UART_SetConfig+0x24c>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a38      	ldr	r2, [pc, #224]	; (8004ad8 <UART_SetConfig+0x328>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d171      	bne.n	8004ae0 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80049fc:	f7fd ffe0 	bl	80029c0 <HAL_RCC_GetPCLK2Freq>
 8004a00:	4602      	mov	r2, r0
 8004a02:	4613      	mov	r3, r2
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	4413      	add	r3, r2
 8004a08:	009a      	lsls	r2, r3, #2
 8004a0a:	441a      	add	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a16:	4a31      	ldr	r2, [pc, #196]	; (8004adc <UART_SetConfig+0x32c>)
 8004a18:	fba2 2303 	umull	r2, r3, r2, r3
 8004a1c:	095b      	lsrs	r3, r3, #5
 8004a1e:	011c      	lsls	r4, r3, #4
 8004a20:	f7fd ffce 	bl	80029c0 <HAL_RCC_GetPCLK2Freq>
 8004a24:	4602      	mov	r2, r0
 8004a26:	4613      	mov	r3, r2
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	4413      	add	r3, r2
 8004a2c:	009a      	lsls	r2, r3, #2
 8004a2e:	441a      	add	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	fbb2 f5f3 	udiv	r5, r2, r3
 8004a3a:	f7fd ffc1 	bl	80029c0 <HAL_RCC_GetPCLK2Freq>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	4613      	mov	r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	4413      	add	r3, r2
 8004a46:	009a      	lsls	r2, r3, #2
 8004a48:	441a      	add	r2, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a54:	4a21      	ldr	r2, [pc, #132]	; (8004adc <UART_SetConfig+0x32c>)
 8004a56:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5a:	095b      	lsrs	r3, r3, #5
 8004a5c:	2264      	movs	r2, #100	; 0x64
 8004a5e:	fb02 f303 	mul.w	r3, r2, r3
 8004a62:	1aeb      	subs	r3, r5, r3
 8004a64:	011b      	lsls	r3, r3, #4
 8004a66:	3332      	adds	r3, #50	; 0x32
 8004a68:	4a1c      	ldr	r2, [pc, #112]	; (8004adc <UART_SetConfig+0x32c>)
 8004a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a6e:	095b      	lsrs	r3, r3, #5
 8004a70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a74:	441c      	add	r4, r3
 8004a76:	f7fd ffa3 	bl	80029c0 <HAL_RCC_GetPCLK2Freq>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	4413      	add	r3, r2
 8004a82:	009a      	lsls	r2, r3, #2
 8004a84:	441a      	add	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	fbb2 f5f3 	udiv	r5, r2, r3
 8004a90:	f7fd ff96 	bl	80029c0 <HAL_RCC_GetPCLK2Freq>
 8004a94:	4602      	mov	r2, r0
 8004a96:	4613      	mov	r3, r2
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	4413      	add	r3, r2
 8004a9c:	009a      	lsls	r2, r3, #2
 8004a9e:	441a      	add	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aaa:	4a0c      	ldr	r2, [pc, #48]	; (8004adc <UART_SetConfig+0x32c>)
 8004aac:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab0:	095b      	lsrs	r3, r3, #5
 8004ab2:	2264      	movs	r2, #100	; 0x64
 8004ab4:	fb02 f303 	mul.w	r3, r2, r3
 8004ab8:	1aeb      	subs	r3, r5, r3
 8004aba:	011b      	lsls	r3, r3, #4
 8004abc:	3332      	adds	r3, #50	; 0x32
 8004abe:	4a07      	ldr	r2, [pc, #28]	; (8004adc <UART_SetConfig+0x32c>)
 8004ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac4:	095b      	lsrs	r3, r3, #5
 8004ac6:	f003 020f 	and.w	r2, r3, #15
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4422      	add	r2, r4
 8004ad0:	609a      	str	r2, [r3, #8]
 8004ad2:	e071      	b.n	8004bb8 <UART_SetConfig+0x408>
 8004ad4:	40011000 	.word	0x40011000
 8004ad8:	40011400 	.word	0x40011400
 8004adc:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004ae0:	f7fd ff5a 	bl	8002998 <HAL_RCC_GetPCLK1Freq>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	4413      	add	r3, r2
 8004aec:	009a      	lsls	r2, r3, #2
 8004aee:	441a      	add	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004afa:	4a31      	ldr	r2, [pc, #196]	; (8004bc0 <UART_SetConfig+0x410>)
 8004afc:	fba2 2303 	umull	r2, r3, r2, r3
 8004b00:	095b      	lsrs	r3, r3, #5
 8004b02:	011c      	lsls	r4, r3, #4
 8004b04:	f7fd ff48 	bl	8002998 <HAL_RCC_GetPCLK1Freq>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	4413      	add	r3, r2
 8004b10:	009a      	lsls	r2, r3, #2
 8004b12:	441a      	add	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	fbb2 f5f3 	udiv	r5, r2, r3
 8004b1e:	f7fd ff3b 	bl	8002998 <HAL_RCC_GetPCLK1Freq>
 8004b22:	4602      	mov	r2, r0
 8004b24:	4613      	mov	r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	4413      	add	r3, r2
 8004b2a:	009a      	lsls	r2, r3, #2
 8004b2c:	441a      	add	r2, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b38:	4a21      	ldr	r2, [pc, #132]	; (8004bc0 <UART_SetConfig+0x410>)
 8004b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b3e:	095b      	lsrs	r3, r3, #5
 8004b40:	2264      	movs	r2, #100	; 0x64
 8004b42:	fb02 f303 	mul.w	r3, r2, r3
 8004b46:	1aeb      	subs	r3, r5, r3
 8004b48:	011b      	lsls	r3, r3, #4
 8004b4a:	3332      	adds	r3, #50	; 0x32
 8004b4c:	4a1c      	ldr	r2, [pc, #112]	; (8004bc0 <UART_SetConfig+0x410>)
 8004b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b52:	095b      	lsrs	r3, r3, #5
 8004b54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b58:	441c      	add	r4, r3
 8004b5a:	f7fd ff1d 	bl	8002998 <HAL_RCC_GetPCLK1Freq>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	4613      	mov	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4413      	add	r3, r2
 8004b66:	009a      	lsls	r2, r3, #2
 8004b68:	441a      	add	r2, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	fbb2 f5f3 	udiv	r5, r2, r3
 8004b74:	f7fd ff10 	bl	8002998 <HAL_RCC_GetPCLK1Freq>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	4413      	add	r3, r2
 8004b80:	009a      	lsls	r2, r3, #2
 8004b82:	441a      	add	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b8e:	4a0c      	ldr	r2, [pc, #48]	; (8004bc0 <UART_SetConfig+0x410>)
 8004b90:	fba2 2303 	umull	r2, r3, r2, r3
 8004b94:	095b      	lsrs	r3, r3, #5
 8004b96:	2264      	movs	r2, #100	; 0x64
 8004b98:	fb02 f303 	mul.w	r3, r2, r3
 8004b9c:	1aeb      	subs	r3, r5, r3
 8004b9e:	011b      	lsls	r3, r3, #4
 8004ba0:	3332      	adds	r3, #50	; 0x32
 8004ba2:	4a07      	ldr	r2, [pc, #28]	; (8004bc0 <UART_SetConfig+0x410>)
 8004ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba8:	095b      	lsrs	r3, r3, #5
 8004baa:	f003 020f 	and.w	r2, r3, #15
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4422      	add	r2, r4
 8004bb4:	609a      	str	r2, [r3, #8]
}
 8004bb6:	e7ff      	b.n	8004bb8 <UART_SetConfig+0x408>
 8004bb8:	bf00      	nop
 8004bba:	3710      	adds	r7, #16
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bdb0      	pop	{r4, r5, r7, pc}
 8004bc0:	51eb851f 	.word	0x51eb851f

08004bc4 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bdc:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	4b20      	ldr	r3, [pc, #128]	; (8004c64 <FSMC_NORSRAM_Init+0xa0>)
 8004be2:	4013      	ands	r3, r2
 8004be4:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8004bee:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8004bf4:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8004bfa:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8004c00:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8004c06:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8004c0c:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8004c12:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8004c18:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8004c1e:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8004c24:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8004c2a:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8004c30:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	2b08      	cmp	r3, #8
 8004c3e:	d103      	bne.n	8004c48 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c46:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	68f9      	ldr	r1, [r7, #12]
 8004c50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3714      	adds	r7, #20
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	fff00080 	.word	0xfff00080

08004c68 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b087      	sub	sp, #28
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8004c74:	2300      	movs	r3, #0
 8004c76:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	1c5a      	adds	r2, r3, #1
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c82:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004c8a:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004c96:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8004c9e:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8004ca6:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	3b01      	subs	r3, #1
 8004cae:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004cb0:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	3b02      	subs	r3, #2
 8004cb8:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8004cba:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	1c5a      	adds	r2, r3, #1
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6979      	ldr	r1, [r7, #20]
 8004cd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	371c      	adds	r7, #28
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
	...

08004ce4 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b087      	sub	sp, #28
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	607a      	str	r2, [r7, #4]
 8004cf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cfc:	d122      	bne.n	8004d44 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d06:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8004d08:	697a      	ldr	r2, [r7, #20]
 8004d0a:	4b15      	ldr	r3, [pc, #84]	; (8004d60 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004d1a:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8004d22:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8004d2a:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004d30:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004d32:	697a      	ldr	r2, [r7, #20]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	6979      	ldr	r1, [r7, #20]
 8004d3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004d42:	e005      	b.n	8004d50 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8004d4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	371c      	adds	r7, #28
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	cff00000 	.word	0xcff00000

08004d64 <SDIO_Init>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004d64:	b084      	sub	sp, #16
 8004d66:	b480      	push	{r7}
 8004d68:	b085      	sub	sp, #20
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
 8004d6e:	f107 001c 	add.w	r0, r7, #28
 8004d72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0U;
 8004d76:	2300      	movs	r3, #0
 8004d78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004d7a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004d7c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004d7e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8004d82:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8004d86:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004d8a:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004d8e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8004d9e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	431a      	orrs	r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3714      	adds	r7, #20
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	b004      	add	sp, #16
 8004db8:	4770      	bx	lr

08004dba <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004dba:	b480      	push	{r7}
 8004dbc:	b083      	sub	sp, #12
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <SDIO_WriteFIFO>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr

08004df6 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004df6:	b480      	push	{r7}
 8004df8:	b083      	sub	sp, #12
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2203      	movs	r2, #3
 8004e02:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	370c      	adds	r7, #12
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr

08004e12 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004e12:	b480      	push	{r7}
 8004e14:	b083      	sub	sp, #12
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0303 	and.w	r3, r3, #3
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr

08004e2e <SDIO_SendCommand>:
  * @param  Command pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004e2e:	b480      	push	{r7}
 8004e30:	b085      	sub	sp, #20
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
 8004e36:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004e4c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004e52:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004e58:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004e68:	f023 030f 	bic.w	r3, r3, #15
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	431a      	orrs	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3714      	adds	r7, #20
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr

08004e82 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004e82:	b480      	push	{r7}
 8004e84:	b083      	sub	sp, #12
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	b2db      	uxtb	r3, r3
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <SDIO_GetResponse>:
  *            @arg SDIO_RESP1: Response Register 3
  *            @arg SDIO_RESP1: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	3314      	adds	r3, #20
 8004eae:	461a      	mov	r2, r3
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
}  
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3714      	adds	r7, #20
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr

08004ec6 <SDIO_ConfigData>:
  * @param  Data  pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	b085      	sub	sp, #20
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
 8004ece:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	685a      	ldr	r2, [r3, #4]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004eec:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004ef2:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004ef8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f04:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004f10:	2300      	movs	r3, #0

}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3714      	adds	r7, #20
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr

08004f1e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8004f1e:	b580      	push	{r7, lr}
 8004f20:	b088      	sub	sp, #32
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
 8004f26:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004f30:	2310      	movs	r3, #16
 8004f32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004f34:	2340      	movs	r3, #64	; 0x40
 8004f36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f40:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f42:	f107 0308 	add.w	r3, r7, #8
 8004f46:	4619      	mov	r1, r3
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f7ff ff70 	bl	8004e2e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f52:	2110      	movs	r1, #16
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 fa63 	bl	8005420 <SDMMC_GetCmdResp1>
 8004f5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f5c:	69fb      	ldr	r3, [r7, #28]
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3720      	adds	r7, #32
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}

08004f66 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004f66:	b580      	push	{r7, lr}
 8004f68:	b088      	sub	sp, #32
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
 8004f6e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004f70:	2300      	movs	r3, #0
 8004f72:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004f78:	2311      	movs	r3, #17
 8004f7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004f7c:	2340      	movs	r3, #64	; 0x40
 8004f7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f80:	2300      	movs	r3, #0
 8004f82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f88:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f8a:	f107 0308 	add.w	r3, r7, #8
 8004f8e:	4619      	mov	r1, r3
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f7ff ff4c 	bl	8004e2e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f9a:	2111      	movs	r1, #17
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f000 fa3f 	bl	8005420 <SDMMC_GetCmdResp1>
 8004fa2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004fa4:	69fb      	ldr	r3, [r7, #28]
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3720      	adds	r7, #32
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}

08004fae <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b088      	sub	sp, #32
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
 8004fb6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004fc0:	2312      	movs	r3, #18
 8004fc2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004fc4:	2340      	movs	r3, #64	; 0x40
 8004fc6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004fcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fd0:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004fd2:	f107 0308 	add.w	r3, r7, #8
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f7ff ff28 	bl	8004e2e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fe2:	2112      	movs	r1, #18
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f000 fa1b 	bl	8005420 <SDMMC_GetCmdResp1>
 8004fea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004fec:	69fb      	ldr	r3, [r7, #28]
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3720      	adds	r7, #32
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004ff6:	b580      	push	{r7, lr}
 8004ff8:	b088      	sub	sp, #32
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
 8004ffe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005000:	2300      	movs	r3, #0
 8005002:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005008:	2318      	movs	r3, #24
 800500a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800500c:	2340      	movs	r3, #64	; 0x40
 800500e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005010:	2300      	movs	r3, #0
 8005012:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005014:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005018:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800501a:	f107 0308 	add.w	r3, r7, #8
 800501e:	4619      	mov	r1, r3
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f7ff ff04 	bl	8004e2e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005026:	f241 3288 	movw	r2, #5000	; 0x1388
 800502a:	2118      	movs	r1, #24
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f000 f9f7 	bl	8005420 <SDMMC_GetCmdResp1>
 8005032:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005034:	69fb      	ldr	r3, [r7, #28]
}
 8005036:	4618      	mov	r0, r3
 8005038:	3720      	adds	r7, #32
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800503e:	b580      	push	{r7, lr}
 8005040:	b088      	sub	sp, #32
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
 8005046:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005048:	2300      	movs	r3, #0
 800504a:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005050:	2319      	movs	r3, #25
 8005052:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005054:	2340      	movs	r3, #64	; 0x40
 8005056:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005058:	2300      	movs	r3, #0
 800505a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800505c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005060:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005062:	f107 0308 	add.w	r3, r7, #8
 8005066:	4619      	mov	r1, r3
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f7ff fee0 	bl	8004e2e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800506e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005072:	2119      	movs	r1, #25
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f000 f9d3 	bl	8005420 <SDMMC_GetCmdResp1>
 800507a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800507c:	69fb      	ldr	r3, [r7, #28]
}
 800507e:	4618      	mov	r0, r3
 8005080:	3720      	adds	r7, #32
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
	...

08005088 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b088      	sub	sp, #32
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005090:	2300      	movs	r3, #0
 8005092:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005094:	2300      	movs	r3, #0
 8005096:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005098:	230c      	movs	r3, #12
 800509a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800509c:	2340      	movs	r3, #64	; 0x40
 800509e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80050a0:	2300      	movs	r3, #0
 80050a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80050a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050a8:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80050aa:	f107 0308 	add.w	r3, r7, #8
 80050ae:	4619      	mov	r1, r3
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f7ff febc 	bl	8004e2e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, 100000000U);
 80050b6:	4a05      	ldr	r2, [pc, #20]	; (80050cc <SDMMC_CmdStopTransfer+0x44>)
 80050b8:	210c      	movs	r1, #12
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 f9b0 	bl	8005420 <SDMMC_GetCmdResp1>
 80050c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80050c2:	69fb      	ldr	r3, [r7, #28]
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3720      	adds	r7, #32
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	05f5e100 	.word	0x05f5e100

080050d0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx Pointer to SDIO register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b08a      	sub	sp, #40	; 0x28
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80050dc:	2300      	movs	r3, #0
 80050de:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80050e4:	2307      	movs	r3, #7
 80050e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80050e8:	2340      	movs	r3, #64	; 0x40
 80050ea:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80050ec:	2300      	movs	r3, #0
 80050ee:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80050f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050f4:	623b      	str	r3, [r7, #32]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80050f6:	f107 0310 	add.w	r3, r7, #16
 80050fa:	4619      	mov	r1, r3
 80050fc:	68f8      	ldr	r0, [r7, #12]
 80050fe:	f7ff fe96 	bl	8004e2e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8005102:	f241 3288 	movw	r2, #5000	; 0x1388
 8005106:	2107      	movs	r1, #7
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f000 f989 	bl	8005420 <SDMMC_GetCmdResp1>
 800510e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8005110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005112:	4618      	mov	r0, r3
 8005114:	3728      	adds	r7, #40	; 0x28
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800511a:	b580      	push	{r7, lr}
 800511c:	b088      	sub	sp, #32
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005122:	2300      	movs	r3, #0
 8005124:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0U;
 8005126:	2300      	movs	r3, #0
 8005128:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800512a:	2300      	movs	r3, #0
 800512c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800512e:	2300      	movs	r3, #0
 8005130:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005132:	2300      	movs	r3, #0
 8005134:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005136:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800513a:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800513c:	f107 0308 	add.w	r3, r7, #8
 8005140:	4619      	mov	r1, r3
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f7ff fe73 	bl	8004e2e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 f93f 	bl	80053cc <SDMMC_GetCmdError>
 800514e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005150:	69fb      	ldr	r3, [r7, #28]
}
 8005152:	4618      	mov	r0, r3
 8005154:	3720      	adds	r7, #32
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}

0800515a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800515a:	b580      	push	{r7, lr}
 800515c:	b088      	sub	sp, #32
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005162:	2300      	movs	r3, #0
 8005164:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005166:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800516a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800516c:	2308      	movs	r3, #8
 800516e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005170:	2340      	movs	r3, #64	; 0x40
 8005172:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005174:	2300      	movs	r3, #0
 8005176:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005178:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800517c:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800517e:	f107 0308 	add.w	r3, r7, #8
 8005182:	4619      	mov	r1, r3
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f7ff fe52 	bl	8004e2e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 fb10 	bl	80057b0 <SDMMC_GetCmdResp7>
 8005190:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005192:	69fb      	ldr	r3, [r7, #28]
}
 8005194:	4618      	mov	r0, r3
 8005196:	3720      	adds	r7, #32
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b088      	sub	sp, #32
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80051a6:	2300      	movs	r3, #0
 80051a8:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80051ae:	2337      	movs	r3, #55	; 0x37
 80051b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80051b2:	2340      	movs	r3, #64	; 0x40
 80051b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80051b6:	2300      	movs	r3, #0
 80051b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80051ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051be:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80051c0:	f107 0308 	add.w	r3, r7, #8
 80051c4:	4619      	mov	r1, r3
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f7ff fe31 	bl	8004e2e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80051cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80051d0:	2137      	movs	r1, #55	; 0x37
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 f924 	bl	8005420 <SDMMC_GetCmdResp1>
 80051d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80051da:	69fb      	ldr	r3, [r7, #28]
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3720      	adds	r7, #32
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t SdType)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b088      	sub	sp, #32
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80051ee:	2300      	movs	r3, #0
 80051f0:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80051fe:	2329      	movs	r3, #41	; 0x29
 8005200:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005202:	2340      	movs	r3, #64	; 0x40
 8005204:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005206:	2300      	movs	r3, #0
 8005208:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800520a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800520e:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005210:	f107 0308 	add.w	r3, r7, #8
 8005214:	4619      	mov	r1, r3
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f7ff fe09 	bl	8004e2e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 fa25 	bl	800566c <SDMMC_GetCmdResp3>
 8005222:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005224:	69fb      	ldr	r3, [r7, #28]
}
 8005226:	4618      	mov	r0, r3
 8005228:	3720      	adds	r7, #32
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b088      	sub	sp, #32
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
 8005236:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005238:	2300      	movs	r3, #0
 800523a:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8005240:	2306      	movs	r3, #6
 8005242:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005244:	2340      	movs	r3, #64	; 0x40
 8005246:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005248:	2300      	movs	r3, #0
 800524a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800524c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005250:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005252:	f107 0308 	add.w	r3, r7, #8
 8005256:	4619      	mov	r1, r3
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f7ff fde8 	bl	8004e2e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800525e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005262:	2106      	movs	r1, #6
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f000 f8db 	bl	8005420 <SDMMC_GetCmdResp1>
 800526a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800526c:	69fb      	ldr	r3, [r7, #28]
}
 800526e:	4618      	mov	r0, r3
 8005270:	3720      	adds	r7, #32
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}

08005276 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8005276:	b580      	push	{r7, lr}
 8005278:	b088      	sub	sp, #32
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800527e:	2300      	movs	r3, #0
 8005280:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8005282:	2300      	movs	r3, #0
 8005284:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8005286:	2333      	movs	r3, #51	; 0x33
 8005288:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800528a:	2340      	movs	r3, #64	; 0x40
 800528c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800528e:	2300      	movs	r3, #0
 8005290:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005292:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005296:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005298:	f107 0308 	add.w	r3, r7, #8
 800529c:	4619      	mov	r1, r3
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f7ff fdc5 	bl	8004e2e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80052a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80052a8:	2133      	movs	r1, #51	; 0x33
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 f8b8 	bl	8005420 <SDMMC_GetCmdResp1>
 80052b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80052b2:	69fb      	ldr	r3, [r7, #28]
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3720      	adds	r7, #32
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b088      	sub	sp, #32
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80052c4:	2300      	movs	r3, #0
 80052c6:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80052c8:	2300      	movs	r3, #0
 80052ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80052cc:	2302      	movs	r3, #2
 80052ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80052d0:	23c0      	movs	r3, #192	; 0xc0
 80052d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80052d4:	2300      	movs	r3, #0
 80052d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80052d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052dc:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80052de:	f107 0308 	add.w	r3, r7, #8
 80052e2:	4619      	mov	r1, r3
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f7ff fda2 	bl	8004e2e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 f97e 	bl	80055ec <SDMMC_GetCmdResp2>
 80052f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80052f2:	69fb      	ldr	r3, [r7, #28]
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3720      	adds	r7, #32
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b088      	sub	sp, #32
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005306:	2300      	movs	r3, #0
 8005308:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800530e:	2309      	movs	r3, #9
 8005310:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005312:	23c0      	movs	r3, #192	; 0xc0
 8005314:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005316:	2300      	movs	r3, #0
 8005318:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800531a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800531e:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005320:	f107 0308 	add.w	r3, r7, #8
 8005324:	4619      	mov	r1, r3
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f7ff fd81 	bl	8004e2e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 f95d 	bl	80055ec <SDMMC_GetCmdResp2>
 8005332:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005334:	69fb      	ldr	r3, [r7, #28]
}
 8005336:	4618      	mov	r0, r3
 8005338:	3720      	adds	r7, #32
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800533e:	b580      	push	{r7, lr}
 8005340:	b088      	sub	sp, #32
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
 8005346:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005348:	2300      	movs	r3, #0
 800534a:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800534c:	2300      	movs	r3, #0
 800534e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005350:	2303      	movs	r3, #3
 8005352:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005354:	2340      	movs	r3, #64	; 0x40
 8005356:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005358:	2300      	movs	r3, #0
 800535a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800535c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005360:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005362:	f107 0308 	add.w	r3, r7, #8
 8005366:	4619      	mov	r1, r3
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f7ff fd60 	bl	8004e2e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800536e:	683a      	ldr	r2, [r7, #0]
 8005370:	2103      	movs	r1, #3
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 f9ae 	bl	80056d4 <SDMMC_GetCmdResp6>
 8005378:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800537a:	69fb      	ldr	r3, [r7, #28]
}
 800537c:	4618      	mov	r0, r3
 800537e:	3720      	adds	r7, #32
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b088      	sub	sp, #32
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800538e:	2300      	movs	r3, #0
 8005390:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005396:	230d      	movs	r3, #13
 8005398:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800539a:	2340      	movs	r3, #64	; 0x40
 800539c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800539e:	2300      	movs	r3, #0
 80053a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80053a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053a6:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80053a8:	f107 0308 	add.w	r3, r7, #8
 80053ac:	4619      	mov	r1, r3
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f7ff fd3d 	bl	8004e2e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80053b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80053b8:	210d      	movs	r1, #13
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 f830 	bl	8005420 <SDMMC_GetCmdResp1>
 80053c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80053c2:	69fb      	ldr	r3, [r7, #28]
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3720      	adds	r7, #32
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80053cc:	b490      	push	{r4, r7}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80053d4:	4b10      	ldr	r3, [pc, #64]	; (8005418 <SDMMC_GetCmdError+0x4c>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a10      	ldr	r2, [pc, #64]	; (800541c <SDMMC_GetCmdError+0x50>)
 80053da:	fba2 2303 	umull	r2, r3, r2, r3
 80053de:	0a5b      	lsrs	r3, r3, #9
 80053e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80053e4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80053e8:	4623      	mov	r3, r4
 80053ea:	1e5c      	subs	r4, r3, #1
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d102      	bne.n	80053f6 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80053f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80053f4:	e00a      	b.n	800540c <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d0f2      	beq.n	80053e8 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005408:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3708      	adds	r7, #8
 8005410:	46bd      	mov	sp, r7
 8005412:	bc90      	pop	{r4, r7}
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	20000638 	.word	0x20000638
 800541c:	10624dd3 	.word	0x10624dd3

08005420 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005420:	b590      	push	{r4, r7, lr}
 8005422:	b087      	sub	sp, #28
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	460b      	mov	r3, r1
 800542a:	607a      	str	r2, [r7, #4]
 800542c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800542e:	4b6c      	ldr	r3, [pc, #432]	; (80055e0 <SDMMC_GetCmdResp1+0x1c0>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a6c      	ldr	r2, [pc, #432]	; (80055e4 <SDMMC_GetCmdResp1+0x1c4>)
 8005434:	fba2 2303 	umull	r2, r3, r2, r3
 8005438:	0a5b      	lsrs	r3, r3, #9
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005440:	4623      	mov	r3, r4
 8005442:	1e5c      	subs	r4, r3, #1
 8005444:	2b00      	cmp	r3, #0
 8005446:	d102      	bne.n	800544e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005448:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800544c:	e0c3      	b.n	80055d6 <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005452:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8005456:	2b00      	cmp	r3, #0
 8005458:	d0f2      	beq.n	8005440 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800545e:	f003 0304 	and.w	r3, r3, #4
 8005462:	2b00      	cmp	r3, #0
 8005464:	d004      	beq.n	8005470 <SDMMC_GetCmdResp1+0x50>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2204      	movs	r2, #4
 800546a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800546c:	2304      	movs	r3, #4
 800546e:	e0b2      	b.n	80055d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005474:	f003 0301 	and.w	r3, r3, #1
 8005478:	2b00      	cmp	r3, #0
 800547a:	d004      	beq.n	8005486 <SDMMC_GetCmdResp1+0x66>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2201      	movs	r2, #1
 8005480:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005482:	2301      	movs	r3, #1
 8005484:	e0a7      	b.n	80055d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	f7ff fcfb 	bl	8004e82 <SDIO_GetCommandResponse>
 800548c:	4603      	mov	r3, r0
 800548e:	461a      	mov	r2, r3
 8005490:	7afb      	ldrb	r3, [r7, #11]
 8005492:	4293      	cmp	r3, r2
 8005494:	d001      	beq.n	800549a <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005496:	2301      	movs	r3, #1
 8005498:	e09d      	b.n	80055d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80054a0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80054a2:	2100      	movs	r1, #0
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f7ff fcf9 	bl	8004e9c <SDIO_GetResponse>
 80054aa:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	4b4e      	ldr	r3, [pc, #312]	; (80055e8 <SDMMC_GetCmdResp1+0x1c8>)
 80054b0:	4013      	ands	r3, r2
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d101      	bne.n	80054ba <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 80054b6:	2300      	movs	r3, #0
 80054b8:	e08d      	b.n	80055d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	da02      	bge.n	80054c6 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80054c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80054c4:	e087      	b.n	80055d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d001      	beq.n	80054d4 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80054d0:	2340      	movs	r3, #64	; 0x40
 80054d2:	e080      	b.n	80055d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d001      	beq.n	80054e2 <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80054de:	2380      	movs	r3, #128	; 0x80
 80054e0:	e079      	b.n	80055d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d002      	beq.n	80054f2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80054ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80054f0:	e071      	b.n	80055d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d002      	beq.n	8005502 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80054fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005500:	e069      	b.n	80055d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005508:	2b00      	cmp	r3, #0
 800550a:	d002      	beq.n	8005512 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800550c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005510:	e061      	b.n	80055d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005518:	2b00      	cmp	r3, #0
 800551a:	d002      	beq.n	8005522 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800551c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005520:	e059      	b.n	80055d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005528:	2b00      	cmp	r3, #0
 800552a:	d002      	beq.n	8005532 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800552c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005530:	e051      	b.n	80055d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d002      	beq.n	8005542 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800553c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005540:	e049      	b.n	80055d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005548:	2b00      	cmp	r3, #0
 800554a:	d002      	beq.n	8005552 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800554c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005550:	e041      	b.n	80055d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005558:	2b00      	cmp	r3, #0
 800555a:	d002      	beq.n	8005562 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 800555c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005560:	e039      	b.n	80055d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005568:	2b00      	cmp	r3, #0
 800556a:	d002      	beq.n	8005572 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800556c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005570:	e031      	b.n	80055d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d002      	beq.n	8005582 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800557c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005580:	e029      	b.n	80055d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d002      	beq.n	8005592 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800558c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005590:	e021      	b.n	80055d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005598:	2b00      	cmp	r3, #0
 800559a:	d002      	beq.n	80055a2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800559c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80055a0:	e019      	b.n	80055d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d002      	beq.n	80055b2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80055ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80055b0:	e011      	b.n	80055d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d002      	beq.n	80055c2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80055bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80055c0:	e009      	b.n	80055d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	f003 0308 	and.w	r3, r3, #8
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d002      	beq.n	80055d2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80055cc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80055d0:	e001      	b.n	80055d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80055d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	371c      	adds	r7, #28
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd90      	pop	{r4, r7, pc}
 80055de:	bf00      	nop
 80055e0:	20000638 	.word	0x20000638
 80055e4:	10624dd3 	.word	0x10624dd3
 80055e8:	fdffe008 	.word	0xfdffe008

080055ec <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80055ec:	b490      	push	{r4, r7}
 80055ee:	b082      	sub	sp, #8
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80055f4:	4b1b      	ldr	r3, [pc, #108]	; (8005664 <SDMMC_GetCmdResp2+0x78>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a1b      	ldr	r2, [pc, #108]	; (8005668 <SDMMC_GetCmdResp2+0x7c>)
 80055fa:	fba2 2303 	umull	r2, r3, r2, r3
 80055fe:	0a5b      	lsrs	r3, r3, #9
 8005600:	f241 3288 	movw	r2, #5000	; 0x1388
 8005604:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005608:	4623      	mov	r3, r4
 800560a:	1e5c      	subs	r4, r3, #1
 800560c:	2b00      	cmp	r3, #0
 800560e:	d102      	bne.n	8005616 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005610:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005614:	e020      	b.n	8005658 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800561a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800561e:	2b00      	cmp	r3, #0
 8005620:	d0f2      	beq.n	8005608 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005626:	f003 0304 	and.w	r3, r3, #4
 800562a:	2b00      	cmp	r3, #0
 800562c:	d004      	beq.n	8005638 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2204      	movs	r2, #4
 8005632:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005634:	2304      	movs	r3, #4
 8005636:	e00f      	b.n	8005658 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800563c:	f003 0301 	and.w	r3, r3, #1
 8005640:	2b00      	cmp	r3, #0
 8005642:	d004      	beq.n	800564e <SDMMC_GetCmdResp2+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800564a:	2301      	movs	r3, #1
 800564c:	e004      	b.n	8005658 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005654:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	3708      	adds	r7, #8
 800565c:	46bd      	mov	sp, r7
 800565e:	bc90      	pop	{r4, r7}
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop
 8005664:	20000638 	.word	0x20000638
 8005668:	10624dd3 	.word	0x10624dd3

0800566c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800566c:	b490      	push	{r4, r7}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005674:	4b15      	ldr	r3, [pc, #84]	; (80056cc <SDMMC_GetCmdResp3+0x60>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a15      	ldr	r2, [pc, #84]	; (80056d0 <SDMMC_GetCmdResp3+0x64>)
 800567a:	fba2 2303 	umull	r2, r3, r2, r3
 800567e:	0a5b      	lsrs	r3, r3, #9
 8005680:	f241 3288 	movw	r2, #5000	; 0x1388
 8005684:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005688:	4623      	mov	r3, r4
 800568a:	1e5c      	subs	r4, r3, #1
 800568c:	2b00      	cmp	r3, #0
 800568e:	d102      	bne.n	8005696 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005690:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005694:	e015      	b.n	80056c2 <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800569a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d0f2      	beq.n	8005688 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056a6:	f003 0304 	and.w	r3, r3, #4
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d004      	beq.n	80056b8 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2204      	movs	r2, #4
 80056b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80056b4:	2304      	movs	r3, #4
 80056b6:	e004      	b.n	80056c2 <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80056be:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3708      	adds	r7, #8
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bc90      	pop	{r4, r7}
 80056ca:	4770      	bx	lr
 80056cc:	20000638 	.word	0x20000638
 80056d0:	10624dd3 	.word	0x10624dd3

080056d4 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80056d4:	b590      	push	{r4, r7, lr}
 80056d6:	b087      	sub	sp, #28
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	460b      	mov	r3, r1
 80056de:	607a      	str	r2, [r7, #4]
 80056e0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80056e2:	4b31      	ldr	r3, [pc, #196]	; (80057a8 <SDMMC_GetCmdResp6+0xd4>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a31      	ldr	r2, [pc, #196]	; (80057ac <SDMMC_GetCmdResp6+0xd8>)
 80056e8:	fba2 2303 	umull	r2, r3, r2, r3
 80056ec:	0a5b      	lsrs	r3, r3, #9
 80056ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80056f2:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80056f6:	4623      	mov	r3, r4
 80056f8:	1e5c      	subs	r4, r3, #1
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d102      	bne.n	8005704 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 80056fe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005702:	e04c      	b.n	800579e <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005708:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800570c:	2b00      	cmp	r3, #0
 800570e:	d0f2      	beq.n	80056f6 <SDMMC_GetCmdResp6+0x22>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005714:	f003 0304 	and.w	r3, r3, #4
 8005718:	2b00      	cmp	r3, #0
 800571a:	d004      	beq.n	8005726 <SDMMC_GetCmdResp6+0x52>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2204      	movs	r2, #4
 8005720:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005722:	2304      	movs	r3, #4
 8005724:	e03b      	b.n	800579e <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800572a:	f003 0301 	and.w	r3, r3, #1
 800572e:	2b00      	cmp	r3, #0
 8005730:	d004      	beq.n	800573c <SDMMC_GetCmdResp6+0x68>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2201      	movs	r2, #1
 8005736:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005738:	2301      	movs	r3, #1
 800573a:	e030      	b.n	800579e <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800573c:	68f8      	ldr	r0, [r7, #12]
 800573e:	f7ff fba0 	bl	8004e82 <SDIO_GetCommandResponse>
 8005742:	4603      	mov	r3, r0
 8005744:	461a      	mov	r2, r3
 8005746:	7afb      	ldrb	r3, [r7, #11]
 8005748:	4293      	cmp	r3, r2
 800574a:	d001      	beq.n	8005750 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800574c:	2301      	movs	r3, #1
 800574e:	e026      	b.n	800579e <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005756:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005758:	2100      	movs	r1, #0
 800575a:	68f8      	ldr	r0, [r7, #12]
 800575c:	f7ff fb9e 	bl	8004e9c <SDIO_GetResponse>
 8005760:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005768:	2b00      	cmp	r3, #0
 800576a:	d106      	bne.n	800577a <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	0c1b      	lsrs	r3, r3, #16
 8005770:	b29a      	uxth	r2, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005776:	2300      	movs	r3, #0
 8005778:	e011      	b.n	800579e <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005780:	2b00      	cmp	r3, #0
 8005782:	d002      	beq.n	800578a <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005784:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005788:	e009      	b.n	800579e <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005790:	2b00      	cmp	r3, #0
 8005792:	d002      	beq.n	800579a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005794:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005798:	e001      	b.n	800579e <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800579a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800579e:	4618      	mov	r0, r3
 80057a0:	371c      	adds	r7, #28
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd90      	pop	{r4, r7, pc}
 80057a6:	bf00      	nop
 80057a8:	20000638 	.word	0x20000638
 80057ac:	10624dd3 	.word	0x10624dd3

080057b0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80057b0:	b490      	push	{r4, r7}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80057b8:	4b18      	ldr	r3, [pc, #96]	; (800581c <SDMMC_GetCmdResp7+0x6c>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a18      	ldr	r2, [pc, #96]	; (8005820 <SDMMC_GetCmdResp7+0x70>)
 80057be:	fba2 2303 	umull	r2, r3, r2, r3
 80057c2:	0a5b      	lsrs	r3, r3, #9
 80057c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80057c8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80057cc:	4623      	mov	r3, r4
 80057ce:	1e5c      	subs	r4, r3, #1
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d102      	bne.n	80057da <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80057d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80057d8:	e01a      	b.n	8005810 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057de:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d0f2      	beq.n	80057cc <SDMMC_GetCmdResp7+0x1c>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ea:	f003 0304 	and.w	r3, r3, #4
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d004      	beq.n	80057fc <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2240      	movs	r2, #64	; 0x40
 80057f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80057f8:	2304      	movs	r3, #4
 80057fa:	e009      	b.n	8005810 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005804:	2b00      	cmp	r3, #0
 8005806:	d002      	beq.n	800580e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2240      	movs	r2, #64	; 0x40
 800580c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800580e:	2300      	movs	r3, #0
  
}
 8005810:	4618      	mov	r0, r3
 8005812:	3708      	adds	r7, #8
 8005814:	46bd      	mov	sp, r7
 8005816:	bc90      	pop	{r4, r7}
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	20000638 	.word	0x20000638
 8005820:	10624dd3 	.word	0x10624dd3

08005824 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	4603      	mov	r3, r0
 800582c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800582e:	79fb      	ldrb	r3, [r7, #7]
 8005830:	4a08      	ldr	r2, [pc, #32]	; (8005854 <disk_status+0x30>)
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	4413      	add	r3, r2
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	79fa      	ldrb	r2, [r7, #7]
 800583c:	4905      	ldr	r1, [pc, #20]	; (8005854 <disk_status+0x30>)
 800583e:	440a      	add	r2, r1
 8005840:	7a12      	ldrb	r2, [r2, #8]
 8005842:	4610      	mov	r0, r2
 8005844:	4798      	blx	r3
 8005846:	4603      	mov	r3, r0
 8005848:	73fb      	strb	r3, [r7, #15]
  return stat;
 800584a:	7bfb      	ldrb	r3, [r7, #15]
}
 800584c:	4618      	mov	r0, r3
 800584e:	3710      	adds	r7, #16
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	200006e4 	.word	0x200006e4

08005858 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	4603      	mov	r3, r0
 8005860:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005862:	2300      	movs	r3, #0
 8005864:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005866:	79fb      	ldrb	r3, [r7, #7]
 8005868:	4a0d      	ldr	r2, [pc, #52]	; (80058a0 <disk_initialize+0x48>)
 800586a:	5cd3      	ldrb	r3, [r2, r3]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d111      	bne.n	8005894 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005870:	79fb      	ldrb	r3, [r7, #7]
 8005872:	4a0b      	ldr	r2, [pc, #44]	; (80058a0 <disk_initialize+0x48>)
 8005874:	2101      	movs	r1, #1
 8005876:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005878:	79fb      	ldrb	r3, [r7, #7]
 800587a:	4a09      	ldr	r2, [pc, #36]	; (80058a0 <disk_initialize+0x48>)
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	4413      	add	r3, r2
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	79fa      	ldrb	r2, [r7, #7]
 8005886:	4906      	ldr	r1, [pc, #24]	; (80058a0 <disk_initialize+0x48>)
 8005888:	440a      	add	r2, r1
 800588a:	7a12      	ldrb	r2, [r2, #8]
 800588c:	4610      	mov	r0, r2
 800588e:	4798      	blx	r3
 8005890:	4603      	mov	r3, r0
 8005892:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005894:	7bfb      	ldrb	r3, [r7, #15]
}
 8005896:	4618      	mov	r0, r3
 8005898:	3710      	adds	r7, #16
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	200006e4 	.word	0x200006e4

080058a4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80058a4:	b590      	push	{r4, r7, lr}
 80058a6:	b087      	sub	sp, #28
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60b9      	str	r1, [r7, #8]
 80058ac:	607a      	str	r2, [r7, #4]
 80058ae:	603b      	str	r3, [r7, #0]
 80058b0:	4603      	mov	r3, r0
 80058b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80058b4:	7bfb      	ldrb	r3, [r7, #15]
 80058b6:	4a0a      	ldr	r2, [pc, #40]	; (80058e0 <disk_read+0x3c>)
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	4413      	add	r3, r2
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	689c      	ldr	r4, [r3, #8]
 80058c0:	7bfb      	ldrb	r3, [r7, #15]
 80058c2:	4a07      	ldr	r2, [pc, #28]	; (80058e0 <disk_read+0x3c>)
 80058c4:	4413      	add	r3, r2
 80058c6:	7a18      	ldrb	r0, [r3, #8]
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	68b9      	ldr	r1, [r7, #8]
 80058ce:	47a0      	blx	r4
 80058d0:	4603      	mov	r3, r0
 80058d2:	75fb      	strb	r3, [r7, #23]
  return res;
 80058d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	371c      	adds	r7, #28
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd90      	pop	{r4, r7, pc}
 80058de:	bf00      	nop
 80058e0:	200006e4 	.word	0x200006e4

080058e4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80058e4:	b590      	push	{r4, r7, lr}
 80058e6:	b087      	sub	sp, #28
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60b9      	str	r1, [r7, #8]
 80058ec:	607a      	str	r2, [r7, #4]
 80058ee:	603b      	str	r3, [r7, #0]
 80058f0:	4603      	mov	r3, r0
 80058f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80058f4:	7bfb      	ldrb	r3, [r7, #15]
 80058f6:	4a0a      	ldr	r2, [pc, #40]	; (8005920 <disk_write+0x3c>)
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	4413      	add	r3, r2
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	68dc      	ldr	r4, [r3, #12]
 8005900:	7bfb      	ldrb	r3, [r7, #15]
 8005902:	4a07      	ldr	r2, [pc, #28]	; (8005920 <disk_write+0x3c>)
 8005904:	4413      	add	r3, r2
 8005906:	7a18      	ldrb	r0, [r3, #8]
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	68b9      	ldr	r1, [r7, #8]
 800590e:	47a0      	blx	r4
 8005910:	4603      	mov	r3, r0
 8005912:	75fb      	strb	r3, [r7, #23]
  return res;
 8005914:	7dfb      	ldrb	r3, [r7, #23]
}
 8005916:	4618      	mov	r0, r3
 8005918:	371c      	adds	r7, #28
 800591a:	46bd      	mov	sp, r7
 800591c:	bd90      	pop	{r4, r7, pc}
 800591e:	bf00      	nop
 8005920:	200006e4 	.word	0x200006e4

08005924 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	4603      	mov	r3, r0
 800592c:	603a      	str	r2, [r7, #0]
 800592e:	71fb      	strb	r3, [r7, #7]
 8005930:	460b      	mov	r3, r1
 8005932:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005934:	79fb      	ldrb	r3, [r7, #7]
 8005936:	4a09      	ldr	r2, [pc, #36]	; (800595c <disk_ioctl+0x38>)
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	4413      	add	r3, r2
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	79fa      	ldrb	r2, [r7, #7]
 8005942:	4906      	ldr	r1, [pc, #24]	; (800595c <disk_ioctl+0x38>)
 8005944:	440a      	add	r2, r1
 8005946:	7a10      	ldrb	r0, [r2, #8]
 8005948:	79b9      	ldrb	r1, [r7, #6]
 800594a:	683a      	ldr	r2, [r7, #0]
 800594c:	4798      	blx	r3
 800594e:	4603      	mov	r3, r0
 8005950:	73fb      	strb	r3, [r7, #15]
  return res;
 8005952:	7bfb      	ldrb	r3, [r7, #15]
}
 8005954:	4618      	mov	r0, r3
 8005956:	3710      	adds	r7, #16
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}
 800595c:	200006e4 	.word	0x200006e4

08005960 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	3301      	adds	r3, #1
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005970:	89fb      	ldrh	r3, [r7, #14]
 8005972:	021b      	lsls	r3, r3, #8
 8005974:	b21a      	sxth	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	b21b      	sxth	r3, r3
 800597c:	4313      	orrs	r3, r2
 800597e:	b21b      	sxth	r3, r3
 8005980:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005982:	89fb      	ldrh	r3, [r7, #14]
}
 8005984:	4618      	mov	r0, r3
 8005986:	3714      	adds	r7, #20
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005990:	b480      	push	{r7}
 8005992:	b085      	sub	sp, #20
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	3303      	adds	r3, #3
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	021b      	lsls	r3, r3, #8
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	3202      	adds	r2, #2
 80059a8:	7812      	ldrb	r2, [r2, #0]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	021b      	lsls	r3, r3, #8
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	3201      	adds	r2, #1
 80059b6:	7812      	ldrb	r2, [r2, #0]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	021b      	lsls	r3, r3, #8
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	7812      	ldrb	r2, [r2, #0]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	60fb      	str	r3, [r7, #12]
	return rv;
 80059c8:	68fb      	ldr	r3, [r7, #12]
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3714      	adds	r7, #20
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr

080059d6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80059d6:	b480      	push	{r7}
 80059d8:	b083      	sub	sp, #12
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
 80059de:	460b      	mov	r3, r1
 80059e0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	1c5a      	adds	r2, r3, #1
 80059e6:	607a      	str	r2, [r7, #4]
 80059e8:	887a      	ldrh	r2, [r7, #2]
 80059ea:	b2d2      	uxtb	r2, r2
 80059ec:	701a      	strb	r2, [r3, #0]
 80059ee:	887b      	ldrh	r3, [r7, #2]
 80059f0:	0a1b      	lsrs	r3, r3, #8
 80059f2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	1c5a      	adds	r2, r3, #1
 80059f8:	607a      	str	r2, [r7, #4]
 80059fa:	887a      	ldrh	r2, [r7, #2]
 80059fc:	b2d2      	uxtb	r2, r2
 80059fe:	701a      	strb	r2, [r3, #0]
}
 8005a00:	bf00      	nop
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	1c5a      	adds	r2, r3, #1
 8005a1a:	607a      	str	r2, [r7, #4]
 8005a1c:	683a      	ldr	r2, [r7, #0]
 8005a1e:	b2d2      	uxtb	r2, r2
 8005a20:	701a      	strb	r2, [r3, #0]
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	0a1b      	lsrs	r3, r3, #8
 8005a26:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	1c5a      	adds	r2, r3, #1
 8005a2c:	607a      	str	r2, [r7, #4]
 8005a2e:	683a      	ldr	r2, [r7, #0]
 8005a30:	b2d2      	uxtb	r2, r2
 8005a32:	701a      	strb	r2, [r3, #0]
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	0a1b      	lsrs	r3, r3, #8
 8005a38:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	1c5a      	adds	r2, r3, #1
 8005a3e:	607a      	str	r2, [r7, #4]
 8005a40:	683a      	ldr	r2, [r7, #0]
 8005a42:	b2d2      	uxtb	r2, r2
 8005a44:	701a      	strb	r2, [r3, #0]
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	0a1b      	lsrs	r3, r3, #8
 8005a4a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	1c5a      	adds	r2, r3, #1
 8005a50:	607a      	str	r2, [r7, #4]
 8005a52:	683a      	ldr	r2, [r7, #0]
 8005a54:	b2d2      	uxtb	r2, r2
 8005a56:	701a      	strb	r2, [r3, #0]
}
 8005a58:	bf00      	nop
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005a64:	b480      	push	{r7}
 8005a66:	b087      	sub	sp, #28
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00d      	beq.n	8005a9a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005a7e:	693a      	ldr	r2, [r7, #16]
 8005a80:	1c53      	adds	r3, r2, #1
 8005a82:	613b      	str	r3, [r7, #16]
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	1c59      	adds	r1, r3, #1
 8005a88:	6179      	str	r1, [r7, #20]
 8005a8a:	7812      	ldrb	r2, [r2, #0]
 8005a8c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	3b01      	subs	r3, #1
 8005a92:	607b      	str	r3, [r7, #4]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d1f1      	bne.n	8005a7e <mem_cpy+0x1a>
	}
}
 8005a9a:	bf00      	nop
 8005a9c:	371c      	adds	r7, #28
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr

08005aa6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005aa6:	b480      	push	{r7}
 8005aa8:	b087      	sub	sp, #28
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	60f8      	str	r0, [r7, #12]
 8005aae:	60b9      	str	r1, [r7, #8]
 8005ab0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	1c5a      	adds	r2, r3, #1
 8005aba:	617a      	str	r2, [r7, #20]
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	b2d2      	uxtb	r2, r2
 8005ac0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	3b01      	subs	r3, #1
 8005ac6:	607b      	str	r3, [r7, #4]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d1f3      	bne.n	8005ab6 <mem_set+0x10>
}
 8005ace:	bf00      	nop
 8005ad0:	371c      	adds	r7, #28
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr

08005ada <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005ada:	b480      	push	{r7}
 8005adc:	b089      	sub	sp, #36	; 0x24
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	60f8      	str	r0, [r7, #12]
 8005ae2:	60b9      	str	r1, [r7, #8]
 8005ae4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	61fb      	str	r3, [r7, #28]
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005aee:	2300      	movs	r3, #0
 8005af0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	1c5a      	adds	r2, r3, #1
 8005af6:	61fa      	str	r2, [r7, #28]
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	4619      	mov	r1, r3
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	1c5a      	adds	r2, r3, #1
 8005b00:	61ba      	str	r2, [r7, #24]
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	1acb      	subs	r3, r1, r3
 8005b06:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	607b      	str	r3, [r7, #4]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d002      	beq.n	8005b1a <mem_cmp+0x40>
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d0eb      	beq.n	8005af2 <mem_cmp+0x18>

	return r;
 8005b1a:	697b      	ldr	r3, [r7, #20]
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3724      	adds	r7, #36	; 0x24
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005b32:	e002      	b.n	8005b3a <chk_chr+0x12>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	3301      	adds	r3, #1
 8005b38:	607b      	str	r3, [r7, #4]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d005      	beq.n	8005b4e <chk_chr+0x26>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	461a      	mov	r2, r3
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d1f2      	bne.n	8005b34 <chk_chr+0xc>
	return *str;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	781b      	ldrb	r3, [r3, #0]
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	370c      	adds	r7, #12
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr

08005b5e <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8005b5e:	b580      	push	{r7, lr}
 8005b60:	b082      	sub	sp, #8
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d009      	beq.n	8005b80 <lock_fs+0x22>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	4618      	mov	r0, r3
 8005b72:	f002 fff0 	bl	8008b56 <ff_req_grant>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d001      	beq.n	8005b80 <lock_fs+0x22>
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e000      	b.n	8005b82 <lock_fs+0x24>
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3708      	adds	r7, #8
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8005b8a:	b580      	push	{r7, lr}
 8005b8c:	b082      	sub	sp, #8
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
 8005b92:	460b      	mov	r3, r1
 8005b94:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d00d      	beq.n	8005bb8 <unlock_fs+0x2e>
 8005b9c:	78fb      	ldrb	r3, [r7, #3]
 8005b9e:	2b0c      	cmp	r3, #12
 8005ba0:	d00a      	beq.n	8005bb8 <unlock_fs+0x2e>
 8005ba2:	78fb      	ldrb	r3, [r7, #3]
 8005ba4:	2b0b      	cmp	r3, #11
 8005ba6:	d007      	beq.n	8005bb8 <unlock_fs+0x2e>
 8005ba8:	78fb      	ldrb	r3, [r7, #3]
 8005baa:	2b0f      	cmp	r3, #15
 8005bac:	d004      	beq.n	8005bb8 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f002 ffe4 	bl	8008b80 <ff_rel_grant>
	}
}
 8005bb8:	bf00      	nop
 8005bba:	3708      	adds	r7, #8
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b085      	sub	sp, #20
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005bca:	2300      	movs	r3, #0
 8005bcc:	60bb      	str	r3, [r7, #8]
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	60fb      	str	r3, [r7, #12]
 8005bd2:	e029      	b.n	8005c28 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005bd4:	4a27      	ldr	r2, [pc, #156]	; (8005c74 <chk_lock+0xb4>)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	011b      	lsls	r3, r3, #4
 8005bda:	4413      	add	r3, r2
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d01d      	beq.n	8005c1e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005be2:	4a24      	ldr	r2, [pc, #144]	; (8005c74 <chk_lock+0xb4>)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	011b      	lsls	r3, r3, #4
 8005be8:	4413      	add	r3, r2
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d116      	bne.n	8005c22 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005bf4:	4a1f      	ldr	r2, [pc, #124]	; (8005c74 <chk_lock+0xb4>)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	011b      	lsls	r3, r3, #4
 8005bfa:	4413      	add	r3, r2
 8005bfc:	3304      	adds	r3, #4
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d10c      	bne.n	8005c22 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005c08:	4a1a      	ldr	r2, [pc, #104]	; (8005c74 <chk_lock+0xb4>)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	011b      	lsls	r3, r3, #4
 8005c0e:	4413      	add	r3, r2
 8005c10:	3308      	adds	r3, #8
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d102      	bne.n	8005c22 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005c1c:	e007      	b.n	8005c2e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	3301      	adds	r3, #1
 8005c26:	60fb      	str	r3, [r7, #12]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d9d2      	bls.n	8005bd4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d109      	bne.n	8005c48 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d102      	bne.n	8005c40 <chk_lock+0x80>
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d101      	bne.n	8005c44 <chk_lock+0x84>
 8005c40:	2300      	movs	r3, #0
 8005c42:	e010      	b.n	8005c66 <chk_lock+0xa6>
 8005c44:	2312      	movs	r3, #18
 8005c46:	e00e      	b.n	8005c66 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d108      	bne.n	8005c60 <chk_lock+0xa0>
 8005c4e:	4a09      	ldr	r2, [pc, #36]	; (8005c74 <chk_lock+0xb4>)
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	011b      	lsls	r3, r3, #4
 8005c54:	4413      	add	r3, r2
 8005c56:	330c      	adds	r3, #12
 8005c58:	881b      	ldrh	r3, [r3, #0]
 8005c5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c5e:	d101      	bne.n	8005c64 <chk_lock+0xa4>
 8005c60:	2310      	movs	r3, #16
 8005c62:	e000      	b.n	8005c66 <chk_lock+0xa6>
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3714      	adds	r7, #20
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop
 8005c74:	200006c4 	.word	0x200006c4

08005c78 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	607b      	str	r3, [r7, #4]
 8005c82:	e002      	b.n	8005c8a <enq_lock+0x12>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	3301      	adds	r3, #1
 8005c88:	607b      	str	r3, [r7, #4]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d806      	bhi.n	8005c9e <enq_lock+0x26>
 8005c90:	4a09      	ldr	r2, [pc, #36]	; (8005cb8 <enq_lock+0x40>)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	011b      	lsls	r3, r3, #4
 8005c96:	4413      	add	r3, r2
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d1f2      	bne.n	8005c84 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	bf14      	ite	ne
 8005ca4:	2301      	movne	r3, #1
 8005ca6:	2300      	moveq	r3, #0
 8005ca8:	b2db      	uxtb	r3, r3
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	370c      	adds	r7, #12
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr
 8005cb6:	bf00      	nop
 8005cb8:	200006c4 	.word	0x200006c4

08005cbc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b085      	sub	sp, #20
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	60fb      	str	r3, [r7, #12]
 8005cca:	e01f      	b.n	8005d0c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005ccc:	4a41      	ldr	r2, [pc, #260]	; (8005dd4 <inc_lock+0x118>)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	011b      	lsls	r3, r3, #4
 8005cd2:	4413      	add	r3, r2
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d113      	bne.n	8005d06 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005cde:	4a3d      	ldr	r2, [pc, #244]	; (8005dd4 <inc_lock+0x118>)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	011b      	lsls	r3, r3, #4
 8005ce4:	4413      	add	r3, r2
 8005ce6:	3304      	adds	r3, #4
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d109      	bne.n	8005d06 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005cf2:	4a38      	ldr	r2, [pc, #224]	; (8005dd4 <inc_lock+0x118>)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	011b      	lsls	r3, r3, #4
 8005cf8:	4413      	add	r3, r2
 8005cfa:	3308      	adds	r3, #8
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d006      	beq.n	8005d14 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	3301      	adds	r3, #1
 8005d0a:	60fb      	str	r3, [r7, #12]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d9dc      	bls.n	8005ccc <inc_lock+0x10>
 8005d12:	e000      	b.n	8005d16 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005d14:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2b02      	cmp	r3, #2
 8005d1a:	d132      	bne.n	8005d82 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	60fb      	str	r3, [r7, #12]
 8005d20:	e002      	b.n	8005d28 <inc_lock+0x6c>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	3301      	adds	r3, #1
 8005d26:	60fb      	str	r3, [r7, #12]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d806      	bhi.n	8005d3c <inc_lock+0x80>
 8005d2e:	4a29      	ldr	r2, [pc, #164]	; (8005dd4 <inc_lock+0x118>)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	011b      	lsls	r3, r3, #4
 8005d34:	4413      	add	r3, r2
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d1f2      	bne.n	8005d22 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	d101      	bne.n	8005d46 <inc_lock+0x8a>
 8005d42:	2300      	movs	r3, #0
 8005d44:	e040      	b.n	8005dc8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	4922      	ldr	r1, [pc, #136]	; (8005dd4 <inc_lock+0x118>)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	011b      	lsls	r3, r3, #4
 8005d50:	440b      	add	r3, r1
 8005d52:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	689a      	ldr	r2, [r3, #8]
 8005d58:	491e      	ldr	r1, [pc, #120]	; (8005dd4 <inc_lock+0x118>)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	011b      	lsls	r3, r3, #4
 8005d5e:	440b      	add	r3, r1
 8005d60:	3304      	adds	r3, #4
 8005d62:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	695a      	ldr	r2, [r3, #20]
 8005d68:	491a      	ldr	r1, [pc, #104]	; (8005dd4 <inc_lock+0x118>)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	011b      	lsls	r3, r3, #4
 8005d6e:	440b      	add	r3, r1
 8005d70:	3308      	adds	r3, #8
 8005d72:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005d74:	4a17      	ldr	r2, [pc, #92]	; (8005dd4 <inc_lock+0x118>)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	011b      	lsls	r3, r3, #4
 8005d7a:	4413      	add	r3, r2
 8005d7c:	330c      	adds	r3, #12
 8005d7e:	2200      	movs	r2, #0
 8005d80:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d009      	beq.n	8005d9c <inc_lock+0xe0>
 8005d88:	4a12      	ldr	r2, [pc, #72]	; (8005dd4 <inc_lock+0x118>)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	011b      	lsls	r3, r3, #4
 8005d8e:	4413      	add	r3, r2
 8005d90:	330c      	adds	r3, #12
 8005d92:	881b      	ldrh	r3, [r3, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d001      	beq.n	8005d9c <inc_lock+0xe0>
 8005d98:	2300      	movs	r3, #0
 8005d9a:	e015      	b.n	8005dc8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d108      	bne.n	8005db4 <inc_lock+0xf8>
 8005da2:	4a0c      	ldr	r2, [pc, #48]	; (8005dd4 <inc_lock+0x118>)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	011b      	lsls	r3, r3, #4
 8005da8:	4413      	add	r3, r2
 8005daa:	330c      	adds	r3, #12
 8005dac:	881b      	ldrh	r3, [r3, #0]
 8005dae:	3301      	adds	r3, #1
 8005db0:	b29a      	uxth	r2, r3
 8005db2:	e001      	b.n	8005db8 <inc_lock+0xfc>
 8005db4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005db8:	4906      	ldr	r1, [pc, #24]	; (8005dd4 <inc_lock+0x118>)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	011b      	lsls	r3, r3, #4
 8005dbe:	440b      	add	r3, r1
 8005dc0:	330c      	adds	r3, #12
 8005dc2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	3301      	adds	r3, #1
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3714      	adds	r7, #20
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr
 8005dd4:	200006c4 	.word	0x200006c4

08005dd8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	3b01      	subs	r3, #1
 8005de4:	607b      	str	r3, [r7, #4]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d825      	bhi.n	8005e38 <dec_lock+0x60>
		n = Files[i].ctr;
 8005dec:	4a17      	ldr	r2, [pc, #92]	; (8005e4c <dec_lock+0x74>)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	011b      	lsls	r3, r3, #4
 8005df2:	4413      	add	r3, r2
 8005df4:	330c      	adds	r3, #12
 8005df6:	881b      	ldrh	r3, [r3, #0]
 8005df8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005dfa:	89fb      	ldrh	r3, [r7, #14]
 8005dfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e00:	d101      	bne.n	8005e06 <dec_lock+0x2e>
 8005e02:	2300      	movs	r3, #0
 8005e04:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005e06:	89fb      	ldrh	r3, [r7, #14]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d002      	beq.n	8005e12 <dec_lock+0x3a>
 8005e0c:	89fb      	ldrh	r3, [r7, #14]
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005e12:	4a0e      	ldr	r2, [pc, #56]	; (8005e4c <dec_lock+0x74>)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	011b      	lsls	r3, r3, #4
 8005e18:	4413      	add	r3, r2
 8005e1a:	330c      	adds	r3, #12
 8005e1c:	89fa      	ldrh	r2, [r7, #14]
 8005e1e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005e20:	89fb      	ldrh	r3, [r7, #14]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d105      	bne.n	8005e32 <dec_lock+0x5a>
 8005e26:	4a09      	ldr	r2, [pc, #36]	; (8005e4c <dec_lock+0x74>)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	011b      	lsls	r3, r3, #4
 8005e2c:	4413      	add	r3, r2
 8005e2e:	2200      	movs	r2, #0
 8005e30:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005e32:	2300      	movs	r3, #0
 8005e34:	737b      	strb	r3, [r7, #13]
 8005e36:	e001      	b.n	8005e3c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005e38:	2302      	movs	r3, #2
 8005e3a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005e3c:	7b7b      	ldrb	r3, [r7, #13]
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3714      	adds	r7, #20
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop
 8005e4c:	200006c4 	.word	0x200006c4

08005e50 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005e58:	2300      	movs	r3, #0
 8005e5a:	60fb      	str	r3, [r7, #12]
 8005e5c:	e010      	b.n	8005e80 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005e5e:	4a0d      	ldr	r2, [pc, #52]	; (8005e94 <clear_lock+0x44>)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	011b      	lsls	r3, r3, #4
 8005e64:	4413      	add	r3, r2
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d105      	bne.n	8005e7a <clear_lock+0x2a>
 8005e6e:	4a09      	ldr	r2, [pc, #36]	; (8005e94 <clear_lock+0x44>)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	011b      	lsls	r3, r3, #4
 8005e74:	4413      	add	r3, r2
 8005e76:	2200      	movs	r2, #0
 8005e78:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	60fb      	str	r3, [r7, #12]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d9eb      	bls.n	8005e5e <clear_lock+0xe>
	}
}
 8005e86:	bf00      	nop
 8005e88:	3714      	adds	r7, #20
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	200006c4 	.word	0x200006c4

08005e98 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b086      	sub	sp, #24
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	78db      	ldrb	r3, [r3, #3]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d034      	beq.n	8005f16 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	7858      	ldrb	r0, [r3, #1]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	697a      	ldr	r2, [r7, #20]
 8005ec0:	f7ff fd10 	bl	80058e4 <disk_write>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d002      	beq.n	8005ed0 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	73fb      	strb	r3, [r7, #15]
 8005ece:	e022      	b.n	8005f16 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eda:	697a      	ldr	r2, [r7, #20]
 8005edc:	1ad2      	subs	r2, r2, r3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	69db      	ldr	r3, [r3, #28]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d217      	bcs.n	8005f16 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	789b      	ldrb	r3, [r3, #2]
 8005eea:	613b      	str	r3, [r7, #16]
 8005eec:	e010      	b.n	8005f10 <sync_window+0x78>
					wsect += fs->fsize;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	69db      	ldr	r3, [r3, #28]
 8005ef2:	697a      	ldr	r2, [r7, #20]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	7858      	ldrb	r0, [r3, #1]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005f02:	2301      	movs	r3, #1
 8005f04:	697a      	ldr	r2, [r7, #20]
 8005f06:	f7ff fced 	bl	80058e4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	3b01      	subs	r3, #1
 8005f0e:	613b      	str	r3, [r7, #16]
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d8eb      	bhi.n	8005eee <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3718      	adds	r7, #24
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f32:	683a      	ldr	r2, [r7, #0]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d01b      	beq.n	8005f70 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f7ff ffad 	bl	8005e98 <sync_window>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005f42:	7bfb      	ldrb	r3, [r7, #15]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d113      	bne.n	8005f70 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	7858      	ldrb	r0, [r3, #1]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005f52:	2301      	movs	r3, #1
 8005f54:	683a      	ldr	r2, [r7, #0]
 8005f56:	f7ff fca5 	bl	80058a4 <disk_read>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d004      	beq.n	8005f6a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005f60:	f04f 33ff 	mov.w	r3, #4294967295
 8005f64:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	683a      	ldr	r2, [r7, #0]
 8005f6e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8005f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3710      	adds	r7, #16
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
	...

08005f7c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f7ff ff87 	bl	8005e98 <sync_window>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005f8e:	7bfb      	ldrb	r3, [r7, #15]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d158      	bne.n	8006046 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	2b03      	cmp	r3, #3
 8005f9a:	d148      	bne.n	800602e <sync_fs+0xb2>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	791b      	ldrb	r3, [r3, #4]
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d144      	bne.n	800602e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	3334      	adds	r3, #52	; 0x34
 8005fa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fac:	2100      	movs	r1, #0
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f7ff fd79 	bl	8005aa6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	3334      	adds	r3, #52	; 0x34
 8005fb8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005fbc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f7ff fd08 	bl	80059d6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	3334      	adds	r3, #52	; 0x34
 8005fca:	4921      	ldr	r1, [pc, #132]	; (8006050 <sync_fs+0xd4>)
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f7ff fd1d 	bl	8005a0c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	3334      	adds	r3, #52	; 0x34
 8005fd6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005fda:	491e      	ldr	r1, [pc, #120]	; (8006054 <sync_fs+0xd8>)
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f7ff fd15 	bl	8005a0c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	3334      	adds	r3, #52	; 0x34
 8005fe6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	695b      	ldr	r3, [r3, #20]
 8005fee:	4619      	mov	r1, r3
 8005ff0:	4610      	mov	r0, r2
 8005ff2:	f7ff fd0b 	bl	8005a0c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	3334      	adds	r3, #52	; 0x34
 8005ffa:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	4619      	mov	r1, r3
 8006004:	4610      	mov	r0, r2
 8006006:	f7ff fd01 	bl	8005a0c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a1b      	ldr	r3, [r3, #32]
 800600e:	1c5a      	adds	r2, r3, #1
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	7858      	ldrb	r0, [r3, #1]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006022:	2301      	movs	r3, #1
 8006024:	f7ff fc5e 	bl	80058e4 <disk_write>
			fs->fsi_flag = 0;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	785b      	ldrb	r3, [r3, #1]
 8006032:	2200      	movs	r2, #0
 8006034:	2100      	movs	r1, #0
 8006036:	4618      	mov	r0, r3
 8006038:	f7ff fc74 	bl	8005924 <disk_ioctl>
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d001      	beq.n	8006046 <sync_fs+0xca>
 8006042:	2301      	movs	r3, #1
 8006044:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006046:	7bfb      	ldrb	r3, [r7, #15]
}
 8006048:	4618      	mov	r0, r3
 800604a:	3710      	adds	r7, #16
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}
 8006050:	41615252 	.word	0x41615252
 8006054:	61417272 	.word	0x61417272

08006058 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	3b02      	subs	r3, #2
 8006066:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	699b      	ldr	r3, [r3, #24]
 800606c:	3b02      	subs	r3, #2
 800606e:	683a      	ldr	r2, [r7, #0]
 8006070:	429a      	cmp	r2, r3
 8006072:	d301      	bcc.n	8006078 <clust2sect+0x20>
 8006074:	2300      	movs	r3, #0
 8006076:	e008      	b.n	800608a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	895b      	ldrh	r3, [r3, #10]
 800607c:	461a      	mov	r2, r3
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	fb03 f202 	mul.w	r2, r3, r2
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006088:	4413      	add	r3, r2
}
 800608a:	4618      	mov	r0, r3
 800608c:	370c      	adds	r7, #12
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr

08006096 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006096:	b580      	push	{r7, lr}
 8006098:	b086      	sub	sp, #24
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
 800609e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d904      	bls.n	80060b6 <get_fat+0x20>
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	699b      	ldr	r3, [r3, #24]
 80060b0:	683a      	ldr	r2, [r7, #0]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d302      	bcc.n	80060bc <get_fat+0x26>
		val = 1;	/* Internal error */
 80060b6:	2301      	movs	r3, #1
 80060b8:	617b      	str	r3, [r7, #20]
 80060ba:	e08c      	b.n	80061d6 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80060bc:	f04f 33ff 	mov.w	r3, #4294967295
 80060c0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d045      	beq.n	8006156 <get_fat+0xc0>
 80060ca:	2b03      	cmp	r3, #3
 80060cc:	d05d      	beq.n	800618a <get_fat+0xf4>
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d177      	bne.n	80061c2 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	60fb      	str	r3, [r7, #12]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	085b      	lsrs	r3, r3, #1
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	4413      	add	r3, r2
 80060de:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	0a5b      	lsrs	r3, r3, #9
 80060e8:	4413      	add	r3, r2
 80060ea:	4619      	mov	r1, r3
 80060ec:	6938      	ldr	r0, [r7, #16]
 80060ee:	f7ff ff17 	bl	8005f20 <move_window>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d167      	bne.n	80061c8 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	1c5a      	adds	r2, r3, #1
 80060fc:	60fa      	str	r2, [r7, #12]
 80060fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006102:	693a      	ldr	r2, [r7, #16]
 8006104:	4413      	add	r3, r2
 8006106:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800610a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	0a5b      	lsrs	r3, r3, #9
 8006114:	4413      	add	r3, r2
 8006116:	4619      	mov	r1, r3
 8006118:	6938      	ldr	r0, [r7, #16]
 800611a:	f7ff ff01 	bl	8005f20 <move_window>
 800611e:	4603      	mov	r3, r0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d153      	bne.n	80061cc <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800612a:	693a      	ldr	r2, [r7, #16]
 800612c:	4413      	add	r3, r2
 800612e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006132:	021b      	lsls	r3, r3, #8
 8006134:	461a      	mov	r2, r3
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	4313      	orrs	r3, r2
 800613a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	f003 0301 	and.w	r3, r3, #1
 8006142:	2b00      	cmp	r3, #0
 8006144:	d002      	beq.n	800614c <get_fat+0xb6>
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	091b      	lsrs	r3, r3, #4
 800614a:	e002      	b.n	8006152 <get_fat+0xbc>
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006152:	617b      	str	r3, [r7, #20]
			break;
 8006154:	e03f      	b.n	80061d6 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	0a1b      	lsrs	r3, r3, #8
 800615e:	4413      	add	r3, r2
 8006160:	4619      	mov	r1, r3
 8006162:	6938      	ldr	r0, [r7, #16]
 8006164:	f7ff fedc 	bl	8005f20 <move_window>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d130      	bne.n	80061d0 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	005b      	lsls	r3, r3, #1
 8006178:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800617c:	4413      	add	r3, r2
 800617e:	4618      	mov	r0, r3
 8006180:	f7ff fbee 	bl	8005960 <ld_word>
 8006184:	4603      	mov	r3, r0
 8006186:	617b      	str	r3, [r7, #20]
			break;
 8006188:	e025      	b.n	80061d6 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	09db      	lsrs	r3, r3, #7
 8006192:	4413      	add	r3, r2
 8006194:	4619      	mov	r1, r3
 8006196:	6938      	ldr	r0, [r7, #16]
 8006198:	f7ff fec2 	bl	8005f20 <move_window>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d118      	bne.n	80061d4 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80061b0:	4413      	add	r3, r2
 80061b2:	4618      	mov	r0, r3
 80061b4:	f7ff fbec 	bl	8005990 <ld_dword>
 80061b8:	4603      	mov	r3, r0
 80061ba:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80061be:	617b      	str	r3, [r7, #20]
			break;
 80061c0:	e009      	b.n	80061d6 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80061c2:	2301      	movs	r3, #1
 80061c4:	617b      	str	r3, [r7, #20]
 80061c6:	e006      	b.n	80061d6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80061c8:	bf00      	nop
 80061ca:	e004      	b.n	80061d6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80061cc:	bf00      	nop
 80061ce:	e002      	b.n	80061d6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80061d0:	bf00      	nop
 80061d2:	e000      	b.n	80061d6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80061d4:	bf00      	nop
		}
	}

	return val;
 80061d6:	697b      	ldr	r3, [r7, #20]
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3718      	adds	r7, #24
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80061e0:	b590      	push	{r4, r7, lr}
 80061e2:	b089      	sub	sp, #36	; 0x24
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80061ec:	2302      	movs	r3, #2
 80061ee:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	f240 80d6 	bls.w	80063a4 <put_fat+0x1c4>
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	699b      	ldr	r3, [r3, #24]
 80061fc:	68ba      	ldr	r2, [r7, #8]
 80061fe:	429a      	cmp	r2, r3
 8006200:	f080 80d0 	bcs.w	80063a4 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	2b02      	cmp	r3, #2
 800620a:	d073      	beq.n	80062f4 <put_fat+0x114>
 800620c:	2b03      	cmp	r3, #3
 800620e:	f000 8091 	beq.w	8006334 <put_fat+0x154>
 8006212:	2b01      	cmp	r3, #1
 8006214:	f040 80c6 	bne.w	80063a4 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	61bb      	str	r3, [r7, #24]
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	085b      	lsrs	r3, r3, #1
 8006220:	69ba      	ldr	r2, [r7, #24]
 8006222:	4413      	add	r3, r2
 8006224:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	0a5b      	lsrs	r3, r3, #9
 800622e:	4413      	add	r3, r2
 8006230:	4619      	mov	r1, r3
 8006232:	68f8      	ldr	r0, [r7, #12]
 8006234:	f7ff fe74 	bl	8005f20 <move_window>
 8006238:	4603      	mov	r3, r0
 800623a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800623c:	7ffb      	ldrb	r3, [r7, #31]
 800623e:	2b00      	cmp	r3, #0
 8006240:	f040 80a9 	bne.w	8006396 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	1c59      	adds	r1, r3, #1
 800624e:	61b9      	str	r1, [r7, #24]
 8006250:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006254:	4413      	add	r3, r2
 8006256:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	f003 0301 	and.w	r3, r3, #1
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00d      	beq.n	800627e <put_fat+0x9e>
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	b25b      	sxtb	r3, r3
 8006268:	f003 030f 	and.w	r3, r3, #15
 800626c:	b25a      	sxtb	r2, r3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	b2db      	uxtb	r3, r3
 8006272:	011b      	lsls	r3, r3, #4
 8006274:	b25b      	sxtb	r3, r3
 8006276:	4313      	orrs	r3, r2
 8006278:	b25b      	sxtb	r3, r3
 800627a:	b2db      	uxtb	r3, r3
 800627c:	e001      	b.n	8006282 <put_fat+0xa2>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	b2db      	uxtb	r3, r3
 8006282:	697a      	ldr	r2, [r7, #20]
 8006284:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2201      	movs	r2, #1
 800628a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	0a5b      	lsrs	r3, r3, #9
 8006294:	4413      	add	r3, r2
 8006296:	4619      	mov	r1, r3
 8006298:	68f8      	ldr	r0, [r7, #12]
 800629a:	f7ff fe41 	bl	8005f20 <move_window>
 800629e:	4603      	mov	r3, r0
 80062a0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80062a2:	7ffb      	ldrb	r3, [r7, #31]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d178      	bne.n	800639a <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062b4:	4413      	add	r3, r2
 80062b6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	f003 0301 	and.w	r3, r3, #1
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d003      	beq.n	80062ca <put_fat+0xea>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	091b      	lsrs	r3, r3, #4
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	e00e      	b.n	80062e8 <put_fat+0x108>
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	b25b      	sxtb	r3, r3
 80062d0:	f023 030f 	bic.w	r3, r3, #15
 80062d4:	b25a      	sxtb	r2, r3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	0a1b      	lsrs	r3, r3, #8
 80062da:	b25b      	sxtb	r3, r3
 80062dc:	f003 030f 	and.w	r3, r3, #15
 80062e0:	b25b      	sxtb	r3, r3
 80062e2:	4313      	orrs	r3, r2
 80062e4:	b25b      	sxtb	r3, r3
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	697a      	ldr	r2, [r7, #20]
 80062ea:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2201      	movs	r2, #1
 80062f0:	70da      	strb	r2, [r3, #3]
			break;
 80062f2:	e057      	b.n	80063a4 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	0a1b      	lsrs	r3, r3, #8
 80062fc:	4413      	add	r3, r2
 80062fe:	4619      	mov	r1, r3
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f7ff fe0d 	bl	8005f20 <move_window>
 8006306:	4603      	mov	r3, r0
 8006308:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800630a:	7ffb      	ldrb	r3, [r7, #31]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d146      	bne.n	800639e <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	005b      	lsls	r3, r3, #1
 800631a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800631e:	4413      	add	r3, r2
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	b292      	uxth	r2, r2
 8006324:	4611      	mov	r1, r2
 8006326:	4618      	mov	r0, r3
 8006328:	f7ff fb55 	bl	80059d6 <st_word>
			fs->wflag = 1;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2201      	movs	r2, #1
 8006330:	70da      	strb	r2, [r3, #3]
			break;
 8006332:	e037      	b.n	80063a4 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	09db      	lsrs	r3, r3, #7
 800633c:	4413      	add	r3, r2
 800633e:	4619      	mov	r1, r3
 8006340:	68f8      	ldr	r0, [r7, #12]
 8006342:	f7ff fded 	bl	8005f20 <move_window>
 8006346:	4603      	mov	r3, r0
 8006348:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800634a:	7ffb      	ldrb	r3, [r7, #31]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d128      	bne.n	80063a2 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006364:	4413      	add	r3, r2
 8006366:	4618      	mov	r0, r3
 8006368:	f7ff fb12 	bl	8005990 <ld_dword>
 800636c:	4603      	mov	r3, r0
 800636e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006372:	4323      	orrs	r3, r4
 8006374:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	009b      	lsls	r3, r3, #2
 8006380:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006384:	4413      	add	r3, r2
 8006386:	6879      	ldr	r1, [r7, #4]
 8006388:	4618      	mov	r0, r3
 800638a:	f7ff fb3f 	bl	8005a0c <st_dword>
			fs->wflag = 1;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2201      	movs	r2, #1
 8006392:	70da      	strb	r2, [r3, #3]
			break;
 8006394:	e006      	b.n	80063a4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8006396:	bf00      	nop
 8006398:	e004      	b.n	80063a4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800639a:	bf00      	nop
 800639c:	e002      	b.n	80063a4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800639e:	bf00      	nop
 80063a0:	e000      	b.n	80063a4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80063a2:	bf00      	nop
		}
	}
	return res;
 80063a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3724      	adds	r7, #36	; 0x24
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd90      	pop	{r4, r7, pc}

080063ae <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80063ae:	b580      	push	{r7, lr}
 80063b0:	b088      	sub	sp, #32
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	60f8      	str	r0, [r7, #12]
 80063b6:	60b9      	str	r1, [r7, #8]
 80063b8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80063ba:	2300      	movs	r3, #0
 80063bc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d904      	bls.n	80063d4 <remove_chain+0x26>
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	699b      	ldr	r3, [r3, #24]
 80063ce:	68ba      	ldr	r2, [r7, #8]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d301      	bcc.n	80063d8 <remove_chain+0x2a>
 80063d4:	2302      	movs	r3, #2
 80063d6:	e04b      	b.n	8006470 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00c      	beq.n	80063f8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80063de:	f04f 32ff 	mov.w	r2, #4294967295
 80063e2:	6879      	ldr	r1, [r7, #4]
 80063e4:	69b8      	ldr	r0, [r7, #24]
 80063e6:	f7ff fefb 	bl	80061e0 <put_fat>
 80063ea:	4603      	mov	r3, r0
 80063ec:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80063ee:	7ffb      	ldrb	r3, [r7, #31]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d001      	beq.n	80063f8 <remove_chain+0x4a>
 80063f4:	7ffb      	ldrb	r3, [r7, #31]
 80063f6:	e03b      	b.n	8006470 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80063f8:	68b9      	ldr	r1, [r7, #8]
 80063fa:	68f8      	ldr	r0, [r7, #12]
 80063fc:	f7ff fe4b 	bl	8006096 <get_fat>
 8006400:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d031      	beq.n	800646c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	2b01      	cmp	r3, #1
 800640c:	d101      	bne.n	8006412 <remove_chain+0x64>
 800640e:	2302      	movs	r3, #2
 8006410:	e02e      	b.n	8006470 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006418:	d101      	bne.n	800641e <remove_chain+0x70>
 800641a:	2301      	movs	r3, #1
 800641c:	e028      	b.n	8006470 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800641e:	2200      	movs	r2, #0
 8006420:	68b9      	ldr	r1, [r7, #8]
 8006422:	69b8      	ldr	r0, [r7, #24]
 8006424:	f7ff fedc 	bl	80061e0 <put_fat>
 8006428:	4603      	mov	r3, r0
 800642a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800642c:	7ffb      	ldrb	r3, [r7, #31]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d001      	beq.n	8006436 <remove_chain+0x88>
 8006432:	7ffb      	ldrb	r3, [r7, #31]
 8006434:	e01c      	b.n	8006470 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006436:	69bb      	ldr	r3, [r7, #24]
 8006438:	695a      	ldr	r2, [r3, #20]
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	699b      	ldr	r3, [r3, #24]
 800643e:	3b02      	subs	r3, #2
 8006440:	429a      	cmp	r2, r3
 8006442:	d20b      	bcs.n	800645c <remove_chain+0xae>
			fs->free_clst++;
 8006444:	69bb      	ldr	r3, [r7, #24]
 8006446:	695b      	ldr	r3, [r3, #20]
 8006448:	1c5a      	adds	r2, r3, #1
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	791b      	ldrb	r3, [r3, #4]
 8006452:	f043 0301 	orr.w	r3, r3, #1
 8006456:	b2da      	uxtb	r2, r3
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	699b      	ldr	r3, [r3, #24]
 8006464:	68ba      	ldr	r2, [r7, #8]
 8006466:	429a      	cmp	r2, r3
 8006468:	d3c6      	bcc.n	80063f8 <remove_chain+0x4a>
 800646a:	e000      	b.n	800646e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800646c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800646e:	2300      	movs	r3, #0
}
 8006470:	4618      	mov	r0, r3
 8006472:	3720      	adds	r7, #32
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b088      	sub	sp, #32
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d10d      	bne.n	80064aa <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d004      	beq.n	80064a4 <create_chain+0x2c>
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	699b      	ldr	r3, [r3, #24]
 800649e:	69ba      	ldr	r2, [r7, #24]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d31b      	bcc.n	80064dc <create_chain+0x64>
 80064a4:	2301      	movs	r3, #1
 80064a6:	61bb      	str	r3, [r7, #24]
 80064a8:	e018      	b.n	80064dc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80064aa:	6839      	ldr	r1, [r7, #0]
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f7ff fdf2 	bl	8006096 <get_fat>
 80064b2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d801      	bhi.n	80064be <create_chain+0x46>
 80064ba:	2301      	movs	r3, #1
 80064bc:	e070      	b.n	80065a0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064c4:	d101      	bne.n	80064ca <create_chain+0x52>
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	e06a      	b.n	80065a0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	699b      	ldr	r3, [r3, #24]
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d201      	bcs.n	80064d8 <create_chain+0x60>
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	e063      	b.n	80065a0 <create_chain+0x128>
		scl = clst;
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	3301      	adds	r3, #1
 80064e4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	699b      	ldr	r3, [r3, #24]
 80064ea:	69fa      	ldr	r2, [r7, #28]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d307      	bcc.n	8006500 <create_chain+0x88>
				ncl = 2;
 80064f0:	2302      	movs	r3, #2
 80064f2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80064f4:	69fa      	ldr	r2, [r7, #28]
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d901      	bls.n	8006500 <create_chain+0x88>
 80064fc:	2300      	movs	r3, #0
 80064fe:	e04f      	b.n	80065a0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006500:	69f9      	ldr	r1, [r7, #28]
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f7ff fdc7 	bl	8006096 <get_fat>
 8006508:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d00e      	beq.n	800652e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2b01      	cmp	r3, #1
 8006514:	d003      	beq.n	800651e <create_chain+0xa6>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800651c:	d101      	bne.n	8006522 <create_chain+0xaa>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	e03e      	b.n	80065a0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006522:	69fa      	ldr	r2, [r7, #28]
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	429a      	cmp	r2, r3
 8006528:	d1da      	bne.n	80064e0 <create_chain+0x68>
 800652a:	2300      	movs	r3, #0
 800652c:	e038      	b.n	80065a0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800652e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006530:	f04f 32ff 	mov.w	r2, #4294967295
 8006534:	69f9      	ldr	r1, [r7, #28]
 8006536:	6938      	ldr	r0, [r7, #16]
 8006538:	f7ff fe52 	bl	80061e0 <put_fat>
 800653c:	4603      	mov	r3, r0
 800653e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006540:	7dfb      	ldrb	r3, [r7, #23]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d109      	bne.n	800655a <create_chain+0xe2>
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d006      	beq.n	800655a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800654c:	69fa      	ldr	r2, [r7, #28]
 800654e:	6839      	ldr	r1, [r7, #0]
 8006550:	6938      	ldr	r0, [r7, #16]
 8006552:	f7ff fe45 	bl	80061e0 <put_fat>
 8006556:	4603      	mov	r3, r0
 8006558:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800655a:	7dfb      	ldrb	r3, [r7, #23]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d116      	bne.n	800658e <create_chain+0x116>
		fs->last_clst = ncl;
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	69fa      	ldr	r2, [r7, #28]
 8006564:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	695a      	ldr	r2, [r3, #20]
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	699b      	ldr	r3, [r3, #24]
 800656e:	3b02      	subs	r3, #2
 8006570:	429a      	cmp	r2, r3
 8006572:	d804      	bhi.n	800657e <create_chain+0x106>
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	695b      	ldr	r3, [r3, #20]
 8006578:	1e5a      	subs	r2, r3, #1
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	791b      	ldrb	r3, [r3, #4]
 8006582:	f043 0301 	orr.w	r3, r3, #1
 8006586:	b2da      	uxtb	r2, r3
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	711a      	strb	r2, [r3, #4]
 800658c:	e007      	b.n	800659e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800658e:	7dfb      	ldrb	r3, [r7, #23]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d102      	bne.n	800659a <create_chain+0x122>
 8006594:	f04f 33ff 	mov.w	r3, #4294967295
 8006598:	e000      	b.n	800659c <create_chain+0x124>
 800659a:	2301      	movs	r3, #1
 800659c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800659e:	69fb      	ldr	r3, [r7, #28]
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3720      	adds	r7, #32
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b087      	sub	sp, #28
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065bc:	3304      	adds	r3, #4
 80065be:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	0a5b      	lsrs	r3, r3, #9
 80065c4:	68fa      	ldr	r2, [r7, #12]
 80065c6:	8952      	ldrh	r2, [r2, #10]
 80065c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80065cc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	1d1a      	adds	r2, r3, #4
 80065d2:	613a      	str	r2, [r7, #16]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d101      	bne.n	80065e2 <clmt_clust+0x3a>
 80065de:	2300      	movs	r3, #0
 80065e0:	e010      	b.n	8006604 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80065e2:	697a      	ldr	r2, [r7, #20]
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d307      	bcc.n	80065fa <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80065ea:	697a      	ldr	r2, [r7, #20]
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	1ad3      	subs	r3, r2, r3
 80065f0:	617b      	str	r3, [r7, #20]
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	3304      	adds	r3, #4
 80065f6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80065f8:	e7e9      	b.n	80065ce <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80065fa:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	4413      	add	r3, r2
}
 8006604:	4618      	mov	r0, r3
 8006606:	371c      	adds	r7, #28
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b086      	sub	sp, #24
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006626:	d204      	bcs.n	8006632 <dir_sdi+0x22>
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	f003 031f 	and.w	r3, r3, #31
 800662e:	2b00      	cmp	r3, #0
 8006630:	d001      	beq.n	8006636 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006632:	2302      	movs	r3, #2
 8006634:	e063      	b.n	80066fe <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	683a      	ldr	r2, [r7, #0]
 800663a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d106      	bne.n	8006656 <dir_sdi+0x46>
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	2b02      	cmp	r3, #2
 800664e:	d902      	bls.n	8006656 <dir_sdi+0x46>
		clst = fs->dirbase;
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006654:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d10c      	bne.n	8006676 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	095b      	lsrs	r3, r3, #5
 8006660:	693a      	ldr	r2, [r7, #16]
 8006662:	8912      	ldrh	r2, [r2, #8]
 8006664:	4293      	cmp	r3, r2
 8006666:	d301      	bcc.n	800666c <dir_sdi+0x5c>
 8006668:	2302      	movs	r3, #2
 800666a:	e048      	b.n	80066fe <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	61da      	str	r2, [r3, #28]
 8006674:	e029      	b.n	80066ca <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	895b      	ldrh	r3, [r3, #10]
 800667a:	025b      	lsls	r3, r3, #9
 800667c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800667e:	e019      	b.n	80066b4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6979      	ldr	r1, [r7, #20]
 8006684:	4618      	mov	r0, r3
 8006686:	f7ff fd06 	bl	8006096 <get_fat>
 800668a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006692:	d101      	bne.n	8006698 <dir_sdi+0x88>
 8006694:	2301      	movs	r3, #1
 8006696:	e032      	b.n	80066fe <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	2b01      	cmp	r3, #1
 800669c:	d904      	bls.n	80066a8 <dir_sdi+0x98>
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	697a      	ldr	r2, [r7, #20]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d301      	bcc.n	80066ac <dir_sdi+0x9c>
 80066a8:	2302      	movs	r3, #2
 80066aa:	e028      	b.n	80066fe <dir_sdi+0xee>
			ofs -= csz;
 80066ac:	683a      	ldr	r2, [r7, #0]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	1ad3      	subs	r3, r2, r3
 80066b2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80066b4:	683a      	ldr	r2, [r7, #0]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d2e1      	bcs.n	8006680 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80066bc:	6979      	ldr	r1, [r7, #20]
 80066be:	6938      	ldr	r0, [r7, #16]
 80066c0:	f7ff fcca 	bl	8006058 <clust2sect>
 80066c4:	4602      	mov	r2, r0
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	697a      	ldr	r2, [r7, #20]
 80066ce:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	69db      	ldr	r3, [r3, #28]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d101      	bne.n	80066dc <dir_sdi+0xcc>
 80066d8:	2302      	movs	r3, #2
 80066da:	e010      	b.n	80066fe <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	69da      	ldr	r2, [r3, #28]
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	0a5b      	lsrs	r3, r3, #9
 80066e4:	441a      	add	r2, r3
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066f6:	441a      	add	r2, r3
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80066fc:	2300      	movs	r3, #0
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3718      	adds	r7, #24
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}

08006706 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006706:	b580      	push	{r7, lr}
 8006708:	b086      	sub	sp, #24
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
 800670e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	695b      	ldr	r3, [r3, #20]
 800671a:	3320      	adds	r3, #32
 800671c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	69db      	ldr	r3, [r3, #28]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d003      	beq.n	800672e <dir_next+0x28>
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800672c:	d301      	bcc.n	8006732 <dir_next+0x2c>
 800672e:	2304      	movs	r3, #4
 8006730:	e0aa      	b.n	8006888 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006738:	2b00      	cmp	r3, #0
 800673a:	f040 8098 	bne.w	800686e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	69db      	ldr	r3, [r3, #28]
 8006742:	1c5a      	adds	r2, r3, #1
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	699b      	ldr	r3, [r3, #24]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d10b      	bne.n	8006768 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	095b      	lsrs	r3, r3, #5
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	8912      	ldrh	r2, [r2, #8]
 8006758:	4293      	cmp	r3, r2
 800675a:	f0c0 8088 	bcc.w	800686e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	61da      	str	r2, [r3, #28]
 8006764:	2304      	movs	r3, #4
 8006766:	e08f      	b.n	8006888 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	0a5b      	lsrs	r3, r3, #9
 800676c:	68fa      	ldr	r2, [r7, #12]
 800676e:	8952      	ldrh	r2, [r2, #10]
 8006770:	3a01      	subs	r2, #1
 8006772:	4013      	ands	r3, r2
 8006774:	2b00      	cmp	r3, #0
 8006776:	d17a      	bne.n	800686e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	699b      	ldr	r3, [r3, #24]
 800677e:	4619      	mov	r1, r3
 8006780:	4610      	mov	r0, r2
 8006782:	f7ff fc88 	bl	8006096 <get_fat>
 8006786:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	2b01      	cmp	r3, #1
 800678c:	d801      	bhi.n	8006792 <dir_next+0x8c>
 800678e:	2302      	movs	r3, #2
 8006790:	e07a      	b.n	8006888 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006798:	d101      	bne.n	800679e <dir_next+0x98>
 800679a:	2301      	movs	r3, #1
 800679c:	e074      	b.n	8006888 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	699b      	ldr	r3, [r3, #24]
 80067a2:	697a      	ldr	r2, [r7, #20]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d358      	bcc.n	800685a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d104      	bne.n	80067b8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	61da      	str	r2, [r3, #28]
 80067b4:	2304      	movs	r3, #4
 80067b6:	e067      	b.n	8006888 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	699b      	ldr	r3, [r3, #24]
 80067be:	4619      	mov	r1, r3
 80067c0:	4610      	mov	r0, r2
 80067c2:	f7ff fe59 	bl	8006478 <create_chain>
 80067c6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d101      	bne.n	80067d2 <dir_next+0xcc>
 80067ce:	2307      	movs	r3, #7
 80067d0:	e05a      	b.n	8006888 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d101      	bne.n	80067dc <dir_next+0xd6>
 80067d8:	2302      	movs	r3, #2
 80067da:	e055      	b.n	8006888 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067e2:	d101      	bne.n	80067e8 <dir_next+0xe2>
 80067e4:	2301      	movs	r3, #1
 80067e6:	e04f      	b.n	8006888 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80067e8:	68f8      	ldr	r0, [r7, #12]
 80067ea:	f7ff fb55 	bl	8005e98 <sync_window>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d001      	beq.n	80067f8 <dir_next+0xf2>
 80067f4:	2301      	movs	r3, #1
 80067f6:	e047      	b.n	8006888 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	3334      	adds	r3, #52	; 0x34
 80067fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006800:	2100      	movs	r1, #0
 8006802:	4618      	mov	r0, r3
 8006804:	f7ff f94f 	bl	8005aa6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006808:	2300      	movs	r3, #0
 800680a:	613b      	str	r3, [r7, #16]
 800680c:	6979      	ldr	r1, [r7, #20]
 800680e:	68f8      	ldr	r0, [r7, #12]
 8006810:	f7ff fc22 	bl	8006058 <clust2sect>
 8006814:	4602      	mov	r2, r0
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	631a      	str	r2, [r3, #48]	; 0x30
 800681a:	e012      	b.n	8006842 <dir_next+0x13c>
						fs->wflag = 1;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2201      	movs	r2, #1
 8006820:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006822:	68f8      	ldr	r0, [r7, #12]
 8006824:	f7ff fb38 	bl	8005e98 <sync_window>
 8006828:	4603      	mov	r3, r0
 800682a:	2b00      	cmp	r3, #0
 800682c:	d001      	beq.n	8006832 <dir_next+0x12c>
 800682e:	2301      	movs	r3, #1
 8006830:	e02a      	b.n	8006888 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	3301      	adds	r3, #1
 8006836:	613b      	str	r3, [r7, #16]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800683c:	1c5a      	adds	r2, r3, #1
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	631a      	str	r2, [r3, #48]	; 0x30
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	895b      	ldrh	r3, [r3, #10]
 8006846:	461a      	mov	r2, r3
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	4293      	cmp	r3, r2
 800684c:	d3e6      	bcc.n	800681c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	1ad2      	subs	r2, r2, r3
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	697a      	ldr	r2, [r7, #20]
 800685e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006860:	6979      	ldr	r1, [r7, #20]
 8006862:	68f8      	ldr	r0, [r7, #12]
 8006864:	f7ff fbf8 	bl	8006058 <clust2sect>
 8006868:	4602      	mov	r2, r0
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	68ba      	ldr	r2, [r7, #8]
 8006872:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006880:	441a      	add	r2, r3
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	3718      	adds	r7, #24
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b086      	sub	sp, #24
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80068a0:	2100      	movs	r1, #0
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f7ff feb4 	bl	8006610 <dir_sdi>
 80068a8:	4603      	mov	r3, r0
 80068aa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80068ac:	7dfb      	ldrb	r3, [r7, #23]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d12b      	bne.n	800690a <dir_alloc+0x7a>
		n = 0;
 80068b2:	2300      	movs	r3, #0
 80068b4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	69db      	ldr	r3, [r3, #28]
 80068ba:	4619      	mov	r1, r3
 80068bc:	68f8      	ldr	r0, [r7, #12]
 80068be:	f7ff fb2f 	bl	8005f20 <move_window>
 80068c2:	4603      	mov	r3, r0
 80068c4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80068c6:	7dfb      	ldrb	r3, [r7, #23]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d11d      	bne.n	8006908 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6a1b      	ldr	r3, [r3, #32]
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	2be5      	cmp	r3, #229	; 0xe5
 80068d4:	d004      	beq.n	80068e0 <dir_alloc+0x50>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a1b      	ldr	r3, [r3, #32]
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d107      	bne.n	80068f0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	3301      	adds	r3, #1
 80068e4:	613b      	str	r3, [r7, #16]
 80068e6:	693a      	ldr	r2, [r7, #16]
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d102      	bne.n	80068f4 <dir_alloc+0x64>
 80068ee:	e00c      	b.n	800690a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80068f0:	2300      	movs	r3, #0
 80068f2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80068f4:	2101      	movs	r1, #1
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f7ff ff05 	bl	8006706 <dir_next>
 80068fc:	4603      	mov	r3, r0
 80068fe:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006900:	7dfb      	ldrb	r3, [r7, #23]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d0d7      	beq.n	80068b6 <dir_alloc+0x26>
 8006906:	e000      	b.n	800690a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006908:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800690a:	7dfb      	ldrb	r3, [r7, #23]
 800690c:	2b04      	cmp	r3, #4
 800690e:	d101      	bne.n	8006914 <dir_alloc+0x84>
 8006910:	2307      	movs	r3, #7
 8006912:	75fb      	strb	r3, [r7, #23]
	return res;
 8006914:	7dfb      	ldrb	r3, [r7, #23]
}
 8006916:	4618      	mov	r0, r3
 8006918:	3718      	adds	r7, #24
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}

0800691e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800691e:	b580      	push	{r7, lr}
 8006920:	b084      	sub	sp, #16
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
 8006926:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	331a      	adds	r3, #26
 800692c:	4618      	mov	r0, r3
 800692e:	f7ff f817 	bl	8005960 <ld_word>
 8006932:	4603      	mov	r3, r0
 8006934:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	2b03      	cmp	r3, #3
 800693c:	d109      	bne.n	8006952 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	3314      	adds	r3, #20
 8006942:	4618      	mov	r0, r3
 8006944:	f7ff f80c 	bl	8005960 <ld_word>
 8006948:	4603      	mov	r3, r0
 800694a:	041b      	lsls	r3, r3, #16
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	4313      	orrs	r3, r2
 8006950:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006952:	68fb      	ldr	r3, [r7, #12]
}
 8006954:	4618      	mov	r0, r3
 8006956:	3710      	adds	r7, #16
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	331a      	adds	r3, #26
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	b292      	uxth	r2, r2
 8006970:	4611      	mov	r1, r2
 8006972:	4618      	mov	r0, r3
 8006974:	f7ff f82f 	bl	80059d6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	2b03      	cmp	r3, #3
 800697e:	d109      	bne.n	8006994 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	f103 0214 	add.w	r2, r3, #20
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	0c1b      	lsrs	r3, r3, #16
 800698a:	b29b      	uxth	r3, r3
 800698c:	4619      	mov	r1, r3
 800698e:	4610      	mov	r0, r2
 8006990:	f7ff f821 	bl	80059d6 <st_word>
	}
}
 8006994:	bf00      	nop
 8006996:	3710      	adds	r7, #16
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b086      	sub	sp, #24
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80069a6:	2304      	movs	r3, #4
 80069a8:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 80069b0:	e03c      	b.n	8006a2c <dir_read+0x90>
		res = move_window(fs, dp->sect);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	69db      	ldr	r3, [r3, #28]
 80069b6:	4619      	mov	r1, r3
 80069b8:	6938      	ldr	r0, [r7, #16]
 80069ba:	f7ff fab1 	bl	8005f20 <move_window>
 80069be:	4603      	mov	r3, r0
 80069c0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80069c2:	7dfb      	ldrb	r3, [r7, #23]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d136      	bne.n	8006a36 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6a1b      	ldr	r3, [r3, #32]
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80069d0:	7bfb      	ldrb	r3, [r7, #15]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d102      	bne.n	80069dc <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80069d6:	2304      	movs	r3, #4
 80069d8:	75fb      	strb	r3, [r7, #23]
 80069da:	e031      	b.n	8006a40 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6a1b      	ldr	r3, [r3, #32]
 80069e0:	330b      	adds	r3, #11
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069e8:	73bb      	strb	r3, [r7, #14]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	7bba      	ldrb	r2, [r7, #14]
 80069ee:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 80069f0:	7bfb      	ldrb	r3, [r7, #15]
 80069f2:	2be5      	cmp	r3, #229	; 0xe5
 80069f4:	d011      	beq.n	8006a1a <dir_read+0x7e>
 80069f6:	7bfb      	ldrb	r3, [r7, #15]
 80069f8:	2b2e      	cmp	r3, #46	; 0x2e
 80069fa:	d00e      	beq.n	8006a1a <dir_read+0x7e>
 80069fc:	7bbb      	ldrb	r3, [r7, #14]
 80069fe:	2b0f      	cmp	r3, #15
 8006a00:	d00b      	beq.n	8006a1a <dir_read+0x7e>
 8006a02:	7bbb      	ldrb	r3, [r7, #14]
 8006a04:	f023 0320 	bic.w	r3, r3, #32
 8006a08:	2b08      	cmp	r3, #8
 8006a0a:	bf0c      	ite	eq
 8006a0c:	2301      	moveq	r3, #1
 8006a0e:	2300      	movne	r3, #0
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	461a      	mov	r2, r3
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d00f      	beq.n	8006a3a <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8006a1a:	2100      	movs	r1, #0
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f7ff fe72 	bl	8006706 <dir_next>
 8006a22:	4603      	mov	r3, r0
 8006a24:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006a26:	7dfb      	ldrb	r3, [r7, #23]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d108      	bne.n	8006a3e <dir_read+0xa2>
	while (dp->sect) {
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	69db      	ldr	r3, [r3, #28]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d1be      	bne.n	80069b2 <dir_read+0x16>
 8006a34:	e004      	b.n	8006a40 <dir_read+0xa4>
		if (res != FR_OK) break;
 8006a36:	bf00      	nop
 8006a38:	e002      	b.n	8006a40 <dir_read+0xa4>
				break;
 8006a3a:	bf00      	nop
 8006a3c:	e000      	b.n	8006a40 <dir_read+0xa4>
		if (res != FR_OK) break;
 8006a3e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8006a40:	7dfb      	ldrb	r3, [r7, #23]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d002      	beq.n	8006a4c <dir_read+0xb0>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	61da      	str	r2, [r3, #28]
	return res;
 8006a4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3718      	adds	r7, #24
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}

08006a56 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006a56:	b580      	push	{r7, lr}
 8006a58:	b086      	sub	sp, #24
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006a64:	2100      	movs	r1, #0
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f7ff fdd2 	bl	8006610 <dir_sdi>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006a70:	7dfb      	ldrb	r3, [r7, #23]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d001      	beq.n	8006a7a <dir_find+0x24>
 8006a76:	7dfb      	ldrb	r3, [r7, #23]
 8006a78:	e03e      	b.n	8006af8 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	69db      	ldr	r3, [r3, #28]
 8006a7e:	4619      	mov	r1, r3
 8006a80:	6938      	ldr	r0, [r7, #16]
 8006a82:	f7ff fa4d 	bl	8005f20 <move_window>
 8006a86:	4603      	mov	r3, r0
 8006a88:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006a8a:	7dfb      	ldrb	r3, [r7, #23]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d12f      	bne.n	8006af0 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6a1b      	ldr	r3, [r3, #32]
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006a98:	7bfb      	ldrb	r3, [r7, #15]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d102      	bne.n	8006aa4 <dir_find+0x4e>
 8006a9e:	2304      	movs	r3, #4
 8006aa0:	75fb      	strb	r3, [r7, #23]
 8006aa2:	e028      	b.n	8006af6 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6a1b      	ldr	r3, [r3, #32]
 8006aa8:	330b      	adds	r3, #11
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ab0:	b2da      	uxtb	r2, r3
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6a1b      	ldr	r3, [r3, #32]
 8006aba:	330b      	adds	r3, #11
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	f003 0308 	and.w	r3, r3, #8
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d10a      	bne.n	8006adc <dir_find+0x86>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a18      	ldr	r0, [r3, #32]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	3324      	adds	r3, #36	; 0x24
 8006ace:	220b      	movs	r2, #11
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	f7ff f802 	bl	8005ada <mem_cmp>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d00b      	beq.n	8006af4 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006adc:	2100      	movs	r1, #0
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f7ff fe11 	bl	8006706 <dir_next>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006ae8:	7dfb      	ldrb	r3, [r7, #23]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d0c5      	beq.n	8006a7a <dir_find+0x24>
 8006aee:	e002      	b.n	8006af6 <dir_find+0xa0>
		if (res != FR_OK) break;
 8006af0:	bf00      	nop
 8006af2:	e000      	b.n	8006af6 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006af4:	bf00      	nop

	return res;
 8006af6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3718      	adds	r7, #24
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006b0e:	2101      	movs	r1, #1
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f7ff febd 	bl	8006890 <dir_alloc>
 8006b16:	4603      	mov	r3, r0
 8006b18:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006b1a:	7bfb      	ldrb	r3, [r7, #15]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d11c      	bne.n	8006b5a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	69db      	ldr	r3, [r3, #28]
 8006b24:	4619      	mov	r1, r3
 8006b26:	68b8      	ldr	r0, [r7, #8]
 8006b28:	f7ff f9fa 	bl	8005f20 <move_window>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006b30:	7bfb      	ldrb	r3, [r7, #15]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d111      	bne.n	8006b5a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a1b      	ldr	r3, [r3, #32]
 8006b3a:	2220      	movs	r2, #32
 8006b3c:	2100      	movs	r1, #0
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f7fe ffb1 	bl	8005aa6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6a18      	ldr	r0, [r3, #32]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	3324      	adds	r3, #36	; 0x24
 8006b4c:	220b      	movs	r2, #11
 8006b4e:	4619      	mov	r1, r3
 8006b50:	f7fe ff88 	bl	8005a64 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	2201      	movs	r2, #1
 8006b58:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3710      	adds	r7, #16
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b084      	sub	sp, #16
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	69db      	ldr	r3, [r3, #28]
 8006b76:	4619      	mov	r1, r3
 8006b78:	68f8      	ldr	r0, [r7, #12]
 8006b7a:	f7ff f9d1 	bl	8005f20 <move_window>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8006b82:	7afb      	ldrb	r3, [r7, #11]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d106      	bne.n	8006b96 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6a1b      	ldr	r3, [r3, #32]
 8006b8c:	22e5      	movs	r2, #229	; 0xe5
 8006b8e:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2201      	movs	r2, #1
 8006b94:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8006b96:	7afb      	ldrb	r3, [r7, #11]
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3710      	adds	r7, #16
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b086      	sub	sp, #24
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	2200      	movs	r2, #0
 8006bae:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	69db      	ldr	r3, [r3, #28]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d04e      	beq.n	8006c56 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	613b      	str	r3, [r7, #16]
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8006bc0:	e021      	b.n	8006c06 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a1a      	ldr	r2, [r3, #32]
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	1c59      	adds	r1, r3, #1
 8006bca:	6179      	str	r1, [r7, #20]
 8006bcc:	4413      	add	r3, r2
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8006bd2:	7bfb      	ldrb	r3, [r7, #15]
 8006bd4:	2b20      	cmp	r3, #32
 8006bd6:	d100      	bne.n	8006bda <get_fileinfo+0x3a>
 8006bd8:	e015      	b.n	8006c06 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8006bda:	7bfb      	ldrb	r3, [r7, #15]
 8006bdc:	2b05      	cmp	r3, #5
 8006bde:	d101      	bne.n	8006be4 <get_fileinfo+0x44>
 8006be0:	23e5      	movs	r3, #229	; 0xe5
 8006be2:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	2b09      	cmp	r3, #9
 8006be8:	d106      	bne.n	8006bf8 <get_fileinfo+0x58>
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	1c5a      	adds	r2, r3, #1
 8006bee:	613a      	str	r2, [r7, #16]
 8006bf0:	683a      	ldr	r2, [r7, #0]
 8006bf2:	4413      	add	r3, r2
 8006bf4:	222e      	movs	r2, #46	; 0x2e
 8006bf6:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	1c5a      	adds	r2, r3, #1
 8006bfc:	613a      	str	r2, [r7, #16]
 8006bfe:	683a      	ldr	r2, [r7, #0]
 8006c00:	4413      	add	r3, r2
 8006c02:	7bfa      	ldrb	r2, [r7, #15]
 8006c04:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	2b0a      	cmp	r3, #10
 8006c0a:	d9da      	bls.n	8006bc2 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8006c0c:	683a      	ldr	r2, [r7, #0]
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	4413      	add	r3, r2
 8006c12:	3309      	adds	r3, #9
 8006c14:	2200      	movs	r2, #0
 8006c16:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6a1b      	ldr	r3, [r3, #32]
 8006c1c:	7ada      	ldrb	r2, [r3, #11]
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6a1b      	ldr	r3, [r3, #32]
 8006c26:	331c      	adds	r3, #28
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f7fe feb1 	bl	8005990 <ld_dword>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6a1b      	ldr	r3, [r3, #32]
 8006c38:	3316      	adds	r3, #22
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f7fe fea8 	bl	8005990 <ld_dword>
 8006c40:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	b29a      	uxth	r2, r3
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	80da      	strh	r2, [r3, #6]
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	0c1b      	lsrs	r3, r3, #16
 8006c4e:	b29a      	uxth	r2, r3
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	809a      	strh	r2, [r3, #4]
 8006c54:	e000      	b.n	8006c58 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006c56:	bf00      	nop
}
 8006c58:	3718      	adds	r7, #24
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
	...

08006c60 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b088      	sub	sp, #32
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	60fb      	str	r3, [r7, #12]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	3324      	adds	r3, #36	; 0x24
 8006c74:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006c76:	220b      	movs	r2, #11
 8006c78:	2120      	movs	r1, #32
 8006c7a:	68b8      	ldr	r0, [r7, #8]
 8006c7c:	f7fe ff13 	bl	8005aa6 <mem_set>
	si = i = 0; ni = 8;
 8006c80:	2300      	movs	r3, #0
 8006c82:	613b      	str	r3, [r7, #16]
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	617b      	str	r3, [r7, #20]
 8006c88:	2308      	movs	r3, #8
 8006c8a:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	1c5a      	adds	r2, r3, #1
 8006c90:	617a      	str	r2, [r7, #20]
 8006c92:	68fa      	ldr	r2, [r7, #12]
 8006c94:	4413      	add	r3, r2
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006c9a:	7ffb      	ldrb	r3, [r7, #31]
 8006c9c:	2b20      	cmp	r3, #32
 8006c9e:	d94e      	bls.n	8006d3e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8006ca0:	7ffb      	ldrb	r3, [r7, #31]
 8006ca2:	2b2f      	cmp	r3, #47	; 0x2f
 8006ca4:	d006      	beq.n	8006cb4 <create_name+0x54>
 8006ca6:	7ffb      	ldrb	r3, [r7, #31]
 8006ca8:	2b5c      	cmp	r3, #92	; 0x5c
 8006caa:	d110      	bne.n	8006cce <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006cac:	e002      	b.n	8006cb4 <create_name+0x54>
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	3301      	adds	r3, #1
 8006cb2:	617b      	str	r3, [r7, #20]
 8006cb4:	68fa      	ldr	r2, [r7, #12]
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	4413      	add	r3, r2
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	2b2f      	cmp	r3, #47	; 0x2f
 8006cbe:	d0f6      	beq.n	8006cae <create_name+0x4e>
 8006cc0:	68fa      	ldr	r2, [r7, #12]
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	2b5c      	cmp	r3, #92	; 0x5c
 8006cca:	d0f0      	beq.n	8006cae <create_name+0x4e>
			break;
 8006ccc:	e038      	b.n	8006d40 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8006cce:	7ffb      	ldrb	r3, [r7, #31]
 8006cd0:	2b2e      	cmp	r3, #46	; 0x2e
 8006cd2:	d003      	beq.n	8006cdc <create_name+0x7c>
 8006cd4:	693a      	ldr	r2, [r7, #16]
 8006cd6:	69bb      	ldr	r3, [r7, #24]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d30c      	bcc.n	8006cf6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	2b0b      	cmp	r3, #11
 8006ce0:	d002      	beq.n	8006ce8 <create_name+0x88>
 8006ce2:	7ffb      	ldrb	r3, [r7, #31]
 8006ce4:	2b2e      	cmp	r3, #46	; 0x2e
 8006ce6:	d001      	beq.n	8006cec <create_name+0x8c>
 8006ce8:	2306      	movs	r3, #6
 8006cea:	e044      	b.n	8006d76 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8006cec:	2308      	movs	r3, #8
 8006cee:	613b      	str	r3, [r7, #16]
 8006cf0:	230b      	movs	r3, #11
 8006cf2:	61bb      	str	r3, [r7, #24]
			continue;
 8006cf4:	e022      	b.n	8006d3c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006cf6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	da04      	bge.n	8006d08 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006cfe:	7ffb      	ldrb	r3, [r7, #31]
 8006d00:	3b80      	subs	r3, #128	; 0x80
 8006d02:	4a1f      	ldr	r2, [pc, #124]	; (8006d80 <create_name+0x120>)
 8006d04:	5cd3      	ldrb	r3, [r2, r3]
 8006d06:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006d08:	7ffb      	ldrb	r3, [r7, #31]
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	481d      	ldr	r0, [pc, #116]	; (8006d84 <create_name+0x124>)
 8006d0e:	f7fe ff0b 	bl	8005b28 <chk_chr>
 8006d12:	4603      	mov	r3, r0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d001      	beq.n	8006d1c <create_name+0xbc>
 8006d18:	2306      	movs	r3, #6
 8006d1a:	e02c      	b.n	8006d76 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006d1c:	7ffb      	ldrb	r3, [r7, #31]
 8006d1e:	2b60      	cmp	r3, #96	; 0x60
 8006d20:	d905      	bls.n	8006d2e <create_name+0xce>
 8006d22:	7ffb      	ldrb	r3, [r7, #31]
 8006d24:	2b7a      	cmp	r3, #122	; 0x7a
 8006d26:	d802      	bhi.n	8006d2e <create_name+0xce>
 8006d28:	7ffb      	ldrb	r3, [r7, #31]
 8006d2a:	3b20      	subs	r3, #32
 8006d2c:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	1c5a      	adds	r2, r3, #1
 8006d32:	613a      	str	r2, [r7, #16]
 8006d34:	68ba      	ldr	r2, [r7, #8]
 8006d36:	4413      	add	r3, r2
 8006d38:	7ffa      	ldrb	r2, [r7, #31]
 8006d3a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006d3c:	e7a6      	b.n	8006c8c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006d3e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8006d40:	68fa      	ldr	r2, [r7, #12]
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	441a      	add	r2, r3
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d101      	bne.n	8006d54 <create_name+0xf4>
 8006d50:	2306      	movs	r3, #6
 8006d52:	e010      	b.n	8006d76 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	2be5      	cmp	r3, #229	; 0xe5
 8006d5a:	d102      	bne.n	8006d62 <create_name+0x102>
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	2205      	movs	r2, #5
 8006d60:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006d62:	7ffb      	ldrb	r3, [r7, #31]
 8006d64:	2b20      	cmp	r3, #32
 8006d66:	d801      	bhi.n	8006d6c <create_name+0x10c>
 8006d68:	2204      	movs	r2, #4
 8006d6a:	e000      	b.n	8006d6e <create_name+0x10e>
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	330b      	adds	r3, #11
 8006d72:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006d74:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3720      	adds	r7, #32
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	08013178 	.word	0x08013178
 8006d84:	08012e4c 	.word	0x08012e4c

08006d88 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b086      	sub	sp, #24
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006d9c:	e002      	b.n	8006da4 <follow_path+0x1c>
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	3301      	adds	r3, #1
 8006da2:	603b      	str	r3, [r7, #0]
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	2b2f      	cmp	r3, #47	; 0x2f
 8006daa:	d0f8      	beq.n	8006d9e <follow_path+0x16>
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	2b5c      	cmp	r3, #92	; 0x5c
 8006db2:	d0f4      	beq.n	8006d9e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	2200      	movs	r2, #0
 8006db8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	2b1f      	cmp	r3, #31
 8006dc0:	d80a      	bhi.n	8006dd8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2280      	movs	r2, #128	; 0x80
 8006dc6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006dca:	2100      	movs	r1, #0
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f7ff fc1f 	bl	8006610 <dir_sdi>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	75fb      	strb	r3, [r7, #23]
 8006dd6:	e043      	b.n	8006e60 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006dd8:	463b      	mov	r3, r7
 8006dda:	4619      	mov	r1, r3
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f7ff ff3f 	bl	8006c60 <create_name>
 8006de2:	4603      	mov	r3, r0
 8006de4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006de6:	7dfb      	ldrb	r3, [r7, #23]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d134      	bne.n	8006e56 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f7ff fe32 	bl	8006a56 <dir_find>
 8006df2:	4603      	mov	r3, r0
 8006df4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006dfc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006dfe:	7dfb      	ldrb	r3, [r7, #23]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d00a      	beq.n	8006e1a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006e04:	7dfb      	ldrb	r3, [r7, #23]
 8006e06:	2b04      	cmp	r3, #4
 8006e08:	d127      	bne.n	8006e5a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006e0a:	7afb      	ldrb	r3, [r7, #11]
 8006e0c:	f003 0304 	and.w	r3, r3, #4
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d122      	bne.n	8006e5a <follow_path+0xd2>
 8006e14:	2305      	movs	r3, #5
 8006e16:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006e18:	e01f      	b.n	8006e5a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006e1a:	7afb      	ldrb	r3, [r7, #11]
 8006e1c:	f003 0304 	and.w	r3, r3, #4
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d11c      	bne.n	8006e5e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	799b      	ldrb	r3, [r3, #6]
 8006e28:	f003 0310 	and.w	r3, r3, #16
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d102      	bne.n	8006e36 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006e30:	2305      	movs	r3, #5
 8006e32:	75fb      	strb	r3, [r7, #23]
 8006e34:	e014      	b.n	8006e60 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	695b      	ldr	r3, [r3, #20]
 8006e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e44:	4413      	add	r3, r2
 8006e46:	4619      	mov	r1, r3
 8006e48:	68f8      	ldr	r0, [r7, #12]
 8006e4a:	f7ff fd68 	bl	800691e <ld_clust>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006e54:	e7c0      	b.n	8006dd8 <follow_path+0x50>
			if (res != FR_OK) break;
 8006e56:	bf00      	nop
 8006e58:	e002      	b.n	8006e60 <follow_path+0xd8>
				break;
 8006e5a:	bf00      	nop
 8006e5c:	e000      	b.n	8006e60 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006e5e:	bf00      	nop
			}
		}
	}

	return res;
 8006e60:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3718      	adds	r7, #24
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006e6a:	b480      	push	{r7}
 8006e6c:	b087      	sub	sp, #28
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006e72:	f04f 33ff 	mov.w	r3, #4294967295
 8006e76:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d031      	beq.n	8006ee4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	617b      	str	r3, [r7, #20]
 8006e86:	e002      	b.n	8006e8e <get_ldnumber+0x24>
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	617b      	str	r3, [r7, #20]
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	2b20      	cmp	r3, #32
 8006e94:	d903      	bls.n	8006e9e <get_ldnumber+0x34>
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	2b3a      	cmp	r3, #58	; 0x3a
 8006e9c:	d1f4      	bne.n	8006e88 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	2b3a      	cmp	r3, #58	; 0x3a
 8006ea4:	d11c      	bne.n	8006ee0 <get_ldnumber+0x76>
			tp = *path;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	1c5a      	adds	r2, r3, #1
 8006eb0:	60fa      	str	r2, [r7, #12]
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	3b30      	subs	r3, #48	; 0x30
 8006eb6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	2b09      	cmp	r3, #9
 8006ebc:	d80e      	bhi.n	8006edc <get_ldnumber+0x72>
 8006ebe:	68fa      	ldr	r2, [r7, #12]
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d10a      	bne.n	8006edc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d107      	bne.n	8006edc <get_ldnumber+0x72>
					vol = (int)i;
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	617b      	str	r3, [r7, #20]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	697a      	ldr	r2, [r7, #20]
 8006eda:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	e002      	b.n	8006ee6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006ee4:	693b      	ldr	r3, [r7, #16]
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	371c      	adds	r7, #28
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr
	...

08006ef4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	70da      	strb	r2, [r3, #3]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f04f 32ff 	mov.w	r2, #4294967295
 8006f0a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006f0c:	6839      	ldr	r1, [r7, #0]
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f7ff f806 	bl	8005f20 <move_window>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d001      	beq.n	8006f1e <check_fs+0x2a>
 8006f1a:	2304      	movs	r3, #4
 8006f1c:	e038      	b.n	8006f90 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	3334      	adds	r3, #52	; 0x34
 8006f22:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006f26:	4618      	mov	r0, r3
 8006f28:	f7fe fd1a 	bl	8005960 <ld_word>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	461a      	mov	r2, r3
 8006f30:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d001      	beq.n	8006f3c <check_fs+0x48>
 8006f38:	2303      	movs	r3, #3
 8006f3a:	e029      	b.n	8006f90 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006f42:	2be9      	cmp	r3, #233	; 0xe9
 8006f44:	d009      	beq.n	8006f5a <check_fs+0x66>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006f4c:	2beb      	cmp	r3, #235	; 0xeb
 8006f4e:	d11e      	bne.n	8006f8e <check_fs+0x9a>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006f56:	2b90      	cmp	r3, #144	; 0x90
 8006f58:	d119      	bne.n	8006f8e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	3334      	adds	r3, #52	; 0x34
 8006f5e:	3336      	adds	r3, #54	; 0x36
 8006f60:	4618      	mov	r0, r3
 8006f62:	f7fe fd15 	bl	8005990 <ld_dword>
 8006f66:	4603      	mov	r3, r0
 8006f68:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006f6c:	4a0a      	ldr	r2, [pc, #40]	; (8006f98 <check_fs+0xa4>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d101      	bne.n	8006f76 <check_fs+0x82>
 8006f72:	2300      	movs	r3, #0
 8006f74:	e00c      	b.n	8006f90 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	3334      	adds	r3, #52	; 0x34
 8006f7a:	3352      	adds	r3, #82	; 0x52
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f7fe fd07 	bl	8005990 <ld_dword>
 8006f82:	4602      	mov	r2, r0
 8006f84:	4b05      	ldr	r3, [pc, #20]	; (8006f9c <check_fs+0xa8>)
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d101      	bne.n	8006f8e <check_fs+0x9a>
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	e000      	b.n	8006f90 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006f8e:	2302      	movs	r3, #2
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3708      	adds	r7, #8
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}
 8006f98:	00544146 	.word	0x00544146
 8006f9c:	33544146 	.word	0x33544146

08006fa0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b096      	sub	sp, #88	; 0x58
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	60b9      	str	r1, [r7, #8]
 8006faa:	4613      	mov	r3, r2
 8006fac:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006fb4:	68f8      	ldr	r0, [r7, #12]
 8006fb6:	f7ff ff58 	bl	8006e6a <get_ldnumber>
 8006fba:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006fbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	da01      	bge.n	8006fc6 <find_volume+0x26>
 8006fc2:	230b      	movs	r3, #11
 8006fc4:	e236      	b.n	8007434 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006fc6:	4aac      	ldr	r2, [pc, #688]	; (8007278 <find_volume+0x2d8>)
 8006fc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fce:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d101      	bne.n	8006fda <find_volume+0x3a>
 8006fd6:	230c      	movs	r3, #12
 8006fd8:	e22c      	b.n	8007434 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 8006fda:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006fdc:	f7fe fdbf 	bl	8005b5e <lock_fs>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d101      	bne.n	8006fea <find_volume+0x4a>
 8006fe6:	230f      	movs	r3, #15
 8006fe8:	e224      	b.n	8007434 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fee:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006ff0:	79fb      	ldrb	r3, [r7, #7]
 8006ff2:	f023 0301 	bic.w	r3, r3, #1
 8006ff6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d01a      	beq.n	8007036 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8007000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007002:	785b      	ldrb	r3, [r3, #1]
 8007004:	4618      	mov	r0, r3
 8007006:	f7fe fc0d 	bl	8005824 <disk_status>
 800700a:	4603      	mov	r3, r0
 800700c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007010:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007014:	f003 0301 	and.w	r3, r3, #1
 8007018:	2b00      	cmp	r3, #0
 800701a:	d10c      	bne.n	8007036 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800701c:	79fb      	ldrb	r3, [r7, #7]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d007      	beq.n	8007032 <find_volume+0x92>
 8007022:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007026:	f003 0304 	and.w	r3, r3, #4
 800702a:	2b00      	cmp	r3, #0
 800702c:	d001      	beq.n	8007032 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800702e:	230a      	movs	r3, #10
 8007030:	e200      	b.n	8007434 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 8007032:	2300      	movs	r3, #0
 8007034:	e1fe      	b.n	8007434 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007038:	2200      	movs	r2, #0
 800703a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800703c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800703e:	b2da      	uxtb	r2, r3
 8007040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007042:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007046:	785b      	ldrb	r3, [r3, #1]
 8007048:	4618      	mov	r0, r3
 800704a:	f7fe fc05 	bl	8005858 <disk_initialize>
 800704e:	4603      	mov	r3, r0
 8007050:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007054:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007058:	f003 0301 	and.w	r3, r3, #1
 800705c:	2b00      	cmp	r3, #0
 800705e:	d001      	beq.n	8007064 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007060:	2303      	movs	r3, #3
 8007062:	e1e7      	b.n	8007434 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007064:	79fb      	ldrb	r3, [r7, #7]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d007      	beq.n	800707a <find_volume+0xda>
 800706a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800706e:	f003 0304 	and.w	r3, r3, #4
 8007072:	2b00      	cmp	r3, #0
 8007074:	d001      	beq.n	800707a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8007076:	230a      	movs	r3, #10
 8007078:	e1dc      	b.n	8007434 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800707a:	2300      	movs	r3, #0
 800707c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800707e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007080:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007082:	f7ff ff37 	bl	8006ef4 <check_fs>
 8007086:	4603      	mov	r3, r0
 8007088:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800708c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007090:	2b02      	cmp	r3, #2
 8007092:	d14b      	bne.n	800712c <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007094:	2300      	movs	r3, #0
 8007096:	643b      	str	r3, [r7, #64]	; 0x40
 8007098:	e01f      	b.n	80070da <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800709a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800709c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80070a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070a2:	011b      	lsls	r3, r3, #4
 80070a4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80070a8:	4413      	add	r3, r2
 80070aa:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80070ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ae:	3304      	adds	r3, #4
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d006      	beq.n	80070c4 <find_volume+0x124>
 80070b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b8:	3308      	adds	r3, #8
 80070ba:	4618      	mov	r0, r3
 80070bc:	f7fe fc68 	bl	8005990 <ld_dword>
 80070c0:	4602      	mov	r2, r0
 80070c2:	e000      	b.n	80070c6 <find_volume+0x126>
 80070c4:	2200      	movs	r2, #0
 80070c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80070ce:	440b      	add	r3, r1
 80070d0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80070d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070d6:	3301      	adds	r3, #1
 80070d8:	643b      	str	r3, [r7, #64]	; 0x40
 80070da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070dc:	2b03      	cmp	r3, #3
 80070de:	d9dc      	bls.n	800709a <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80070e0:	2300      	movs	r3, #0
 80070e2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80070e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d002      	beq.n	80070f0 <find_volume+0x150>
 80070ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070ec:	3b01      	subs	r3, #1
 80070ee:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80070f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070f2:	009b      	lsls	r3, r3, #2
 80070f4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80070f8:	4413      	add	r3, r2
 80070fa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80070fe:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007100:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007102:	2b00      	cmp	r3, #0
 8007104:	d005      	beq.n	8007112 <find_volume+0x172>
 8007106:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007108:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800710a:	f7ff fef3 	bl	8006ef4 <check_fs>
 800710e:	4603      	mov	r3, r0
 8007110:	e000      	b.n	8007114 <find_volume+0x174>
 8007112:	2303      	movs	r3, #3
 8007114:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007118:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800711c:	2b01      	cmp	r3, #1
 800711e:	d905      	bls.n	800712c <find_volume+0x18c>
 8007120:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007122:	3301      	adds	r3, #1
 8007124:	643b      	str	r3, [r7, #64]	; 0x40
 8007126:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007128:	2b03      	cmp	r3, #3
 800712a:	d9e1      	bls.n	80070f0 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800712c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007130:	2b04      	cmp	r3, #4
 8007132:	d101      	bne.n	8007138 <find_volume+0x198>
 8007134:	2301      	movs	r3, #1
 8007136:	e17d      	b.n	8007434 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007138:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800713c:	2b01      	cmp	r3, #1
 800713e:	d901      	bls.n	8007144 <find_volume+0x1a4>
 8007140:	230d      	movs	r3, #13
 8007142:	e177      	b.n	8007434 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007146:	3334      	adds	r3, #52	; 0x34
 8007148:	330b      	adds	r3, #11
 800714a:	4618      	mov	r0, r3
 800714c:	f7fe fc08 	bl	8005960 <ld_word>
 8007150:	4603      	mov	r3, r0
 8007152:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007156:	d001      	beq.n	800715c <find_volume+0x1bc>
 8007158:	230d      	movs	r3, #13
 800715a:	e16b      	b.n	8007434 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800715c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715e:	3334      	adds	r3, #52	; 0x34
 8007160:	3316      	adds	r3, #22
 8007162:	4618      	mov	r0, r3
 8007164:	f7fe fbfc 	bl	8005960 <ld_word>
 8007168:	4603      	mov	r3, r0
 800716a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800716c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800716e:	2b00      	cmp	r3, #0
 8007170:	d106      	bne.n	8007180 <find_volume+0x1e0>
 8007172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007174:	3334      	adds	r3, #52	; 0x34
 8007176:	3324      	adds	r3, #36	; 0x24
 8007178:	4618      	mov	r0, r3
 800717a:	f7fe fc09 	bl	8005990 <ld_dword>
 800717e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007182:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007184:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007188:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800718c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800718e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007192:	789b      	ldrb	r3, [r3, #2]
 8007194:	2b01      	cmp	r3, #1
 8007196:	d005      	beq.n	80071a4 <find_volume+0x204>
 8007198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800719a:	789b      	ldrb	r3, [r3, #2]
 800719c:	2b02      	cmp	r3, #2
 800719e:	d001      	beq.n	80071a4 <find_volume+0x204>
 80071a0:	230d      	movs	r3, #13
 80071a2:	e147      	b.n	8007434 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80071a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a6:	789b      	ldrb	r3, [r3, #2]
 80071a8:	461a      	mov	r2, r3
 80071aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071ac:	fb02 f303 	mul.w	r3, r2, r3
 80071b0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80071b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071b8:	b29a      	uxth	r2, r3
 80071ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071bc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80071be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c0:	895b      	ldrh	r3, [r3, #10]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d008      	beq.n	80071d8 <find_volume+0x238>
 80071c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c8:	895b      	ldrh	r3, [r3, #10]
 80071ca:	461a      	mov	r2, r3
 80071cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ce:	895b      	ldrh	r3, [r3, #10]
 80071d0:	3b01      	subs	r3, #1
 80071d2:	4013      	ands	r3, r2
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d001      	beq.n	80071dc <find_volume+0x23c>
 80071d8:	230d      	movs	r3, #13
 80071da:	e12b      	b.n	8007434 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80071dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071de:	3334      	adds	r3, #52	; 0x34
 80071e0:	3311      	adds	r3, #17
 80071e2:	4618      	mov	r0, r3
 80071e4:	f7fe fbbc 	bl	8005960 <ld_word>
 80071e8:	4603      	mov	r3, r0
 80071ea:	461a      	mov	r2, r3
 80071ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ee:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80071f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f2:	891b      	ldrh	r3, [r3, #8]
 80071f4:	f003 030f 	and.w	r3, r3, #15
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d001      	beq.n	8007202 <find_volume+0x262>
 80071fe:	230d      	movs	r3, #13
 8007200:	e118      	b.n	8007434 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007204:	3334      	adds	r3, #52	; 0x34
 8007206:	3313      	adds	r3, #19
 8007208:	4618      	mov	r0, r3
 800720a:	f7fe fba9 	bl	8005960 <ld_word>
 800720e:	4603      	mov	r3, r0
 8007210:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007212:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007214:	2b00      	cmp	r3, #0
 8007216:	d106      	bne.n	8007226 <find_volume+0x286>
 8007218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800721a:	3334      	adds	r3, #52	; 0x34
 800721c:	3320      	adds	r3, #32
 800721e:	4618      	mov	r0, r3
 8007220:	f7fe fbb6 	bl	8005990 <ld_dword>
 8007224:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007228:	3334      	adds	r3, #52	; 0x34
 800722a:	330e      	adds	r3, #14
 800722c:	4618      	mov	r0, r3
 800722e:	f7fe fb97 	bl	8005960 <ld_word>
 8007232:	4603      	mov	r3, r0
 8007234:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007236:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007238:	2b00      	cmp	r3, #0
 800723a:	d101      	bne.n	8007240 <find_volume+0x2a0>
 800723c:	230d      	movs	r3, #13
 800723e:	e0f9      	b.n	8007434 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007240:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007244:	4413      	add	r3, r2
 8007246:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007248:	8912      	ldrh	r2, [r2, #8]
 800724a:	0912      	lsrs	r2, r2, #4
 800724c:	b292      	uxth	r2, r2
 800724e:	4413      	add	r3, r2
 8007250:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007252:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007256:	429a      	cmp	r2, r3
 8007258:	d201      	bcs.n	800725e <find_volume+0x2be>
 800725a:	230d      	movs	r3, #13
 800725c:	e0ea      	b.n	8007434 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800725e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007262:	1ad3      	subs	r3, r2, r3
 8007264:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007266:	8952      	ldrh	r2, [r2, #10]
 8007268:	fbb3 f3f2 	udiv	r3, r3, r2
 800726c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800726e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007270:	2b00      	cmp	r3, #0
 8007272:	d103      	bne.n	800727c <find_volume+0x2dc>
 8007274:	230d      	movs	r3, #13
 8007276:	e0dd      	b.n	8007434 <find_volume+0x494>
 8007278:	200006bc 	.word	0x200006bc
		fmt = FS_FAT32;
 800727c:	2303      	movs	r3, #3
 800727e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007284:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007288:	4293      	cmp	r3, r2
 800728a:	d802      	bhi.n	8007292 <find_volume+0x2f2>
 800728c:	2302      	movs	r3, #2
 800728e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007294:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007298:	4293      	cmp	r3, r2
 800729a:	d802      	bhi.n	80072a2 <find_volume+0x302>
 800729c:	2301      	movs	r3, #1
 800729e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80072a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a4:	1c9a      	adds	r2, r3, #2
 80072a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a8:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80072aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80072ae:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80072b0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80072b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072b4:	441a      	add	r2, r3
 80072b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b8:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80072ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80072bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072be:	441a      	add	r2, r3
 80072c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c2:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80072c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80072c8:	2b03      	cmp	r3, #3
 80072ca:	d11e      	bne.n	800730a <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80072cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ce:	3334      	adds	r3, #52	; 0x34
 80072d0:	332a      	adds	r3, #42	; 0x2a
 80072d2:	4618      	mov	r0, r3
 80072d4:	f7fe fb44 	bl	8005960 <ld_word>
 80072d8:	4603      	mov	r3, r0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d001      	beq.n	80072e2 <find_volume+0x342>
 80072de:	230d      	movs	r3, #13
 80072e0:	e0a8      	b.n	8007434 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80072e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e4:	891b      	ldrh	r3, [r3, #8]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d001      	beq.n	80072ee <find_volume+0x34e>
 80072ea:	230d      	movs	r3, #13
 80072ec:	e0a2      	b.n	8007434 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80072ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f0:	3334      	adds	r3, #52	; 0x34
 80072f2:	332c      	adds	r3, #44	; 0x2c
 80072f4:	4618      	mov	r0, r3
 80072f6:	f7fe fb4b 	bl	8005990 <ld_dword>
 80072fa:	4602      	mov	r2, r0
 80072fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072fe:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007302:	699b      	ldr	r3, [r3, #24]
 8007304:	009b      	lsls	r3, r3, #2
 8007306:	647b      	str	r3, [r7, #68]	; 0x44
 8007308:	e01f      	b.n	800734a <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800730a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800730c:	891b      	ldrh	r3, [r3, #8]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d101      	bne.n	8007316 <find_volume+0x376>
 8007312:	230d      	movs	r3, #13
 8007314:	e08e      	b.n	8007434 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007318:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800731a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800731c:	441a      	add	r2, r3
 800731e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007320:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007322:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007326:	2b02      	cmp	r3, #2
 8007328:	d103      	bne.n	8007332 <find_volume+0x392>
 800732a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800732c:	699b      	ldr	r3, [r3, #24]
 800732e:	005b      	lsls	r3, r3, #1
 8007330:	e00a      	b.n	8007348 <find_volume+0x3a8>
 8007332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007334:	699a      	ldr	r2, [r3, #24]
 8007336:	4613      	mov	r3, r2
 8007338:	005b      	lsls	r3, r3, #1
 800733a:	4413      	add	r3, r2
 800733c:	085a      	lsrs	r2, r3, #1
 800733e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007340:	699b      	ldr	r3, [r3, #24]
 8007342:	f003 0301 	and.w	r3, r3, #1
 8007346:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007348:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800734a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800734c:	69da      	ldr	r2, [r3, #28]
 800734e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007350:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007354:	0a5b      	lsrs	r3, r3, #9
 8007356:	429a      	cmp	r2, r3
 8007358:	d201      	bcs.n	800735e <find_volume+0x3be>
 800735a:	230d      	movs	r3, #13
 800735c:	e06a      	b.n	8007434 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800735e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007360:	f04f 32ff 	mov.w	r2, #4294967295
 8007364:	615a      	str	r2, [r3, #20]
 8007366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007368:	695a      	ldr	r2, [r3, #20]
 800736a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800736c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800736e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007370:	2280      	movs	r2, #128	; 0x80
 8007372:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007374:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007378:	2b03      	cmp	r3, #3
 800737a:	d149      	bne.n	8007410 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800737c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800737e:	3334      	adds	r3, #52	; 0x34
 8007380:	3330      	adds	r3, #48	; 0x30
 8007382:	4618      	mov	r0, r3
 8007384:	f7fe faec 	bl	8005960 <ld_word>
 8007388:	4603      	mov	r3, r0
 800738a:	2b01      	cmp	r3, #1
 800738c:	d140      	bne.n	8007410 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 800738e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007390:	3301      	adds	r3, #1
 8007392:	4619      	mov	r1, r3
 8007394:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007396:	f7fe fdc3 	bl	8005f20 <move_window>
 800739a:	4603      	mov	r3, r0
 800739c:	2b00      	cmp	r3, #0
 800739e:	d137      	bne.n	8007410 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 80073a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a2:	2200      	movs	r2, #0
 80073a4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80073a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a8:	3334      	adds	r3, #52	; 0x34
 80073aa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80073ae:	4618      	mov	r0, r3
 80073b0:	f7fe fad6 	bl	8005960 <ld_word>
 80073b4:	4603      	mov	r3, r0
 80073b6:	461a      	mov	r2, r3
 80073b8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80073bc:	429a      	cmp	r2, r3
 80073be:	d127      	bne.n	8007410 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80073c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c2:	3334      	adds	r3, #52	; 0x34
 80073c4:	4618      	mov	r0, r3
 80073c6:	f7fe fae3 	bl	8005990 <ld_dword>
 80073ca:	4602      	mov	r2, r0
 80073cc:	4b1b      	ldr	r3, [pc, #108]	; (800743c <find_volume+0x49c>)
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d11e      	bne.n	8007410 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80073d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d4:	3334      	adds	r3, #52	; 0x34
 80073d6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80073da:	4618      	mov	r0, r3
 80073dc:	f7fe fad8 	bl	8005990 <ld_dword>
 80073e0:	4602      	mov	r2, r0
 80073e2:	4b17      	ldr	r3, [pc, #92]	; (8007440 <find_volume+0x4a0>)
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d113      	bne.n	8007410 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80073e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ea:	3334      	adds	r3, #52	; 0x34
 80073ec:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80073f0:	4618      	mov	r0, r3
 80073f2:	f7fe facd 	bl	8005990 <ld_dword>
 80073f6:	4602      	mov	r2, r0
 80073f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073fa:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80073fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073fe:	3334      	adds	r3, #52	; 0x34
 8007400:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007404:	4618      	mov	r0, r3
 8007406:	f7fe fac3 	bl	8005990 <ld_dword>
 800740a:	4602      	mov	r2, r0
 800740c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800740e:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007412:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007416:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007418:	4b0a      	ldr	r3, [pc, #40]	; (8007444 <find_volume+0x4a4>)
 800741a:	881b      	ldrh	r3, [r3, #0]
 800741c:	3301      	adds	r3, #1
 800741e:	b29a      	uxth	r2, r3
 8007420:	4b08      	ldr	r3, [pc, #32]	; (8007444 <find_volume+0x4a4>)
 8007422:	801a      	strh	r2, [r3, #0]
 8007424:	4b07      	ldr	r3, [pc, #28]	; (8007444 <find_volume+0x4a4>)
 8007426:	881a      	ldrh	r2, [r3, #0]
 8007428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800742a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800742c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800742e:	f7fe fd0f 	bl	8005e50 <clear_lock>
#endif
	return FR_OK;
 8007432:	2300      	movs	r3, #0
}
 8007434:	4618      	mov	r0, r3
 8007436:	3758      	adds	r7, #88	; 0x58
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}
 800743c:	41615252 	.word	0x41615252
 8007440:	61417272 	.word	0x61417272
 8007444:	200006c0 	.word	0x200006c0

08007448 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007452:	2309      	movs	r3, #9
 8007454:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d02e      	beq.n	80074ba <validate+0x72>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d02a      	beq.n	80074ba <validate+0x72>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d025      	beq.n	80074ba <validate+0x72>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	889a      	ldrh	r2, [r3, #4]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	88db      	ldrh	r3, [r3, #6]
 8007478:	429a      	cmp	r2, r3
 800747a:	d11e      	bne.n	80074ba <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4618      	mov	r0, r3
 8007482:	f7fe fb6c 	bl	8005b5e <lock_fs>
 8007486:	4603      	mov	r3, r0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d014      	beq.n	80074b6 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	785b      	ldrb	r3, [r3, #1]
 8007492:	4618      	mov	r0, r3
 8007494:	f7fe f9c6 	bl	8005824 <disk_status>
 8007498:	4603      	mov	r3, r0
 800749a:	f003 0301 	and.w	r3, r3, #1
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d102      	bne.n	80074a8 <validate+0x60>
				res = FR_OK;
 80074a2:	2300      	movs	r3, #0
 80074a4:	73fb      	strb	r3, [r7, #15]
 80074a6:	e008      	b.n	80074ba <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	2100      	movs	r1, #0
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7fe fb6b 	bl	8005b8a <unlock_fs>
 80074b4:	e001      	b.n	80074ba <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 80074b6:	230f      	movs	r3, #15
 80074b8:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80074ba:	7bfb      	ldrb	r3, [r7, #15]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d102      	bne.n	80074c6 <validate+0x7e>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	e000      	b.n	80074c8 <validate+0x80>
 80074c6:	2300      	movs	r3, #0
 80074c8:	683a      	ldr	r2, [r7, #0]
 80074ca:	6013      	str	r3, [r2, #0]
	return res;
 80074cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3710      	adds	r7, #16
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
	...

080074d8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b088      	sub	sp, #32
 80074dc:	af00      	add	r7, sp, #0
 80074de:	60f8      	str	r0, [r7, #12]
 80074e0:	60b9      	str	r1, [r7, #8]
 80074e2:	4613      	mov	r3, r2
 80074e4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80074ea:	f107 0310 	add.w	r3, r7, #16
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7ff fcbb 	bl	8006e6a <get_ldnumber>
 80074f4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80074f6:	69fb      	ldr	r3, [r7, #28]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	da01      	bge.n	8007500 <f_mount+0x28>
 80074fc:	230b      	movs	r3, #11
 80074fe:	e048      	b.n	8007592 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007500:	4a26      	ldr	r2, [pc, #152]	; (800759c <f_mount+0xc4>)
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007508:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d00f      	beq.n	8007530 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007510:	69b8      	ldr	r0, [r7, #24]
 8007512:	f7fe fc9d 	bl	8005e50 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8007516:	69bb      	ldr	r3, [r7, #24]
 8007518:	68db      	ldr	r3, [r3, #12]
 800751a:	4618      	mov	r0, r3
 800751c:	f001 fb0f 	bl	8008b3e <ff_del_syncobj>
 8007520:	4603      	mov	r3, r0
 8007522:	2b00      	cmp	r3, #0
 8007524:	d101      	bne.n	800752a <f_mount+0x52>
 8007526:	2302      	movs	r3, #2
 8007528:	e033      	b.n	8007592 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800752a:	69bb      	ldr	r3, [r7, #24]
 800752c:	2200      	movs	r2, #0
 800752e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d00f      	beq.n	8007556 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2200      	movs	r2, #0
 800753a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	b2da      	uxtb	r2, r3
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	330c      	adds	r3, #12
 8007544:	4619      	mov	r1, r3
 8007546:	4610      	mov	r0, r2
 8007548:	f001 fad9 	bl	8008afe <ff_cre_syncobj>
 800754c:	4603      	mov	r3, r0
 800754e:	2b00      	cmp	r3, #0
 8007550:	d101      	bne.n	8007556 <f_mount+0x7e>
 8007552:	2302      	movs	r3, #2
 8007554:	e01d      	b.n	8007592 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007556:	68fa      	ldr	r2, [r7, #12]
 8007558:	4910      	ldr	r1, [pc, #64]	; (800759c <f_mount+0xc4>)
 800755a:	69fb      	ldr	r3, [r7, #28]
 800755c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d002      	beq.n	800756c <f_mount+0x94>
 8007566:	79fb      	ldrb	r3, [r7, #7]
 8007568:	2b01      	cmp	r3, #1
 800756a:	d001      	beq.n	8007570 <f_mount+0x98>
 800756c:	2300      	movs	r3, #0
 800756e:	e010      	b.n	8007592 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007570:	f107 010c 	add.w	r1, r7, #12
 8007574:	f107 0308 	add.w	r3, r7, #8
 8007578:	2200      	movs	r2, #0
 800757a:	4618      	mov	r0, r3
 800757c:	f7ff fd10 	bl	8006fa0 <find_volume>
 8007580:	4603      	mov	r3, r0
 8007582:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	7dfa      	ldrb	r2, [r7, #23]
 8007588:	4611      	mov	r1, r2
 800758a:	4618      	mov	r0, r3
 800758c:	f7fe fafd 	bl	8005b8a <unlock_fs>
 8007590:	7dfb      	ldrb	r3, [r7, #23]
}
 8007592:	4618      	mov	r0, r3
 8007594:	3720      	adds	r7, #32
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	200006bc 	.word	0x200006bc

080075a0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b098      	sub	sp, #96	; 0x60
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	60b9      	str	r1, [r7, #8]
 80075aa:	4613      	mov	r3, r2
 80075ac:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d101      	bne.n	80075b8 <f_open+0x18>
 80075b4:	2309      	movs	r3, #9
 80075b6:	e1b4      	b.n	8007922 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80075b8:	79fb      	ldrb	r3, [r7, #7]
 80075ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075be:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80075c0:	79fa      	ldrb	r2, [r7, #7]
 80075c2:	f107 0110 	add.w	r1, r7, #16
 80075c6:	f107 0308 	add.w	r3, r7, #8
 80075ca:	4618      	mov	r0, r3
 80075cc:	f7ff fce8 	bl	8006fa0 <find_volume>
 80075d0:	4603      	mov	r3, r0
 80075d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80075d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075da:	2b00      	cmp	r3, #0
 80075dc:	f040 8191 	bne.w	8007902 <f_open+0x362>
		dj.obj.fs = fs;
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80075e4:	68ba      	ldr	r2, [r7, #8]
 80075e6:	f107 0314 	add.w	r3, r7, #20
 80075ea:	4611      	mov	r1, r2
 80075ec:	4618      	mov	r0, r3
 80075ee:	f7ff fbcb 	bl	8006d88 <follow_path>
 80075f2:	4603      	mov	r3, r0
 80075f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80075f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d11a      	bne.n	8007636 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007600:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007604:	b25b      	sxtb	r3, r3
 8007606:	2b00      	cmp	r3, #0
 8007608:	da03      	bge.n	8007612 <f_open+0x72>
				res = FR_INVALID_NAME;
 800760a:	2306      	movs	r3, #6
 800760c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007610:	e011      	b.n	8007636 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007612:	79fb      	ldrb	r3, [r7, #7]
 8007614:	f023 0301 	bic.w	r3, r3, #1
 8007618:	2b00      	cmp	r3, #0
 800761a:	bf14      	ite	ne
 800761c:	2301      	movne	r3, #1
 800761e:	2300      	moveq	r3, #0
 8007620:	b2db      	uxtb	r3, r3
 8007622:	461a      	mov	r2, r3
 8007624:	f107 0314 	add.w	r3, r7, #20
 8007628:	4611      	mov	r1, r2
 800762a:	4618      	mov	r0, r3
 800762c:	f7fe fac8 	bl	8005bc0 <chk_lock>
 8007630:	4603      	mov	r3, r0
 8007632:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007636:	79fb      	ldrb	r3, [r7, #7]
 8007638:	f003 031c 	and.w	r3, r3, #28
 800763c:	2b00      	cmp	r3, #0
 800763e:	d07f      	beq.n	8007740 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8007640:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007644:	2b00      	cmp	r3, #0
 8007646:	d017      	beq.n	8007678 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007648:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800764c:	2b04      	cmp	r3, #4
 800764e:	d10e      	bne.n	800766e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007650:	f7fe fb12 	bl	8005c78 <enq_lock>
 8007654:	4603      	mov	r3, r0
 8007656:	2b00      	cmp	r3, #0
 8007658:	d006      	beq.n	8007668 <f_open+0xc8>
 800765a:	f107 0314 	add.w	r3, r7, #20
 800765e:	4618      	mov	r0, r3
 8007660:	f7ff fa4e 	bl	8006b00 <dir_register>
 8007664:	4603      	mov	r3, r0
 8007666:	e000      	b.n	800766a <f_open+0xca>
 8007668:	2312      	movs	r3, #18
 800766a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800766e:	79fb      	ldrb	r3, [r7, #7]
 8007670:	f043 0308 	orr.w	r3, r3, #8
 8007674:	71fb      	strb	r3, [r7, #7]
 8007676:	e010      	b.n	800769a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007678:	7ebb      	ldrb	r3, [r7, #26]
 800767a:	f003 0311 	and.w	r3, r3, #17
 800767e:	2b00      	cmp	r3, #0
 8007680:	d003      	beq.n	800768a <f_open+0xea>
					res = FR_DENIED;
 8007682:	2307      	movs	r3, #7
 8007684:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007688:	e007      	b.n	800769a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800768a:	79fb      	ldrb	r3, [r7, #7]
 800768c:	f003 0304 	and.w	r3, r3, #4
 8007690:	2b00      	cmp	r3, #0
 8007692:	d002      	beq.n	800769a <f_open+0xfa>
 8007694:	2308      	movs	r3, #8
 8007696:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800769a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d168      	bne.n	8007774 <f_open+0x1d4>
 80076a2:	79fb      	ldrb	r3, [r7, #7]
 80076a4:	f003 0308 	and.w	r3, r3, #8
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d063      	beq.n	8007774 <f_open+0x1d4>
				dw = GET_FATTIME();
 80076ac:	f005 f804 	bl	800c6b8 <get_fattime>
 80076b0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80076b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076b4:	330e      	adds	r3, #14
 80076b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80076b8:	4618      	mov	r0, r3
 80076ba:	f7fe f9a7 	bl	8005a0c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80076be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076c0:	3316      	adds	r3, #22
 80076c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80076c4:	4618      	mov	r0, r3
 80076c6:	f7fe f9a1 	bl	8005a0c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80076ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076cc:	330b      	adds	r3, #11
 80076ce:	2220      	movs	r2, #32
 80076d0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076d6:	4611      	mov	r1, r2
 80076d8:	4618      	mov	r0, r3
 80076da:	f7ff f920 	bl	800691e <ld_clust>
 80076de:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80076e4:	2200      	movs	r2, #0
 80076e6:	4618      	mov	r0, r3
 80076e8:	f7ff f938 	bl	800695c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80076ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076ee:	331c      	adds	r3, #28
 80076f0:	2100      	movs	r1, #0
 80076f2:	4618      	mov	r0, r3
 80076f4:	f7fe f98a 	bl	8005a0c <st_dword>
					fs->wflag = 1;
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	2201      	movs	r2, #1
 80076fc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80076fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007700:	2b00      	cmp	r3, #0
 8007702:	d037      	beq.n	8007774 <f_open+0x1d4>
						dw = fs->winsect;
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007708:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800770a:	f107 0314 	add.w	r3, r7, #20
 800770e:	2200      	movs	r2, #0
 8007710:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007712:	4618      	mov	r0, r3
 8007714:	f7fe fe4b 	bl	80063ae <remove_chain>
 8007718:	4603      	mov	r3, r0
 800771a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800771e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007722:	2b00      	cmp	r3, #0
 8007724:	d126      	bne.n	8007774 <f_open+0x1d4>
							res = move_window(fs, dw);
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800772a:	4618      	mov	r0, r3
 800772c:	f7fe fbf8 	bl	8005f20 <move_window>
 8007730:	4603      	mov	r3, r0
 8007732:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800773a:	3a01      	subs	r2, #1
 800773c:	611a      	str	r2, [r3, #16]
 800773e:	e019      	b.n	8007774 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007740:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007744:	2b00      	cmp	r3, #0
 8007746:	d115      	bne.n	8007774 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007748:	7ebb      	ldrb	r3, [r7, #26]
 800774a:	f003 0310 	and.w	r3, r3, #16
 800774e:	2b00      	cmp	r3, #0
 8007750:	d003      	beq.n	800775a <f_open+0x1ba>
					res = FR_NO_FILE;
 8007752:	2304      	movs	r3, #4
 8007754:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007758:	e00c      	b.n	8007774 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800775a:	79fb      	ldrb	r3, [r7, #7]
 800775c:	f003 0302 	and.w	r3, r3, #2
 8007760:	2b00      	cmp	r3, #0
 8007762:	d007      	beq.n	8007774 <f_open+0x1d4>
 8007764:	7ebb      	ldrb	r3, [r7, #26]
 8007766:	f003 0301 	and.w	r3, r3, #1
 800776a:	2b00      	cmp	r3, #0
 800776c:	d002      	beq.n	8007774 <f_open+0x1d4>
						res = FR_DENIED;
 800776e:	2307      	movs	r3, #7
 8007770:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8007774:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007778:	2b00      	cmp	r3, #0
 800777a:	d128      	bne.n	80077ce <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800777c:	79fb      	ldrb	r3, [r7, #7]
 800777e:	f003 0308 	and.w	r3, r3, #8
 8007782:	2b00      	cmp	r3, #0
 8007784:	d003      	beq.n	800778e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8007786:	79fb      	ldrb	r3, [r7, #7]
 8007788:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800778c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007796:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800779c:	79fb      	ldrb	r3, [r7, #7]
 800779e:	f023 0301 	bic.w	r3, r3, #1
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	bf14      	ite	ne
 80077a6:	2301      	movne	r3, #1
 80077a8:	2300      	moveq	r3, #0
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	461a      	mov	r2, r3
 80077ae:	f107 0314 	add.w	r3, r7, #20
 80077b2:	4611      	mov	r1, r2
 80077b4:	4618      	mov	r0, r3
 80077b6:	f7fe fa81 	bl	8005cbc <inc_lock>
 80077ba:	4602      	mov	r2, r0
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	691b      	ldr	r3, [r3, #16]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d102      	bne.n	80077ce <f_open+0x22e>
 80077c8:	2302      	movs	r3, #2
 80077ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80077ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	f040 8095 	bne.w	8007902 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077dc:	4611      	mov	r1, r2
 80077de:	4618      	mov	r0, r3
 80077e0:	f7ff f89d 	bl	800691e <ld_clust>
 80077e4:	4602      	mov	r2, r0
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80077ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077ec:	331c      	adds	r3, #28
 80077ee:	4618      	mov	r0, r3
 80077f0:	f7fe f8ce 	bl	8005990 <ld_dword>
 80077f4:	4602      	mov	r2, r0
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2200      	movs	r2, #0
 80077fe:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007800:	693a      	ldr	r2, [r7, #16]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	88da      	ldrh	r2, [r3, #6]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	79fa      	ldrb	r2, [r7, #7]
 8007812:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2200      	movs	r2, #0
 8007818:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2200      	movs	r2, #0
 800781e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2200      	movs	r2, #0
 8007824:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	3330      	adds	r3, #48	; 0x30
 800782a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800782e:	2100      	movs	r1, #0
 8007830:	4618      	mov	r0, r3
 8007832:	f7fe f938 	bl	8005aa6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007836:	79fb      	ldrb	r3, [r7, #7]
 8007838:	f003 0320 	and.w	r3, r3, #32
 800783c:	2b00      	cmp	r3, #0
 800783e:	d060      	beq.n	8007902 <f_open+0x362>
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	68db      	ldr	r3, [r3, #12]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d05c      	beq.n	8007902 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	68da      	ldr	r2, [r3, #12]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	895b      	ldrh	r3, [r3, #10]
 8007854:	025b      	lsls	r3, r3, #9
 8007856:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	657b      	str	r3, [r7, #84]	; 0x54
 8007864:	e016      	b.n	8007894 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800786a:	4618      	mov	r0, r3
 800786c:	f7fe fc13 	bl	8006096 <get_fat>
 8007870:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8007872:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007874:	2b01      	cmp	r3, #1
 8007876:	d802      	bhi.n	800787e <f_open+0x2de>
 8007878:	2302      	movs	r3, #2
 800787a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800787e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007884:	d102      	bne.n	800788c <f_open+0x2ec>
 8007886:	2301      	movs	r3, #1
 8007888:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800788c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800788e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007890:	1ad3      	subs	r3, r2, r3
 8007892:	657b      	str	r3, [r7, #84]	; 0x54
 8007894:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007898:	2b00      	cmp	r3, #0
 800789a:	d103      	bne.n	80078a4 <f_open+0x304>
 800789c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800789e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d8e0      	bhi.n	8007866 <f_open+0x2c6>
				}
				fp->clust = clst;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80078a8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80078aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d127      	bne.n	8007902 <f_open+0x362>
 80078b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d022      	beq.n	8007902 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80078c0:	4618      	mov	r0, r3
 80078c2:	f7fe fbc9 	bl	8006058 <clust2sect>
 80078c6:	6478      	str	r0, [r7, #68]	; 0x44
 80078c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d103      	bne.n	80078d6 <f_open+0x336>
						res = FR_INT_ERR;
 80078ce:	2302      	movs	r3, #2
 80078d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80078d4:	e015      	b.n	8007902 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80078d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078d8:	0a5a      	lsrs	r2, r3, #9
 80078da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078dc:	441a      	add	r2, r3
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	7858      	ldrb	r0, [r3, #1]
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6a1a      	ldr	r2, [r3, #32]
 80078f0:	2301      	movs	r3, #1
 80078f2:	f7fd ffd7 	bl	80058a4 <disk_read>
 80078f6:	4603      	mov	r3, r0
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d002      	beq.n	8007902 <f_open+0x362>
 80078fc:	2301      	movs	r3, #1
 80078fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007902:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007906:	2b00      	cmp	r3, #0
 8007908:	d002      	beq.n	8007910 <f_open+0x370>
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2200      	movs	r2, #0
 800790e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8007916:	4611      	mov	r1, r2
 8007918:	4618      	mov	r0, r3
 800791a:	f7fe f936 	bl	8005b8a <unlock_fs>
 800791e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8007922:	4618      	mov	r0, r3
 8007924:	3760      	adds	r7, #96	; 0x60
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}

0800792a <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800792a:	b580      	push	{r7, lr}
 800792c:	b08e      	sub	sp, #56	; 0x38
 800792e:	af00      	add	r7, sp, #0
 8007930:	60f8      	str	r0, [r7, #12]
 8007932:	60b9      	str	r1, [r7, #8]
 8007934:	607a      	str	r2, [r7, #4]
 8007936:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	2200      	movs	r2, #0
 8007940:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f107 0214 	add.w	r2, r7, #20
 8007948:	4611      	mov	r1, r2
 800794a:	4618      	mov	r0, r3
 800794c:	f7ff fd7c 	bl	8007448 <validate>
 8007950:	4603      	mov	r3, r0
 8007952:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007956:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800795a:	2b00      	cmp	r3, #0
 800795c:	d107      	bne.n	800796e <f_read+0x44>
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	7d5b      	ldrb	r3, [r3, #21]
 8007962:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007966:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800796a:	2b00      	cmp	r3, #0
 800796c:	d009      	beq.n	8007982 <f_read+0x58>
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8007974:	4611      	mov	r1, r2
 8007976:	4618      	mov	r0, r3
 8007978:	f7fe f907 	bl	8005b8a <unlock_fs>
 800797c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007980:	e13d      	b.n	8007bfe <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	7d1b      	ldrb	r3, [r3, #20]
 8007986:	f003 0301 	and.w	r3, r3, #1
 800798a:	2b00      	cmp	r3, #0
 800798c:	d106      	bne.n	800799c <f_read+0x72>
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	2107      	movs	r1, #7
 8007992:	4618      	mov	r0, r3
 8007994:	f7fe f8f9 	bl	8005b8a <unlock_fs>
 8007998:	2307      	movs	r3, #7
 800799a:	e130      	b.n	8007bfe <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	68da      	ldr	r2, [r3, #12]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	699b      	ldr	r3, [r3, #24]
 80079a4:	1ad3      	subs	r3, r2, r3
 80079a6:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80079a8:	687a      	ldr	r2, [r7, #4]
 80079aa:	6a3b      	ldr	r3, [r7, #32]
 80079ac:	429a      	cmp	r2, r3
 80079ae:	f240 811c 	bls.w	8007bea <f_read+0x2c0>
 80079b2:	6a3b      	ldr	r3, [r7, #32]
 80079b4:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80079b6:	e118      	b.n	8007bea <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	699b      	ldr	r3, [r3, #24]
 80079bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	f040 80e4 	bne.w	8007b8e <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	699b      	ldr	r3, [r3, #24]
 80079ca:	0a5b      	lsrs	r3, r3, #9
 80079cc:	697a      	ldr	r2, [r7, #20]
 80079ce:	8952      	ldrh	r2, [r2, #10]
 80079d0:	3a01      	subs	r2, #1
 80079d2:	4013      	ands	r3, r2
 80079d4:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d139      	bne.n	8007a50 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	699b      	ldr	r3, [r3, #24]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d103      	bne.n	80079ec <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	633b      	str	r3, [r7, #48]	; 0x30
 80079ea:	e013      	b.n	8007a14 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d007      	beq.n	8007a04 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	699b      	ldr	r3, [r3, #24]
 80079f8:	4619      	mov	r1, r3
 80079fa:	68f8      	ldr	r0, [r7, #12]
 80079fc:	f7fe fdd4 	bl	80065a8 <clmt_clust>
 8007a00:	6338      	str	r0, [r7, #48]	; 0x30
 8007a02:	e007      	b.n	8007a14 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007a04:	68fa      	ldr	r2, [r7, #12]
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	69db      	ldr	r3, [r3, #28]
 8007a0a:	4619      	mov	r1, r3
 8007a0c:	4610      	mov	r0, r2
 8007a0e:	f7fe fb42 	bl	8006096 <get_fat>
 8007a12:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d809      	bhi.n	8007a2e <f_read+0x104>
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2202      	movs	r2, #2
 8007a1e:	755a      	strb	r2, [r3, #21]
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	2102      	movs	r1, #2
 8007a24:	4618      	mov	r0, r3
 8007a26:	f7fe f8b0 	bl	8005b8a <unlock_fs>
 8007a2a:	2302      	movs	r3, #2
 8007a2c:	e0e7      	b.n	8007bfe <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a34:	d109      	bne.n	8007a4a <f_read+0x120>
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2201      	movs	r2, #1
 8007a3a:	755a      	strb	r2, [r3, #21]
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	2101      	movs	r1, #1
 8007a40:	4618      	mov	r0, r3
 8007a42:	f7fe f8a2 	bl	8005b8a <unlock_fs>
 8007a46:	2301      	movs	r3, #1
 8007a48:	e0d9      	b.n	8007bfe <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a4e:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007a50:	697a      	ldr	r2, [r7, #20]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	69db      	ldr	r3, [r3, #28]
 8007a56:	4619      	mov	r1, r3
 8007a58:	4610      	mov	r0, r2
 8007a5a:	f7fe fafd 	bl	8006058 <clust2sect>
 8007a5e:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007a60:	69bb      	ldr	r3, [r7, #24]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d109      	bne.n	8007a7a <f_read+0x150>
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2202      	movs	r2, #2
 8007a6a:	755a      	strb	r2, [r3, #21]
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	2102      	movs	r1, #2
 8007a70:	4618      	mov	r0, r3
 8007a72:	f7fe f88a 	bl	8005b8a <unlock_fs>
 8007a76:	2302      	movs	r3, #2
 8007a78:	e0c1      	b.n	8007bfe <f_read+0x2d4>
			sect += csect;
 8007a7a:	69ba      	ldr	r2, [r7, #24]
 8007a7c:	69fb      	ldr	r3, [r7, #28]
 8007a7e:	4413      	add	r3, r2
 8007a80:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	0a5b      	lsrs	r3, r3, #9
 8007a86:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d03e      	beq.n	8007b0c <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007a8e:	69fa      	ldr	r2, [r7, #28]
 8007a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a92:	4413      	add	r3, r2
 8007a94:	697a      	ldr	r2, [r7, #20]
 8007a96:	8952      	ldrh	r2, [r2, #10]
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d905      	bls.n	8007aa8 <f_read+0x17e>
					cc = fs->csize - csect;
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	895b      	ldrh	r3, [r3, #10]
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	69fb      	ldr	r3, [r7, #28]
 8007aa4:	1ad3      	subs	r3, r2, r3
 8007aa6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	7858      	ldrb	r0, [r3, #1]
 8007aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aae:	69ba      	ldr	r2, [r7, #24]
 8007ab0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007ab2:	f7fd fef7 	bl	80058a4 <disk_read>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d009      	beq.n	8007ad0 <f_read+0x1a6>
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2201      	movs	r2, #1
 8007ac0:	755a      	strb	r2, [r3, #21]
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	2101      	movs	r1, #1
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f7fe f85f 	bl	8005b8a <unlock_fs>
 8007acc:	2301      	movs	r3, #1
 8007ace:	e096      	b.n	8007bfe <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	7d1b      	ldrb	r3, [r3, #20]
 8007ad4:	b25b      	sxtb	r3, r3
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	da14      	bge.n	8007b04 <f_read+0x1da>
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	6a1a      	ldr	r2, [r3, #32]
 8007ade:	69bb      	ldr	r3, [r7, #24]
 8007ae0:	1ad3      	subs	r3, r2, r3
 8007ae2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d90d      	bls.n	8007b04 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	6a1a      	ldr	r2, [r3, #32]
 8007aec:	69bb      	ldr	r3, [r7, #24]
 8007aee:	1ad3      	subs	r3, r2, r3
 8007af0:	025b      	lsls	r3, r3, #9
 8007af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007af4:	18d0      	adds	r0, r2, r3
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	3330      	adds	r3, #48	; 0x30
 8007afa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007afe:	4619      	mov	r1, r3
 8007b00:	f7fd ffb0 	bl	8005a64 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8007b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b06:	025b      	lsls	r3, r3, #9
 8007b08:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8007b0a:	e05a      	b.n	8007bc2 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	6a1b      	ldr	r3, [r3, #32]
 8007b10:	69ba      	ldr	r2, [r7, #24]
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d038      	beq.n	8007b88 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	7d1b      	ldrb	r3, [r3, #20]
 8007b1a:	b25b      	sxtb	r3, r3
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	da1d      	bge.n	8007b5c <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	7858      	ldrb	r0, [r3, #1]
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	6a1a      	ldr	r2, [r3, #32]
 8007b2e:	2301      	movs	r3, #1
 8007b30:	f7fd fed8 	bl	80058e4 <disk_write>
 8007b34:	4603      	mov	r3, r0
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d009      	beq.n	8007b4e <f_read+0x224>
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	755a      	strb	r2, [r3, #21]
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	2101      	movs	r1, #1
 8007b44:	4618      	mov	r0, r3
 8007b46:	f7fe f820 	bl	8005b8a <unlock_fs>
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e057      	b.n	8007bfe <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	7d1b      	ldrb	r3, [r3, #20]
 8007b52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b56:	b2da      	uxtb	r2, r3
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	7858      	ldrb	r0, [r3, #1]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007b66:	2301      	movs	r3, #1
 8007b68:	69ba      	ldr	r2, [r7, #24]
 8007b6a:	f7fd fe9b 	bl	80058a4 <disk_read>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d009      	beq.n	8007b88 <f_read+0x25e>
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2201      	movs	r2, #1
 8007b78:	755a      	strb	r2, [r3, #21]
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	2101      	movs	r1, #1
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f7fe f803 	bl	8005b8a <unlock_fs>
 8007b84:	2301      	movs	r3, #1
 8007b86:	e03a      	b.n	8007bfe <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	69ba      	ldr	r2, [r7, #24]
 8007b8c:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	699b      	ldr	r3, [r3, #24]
 8007b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b96:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8007b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8007b9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d901      	bls.n	8007ba8 <f_read+0x27e>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	699b      	ldr	r3, [r3, #24]
 8007bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bb6:	4413      	add	r3, r2
 8007bb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bba:	4619      	mov	r1, r3
 8007bbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007bbe:	f7fd ff51 	bl	8005a64 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc6:	4413      	add	r3, r2
 8007bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	699a      	ldr	r2, [r3, #24]
 8007bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd0:	441a      	add	r2, r3
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	619a      	str	r2, [r3, #24]
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bdc:	441a      	add	r2, r3
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	601a      	str	r2, [r3, #0]
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be6:	1ad3      	subs	r3, r2, r3
 8007be8:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	f47f aee3 	bne.w	80079b8 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	2100      	movs	r1, #0
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f7fd ffc7 	bl	8005b8a <unlock_fs>
 8007bfc:	2300      	movs	r3, #0
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3738      	adds	r7, #56	; 0x38
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b08c      	sub	sp, #48	; 0x30
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	60f8      	str	r0, [r7, #12]
 8007c0e:	60b9      	str	r1, [r7, #8]
 8007c10:	607a      	str	r2, [r7, #4]
 8007c12:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f107 0210 	add.w	r2, r7, #16
 8007c24:	4611      	mov	r1, r2
 8007c26:	4618      	mov	r0, r3
 8007c28:	f7ff fc0e 	bl	8007448 <validate>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007c32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d107      	bne.n	8007c4a <f_write+0x44>
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	7d5b      	ldrb	r3, [r3, #21]
 8007c3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007c42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d009      	beq.n	8007c5e <f_write+0x58>
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007c50:	4611      	mov	r1, r2
 8007c52:	4618      	mov	r0, r3
 8007c54:	f7fd ff99 	bl	8005b8a <unlock_fs>
 8007c58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007c5c:	e173      	b.n	8007f46 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	7d1b      	ldrb	r3, [r3, #20]
 8007c62:	f003 0302 	and.w	r3, r3, #2
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d106      	bne.n	8007c78 <f_write+0x72>
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	2107      	movs	r1, #7
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f7fd ff8b 	bl	8005b8a <unlock_fs>
 8007c74:	2307      	movs	r3, #7
 8007c76:	e166      	b.n	8007f46 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	699a      	ldr	r2, [r3, #24]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	441a      	add	r2, r3
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	699b      	ldr	r3, [r3, #24]
 8007c84:	429a      	cmp	r2, r3
 8007c86:	f080 814b 	bcs.w	8007f20 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	699b      	ldr	r3, [r3, #24]
 8007c8e:	43db      	mvns	r3, r3
 8007c90:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007c92:	e145      	b.n	8007f20 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	699b      	ldr	r3, [r3, #24]
 8007c98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	f040 8101 	bne.w	8007ea4 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	699b      	ldr	r3, [r3, #24]
 8007ca6:	0a5b      	lsrs	r3, r3, #9
 8007ca8:	693a      	ldr	r2, [r7, #16]
 8007caa:	8952      	ldrh	r2, [r2, #10]
 8007cac:	3a01      	subs	r2, #1
 8007cae:	4013      	ands	r3, r2
 8007cb0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007cb2:	69bb      	ldr	r3, [r7, #24]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d14d      	bne.n	8007d54 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	699b      	ldr	r3, [r3, #24]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d10c      	bne.n	8007cda <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d11a      	bne.n	8007d02 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2100      	movs	r1, #0
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f7fe fbd1 	bl	8006478 <create_chain>
 8007cd6:	62b8      	str	r0, [r7, #40]	; 0x28
 8007cd8:	e013      	b.n	8007d02 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d007      	beq.n	8007cf2 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	699b      	ldr	r3, [r3, #24]
 8007ce6:	4619      	mov	r1, r3
 8007ce8:	68f8      	ldr	r0, [r7, #12]
 8007cea:	f7fe fc5d 	bl	80065a8 <clmt_clust>
 8007cee:	62b8      	str	r0, [r7, #40]	; 0x28
 8007cf0:	e007      	b.n	8007d02 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007cf2:	68fa      	ldr	r2, [r7, #12]
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	69db      	ldr	r3, [r3, #28]
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	4610      	mov	r0, r2
 8007cfc:	f7fe fbbc 	bl	8006478 <create_chain>
 8007d00:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	f000 8110 	beq.w	8007f2a <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d109      	bne.n	8007d24 <f_write+0x11e>
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2202      	movs	r2, #2
 8007d14:	755a      	strb	r2, [r3, #21]
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	2102      	movs	r1, #2
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f7fd ff35 	bl	8005b8a <unlock_fs>
 8007d20:	2302      	movs	r3, #2
 8007d22:	e110      	b.n	8007f46 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d2a:	d109      	bne.n	8007d40 <f_write+0x13a>
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	755a      	strb	r2, [r3, #21]
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	2101      	movs	r1, #1
 8007d36:	4618      	mov	r0, r3
 8007d38:	f7fd ff27 	bl	8005b8a <unlock_fs>
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	e102      	b.n	8007f46 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d44:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d102      	bne.n	8007d54 <f_write+0x14e>
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d52:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	7d1b      	ldrb	r3, [r3, #20]
 8007d58:	b25b      	sxtb	r3, r3
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	da1d      	bge.n	8007d9a <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	7858      	ldrb	r0, [r3, #1]
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	6a1a      	ldr	r2, [r3, #32]
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	f7fd fdb9 	bl	80058e4 <disk_write>
 8007d72:	4603      	mov	r3, r0
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d009      	beq.n	8007d8c <f_write+0x186>
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	755a      	strb	r2, [r3, #21]
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	2101      	movs	r1, #1
 8007d82:	4618      	mov	r0, r3
 8007d84:	f7fd ff01 	bl	8005b8a <unlock_fs>
 8007d88:	2301      	movs	r3, #1
 8007d8a:	e0dc      	b.n	8007f46 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	7d1b      	ldrb	r3, [r3, #20]
 8007d90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d94:	b2da      	uxtb	r2, r3
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007d9a:	693a      	ldr	r2, [r7, #16]
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	69db      	ldr	r3, [r3, #28]
 8007da0:	4619      	mov	r1, r3
 8007da2:	4610      	mov	r0, r2
 8007da4:	f7fe f958 	bl	8006058 <clust2sect>
 8007da8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d109      	bne.n	8007dc4 <f_write+0x1be>
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2202      	movs	r2, #2
 8007db4:	755a      	strb	r2, [r3, #21]
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	2102      	movs	r1, #2
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f7fd fee5 	bl	8005b8a <unlock_fs>
 8007dc0:	2302      	movs	r3, #2
 8007dc2:	e0c0      	b.n	8007f46 <f_write+0x340>
			sect += csect;
 8007dc4:	697a      	ldr	r2, [r7, #20]
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	4413      	add	r3, r2
 8007dca:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	0a5b      	lsrs	r3, r3, #9
 8007dd0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007dd2:	6a3b      	ldr	r3, [r7, #32]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d041      	beq.n	8007e5c <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007dd8:	69ba      	ldr	r2, [r7, #24]
 8007dda:	6a3b      	ldr	r3, [r7, #32]
 8007ddc:	4413      	add	r3, r2
 8007dde:	693a      	ldr	r2, [r7, #16]
 8007de0:	8952      	ldrh	r2, [r2, #10]
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d905      	bls.n	8007df2 <f_write+0x1ec>
					cc = fs->csize - csect;
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	895b      	ldrh	r3, [r3, #10]
 8007dea:	461a      	mov	r2, r3
 8007dec:	69bb      	ldr	r3, [r7, #24]
 8007dee:	1ad3      	subs	r3, r2, r3
 8007df0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	7858      	ldrb	r0, [r3, #1]
 8007df6:	6a3b      	ldr	r3, [r7, #32]
 8007df8:	697a      	ldr	r2, [r7, #20]
 8007dfa:	69f9      	ldr	r1, [r7, #28]
 8007dfc:	f7fd fd72 	bl	80058e4 <disk_write>
 8007e00:	4603      	mov	r3, r0
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d009      	beq.n	8007e1a <f_write+0x214>
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2201      	movs	r2, #1
 8007e0a:	755a      	strb	r2, [r3, #21]
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	2101      	movs	r1, #1
 8007e10:	4618      	mov	r0, r3
 8007e12:	f7fd feba 	bl	8005b8a <unlock_fs>
 8007e16:	2301      	movs	r3, #1
 8007e18:	e095      	b.n	8007f46 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	6a1a      	ldr	r2, [r3, #32]
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	1ad3      	subs	r3, r2, r3
 8007e22:	6a3a      	ldr	r2, [r7, #32]
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d915      	bls.n	8007e54 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	6a1a      	ldr	r2, [r3, #32]
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	1ad3      	subs	r3, r2, r3
 8007e36:	025b      	lsls	r3, r3, #9
 8007e38:	69fa      	ldr	r2, [r7, #28]
 8007e3a:	4413      	add	r3, r2
 8007e3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e40:	4619      	mov	r1, r3
 8007e42:	f7fd fe0f 	bl	8005a64 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	7d1b      	ldrb	r3, [r3, #20]
 8007e4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e4e:	b2da      	uxtb	r2, r3
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007e54:	6a3b      	ldr	r3, [r7, #32]
 8007e56:	025b      	lsls	r3, r3, #9
 8007e58:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8007e5a:	e044      	b.n	8007ee6 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	6a1b      	ldr	r3, [r3, #32]
 8007e60:	697a      	ldr	r2, [r7, #20]
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d01b      	beq.n	8007e9e <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	699a      	ldr	r2, [r3, #24]
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d215      	bcs.n	8007e9e <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	7858      	ldrb	r0, [r3, #1]
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	697a      	ldr	r2, [r7, #20]
 8007e80:	f7fd fd10 	bl	80058a4 <disk_read>
 8007e84:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d009      	beq.n	8007e9e <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	755a      	strb	r2, [r3, #21]
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	2101      	movs	r1, #1
 8007e94:	4618      	mov	r0, r3
 8007e96:	f7fd fe78 	bl	8005b8a <unlock_fs>
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e053      	b.n	8007f46 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	697a      	ldr	r2, [r7, #20]
 8007ea2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	699b      	ldr	r3, [r3, #24]
 8007ea8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eac:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8007eb0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d901      	bls.n	8007ebe <f_write+0x2b8>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	699b      	ldr	r3, [r3, #24]
 8007ec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ecc:	4413      	add	r3, r2
 8007ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ed0:	69f9      	ldr	r1, [r7, #28]
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f7fd fdc6 	bl	8005a64 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	7d1b      	ldrb	r3, [r3, #20]
 8007edc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007ee0:	b2da      	uxtb	r2, r3
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007ee6:	69fa      	ldr	r2, [r7, #28]
 8007ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eea:	4413      	add	r3, r2
 8007eec:	61fb      	str	r3, [r7, #28]
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	699a      	ldr	r2, [r3, #24]
 8007ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef4:	441a      	add	r2, r3
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	619a      	str	r2, [r3, #24]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	68da      	ldr	r2, [r3, #12]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	699b      	ldr	r3, [r3, #24]
 8007f02:	429a      	cmp	r2, r3
 8007f04:	bf38      	it	cc
 8007f06:	461a      	movcc	r2, r3
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	60da      	str	r2, [r3, #12]
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	681a      	ldr	r2, [r3, #0]
 8007f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f12:	441a      	add	r2, r3
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	601a      	str	r2, [r3, #0]
 8007f18:	687a      	ldr	r2, [r7, #4]
 8007f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1c:	1ad3      	subs	r3, r2, r3
 8007f1e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	f47f aeb6 	bne.w	8007c94 <f_write+0x8e>
 8007f28:	e000      	b.n	8007f2c <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007f2a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	7d1b      	ldrb	r3, [r3, #20]
 8007f30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f34:	b2da      	uxtb	r2, r3
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	2100      	movs	r1, #0
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f7fd fe23 	bl	8005b8a <unlock_fs>
 8007f44:	2300      	movs	r3, #0
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3730      	adds	r7, #48	; 0x30
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}

08007f4e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007f4e:	b580      	push	{r7, lr}
 8007f50:	b086      	sub	sp, #24
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f107 0208 	add.w	r2, r7, #8
 8007f5c:	4611      	mov	r1, r2
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f7ff fa72 	bl	8007448 <validate>
 8007f64:	4603      	mov	r3, r0
 8007f66:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007f68:	7dfb      	ldrb	r3, [r7, #23]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d16d      	bne.n	800804a <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	7d1b      	ldrb	r3, [r3, #20]
 8007f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d067      	beq.n	800804a <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	7d1b      	ldrb	r3, [r3, #20]
 8007f7e:	b25b      	sxtb	r3, r3
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	da1a      	bge.n	8007fba <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	7858      	ldrb	r0, [r3, #1]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6a1a      	ldr	r2, [r3, #32]
 8007f92:	2301      	movs	r3, #1
 8007f94:	f7fd fca6 	bl	80058e4 <disk_write>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d006      	beq.n	8007fac <f_sync+0x5e>
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	2101      	movs	r1, #1
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f7fd fdf1 	bl	8005b8a <unlock_fs>
 8007fa8:	2301      	movs	r3, #1
 8007faa:	e055      	b.n	8008058 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	7d1b      	ldrb	r3, [r3, #20]
 8007fb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fb4:	b2da      	uxtb	r2, r3
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007fba:	f004 fb7d 	bl	800c6b8 <get_fattime>
 8007fbe:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007fc0:	68ba      	ldr	r2, [r7, #8]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	4610      	mov	r0, r2
 8007fca:	f7fd ffa9 	bl	8005f20 <move_window>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007fd2:	7dfb      	ldrb	r3, [r7, #23]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d138      	bne.n	800804a <f_sync+0xfc>
					dir = fp->dir_ptr;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fdc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	330b      	adds	r3, #11
 8007fe2:	781a      	ldrb	r2, [r3, #0]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	330b      	adds	r3, #11
 8007fe8:	f042 0220 	orr.w	r2, r2, #32
 8007fec:	b2d2      	uxtb	r2, r2
 8007fee:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6818      	ldr	r0, [r3, #0]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	68f9      	ldr	r1, [r7, #12]
 8007ffc:	f7fe fcae 	bl	800695c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f103 021c 	add.w	r2, r3, #28
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	68db      	ldr	r3, [r3, #12]
 800800a:	4619      	mov	r1, r3
 800800c:	4610      	mov	r0, r2
 800800e:	f7fd fcfd 	bl	8005a0c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	3316      	adds	r3, #22
 8008016:	6939      	ldr	r1, [r7, #16]
 8008018:	4618      	mov	r0, r3
 800801a:	f7fd fcf7 	bl	8005a0c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	3312      	adds	r3, #18
 8008022:	2100      	movs	r1, #0
 8008024:	4618      	mov	r0, r3
 8008026:	f7fd fcd6 	bl	80059d6 <st_word>
					fs->wflag = 1;
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	2201      	movs	r2, #1
 800802e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	4618      	mov	r0, r3
 8008034:	f7fd ffa2 	bl	8005f7c <sync_fs>
 8008038:	4603      	mov	r3, r0
 800803a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	7d1b      	ldrb	r3, [r3, #20]
 8008040:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008044:	b2da      	uxtb	r2, r3
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	7dfa      	ldrb	r2, [r7, #23]
 800804e:	4611      	mov	r1, r2
 8008050:	4618      	mov	r0, r3
 8008052:	f7fd fd9a 	bl	8005b8a <unlock_fs>
 8008056:	7dfb      	ldrb	r3, [r7, #23]
}
 8008058:	4618      	mov	r0, r3
 800805a:	3718      	adds	r7, #24
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f7ff ff70 	bl	8007f4e <f_sync>
 800806e:	4603      	mov	r3, r0
 8008070:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008072:	7bfb      	ldrb	r3, [r7, #15]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d11d      	bne.n	80080b4 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f107 0208 	add.w	r2, r7, #8
 800807e:	4611      	mov	r1, r2
 8008080:	4618      	mov	r0, r3
 8008082:	f7ff f9e1 	bl	8007448 <validate>
 8008086:	4603      	mov	r3, r0
 8008088:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800808a:	7bfb      	ldrb	r3, [r7, #15]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d111      	bne.n	80080b4 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	691b      	ldr	r3, [r3, #16]
 8008094:	4618      	mov	r0, r3
 8008096:	f7fd fe9f 	bl	8005dd8 <dec_lock>
 800809a:	4603      	mov	r3, r0
 800809c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800809e:	7bfb      	ldrb	r3, [r7, #15]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d102      	bne.n	80080aa <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2200      	movs	r2, #0
 80080a8:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	2100      	movs	r1, #0
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7fd fd6b 	bl	8005b8a <unlock_fs>
#endif
		}
	}
	return res;
 80080b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3710      	adds	r7, #16
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}

080080be <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80080be:	b580      	push	{r7, lr}
 80080c0:	b090      	sub	sp, #64	; 0x40
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
 80080c6:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f107 0208 	add.w	r2, r7, #8
 80080ce:	4611      	mov	r1, r2
 80080d0:	4618      	mov	r0, r3
 80080d2:	f7ff f9b9 	bl	8007448 <validate>
 80080d6:	4603      	mov	r3, r0
 80080d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80080dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d103      	bne.n	80080ec <f_lseek+0x2e>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	7d5b      	ldrb	r3, [r3, #21]
 80080e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80080ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d009      	beq.n	8008108 <f_lseek+0x4a>
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80080fa:	4611      	mov	r1, r2
 80080fc:	4618      	mov	r0, r3
 80080fe:	f7fd fd44 	bl	8005b8a <unlock_fs>
 8008102:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008106:	e229      	b.n	800855c <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800810c:	2b00      	cmp	r3, #0
 800810e:	f000 80ea 	beq.w	80082e6 <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008118:	d164      	bne.n	80081e4 <f_lseek+0x126>
			tbl = fp->cltbl;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800811e:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8008120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008122:	1d1a      	adds	r2, r3, #4
 8008124:	627a      	str	r2, [r7, #36]	; 0x24
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	617b      	str	r3, [r7, #20]
 800812a:	2302      	movs	r3, #2
 800812c:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8008134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008136:	2b00      	cmp	r3, #0
 8008138:	d044      	beq.n	80081c4 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800813a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800813c:	613b      	str	r3, [r7, #16]
 800813e:	2300      	movs	r3, #0
 8008140:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008144:	3302      	adds	r3, #2
 8008146:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8008148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814a:	60fb      	str	r3, [r7, #12]
 800814c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800814e:	3301      	adds	r3, #1
 8008150:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008156:	4618      	mov	r0, r3
 8008158:	f7fd ff9d 	bl	8006096 <get_fat>
 800815c:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800815e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008160:	2b01      	cmp	r3, #1
 8008162:	d809      	bhi.n	8008178 <f_lseek+0xba>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2202      	movs	r2, #2
 8008168:	755a      	strb	r2, [r3, #21]
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	2102      	movs	r1, #2
 800816e:	4618      	mov	r0, r3
 8008170:	f7fd fd0b 	bl	8005b8a <unlock_fs>
 8008174:	2302      	movs	r3, #2
 8008176:	e1f1      	b.n	800855c <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800817a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800817e:	d109      	bne.n	8008194 <f_lseek+0xd6>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2201      	movs	r2, #1
 8008184:	755a      	strb	r2, [r3, #21]
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	2101      	movs	r1, #1
 800818a:	4618      	mov	r0, r3
 800818c:	f7fd fcfd 	bl	8005b8a <unlock_fs>
 8008190:	2301      	movs	r3, #1
 8008192:	e1e3      	b.n	800855c <f_lseek+0x49e>
					} while (cl == pcl + 1);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	3301      	adds	r3, #1
 8008198:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800819a:	429a      	cmp	r2, r3
 800819c:	d0d4      	beq.n	8008148 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800819e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	429a      	cmp	r2, r3
 80081a4:	d809      	bhi.n	80081ba <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 80081a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a8:	1d1a      	adds	r2, r3, #4
 80081aa:	627a      	str	r2, [r7, #36]	; 0x24
 80081ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081ae:	601a      	str	r2, [r3, #0]
 80081b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b2:	1d1a      	adds	r2, r3, #4
 80081b4:	627a      	str	r2, [r7, #36]	; 0x24
 80081b6:	693a      	ldr	r2, [r7, #16]
 80081b8:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	699b      	ldr	r3, [r3, #24]
 80081be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d3ba      	bcc.n	800813a <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081ca:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80081cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	429a      	cmp	r2, r3
 80081d2:	d803      	bhi.n	80081dc <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 80081d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d6:	2200      	movs	r2, #0
 80081d8:	601a      	str	r2, [r3, #0]
 80081da:	e1b6      	b.n	800854a <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80081dc:	2311      	movs	r3, #17
 80081de:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80081e2:	e1b2      	b.n	800854a <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	68db      	ldr	r3, [r3, #12]
 80081e8:	683a      	ldr	r2, [r7, #0]
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d902      	bls.n	80081f4 <f_lseek+0x136>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	68db      	ldr	r3, [r3, #12]
 80081f2:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	683a      	ldr	r2, [r7, #0]
 80081f8:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	f000 81a4 	beq.w	800854a <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	3b01      	subs	r3, #1
 8008206:	4619      	mov	r1, r3
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f7fe f9cd 	bl	80065a8 <clmt_clust>
 800820e:	4602      	mov	r2, r0
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8008214:	68ba      	ldr	r2, [r7, #8]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	69db      	ldr	r3, [r3, #28]
 800821a:	4619      	mov	r1, r3
 800821c:	4610      	mov	r0, r2
 800821e:	f7fd ff1b 	bl	8006058 <clust2sect>
 8008222:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8008224:	69bb      	ldr	r3, [r7, #24]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d109      	bne.n	800823e <f_lseek+0x180>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2202      	movs	r2, #2
 800822e:	755a      	strb	r2, [r3, #21]
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	2102      	movs	r1, #2
 8008234:	4618      	mov	r0, r3
 8008236:	f7fd fca8 	bl	8005b8a <unlock_fs>
 800823a:	2302      	movs	r3, #2
 800823c:	e18e      	b.n	800855c <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	3b01      	subs	r3, #1
 8008242:	0a5b      	lsrs	r3, r3, #9
 8008244:	68ba      	ldr	r2, [r7, #8]
 8008246:	8952      	ldrh	r2, [r2, #10]
 8008248:	3a01      	subs	r2, #1
 800824a:	4013      	ands	r3, r2
 800824c:	69ba      	ldr	r2, [r7, #24]
 800824e:	4413      	add	r3, r2
 8008250:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	699b      	ldr	r3, [r3, #24]
 8008256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800825a:	2b00      	cmp	r3, #0
 800825c:	f000 8175 	beq.w	800854a <f_lseek+0x48c>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6a1b      	ldr	r3, [r3, #32]
 8008264:	69ba      	ldr	r2, [r7, #24]
 8008266:	429a      	cmp	r2, r3
 8008268:	f000 816f 	beq.w	800854a <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	7d1b      	ldrb	r3, [r3, #20]
 8008270:	b25b      	sxtb	r3, r3
 8008272:	2b00      	cmp	r3, #0
 8008274:	da1d      	bge.n	80082b2 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	7858      	ldrb	r0, [r3, #1]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6a1a      	ldr	r2, [r3, #32]
 8008284:	2301      	movs	r3, #1
 8008286:	f7fd fb2d 	bl	80058e4 <disk_write>
 800828a:	4603      	mov	r3, r0
 800828c:	2b00      	cmp	r3, #0
 800828e:	d009      	beq.n	80082a4 <f_lseek+0x1e6>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2201      	movs	r2, #1
 8008294:	755a      	strb	r2, [r3, #21]
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	2101      	movs	r1, #1
 800829a:	4618      	mov	r0, r3
 800829c:	f7fd fc75 	bl	8005b8a <unlock_fs>
 80082a0:	2301      	movs	r3, #1
 80082a2:	e15b      	b.n	800855c <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	7d1b      	ldrb	r3, [r3, #20]
 80082a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082ac:	b2da      	uxtb	r2, r3
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	7858      	ldrb	r0, [r3, #1]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80082bc:	2301      	movs	r3, #1
 80082be:	69ba      	ldr	r2, [r7, #24]
 80082c0:	f7fd faf0 	bl	80058a4 <disk_read>
 80082c4:	4603      	mov	r3, r0
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d009      	beq.n	80082de <f_lseek+0x220>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2201      	movs	r2, #1
 80082ce:	755a      	strb	r2, [r3, #21]
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	2101      	movs	r1, #1
 80082d4:	4618      	mov	r0, r3
 80082d6:	f7fd fc58 	bl	8005b8a <unlock_fs>
 80082da:	2301      	movs	r3, #1
 80082dc:	e13e      	b.n	800855c <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	69ba      	ldr	r2, [r7, #24]
 80082e2:	621a      	str	r2, [r3, #32]
 80082e4:	e131      	b.n	800854a <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	68db      	ldr	r3, [r3, #12]
 80082ea:	683a      	ldr	r2, [r7, #0]
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d908      	bls.n	8008302 <f_lseek+0x244>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	7d1b      	ldrb	r3, [r3, #20]
 80082f4:	f003 0302 	and.w	r3, r3, #2
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d102      	bne.n	8008302 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	699b      	ldr	r3, [r3, #24]
 8008306:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8008308:	2300      	movs	r3, #0
 800830a:	637b      	str	r3, [r7, #52]	; 0x34
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008310:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	2b00      	cmp	r3, #0
 8008316:	f000 80c0 	beq.w	800849a <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	895b      	ldrh	r3, [r3, #10]
 800831e:	025b      	lsls	r3, r3, #9
 8008320:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8008322:	6a3b      	ldr	r3, [r7, #32]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d01b      	beq.n	8008360 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	1e5a      	subs	r2, r3, #1
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	fbb2 f2f3 	udiv	r2, r2, r3
 8008332:	6a3b      	ldr	r3, [r7, #32]
 8008334:	1e59      	subs	r1, r3, #1
 8008336:	69fb      	ldr	r3, [r7, #28]
 8008338:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800833c:	429a      	cmp	r2, r3
 800833e:	d30f      	bcc.n	8008360 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8008340:	6a3b      	ldr	r3, [r7, #32]
 8008342:	1e5a      	subs	r2, r3, #1
 8008344:	69fb      	ldr	r3, [r7, #28]
 8008346:	425b      	negs	r3, r3
 8008348:	401a      	ands	r2, r3
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	699b      	ldr	r3, [r3, #24]
 8008352:	683a      	ldr	r2, [r7, #0]
 8008354:	1ad3      	subs	r3, r2, r3
 8008356:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	69db      	ldr	r3, [r3, #28]
 800835c:	63bb      	str	r3, [r7, #56]	; 0x38
 800835e:	e02c      	b.n	80083ba <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	689b      	ldr	r3, [r3, #8]
 8008364:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8008366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008368:	2b00      	cmp	r3, #0
 800836a:	d123      	bne.n	80083b4 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2100      	movs	r1, #0
 8008370:	4618      	mov	r0, r3
 8008372:	f7fe f881 	bl	8006478 <create_chain>
 8008376:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800837a:	2b01      	cmp	r3, #1
 800837c:	d109      	bne.n	8008392 <f_lseek+0x2d4>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2202      	movs	r2, #2
 8008382:	755a      	strb	r2, [r3, #21]
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	2102      	movs	r1, #2
 8008388:	4618      	mov	r0, r3
 800838a:	f7fd fbfe 	bl	8005b8a <unlock_fs>
 800838e:	2302      	movs	r3, #2
 8008390:	e0e4      	b.n	800855c <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008398:	d109      	bne.n	80083ae <f_lseek+0x2f0>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2201      	movs	r2, #1
 800839e:	755a      	strb	r2, [r3, #21]
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	2101      	movs	r1, #1
 80083a4:	4618      	mov	r0, r3
 80083a6:	f7fd fbf0 	bl	8005b8a <unlock_fs>
 80083aa:	2301      	movs	r3, #1
 80083ac:	e0d6      	b.n	800855c <f_lseek+0x49e>
					fp->obj.sclust = clst;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083b2:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083b8:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80083ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d06c      	beq.n	800849a <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 80083c0:	e044      	b.n	800844c <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 80083c2:	683a      	ldr	r2, [r7, #0]
 80083c4:	69fb      	ldr	r3, [r7, #28]
 80083c6:	1ad3      	subs	r3, r2, r3
 80083c8:	603b      	str	r3, [r7, #0]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	699a      	ldr	r2, [r3, #24]
 80083ce:	69fb      	ldr	r3, [r7, #28]
 80083d0:	441a      	add	r2, r3
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	7d1b      	ldrb	r3, [r3, #20]
 80083da:	f003 0302 	and.w	r3, r3, #2
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d00b      	beq.n	80083fa <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80083e6:	4618      	mov	r0, r3
 80083e8:	f7fe f846 	bl	8006478 <create_chain>
 80083ec:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80083ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d108      	bne.n	8008406 <f_lseek+0x348>
							ofs = 0; break;
 80083f4:	2300      	movs	r3, #0
 80083f6:	603b      	str	r3, [r7, #0]
 80083f8:	e02c      	b.n	8008454 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80083fe:	4618      	mov	r0, r3
 8008400:	f7fd fe49 	bl	8006096 <get_fat>
 8008404:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800840c:	d109      	bne.n	8008422 <f_lseek+0x364>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2201      	movs	r2, #1
 8008412:	755a      	strb	r2, [r3, #21]
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	2101      	movs	r1, #1
 8008418:	4618      	mov	r0, r3
 800841a:	f7fd fbb6 	bl	8005b8a <unlock_fs>
 800841e:	2301      	movs	r3, #1
 8008420:	e09c      	b.n	800855c <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8008422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008424:	2b01      	cmp	r3, #1
 8008426:	d904      	bls.n	8008432 <f_lseek+0x374>
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	699b      	ldr	r3, [r3, #24]
 800842c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800842e:	429a      	cmp	r2, r3
 8008430:	d309      	bcc.n	8008446 <f_lseek+0x388>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2202      	movs	r2, #2
 8008436:	755a      	strb	r2, [r3, #21]
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	2102      	movs	r1, #2
 800843c:	4618      	mov	r0, r3
 800843e:	f7fd fba4 	bl	8005b8a <unlock_fs>
 8008442:	2302      	movs	r3, #2
 8008444:	e08a      	b.n	800855c <f_lseek+0x49e>
					fp->clust = clst;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800844a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800844c:	683a      	ldr	r2, [r7, #0]
 800844e:	69fb      	ldr	r3, [r7, #28]
 8008450:	429a      	cmp	r2, r3
 8008452:	d8b6      	bhi.n	80083c2 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	699a      	ldr	r2, [r3, #24]
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	441a      	add	r2, r3
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008466:	2b00      	cmp	r3, #0
 8008468:	d017      	beq.n	800849a <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800846e:	4618      	mov	r0, r3
 8008470:	f7fd fdf2 	bl	8006058 <clust2sect>
 8008474:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8008476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008478:	2b00      	cmp	r3, #0
 800847a:	d109      	bne.n	8008490 <f_lseek+0x3d2>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2202      	movs	r2, #2
 8008480:	755a      	strb	r2, [r3, #21]
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	2102      	movs	r1, #2
 8008486:	4618      	mov	r0, r3
 8008488:	f7fd fb7f 	bl	8005b8a <unlock_fs>
 800848c:	2302      	movs	r3, #2
 800848e:	e065      	b.n	800855c <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	0a5b      	lsrs	r3, r3, #9
 8008494:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008496:	4413      	add	r3, r2
 8008498:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	699a      	ldr	r2, [r3, #24]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	68db      	ldr	r3, [r3, #12]
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d90a      	bls.n	80084bc <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	699a      	ldr	r2, [r3, #24]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	7d1b      	ldrb	r3, [r3, #20]
 80084b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084b6:	b2da      	uxtb	r2, r3
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	699b      	ldr	r3, [r3, #24]
 80084c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d040      	beq.n	800854a <f_lseek+0x48c>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6a1b      	ldr	r3, [r3, #32]
 80084cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d03b      	beq.n	800854a <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	7d1b      	ldrb	r3, [r3, #20]
 80084d6:	b25b      	sxtb	r3, r3
 80084d8:	2b00      	cmp	r3, #0
 80084da:	da1d      	bge.n	8008518 <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	7858      	ldrb	r0, [r3, #1]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6a1a      	ldr	r2, [r3, #32]
 80084ea:	2301      	movs	r3, #1
 80084ec:	f7fd f9fa 	bl	80058e4 <disk_write>
 80084f0:	4603      	mov	r3, r0
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d009      	beq.n	800850a <f_lseek+0x44c>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2201      	movs	r2, #1
 80084fa:	755a      	strb	r2, [r3, #21]
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	2101      	movs	r1, #1
 8008500:	4618      	mov	r0, r3
 8008502:	f7fd fb42 	bl	8005b8a <unlock_fs>
 8008506:	2301      	movs	r3, #1
 8008508:	e028      	b.n	800855c <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	7d1b      	ldrb	r3, [r3, #20]
 800850e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008512:	b2da      	uxtb	r2, r3
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	7858      	ldrb	r0, [r3, #1]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008522:	2301      	movs	r3, #1
 8008524:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008526:	f7fd f9bd 	bl	80058a4 <disk_read>
 800852a:	4603      	mov	r3, r0
 800852c:	2b00      	cmp	r3, #0
 800852e:	d009      	beq.n	8008544 <f_lseek+0x486>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2201      	movs	r2, #1
 8008534:	755a      	strb	r2, [r3, #21]
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	2101      	movs	r1, #1
 800853a:	4618      	mov	r0, r3
 800853c:	f7fd fb25 	bl	8005b8a <unlock_fs>
 8008540:	2301      	movs	r3, #1
 8008542:	e00b      	b.n	800855c <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008548:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8008550:	4611      	mov	r1, r2
 8008552:	4618      	mov	r0, r3
 8008554:	f7fd fb19 	bl	8005b8a <unlock_fs>
 8008558:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800855c:	4618      	mov	r0, r3
 800855e:	3740      	adds	r7, #64	; 0x40
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b086      	sub	sp, #24
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d101      	bne.n	8008578 <f_opendir+0x14>
 8008574:	2309      	movs	r3, #9
 8008576:	e06a      	b.n	800864e <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800857c:	f107 010c 	add.w	r1, r7, #12
 8008580:	463b      	mov	r3, r7
 8008582:	2200      	movs	r2, #0
 8008584:	4618      	mov	r0, r3
 8008586:	f7fe fd0b 	bl	8006fa0 <find_volume>
 800858a:	4603      	mov	r3, r0
 800858c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800858e:	7dfb      	ldrb	r3, [r7, #23]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d14f      	bne.n	8008634 <f_opendir+0xd0>
		obj->fs = fs;
 8008594:	68fa      	ldr	r2, [r7, #12]
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	4619      	mov	r1, r3
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f7fe fbf2 	bl	8006d88 <follow_path>
 80085a4:	4603      	mov	r3, r0
 80085a6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 80085a8:	7dfb      	ldrb	r3, [r7, #23]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d13d      	bne.n	800862a <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80085b4:	b25b      	sxtb	r3, r3
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	db12      	blt.n	80085e0 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	799b      	ldrb	r3, [r3, #6]
 80085be:	f003 0310 	and.w	r3, r3, #16
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d00a      	beq.n	80085dc <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80085c6:	68fa      	ldr	r2, [r7, #12]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6a1b      	ldr	r3, [r3, #32]
 80085cc:	4619      	mov	r1, r3
 80085ce:	4610      	mov	r0, r2
 80085d0:	f7fe f9a5 	bl	800691e <ld_clust>
 80085d4:	4602      	mov	r2, r0
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	609a      	str	r2, [r3, #8]
 80085da:	e001      	b.n	80085e0 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80085dc:	2305      	movs	r3, #5
 80085de:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 80085e0:	7dfb      	ldrb	r3, [r7, #23]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d121      	bne.n	800862a <f_opendir+0xc6>
				obj->id = fs->id;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	88da      	ldrh	r2, [r3, #6]
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80085ee:	2100      	movs	r1, #0
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f7fe f80d 	bl	8006610 <dir_sdi>
 80085f6:	4603      	mov	r3, r0
 80085f8:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 80085fa:	7dfb      	ldrb	r3, [r7, #23]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d114      	bne.n	800862a <f_opendir+0xc6>
					if (obj->sclust) {
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	689b      	ldr	r3, [r3, #8]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d00d      	beq.n	8008624 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8008608:	2100      	movs	r1, #0
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f7fd fb56 	bl	8005cbc <inc_lock>
 8008610:	4602      	mov	r2, r0
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	691b      	ldr	r3, [r3, #16]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d105      	bne.n	800862a <f_opendir+0xc6>
 800861e:	2312      	movs	r3, #18
 8008620:	75fb      	strb	r3, [r7, #23]
 8008622:	e002      	b.n	800862a <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	2200      	movs	r2, #0
 8008628:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800862a:	7dfb      	ldrb	r3, [r7, #23]
 800862c:	2b04      	cmp	r3, #4
 800862e:	d101      	bne.n	8008634 <f_opendir+0xd0>
 8008630:	2305      	movs	r3, #5
 8008632:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8008634:	7dfb      	ldrb	r3, [r7, #23]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d002      	beq.n	8008640 <f_opendir+0xdc>
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	2200      	movs	r2, #0
 800863e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	7dfa      	ldrb	r2, [r7, #23]
 8008644:	4611      	mov	r1, r2
 8008646:	4618      	mov	r0, r3
 8008648:	f7fd fa9f 	bl	8005b8a <unlock_fs>
 800864c:	7dfb      	ldrb	r3, [r7, #23]
}
 800864e:	4618      	mov	r0, r3
 8008650:	3718      	adds	r7, #24
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}

08008656 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8008656:	b580      	push	{r7, lr}
 8008658:	b084      	sub	sp, #16
 800865a:	af00      	add	r7, sp, #0
 800865c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f107 0208 	add.w	r2, r7, #8
 8008664:	4611      	mov	r1, r2
 8008666:	4618      	mov	r0, r3
 8008668:	f7fe feee 	bl	8007448 <validate>
 800866c:	4603      	mov	r3, r0
 800866e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008670:	7bfb      	ldrb	r3, [r7, #15]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d115      	bne.n	80086a2 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	691b      	ldr	r3, [r3, #16]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d006      	beq.n	800868c <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	691b      	ldr	r3, [r3, #16]
 8008682:	4618      	mov	r0, r3
 8008684:	f7fd fba8 	bl	8005dd8 <dec_lock>
 8008688:	4603      	mov	r3, r0
 800868a:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800868c:	7bfb      	ldrb	r3, [r7, #15]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d102      	bne.n	8008698 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2200      	movs	r2, #0
 8008696:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	2100      	movs	r1, #0
 800869c:	4618      	mov	r0, r3
 800869e:	f7fd fa74 	bl	8005b8a <unlock_fs>
#endif
	}
	return res;
 80086a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3710      	adds	r7, #16
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b084      	sub	sp, #16
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f107 0208 	add.w	r2, r7, #8
 80086bc:	4611      	mov	r1, r2
 80086be:	4618      	mov	r0, r3
 80086c0:	f7fe fec2 	bl	8007448 <validate>
 80086c4:	4603      	mov	r3, r0
 80086c6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80086c8:	7bfb      	ldrb	r3, [r7, #15]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d126      	bne.n	800871c <f_readdir+0x70>
		if (!fno) {
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d106      	bne.n	80086e2 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80086d4:	2100      	movs	r1, #0
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f7fd ff9a 	bl	8006610 <dir_sdi>
 80086dc:	4603      	mov	r3, r0
 80086de:	73fb      	strb	r3, [r7, #15]
 80086e0:	e01c      	b.n	800871c <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 80086e2:	2100      	movs	r1, #0
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f7fe f959 	bl	800699c <dir_read>
 80086ea:	4603      	mov	r3, r0
 80086ec:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 80086ee:	7bfb      	ldrb	r3, [r7, #15]
 80086f0:	2b04      	cmp	r3, #4
 80086f2:	d101      	bne.n	80086f8 <f_readdir+0x4c>
 80086f4:	2300      	movs	r3, #0
 80086f6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 80086f8:	7bfb      	ldrb	r3, [r7, #15]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d10e      	bne.n	800871c <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 80086fe:	6839      	ldr	r1, [r7, #0]
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f7fe fa4d 	bl	8006ba0 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8008706:	2100      	movs	r1, #0
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f7fd fffc 	bl	8006706 <dir_next>
 800870e:	4603      	mov	r3, r0
 8008710:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8008712:	7bfb      	ldrb	r3, [r7, #15]
 8008714:	2b04      	cmp	r3, #4
 8008716:	d101      	bne.n	800871c <f_readdir+0x70>
 8008718:	2300      	movs	r3, #0
 800871a:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	7bfa      	ldrb	r2, [r7, #15]
 8008720:	4611      	mov	r1, r2
 8008722:	4618      	mov	r0, r3
 8008724:	f7fd fa31 	bl	8005b8a <unlock_fs>
 8008728:	7bfb      	ldrb	r3, [r7, #15]
}
 800872a:	4618      	mov	r0, r3
 800872c:	3710      	adds	r7, #16
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}

08008732 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8008732:	b580      	push	{r7, lr}
 8008734:	b09e      	sub	sp, #120	; 0x78
 8008736:	af00      	add	r7, sp, #0
 8008738:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800873a:	2300      	movs	r3, #0
 800873c:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800873e:	f107 010c 	add.w	r1, r7, #12
 8008742:	1d3b      	adds	r3, r7, #4
 8008744:	2202      	movs	r2, #2
 8008746:	4618      	mov	r0, r3
 8008748:	f7fe fc2a 	bl	8006fa0 <find_volume>
 800874c:	4603      	mov	r3, r0
 800874e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8008756:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800875a:	2b00      	cmp	r3, #0
 800875c:	f040 808e 	bne.w	800887c <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8008760:	687a      	ldr	r2, [r7, #4]
 8008762:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008766:	4611      	mov	r1, r2
 8008768:	4618      	mov	r0, r3
 800876a:	f7fe fb0d 	bl	8006d88 <follow_path>
 800876e:	4603      	mov	r3, r0
 8008770:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8008774:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008778:	2b00      	cmp	r3, #0
 800877a:	d108      	bne.n	800878e <f_unlink+0x5c>
 800877c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008780:	2102      	movs	r1, #2
 8008782:	4618      	mov	r0, r3
 8008784:	f7fd fa1c 	bl	8005bc0 <chk_lock>
 8008788:	4603      	mov	r3, r0
 800878a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800878e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008792:	2b00      	cmp	r3, #0
 8008794:	d172      	bne.n	800887c <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8008796:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800879a:	b25b      	sxtb	r3, r3
 800879c:	2b00      	cmp	r3, #0
 800879e:	da03      	bge.n	80087a8 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80087a0:	2306      	movs	r3, #6
 80087a2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80087a6:	e008      	b.n	80087ba <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 80087a8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80087ac:	f003 0301 	and.w	r3, r3, #1
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d002      	beq.n	80087ba <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 80087b4:	2307      	movs	r3, #7
 80087b6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 80087ba:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d134      	bne.n	800882c <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80087c6:	4611      	mov	r1, r2
 80087c8:	4618      	mov	r0, r3
 80087ca:	f7fe f8a8 	bl	800691e <ld_clust>
 80087ce:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 80087d0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80087d4:	f003 0310 	and.w	r3, r3, #16
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d027      	beq.n	800882c <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 80087e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80087e2:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 80087e4:	f107 0310 	add.w	r3, r7, #16
 80087e8:	2100      	movs	r1, #0
 80087ea:	4618      	mov	r0, r3
 80087ec:	f7fd ff10 	bl	8006610 <dir_sdi>
 80087f0:	4603      	mov	r3, r0
 80087f2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 80087f6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d116      	bne.n	800882c <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 80087fe:	f107 0310 	add.w	r3, r7, #16
 8008802:	2100      	movs	r1, #0
 8008804:	4618      	mov	r0, r3
 8008806:	f7fe f8c9 	bl	800699c <dir_read>
 800880a:	4603      	mov	r3, r0
 800880c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8008810:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008814:	2b00      	cmp	r3, #0
 8008816:	d102      	bne.n	800881e <f_unlink+0xec>
 8008818:	2307      	movs	r3, #7
 800881a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800881e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008822:	2b04      	cmp	r3, #4
 8008824:	d102      	bne.n	800882c <f_unlink+0xfa>
 8008826:	2300      	movs	r3, #0
 8008828:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 800882c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008830:	2b00      	cmp	r3, #0
 8008832:	d123      	bne.n	800887c <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8008834:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008838:	4618      	mov	r0, r3
 800883a:	f7fe f993 	bl	8006b64 <dir_remove>
 800883e:	4603      	mov	r3, r0
 8008840:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8008844:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008848:	2b00      	cmp	r3, #0
 800884a:	d10c      	bne.n	8008866 <f_unlink+0x134>
 800884c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800884e:	2b00      	cmp	r3, #0
 8008850:	d009      	beq.n	8008866 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8008852:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008856:	2200      	movs	r2, #0
 8008858:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800885a:	4618      	mov	r0, r3
 800885c:	f7fd fda7 	bl	80063ae <remove_chain>
 8008860:	4603      	mov	r3, r0
 8008862:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8008866:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800886a:	2b00      	cmp	r3, #0
 800886c:	d106      	bne.n	800887c <f_unlink+0x14a>
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	4618      	mov	r0, r3
 8008872:	f7fd fb83 	bl	8005f7c <sync_fs>
 8008876:	4603      	mov	r3, r0
 8008878:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8008882:	4611      	mov	r1, r2
 8008884:	4618      	mov	r0, r3
 8008886:	f7fd f980 	bl	8005b8a <unlock_fs>
 800888a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800888e:	4618      	mov	r0, r3
 8008890:	3778      	adds	r7, #120	; 0x78
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}

08008896 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8008896:	b580      	push	{r7, lr}
 8008898:	b088      	sub	sp, #32
 800889a:	af00      	add	r7, sp, #0
 800889c:	60f8      	str	r0, [r7, #12]
 800889e:	60b9      	str	r1, [r7, #8]
 80088a0:	607a      	str	r2, [r7, #4]
	int n = 0;
 80088a2:	2300      	movs	r3, #0
 80088a4:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80088aa:	e01b      	b.n	80088e4 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80088ac:	f107 0310 	add.w	r3, r7, #16
 80088b0:	f107 0114 	add.w	r1, r7, #20
 80088b4:	2201      	movs	r2, #1
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f7ff f837 	bl	800792a <f_read>
		if (rc != 1) break;
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	2b01      	cmp	r3, #1
 80088c0:	d116      	bne.n	80088f0 <f_gets+0x5a>
		c = s[0];
 80088c2:	7d3b      	ldrb	r3, [r7, #20]
 80088c4:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80088c6:	7dfb      	ldrb	r3, [r7, #23]
 80088c8:	2b0d      	cmp	r3, #13
 80088ca:	d100      	bne.n	80088ce <f_gets+0x38>
 80088cc:	e00a      	b.n	80088e4 <f_gets+0x4e>
		*p++ = c;
 80088ce:	69bb      	ldr	r3, [r7, #24]
 80088d0:	1c5a      	adds	r2, r3, #1
 80088d2:	61ba      	str	r2, [r7, #24]
 80088d4:	7dfa      	ldrb	r2, [r7, #23]
 80088d6:	701a      	strb	r2, [r3, #0]
		n++;
 80088d8:	69fb      	ldr	r3, [r7, #28]
 80088da:	3301      	adds	r3, #1
 80088dc:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80088de:	7dfb      	ldrb	r3, [r7, #23]
 80088e0:	2b0a      	cmp	r3, #10
 80088e2:	d007      	beq.n	80088f4 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	3b01      	subs	r3, #1
 80088e8:	69fa      	ldr	r2, [r7, #28]
 80088ea:	429a      	cmp	r2, r3
 80088ec:	dbde      	blt.n	80088ac <f_gets+0x16>
 80088ee:	e002      	b.n	80088f6 <f_gets+0x60>
		if (rc != 1) break;
 80088f0:	bf00      	nop
 80088f2:	e000      	b.n	80088f6 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 80088f4:	bf00      	nop
	}
	*p = 0;
 80088f6:	69bb      	ldr	r3, [r7, #24]
 80088f8:	2200      	movs	r2, #0
 80088fa:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80088fc:	69fb      	ldr	r3, [r7, #28]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d001      	beq.n	8008906 <f_gets+0x70>
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	e000      	b.n	8008908 <f_gets+0x72>
 8008906:	2300      	movs	r3, #0
}
 8008908:	4618      	mov	r0, r3
 800890a:	3720      	adds	r7, #32
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b084      	sub	sp, #16
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	460b      	mov	r3, r1
 800891a:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800891c:	78fb      	ldrb	r3, [r7, #3]
 800891e:	2b0a      	cmp	r3, #10
 8008920:	d103      	bne.n	800892a <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8008922:	210d      	movs	r1, #13
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f7ff fff3 	bl	8008910 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2b00      	cmp	r3, #0
 8008934:	db25      	blt.n	8008982 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	1c5a      	adds	r2, r3, #1
 800893a:	60fa      	str	r2, [r7, #12]
 800893c:	687a      	ldr	r2, [r7, #4]
 800893e:	4413      	add	r3, r2
 8008940:	78fa      	ldrb	r2, [r7, #3]
 8008942:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2b3c      	cmp	r3, #60	; 0x3c
 8008948:	dd12      	ble.n	8008970 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6818      	ldr	r0, [r3, #0]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f103 010c 	add.w	r1, r3, #12
 8008954:	68fa      	ldr	r2, [r7, #12]
 8008956:	f107 0308 	add.w	r3, r7, #8
 800895a:	f7ff f954 	bl	8007c06 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800895e:	68ba      	ldr	r2, [r7, #8]
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	429a      	cmp	r2, r3
 8008964:	d101      	bne.n	800896a <putc_bfd+0x5a>
 8008966:	2300      	movs	r3, #0
 8008968:	e001      	b.n	800896e <putc_bfd+0x5e>
 800896a:	f04f 33ff 	mov.w	r3, #4294967295
 800896e:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	68fa      	ldr	r2, [r7, #12]
 8008974:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	689b      	ldr	r3, [r3, #8]
 800897a:	1c5a      	adds	r2, r3, #1
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	609a      	str	r2, [r3, #8]
 8008980:	e000      	b.n	8008984 <putc_bfd+0x74>
	if (i < 0) return;
 8008982:	bf00      	nop
}
 8008984:	3710      	adds	r7, #16
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}

0800898a <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800898a:	b580      	push	{r7, lr}
 800898c:	b084      	sub	sp, #16
 800898e:	af00      	add	r7, sp, #0
 8008990:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	2b00      	cmp	r3, #0
 8008998:	db17      	blt.n	80089ca <putc_flush+0x40>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6818      	ldr	r0, [r3, #0]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f103 010c 	add.w	r1, r3, #12
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	461a      	mov	r2, r3
 80089aa:	f107 030c 	add.w	r3, r7, #12
 80089ae:	f7ff f92a 	bl	8007c06 <f_write>
 80089b2:	4603      	mov	r3, r0
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d108      	bne.n	80089ca <putc_flush+0x40>
		&& (UINT)pb->idx == nw) return pb->nchr;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	461a      	mov	r2, r3
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d102      	bne.n	80089ca <putc_flush+0x40>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	689b      	ldr	r3, [r3, #8]
 80089c8:	e001      	b.n	80089ce <putc_flush+0x44>
	return EOF;
 80089ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3710      	adds	r7, #16
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}

080089d6 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 80089d6:	b480      	push	{r7}
 80089d8:	b083      	sub	sp, #12
 80089da:	af00      	add	r7, sp, #0
 80089dc:	6078      	str	r0, [r7, #4]
 80089de:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	683a      	ldr	r2, [r7, #0]
 80089e4:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2200      	movs	r2, #0
 80089ea:	605a      	str	r2, [r3, #4]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	685a      	ldr	r2, [r3, #4]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	609a      	str	r2, [r3, #8]
}
 80089f4:	bf00      	nop
 80089f6:	370c      	adds	r7, #12
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr

08008a00 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b096      	sub	sp, #88	; 0x58
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8008a0a:	f107 030c 	add.w	r3, r7, #12
 8008a0e:	6839      	ldr	r1, [r7, #0]
 8008a10:	4618      	mov	r0, r3
 8008a12:	f7ff ffe0 	bl	80089d6 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8008a16:	e009      	b.n	8008a2c <f_puts+0x2c>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	1c5a      	adds	r2, r3, #1
 8008a1c:	607a      	str	r2, [r7, #4]
 8008a1e:	781a      	ldrb	r2, [r3, #0]
 8008a20:	f107 030c 	add.w	r3, r7, #12
 8008a24:	4611      	mov	r1, r2
 8008a26:	4618      	mov	r0, r3
 8008a28:	f7ff ff72 	bl	8008910 <putc_bfd>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d1f1      	bne.n	8008a18 <f_puts+0x18>
	return putc_flush(&pb);
 8008a34:	f107 030c 	add.w	r3, r7, #12
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f7ff ffa6 	bl	800898a <putc_flush>
 8008a3e:	4603      	mov	r3, r0
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3758      	adds	r7, #88	; 0x58
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b087      	sub	sp, #28
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	60f8      	str	r0, [r7, #12]
 8008a50:	60b9      	str	r1, [r7, #8]
 8008a52:	4613      	mov	r3, r2
 8008a54:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008a56:	2301      	movs	r3, #1
 8008a58:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008a5e:	4b1f      	ldr	r3, [pc, #124]	; (8008adc <FATFS_LinkDriverEx+0x94>)
 8008a60:	7a5b      	ldrb	r3, [r3, #9]
 8008a62:	b2db      	uxtb	r3, r3
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d131      	bne.n	8008acc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008a68:	4b1c      	ldr	r3, [pc, #112]	; (8008adc <FATFS_LinkDriverEx+0x94>)
 8008a6a:	7a5b      	ldrb	r3, [r3, #9]
 8008a6c:	b2db      	uxtb	r3, r3
 8008a6e:	461a      	mov	r2, r3
 8008a70:	4b1a      	ldr	r3, [pc, #104]	; (8008adc <FATFS_LinkDriverEx+0x94>)
 8008a72:	2100      	movs	r1, #0
 8008a74:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008a76:	4b19      	ldr	r3, [pc, #100]	; (8008adc <FATFS_LinkDriverEx+0x94>)
 8008a78:	7a5b      	ldrb	r3, [r3, #9]
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	4a17      	ldr	r2, [pc, #92]	; (8008adc <FATFS_LinkDriverEx+0x94>)
 8008a7e:	009b      	lsls	r3, r3, #2
 8008a80:	4413      	add	r3, r2
 8008a82:	68fa      	ldr	r2, [r7, #12]
 8008a84:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008a86:	4b15      	ldr	r3, [pc, #84]	; (8008adc <FATFS_LinkDriverEx+0x94>)
 8008a88:	7a5b      	ldrb	r3, [r3, #9]
 8008a8a:	b2db      	uxtb	r3, r3
 8008a8c:	461a      	mov	r2, r3
 8008a8e:	4b13      	ldr	r3, [pc, #76]	; (8008adc <FATFS_LinkDriverEx+0x94>)
 8008a90:	4413      	add	r3, r2
 8008a92:	79fa      	ldrb	r2, [r7, #7]
 8008a94:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008a96:	4b11      	ldr	r3, [pc, #68]	; (8008adc <FATFS_LinkDriverEx+0x94>)
 8008a98:	7a5b      	ldrb	r3, [r3, #9]
 8008a9a:	b2db      	uxtb	r3, r3
 8008a9c:	1c5a      	adds	r2, r3, #1
 8008a9e:	b2d1      	uxtb	r1, r2
 8008aa0:	4a0e      	ldr	r2, [pc, #56]	; (8008adc <FATFS_LinkDriverEx+0x94>)
 8008aa2:	7251      	strb	r1, [r2, #9]
 8008aa4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008aa6:	7dbb      	ldrb	r3, [r7, #22]
 8008aa8:	3330      	adds	r3, #48	; 0x30
 8008aaa:	b2da      	uxtb	r2, r3
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	3301      	adds	r3, #1
 8008ab4:	223a      	movs	r2, #58	; 0x3a
 8008ab6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	3302      	adds	r3, #2
 8008abc:	222f      	movs	r2, #47	; 0x2f
 8008abe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	3303      	adds	r3, #3
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008acc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	371c      	adds	r7, #28
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad8:	4770      	bx	lr
 8008ada:	bf00      	nop
 8008adc:	200006e4 	.word	0x200006e4

08008ae0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b082      	sub	sp, #8
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008aea:	2200      	movs	r2, #0
 8008aec:	6839      	ldr	r1, [r7, #0]
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f7ff ffaa 	bl	8008a48 <FATFS_LinkDriverEx>
 8008af4:	4603      	mov	r3, r0
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3708      	adds	r7, #8
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}

08008afe <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8008afe:	b580      	push	{r7, lr}
 8008b00:	b086      	sub	sp, #24
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	4603      	mov	r3, r0
 8008b06:	6039      	str	r1, [r7, #0]
 8008b08:	71fb      	strb	r3, [r7, #7]

    int ret;

    osSemaphoreDef(SEM);
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	60fb      	str	r3, [r7, #12]
 8008b0e:	2300      	movs	r3, #0
 8008b10:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 8008b12:	f107 030c 	add.w	r3, r7, #12
 8008b16:	2101      	movs	r1, #1
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f000 f8e9 	bl	8008cf0 <osSemaphoreCreate>
 8008b1e:	4602      	mov	r2, r0
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	601a      	str	r2, [r3, #0]
    ret = (*sobj != NULL);
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	bf14      	ite	ne
 8008b2c:	2301      	movne	r3, #1
 8008b2e:	2300      	moveq	r3, #0
 8008b30:	b2db      	uxtb	r3, r3
 8008b32:	617b      	str	r3, [r7, #20]

    return ret;
 8008b34:	697b      	ldr	r3, [r7, #20]
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3718      	adds	r7, #24
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}

08008b3e <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8008b3e:	b580      	push	{r7, lr}
 8008b40:	b082      	sub	sp, #8
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	6078      	str	r0, [r7, #4]
    osSemaphoreDelete (sobj);
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f000 f98a 	bl	8008e60 <osSemaphoreDelete>
    return 1;
 8008b4c:	2301      	movs	r3, #1
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3708      	adds	r7, #8
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}

08008b56 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8008b56:	b580      	push	{r7, lr}
 8008b58:	b084      	sub	sp, #16
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	60fb      	str	r3, [r7, #12]

  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8008b62:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f000 f8f6 	bl	8008d58 <osSemaphoreWait>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d101      	bne.n	8008b76 <ff_req_grant+0x20>
  {
    ret = 1;
 8008b72:	2301      	movs	r3, #1
 8008b74:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8008b76:	68fb      	ldr	r3, [r7, #12]
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3710      	adds	r7, #16
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}

08008b80 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b082      	sub	sp, #8
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(sobj);
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f000 f933 	bl	8008df4 <osSemaphoreRelease>
}
 8008b8e:	bf00      	nop
 8008b90:	3708      	adds	r7, #8
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}

08008b96 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008b96:	b480      	push	{r7}
 8008b98:	b085      	sub	sp, #20
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008ba4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008ba8:	2b84      	cmp	r3, #132	; 0x84
 8008baa:	d005      	beq.n	8008bb8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008bac:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	4413      	add	r3, r2
 8008bb4:	3303      	adds	r3, #3
 8008bb6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3714      	adds	r7, #20
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc4:	4770      	bx	lr

08008bc6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008bc6:	b480      	push	{r7}
 8008bc8:	b083      	sub	sp, #12
 8008bca:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008bcc:	f3ef 8305 	mrs	r3, IPSR
 8008bd0:	607b      	str	r3, [r7, #4]
  return(result);
 8008bd2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	bf14      	ite	ne
 8008bd8:	2301      	movne	r3, #1
 8008bda:	2300      	moveq	r3, #0
 8008bdc:	b2db      	uxtb	r3, r3
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	370c      	adds	r7, #12
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr

08008bea <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008bea:	b580      	push	{r7, lr}
 8008bec:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008bee:	f001 fbb9 	bl	800a364 <vTaskStartScheduler>
  
  return osOK;
 8008bf2:	2300      	movs	r3, #0
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8008bfc:	f001 ffd2 	bl	800aba4 <xTaskGetSchedulerState>
 8008c00:	4603      	mov	r3, r0
 8008c02:	2b01      	cmp	r3, #1
 8008c04:	d101      	bne.n	8008c0a <osKernelRunning+0x12>
    return 0;
 8008c06:	2300      	movs	r3, #0
 8008c08:	e000      	b.n	8008c0c <osKernelRunning+0x14>
  else
    return 1;
 8008c0a:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	bd80      	pop	{r7, pc}

08008c10 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8008c14:	f7ff ffd7 	bl	8008bc6 <inHandlerMode>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d003      	beq.n	8008c26 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8008c1e:	f001 fcb9 	bl	800a594 <xTaskGetTickCountFromISR>
 8008c22:	4603      	mov	r3, r0
 8008c24:	e002      	b.n	8008c2c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8008c26:	f001 fca5 	bl	800a574 <xTaskGetTickCount>
 8008c2a:	4603      	mov	r3, r0
  }
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	bd80      	pop	{r7, pc}

08008c30 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c32:	b089      	sub	sp, #36	; 0x24
 8008c34:	af04      	add	r7, sp, #16
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	695b      	ldr	r3, [r3, #20]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d020      	beq.n	8008c84 <osThreadCreate+0x54>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	699b      	ldr	r3, [r3, #24]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d01c      	beq.n	8008c84 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	685c      	ldr	r4, [r3, #4]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681d      	ldr	r5, [r3, #0]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	691e      	ldr	r6, [r3, #16]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f7ff ff9a 	bl	8008b96 <makeFreeRtosPriority>
 8008c62:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	695b      	ldr	r3, [r3, #20]
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008c6c:	9202      	str	r2, [sp, #8]
 8008c6e:	9301      	str	r3, [sp, #4]
 8008c70:	9100      	str	r1, [sp, #0]
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	4632      	mov	r2, r6
 8008c76:	4629      	mov	r1, r5
 8008c78:	4620      	mov	r0, r4
 8008c7a:	f001 f9b9 	bl	8009ff0 <xTaskCreateStatic>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	60fb      	str	r3, [r7, #12]
 8008c82:	e01c      	b.n	8008cbe <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	685c      	ldr	r4, [r3, #4]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008c90:	b29e      	uxth	r6, r3
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f7ff ff7c 	bl	8008b96 <makeFreeRtosPriority>
 8008c9e:	4602      	mov	r2, r0
 8008ca0:	f107 030c 	add.w	r3, r7, #12
 8008ca4:	9301      	str	r3, [sp, #4]
 8008ca6:	9200      	str	r2, [sp, #0]
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	4632      	mov	r2, r6
 8008cac:	4629      	mov	r1, r5
 8008cae:	4620      	mov	r0, r4
 8008cb0:	f001 f9f7 	bl	800a0a2 <xTaskCreate>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	d001      	beq.n	8008cbe <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	e000      	b.n	8008cc0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3714      	adds	r7, #20
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008cc8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b084      	sub	sp, #16
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d001      	beq.n	8008cde <osDelay+0x16>
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	e000      	b.n	8008ce0 <osDelay+0x18>
 8008cde:	2301      	movs	r3, #1
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f001 fb0b 	bl	800a2fc <vTaskDelay>
  
  return osOK;
 8008ce6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3710      	adds	r7, #16
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}

08008cf0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b086      	sub	sp, #24
 8008cf4:	af02      	add	r7, sp, #8
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d010      	beq.n	8008d24 <osSemaphoreCreate+0x34>
    if (count == 1) {
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d10b      	bne.n	8008d20 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	685a      	ldr	r2, [r3, #4]
 8008d0c:	2303      	movs	r3, #3
 8008d0e:	9300      	str	r3, [sp, #0]
 8008d10:	4613      	mov	r3, r2
 8008d12:	2200      	movs	r2, #0
 8008d14:	2100      	movs	r1, #0
 8008d16:	2001      	movs	r0, #1
 8008d18:	f000 faae 	bl	8009278 <xQueueGenericCreateStatic>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	e016      	b.n	8008d4e <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8008d20:	2300      	movs	r3, #0
 8008d22:	e014      	b.n	8008d4e <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	2b01      	cmp	r3, #1
 8008d28:	d110      	bne.n	8008d4c <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8008d2a:	2203      	movs	r2, #3
 8008d2c:	2100      	movs	r1, #0
 8008d2e:	2001      	movs	r0, #1
 8008d30:	f000 fb14 	bl	800935c <xQueueGenericCreate>
 8008d34:	60f8      	str	r0, [r7, #12]
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d005      	beq.n	8008d48 <osSemaphoreCreate+0x58>
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	2200      	movs	r2, #0
 8008d40:	2100      	movs	r1, #0
 8008d42:	68f8      	ldr	r0, [r7, #12]
 8008d44:	f000 fb66 	bl	8009414 <xQueueGenericSend>
      return sema;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	e000      	b.n	8008d4e <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8008d4c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3710      	adds	r7, #16
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
	...

08008d58 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b084      	sub	sp, #16
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8008d62:	2300      	movs	r3, #0
 8008d64:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d101      	bne.n	8008d70 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8008d6c:	2380      	movs	r3, #128	; 0x80
 8008d6e:	e03a      	b.n	8008de6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8008d70:	2300      	movs	r3, #0
 8008d72:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d7a:	d103      	bne.n	8008d84 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8008d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8008d80:	60fb      	str	r3, [r7, #12]
 8008d82:	e009      	b.n	8008d98 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d006      	beq.n	8008d98 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d101      	bne.n	8008d98 <osSemaphoreWait+0x40>
      ticks = 1;
 8008d94:	2301      	movs	r3, #1
 8008d96:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8008d98:	f7ff ff15 	bl	8008bc6 <inHandlerMode>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d017      	beq.n	8008dd2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8008da2:	f107 0308 	add.w	r3, r7, #8
 8008da6:	461a      	mov	r2, r3
 8008da8:	2100      	movs	r1, #0
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f000 ff2e 	bl	8009c0c <xQueueReceiveFromISR>
 8008db0:	4603      	mov	r3, r0
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	d001      	beq.n	8008dba <osSemaphoreWait+0x62>
      return osErrorOS;
 8008db6:	23ff      	movs	r3, #255	; 0xff
 8008db8:	e015      	b.n	8008de6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d011      	beq.n	8008de4 <osSemaphoreWait+0x8c>
 8008dc0:	4b0b      	ldr	r3, [pc, #44]	; (8008df0 <osSemaphoreWait+0x98>)
 8008dc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dc6:	601a      	str	r2, [r3, #0]
 8008dc8:	f3bf 8f4f 	dsb	sy
 8008dcc:	f3bf 8f6f 	isb	sy
 8008dd0:	e008      	b.n	8008de4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8008dd2:	68f9      	ldr	r1, [r7, #12]
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 fe11 	bl	80099fc <xQueueSemaphoreTake>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	d001      	beq.n	8008de4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8008de0:	23ff      	movs	r3, #255	; 0xff
 8008de2:	e000      	b.n	8008de6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8008de4:	2300      	movs	r3, #0
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3710      	adds	r7, #16
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
 8008dee:	bf00      	nop
 8008df0:	e000ed04 	.word	0xe000ed04

08008df4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b084      	sub	sp, #16
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8008e00:	2300      	movs	r3, #0
 8008e02:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8008e04:	f7ff fedf 	bl	8008bc6 <inHandlerMode>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d016      	beq.n	8008e3c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8008e0e:	f107 0308 	add.w	r3, r7, #8
 8008e12:	4619      	mov	r1, r3
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 fc8b 	bl	8009730 <xQueueGiveFromISR>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d001      	beq.n	8008e24 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8008e20:	23ff      	movs	r3, #255	; 0xff
 8008e22:	e017      	b.n	8008e54 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d013      	beq.n	8008e52 <osSemaphoreRelease+0x5e>
 8008e2a:	4b0c      	ldr	r3, [pc, #48]	; (8008e5c <osSemaphoreRelease+0x68>)
 8008e2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e30:	601a      	str	r2, [r3, #0]
 8008e32:	f3bf 8f4f 	dsb	sy
 8008e36:	f3bf 8f6f 	isb	sy
 8008e3a:	e00a      	b.n	8008e52 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	2200      	movs	r2, #0
 8008e40:	2100      	movs	r1, #0
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f000 fae6 	bl	8009414 <xQueueGenericSend>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	2b01      	cmp	r3, #1
 8008e4c:	d001      	beq.n	8008e52 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8008e4e:	23ff      	movs	r3, #255	; 0xff
 8008e50:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8008e52:	68fb      	ldr	r3, [r7, #12]
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3710      	adds	r7, #16
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}
 8008e5c:	e000ed04 	.word	0xe000ed04

08008e60 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b082      	sub	sp, #8
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8008e68:	f7ff fead 	bl	8008bc6 <inHandlerMode>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d001      	beq.n	8008e76 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8008e72:	2382      	movs	r3, #130	; 0x82
 8008e74:	e003      	b.n	8008e7e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 ff45 	bl	8009d06 <vQueueDelete>

  return osOK; 
 8008e7c:	2300      	movs	r3, #0
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3708      	adds	r7, #8
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}

08008e86 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8008e86:	b590      	push	{r4, r7, lr}
 8008e88:	b085      	sub	sp, #20
 8008e8a:	af02      	add	r7, sp, #8
 8008e8c:	6078      	str	r0, [r7, #4]
 8008e8e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	689b      	ldr	r3, [r3, #8]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d012      	beq.n	8008ebe <osMessageCreate+0x38>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	68db      	ldr	r3, [r3, #12]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d00e      	beq.n	8008ebe <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6818      	ldr	r0, [r3, #0]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6859      	ldr	r1, [r3, #4]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	689a      	ldr	r2, [r3, #8]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	68dc      	ldr	r4, [r3, #12]
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	9300      	str	r3, [sp, #0]
 8008eb4:	4623      	mov	r3, r4
 8008eb6:	f000 f9df 	bl	8009278 <xQueueGenericCreateStatic>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	e008      	b.n	8008ed0 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6818      	ldr	r0, [r3, #0]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	685b      	ldr	r3, [r3, #4]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	4619      	mov	r1, r3
 8008eca:	f000 fa47 	bl	800935c <xQueueGenericCreate>
 8008ece:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	370c      	adds	r7, #12
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd90      	pop	{r4, r7, pc}

08008ed8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b086      	sub	sp, #24
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	60f8      	str	r0, [r7, #12]
 8008ee0:	60b9      	str	r1, [r7, #8]
 8008ee2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d101      	bne.n	8008ef6 <osMessagePut+0x1e>
    ticks = 1;
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8008ef6:	f7ff fe66 	bl	8008bc6 <inHandlerMode>
 8008efa:	4603      	mov	r3, r0
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d018      	beq.n	8008f32 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8008f00:	f107 0210 	add.w	r2, r7, #16
 8008f04:	f107 0108 	add.w	r1, r7, #8
 8008f08:	2300      	movs	r3, #0
 8008f0a:	68f8      	ldr	r0, [r7, #12]
 8008f0c:	f000 fb7c 	bl	8009608 <xQueueGenericSendFromISR>
 8008f10:	4603      	mov	r3, r0
 8008f12:	2b01      	cmp	r3, #1
 8008f14:	d001      	beq.n	8008f1a <osMessagePut+0x42>
      return osErrorOS;
 8008f16:	23ff      	movs	r3, #255	; 0xff
 8008f18:	e018      	b.n	8008f4c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d014      	beq.n	8008f4a <osMessagePut+0x72>
 8008f20:	4b0c      	ldr	r3, [pc, #48]	; (8008f54 <osMessagePut+0x7c>)
 8008f22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f26:	601a      	str	r2, [r3, #0]
 8008f28:	f3bf 8f4f 	dsb	sy
 8008f2c:	f3bf 8f6f 	isb	sy
 8008f30:	e00b      	b.n	8008f4a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8008f32:	f107 0108 	add.w	r1, r7, #8
 8008f36:	2300      	movs	r3, #0
 8008f38:	697a      	ldr	r2, [r7, #20]
 8008f3a:	68f8      	ldr	r0, [r7, #12]
 8008f3c:	f000 fa6a 	bl	8009414 <xQueueGenericSend>
 8008f40:	4603      	mov	r3, r0
 8008f42:	2b01      	cmp	r3, #1
 8008f44:	d001      	beq.n	8008f4a <osMessagePut+0x72>
      return osErrorOS;
 8008f46:	23ff      	movs	r3, #255	; 0xff
 8008f48:	e000      	b.n	8008f4c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8008f4a:	2300      	movs	r3, #0
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3718      	adds	r7, #24
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}
 8008f54:	e000ed04 	.word	0xe000ed04

08008f58 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8008f58:	b590      	push	{r4, r7, lr}
 8008f5a:	b08b      	sub	sp, #44	; 0x2c
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	60f8      	str	r0, [r7, #12]
 8008f60:	60b9      	str	r1, [r7, #8]
 8008f62:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d10a      	bne.n	8008f88 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8008f72:	2380      	movs	r3, #128	; 0x80
 8008f74:	617b      	str	r3, [r7, #20]
    return event;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	461c      	mov	r4, r3
 8008f7a:	f107 0314 	add.w	r3, r7, #20
 8008f7e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008f82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008f86:	e054      	b.n	8009032 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f96:	d103      	bne.n	8008fa0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8008f98:	f04f 33ff 	mov.w	r3, #4294967295
 8008f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8008f9e:	e009      	b.n	8008fb4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d006      	beq.n	8008fb4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8008faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d101      	bne.n	8008fb4 <osMessageGet+0x5c>
      ticks = 1;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8008fb4:	f7ff fe07 	bl	8008bc6 <inHandlerMode>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d01c      	beq.n	8008ff8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8008fbe:	f107 0220 	add.w	r2, r7, #32
 8008fc2:	f107 0314 	add.w	r3, r7, #20
 8008fc6:	3304      	adds	r3, #4
 8008fc8:	4619      	mov	r1, r3
 8008fca:	68b8      	ldr	r0, [r7, #8]
 8008fcc:	f000 fe1e 	bl	8009c0c <xQueueReceiveFromISR>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	2b01      	cmp	r3, #1
 8008fd4:	d102      	bne.n	8008fdc <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8008fd6:	2310      	movs	r3, #16
 8008fd8:	617b      	str	r3, [r7, #20]
 8008fda:	e001      	b.n	8008fe0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008fe0:	6a3b      	ldr	r3, [r7, #32]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d01d      	beq.n	8009022 <osMessageGet+0xca>
 8008fe6:	4b15      	ldr	r3, [pc, #84]	; (800903c <osMessageGet+0xe4>)
 8008fe8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fec:	601a      	str	r2, [r3, #0]
 8008fee:	f3bf 8f4f 	dsb	sy
 8008ff2:	f3bf 8f6f 	isb	sy
 8008ff6:	e014      	b.n	8009022 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8008ff8:	f107 0314 	add.w	r3, r7, #20
 8008ffc:	3304      	adds	r3, #4
 8008ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009000:	4619      	mov	r1, r3
 8009002:	68b8      	ldr	r0, [r7, #8]
 8009004:	f000 fc1e 	bl	8009844 <xQueueReceive>
 8009008:	4603      	mov	r3, r0
 800900a:	2b01      	cmp	r3, #1
 800900c:	d102      	bne.n	8009014 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800900e:	2310      	movs	r3, #16
 8009010:	617b      	str	r3, [r7, #20]
 8009012:	e006      	b.n	8009022 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8009014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009016:	2b00      	cmp	r3, #0
 8009018:	d101      	bne.n	800901e <osMessageGet+0xc6>
 800901a:	2300      	movs	r3, #0
 800901c:	e000      	b.n	8009020 <osMessageGet+0xc8>
 800901e:	2340      	movs	r3, #64	; 0x40
 8009020:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	461c      	mov	r4, r3
 8009026:	f107 0314 	add.w	r3, r7, #20
 800902a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800902e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009032:	68f8      	ldr	r0, [r7, #12]
 8009034:	372c      	adds	r7, #44	; 0x2c
 8009036:	46bd      	mov	sp, r7
 8009038:	bd90      	pop	{r4, r7, pc}
 800903a:	bf00      	nop
 800903c:	e000ed04 	.word	0xe000ed04

08009040 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009040:	b480      	push	{r7}
 8009042:	b083      	sub	sp, #12
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f103 0208 	add.w	r2, r3, #8
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f04f 32ff 	mov.w	r2, #4294967295
 8009058:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f103 0208 	add.w	r2, r3, #8
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f103 0208 	add.w	r2, r3, #8
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2200      	movs	r2, #0
 8009072:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009074:	bf00      	nop
 8009076:	370c      	adds	r7, #12
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr

08009080 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009080:	b480      	push	{r7}
 8009082:	b083      	sub	sp, #12
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2200      	movs	r2, #0
 800908c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800908e:	bf00      	nop
 8009090:	370c      	adds	r7, #12
 8009092:	46bd      	mov	sp, r7
 8009094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009098:	4770      	bx	lr

0800909a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800909a:	b480      	push	{r7}
 800909c:	b085      	sub	sp, #20
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
 80090a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	68fa      	ldr	r2, [r7, #12]
 80090ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	689a      	ldr	r2, [r3, #8]
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	689b      	ldr	r3, [r3, #8]
 80090bc:	683a      	ldr	r2, [r7, #0]
 80090be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	683a      	ldr	r2, [r7, #0]
 80090c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	687a      	ldr	r2, [r7, #4]
 80090ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	1c5a      	adds	r2, r3, #1
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	601a      	str	r2, [r3, #0]
}
 80090d6:	bf00      	nop
 80090d8:	3714      	adds	r7, #20
 80090da:	46bd      	mov	sp, r7
 80090dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e0:	4770      	bx	lr

080090e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80090e2:	b480      	push	{r7}
 80090e4:	b085      	sub	sp, #20
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]
 80090ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090f8:	d103      	bne.n	8009102 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	691b      	ldr	r3, [r3, #16]
 80090fe:	60fb      	str	r3, [r7, #12]
 8009100:	e00c      	b.n	800911c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	3308      	adds	r3, #8
 8009106:	60fb      	str	r3, [r7, #12]
 8009108:	e002      	b.n	8009110 <vListInsert+0x2e>
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	60fb      	str	r3, [r7, #12]
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	68ba      	ldr	r2, [r7, #8]
 8009118:	429a      	cmp	r2, r3
 800911a:	d2f6      	bcs.n	800910a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	685a      	ldr	r2, [r3, #4]
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	683a      	ldr	r2, [r7, #0]
 800912a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	68fa      	ldr	r2, [r7, #12]
 8009130:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	683a      	ldr	r2, [r7, #0]
 8009136:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	687a      	ldr	r2, [r7, #4]
 800913c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	1c5a      	adds	r2, r3, #1
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	601a      	str	r2, [r3, #0]
}
 8009148:	bf00      	nop
 800914a:	3714      	adds	r7, #20
 800914c:	46bd      	mov	sp, r7
 800914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009152:	4770      	bx	lr

08009154 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009154:	b480      	push	{r7}
 8009156:	b085      	sub	sp, #20
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	691b      	ldr	r3, [r3, #16]
 8009160:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	687a      	ldr	r2, [r7, #4]
 8009168:	6892      	ldr	r2, [r2, #8]
 800916a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	689b      	ldr	r3, [r3, #8]
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	6852      	ldr	r2, [r2, #4]
 8009174:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	687a      	ldr	r2, [r7, #4]
 800917c:	429a      	cmp	r2, r3
 800917e:	d103      	bne.n	8009188 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	689a      	ldr	r2, [r3, #8]
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2200      	movs	r2, #0
 800918c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	1e5a      	subs	r2, r3, #1
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
}
 800919c:	4618      	mov	r0, r3
 800919e:	3714      	adds	r7, #20
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr

080091a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b084      	sub	sp, #16
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d109      	bne.n	80091d0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80091bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c0:	f383 8811 	msr	BASEPRI, r3
 80091c4:	f3bf 8f6f 	isb	sy
 80091c8:	f3bf 8f4f 	dsb	sy
 80091cc:	60bb      	str	r3, [r7, #8]
 80091ce:	e7fe      	b.n	80091ce <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80091d0:	f002 f84c 	bl	800b26c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681a      	ldr	r2, [r3, #0]
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091dc:	68f9      	ldr	r1, [r7, #12]
 80091de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80091e0:	fb01 f303 	mul.w	r3, r1, r3
 80091e4:	441a      	add	r2, r3
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2200      	movs	r2, #0
 80091ee:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681a      	ldr	r2, [r3, #0]
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681a      	ldr	r2, [r3, #0]
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009200:	3b01      	subs	r3, #1
 8009202:	68f9      	ldr	r1, [r7, #12]
 8009204:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009206:	fb01 f303 	mul.w	r3, r1, r3
 800920a:	441a      	add	r2, r3
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	22ff      	movs	r2, #255	; 0xff
 8009214:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	22ff      	movs	r2, #255	; 0xff
 800921c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d114      	bne.n	8009250 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	691b      	ldr	r3, [r3, #16]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d01a      	beq.n	8009264 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	3310      	adds	r3, #16
 8009232:	4618      	mov	r0, r3
 8009234:	f001 fafa 	bl	800a82c <xTaskRemoveFromEventList>
 8009238:	4603      	mov	r3, r0
 800923a:	2b00      	cmp	r3, #0
 800923c:	d012      	beq.n	8009264 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800923e:	4b0d      	ldr	r3, [pc, #52]	; (8009274 <xQueueGenericReset+0xcc>)
 8009240:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009244:	601a      	str	r2, [r3, #0]
 8009246:	f3bf 8f4f 	dsb	sy
 800924a:	f3bf 8f6f 	isb	sy
 800924e:	e009      	b.n	8009264 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	3310      	adds	r3, #16
 8009254:	4618      	mov	r0, r3
 8009256:	f7ff fef3 	bl	8009040 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	3324      	adds	r3, #36	; 0x24
 800925e:	4618      	mov	r0, r3
 8009260:	f7ff feee 	bl	8009040 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009264:	f002 f830 	bl	800b2c8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009268:	2301      	movs	r3, #1
}
 800926a:	4618      	mov	r0, r3
 800926c:	3710      	adds	r7, #16
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}
 8009272:	bf00      	nop
 8009274:	e000ed04 	.word	0xe000ed04

08009278 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009278:	b580      	push	{r7, lr}
 800927a:	b08e      	sub	sp, #56	; 0x38
 800927c:	af02      	add	r7, sp, #8
 800927e:	60f8      	str	r0, [r7, #12]
 8009280:	60b9      	str	r1, [r7, #8]
 8009282:	607a      	str	r2, [r7, #4]
 8009284:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d109      	bne.n	80092a0 <xQueueGenericCreateStatic+0x28>
 800928c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009290:	f383 8811 	msr	BASEPRI, r3
 8009294:	f3bf 8f6f 	isb	sy
 8009298:	f3bf 8f4f 	dsb	sy
 800929c:	62bb      	str	r3, [r7, #40]	; 0x28
 800929e:	e7fe      	b.n	800929e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d109      	bne.n	80092ba <xQueueGenericCreateStatic+0x42>
 80092a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092aa:	f383 8811 	msr	BASEPRI, r3
 80092ae:	f3bf 8f6f 	isb	sy
 80092b2:	f3bf 8f4f 	dsb	sy
 80092b6:	627b      	str	r3, [r7, #36]	; 0x24
 80092b8:	e7fe      	b.n	80092b8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d002      	beq.n	80092c6 <xQueueGenericCreateStatic+0x4e>
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d001      	beq.n	80092ca <xQueueGenericCreateStatic+0x52>
 80092c6:	2301      	movs	r3, #1
 80092c8:	e000      	b.n	80092cc <xQueueGenericCreateStatic+0x54>
 80092ca:	2300      	movs	r3, #0
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d109      	bne.n	80092e4 <xQueueGenericCreateStatic+0x6c>
 80092d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d4:	f383 8811 	msr	BASEPRI, r3
 80092d8:	f3bf 8f6f 	isb	sy
 80092dc:	f3bf 8f4f 	dsb	sy
 80092e0:	623b      	str	r3, [r7, #32]
 80092e2:	e7fe      	b.n	80092e2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d102      	bne.n	80092f0 <xQueueGenericCreateStatic+0x78>
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d101      	bne.n	80092f4 <xQueueGenericCreateStatic+0x7c>
 80092f0:	2301      	movs	r3, #1
 80092f2:	e000      	b.n	80092f6 <xQueueGenericCreateStatic+0x7e>
 80092f4:	2300      	movs	r3, #0
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d109      	bne.n	800930e <xQueueGenericCreateStatic+0x96>
 80092fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092fe:	f383 8811 	msr	BASEPRI, r3
 8009302:	f3bf 8f6f 	isb	sy
 8009306:	f3bf 8f4f 	dsb	sy
 800930a:	61fb      	str	r3, [r7, #28]
 800930c:	e7fe      	b.n	800930c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800930e:	2348      	movs	r3, #72	; 0x48
 8009310:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	2b48      	cmp	r3, #72	; 0x48
 8009316:	d009      	beq.n	800932c <xQueueGenericCreateStatic+0xb4>
 8009318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800931c:	f383 8811 	msr	BASEPRI, r3
 8009320:	f3bf 8f6f 	isb	sy
 8009324:	f3bf 8f4f 	dsb	sy
 8009328:	61bb      	str	r3, [r7, #24]
 800932a:	e7fe      	b.n	800932a <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009332:	2b00      	cmp	r3, #0
 8009334:	d00d      	beq.n	8009352 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009338:	2201      	movs	r2, #1
 800933a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800933e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009344:	9300      	str	r3, [sp, #0]
 8009346:	4613      	mov	r3, r2
 8009348:	687a      	ldr	r2, [r7, #4]
 800934a:	68b9      	ldr	r1, [r7, #8]
 800934c:	68f8      	ldr	r0, [r7, #12]
 800934e:	f000 f842 	bl	80093d6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8009352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009354:	4618      	mov	r0, r3
 8009356:	3730      	adds	r7, #48	; 0x30
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}

0800935c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800935c:	b580      	push	{r7, lr}
 800935e:	b08a      	sub	sp, #40	; 0x28
 8009360:	af02      	add	r7, sp, #8
 8009362:	60f8      	str	r0, [r7, #12]
 8009364:	60b9      	str	r1, [r7, #8]
 8009366:	4613      	mov	r3, r2
 8009368:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d109      	bne.n	8009384 <xQueueGenericCreate+0x28>
 8009370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009374:	f383 8811 	msr	BASEPRI, r3
 8009378:	f3bf 8f6f 	isb	sy
 800937c:	f3bf 8f4f 	dsb	sy
 8009380:	613b      	str	r3, [r7, #16]
 8009382:	e7fe      	b.n	8009382 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d102      	bne.n	8009390 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800938a:	2300      	movs	r3, #0
 800938c:	61fb      	str	r3, [r7, #28]
 800938e:	e004      	b.n	800939a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	68ba      	ldr	r2, [r7, #8]
 8009394:	fb02 f303 	mul.w	r3, r2, r3
 8009398:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800939a:	69fb      	ldr	r3, [r7, #28]
 800939c:	3348      	adds	r3, #72	; 0x48
 800939e:	4618      	mov	r0, r3
 80093a0:	f002 f87e 	bl	800b4a0 <pvPortMalloc>
 80093a4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80093a6:	69bb      	ldr	r3, [r7, #24]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d00f      	beq.n	80093cc <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80093ac:	69bb      	ldr	r3, [r7, #24]
 80093ae:	3348      	adds	r3, #72	; 0x48
 80093b0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80093b2:	69bb      	ldr	r3, [r7, #24]
 80093b4:	2200      	movs	r2, #0
 80093b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80093ba:	79fa      	ldrb	r2, [r7, #7]
 80093bc:	69bb      	ldr	r3, [r7, #24]
 80093be:	9300      	str	r3, [sp, #0]
 80093c0:	4613      	mov	r3, r2
 80093c2:	697a      	ldr	r2, [r7, #20]
 80093c4:	68b9      	ldr	r1, [r7, #8]
 80093c6:	68f8      	ldr	r0, [r7, #12]
 80093c8:	f000 f805 	bl	80093d6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80093cc:	69bb      	ldr	r3, [r7, #24]
	}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3720      	adds	r7, #32
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}

080093d6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80093d6:	b580      	push	{r7, lr}
 80093d8:	b084      	sub	sp, #16
 80093da:	af00      	add	r7, sp, #0
 80093dc:	60f8      	str	r0, [r7, #12]
 80093de:	60b9      	str	r1, [r7, #8]
 80093e0:	607a      	str	r2, [r7, #4]
 80093e2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d103      	bne.n	80093f2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80093ea:	69bb      	ldr	r3, [r7, #24]
 80093ec:	69ba      	ldr	r2, [r7, #24]
 80093ee:	601a      	str	r2, [r3, #0]
 80093f0:	e002      	b.n	80093f8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80093f2:	69bb      	ldr	r3, [r7, #24]
 80093f4:	687a      	ldr	r2, [r7, #4]
 80093f6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80093f8:	69bb      	ldr	r3, [r7, #24]
 80093fa:	68fa      	ldr	r2, [r7, #12]
 80093fc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80093fe:	69bb      	ldr	r3, [r7, #24]
 8009400:	68ba      	ldr	r2, [r7, #8]
 8009402:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009404:	2101      	movs	r1, #1
 8009406:	69b8      	ldr	r0, [r7, #24]
 8009408:	f7ff fece 	bl	80091a8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800940c:	bf00      	nop
 800940e:	3710      	adds	r7, #16
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b08e      	sub	sp, #56	; 0x38
 8009418:	af00      	add	r7, sp, #0
 800941a:	60f8      	str	r0, [r7, #12]
 800941c:	60b9      	str	r1, [r7, #8]
 800941e:	607a      	str	r2, [r7, #4]
 8009420:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009422:	2300      	movs	r3, #0
 8009424:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800942a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800942c:	2b00      	cmp	r3, #0
 800942e:	d109      	bne.n	8009444 <xQueueGenericSend+0x30>
 8009430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009434:	f383 8811 	msr	BASEPRI, r3
 8009438:	f3bf 8f6f 	isb	sy
 800943c:	f3bf 8f4f 	dsb	sy
 8009440:	62bb      	str	r3, [r7, #40]	; 0x28
 8009442:	e7fe      	b.n	8009442 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d103      	bne.n	8009452 <xQueueGenericSend+0x3e>
 800944a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800944c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800944e:	2b00      	cmp	r3, #0
 8009450:	d101      	bne.n	8009456 <xQueueGenericSend+0x42>
 8009452:	2301      	movs	r3, #1
 8009454:	e000      	b.n	8009458 <xQueueGenericSend+0x44>
 8009456:	2300      	movs	r3, #0
 8009458:	2b00      	cmp	r3, #0
 800945a:	d109      	bne.n	8009470 <xQueueGenericSend+0x5c>
 800945c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009460:	f383 8811 	msr	BASEPRI, r3
 8009464:	f3bf 8f6f 	isb	sy
 8009468:	f3bf 8f4f 	dsb	sy
 800946c:	627b      	str	r3, [r7, #36]	; 0x24
 800946e:	e7fe      	b.n	800946e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	2b02      	cmp	r3, #2
 8009474:	d103      	bne.n	800947e <xQueueGenericSend+0x6a>
 8009476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800947a:	2b01      	cmp	r3, #1
 800947c:	d101      	bne.n	8009482 <xQueueGenericSend+0x6e>
 800947e:	2301      	movs	r3, #1
 8009480:	e000      	b.n	8009484 <xQueueGenericSend+0x70>
 8009482:	2300      	movs	r3, #0
 8009484:	2b00      	cmp	r3, #0
 8009486:	d109      	bne.n	800949c <xQueueGenericSend+0x88>
 8009488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800948c:	f383 8811 	msr	BASEPRI, r3
 8009490:	f3bf 8f6f 	isb	sy
 8009494:	f3bf 8f4f 	dsb	sy
 8009498:	623b      	str	r3, [r7, #32]
 800949a:	e7fe      	b.n	800949a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800949c:	f001 fb82 	bl	800aba4 <xTaskGetSchedulerState>
 80094a0:	4603      	mov	r3, r0
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d102      	bne.n	80094ac <xQueueGenericSend+0x98>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d101      	bne.n	80094b0 <xQueueGenericSend+0x9c>
 80094ac:	2301      	movs	r3, #1
 80094ae:	e000      	b.n	80094b2 <xQueueGenericSend+0x9e>
 80094b0:	2300      	movs	r3, #0
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d109      	bne.n	80094ca <xQueueGenericSend+0xb6>
 80094b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ba:	f383 8811 	msr	BASEPRI, r3
 80094be:	f3bf 8f6f 	isb	sy
 80094c2:	f3bf 8f4f 	dsb	sy
 80094c6:	61fb      	str	r3, [r7, #28]
 80094c8:	e7fe      	b.n	80094c8 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80094ca:	f001 fecf 	bl	800b26c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80094ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094d6:	429a      	cmp	r2, r3
 80094d8:	d302      	bcc.n	80094e0 <xQueueGenericSend+0xcc>
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	2b02      	cmp	r3, #2
 80094de:	d129      	bne.n	8009534 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80094e0:	683a      	ldr	r2, [r7, #0]
 80094e2:	68b9      	ldr	r1, [r7, #8]
 80094e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80094e6:	f000 fc48 	bl	8009d7a <prvCopyDataToQueue>
 80094ea:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80094ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d010      	beq.n	8009516 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80094f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094f6:	3324      	adds	r3, #36	; 0x24
 80094f8:	4618      	mov	r0, r3
 80094fa:	f001 f997 	bl	800a82c <xTaskRemoveFromEventList>
 80094fe:	4603      	mov	r3, r0
 8009500:	2b00      	cmp	r3, #0
 8009502:	d013      	beq.n	800952c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009504:	4b3f      	ldr	r3, [pc, #252]	; (8009604 <xQueueGenericSend+0x1f0>)
 8009506:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800950a:	601a      	str	r2, [r3, #0]
 800950c:	f3bf 8f4f 	dsb	sy
 8009510:	f3bf 8f6f 	isb	sy
 8009514:	e00a      	b.n	800952c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009518:	2b00      	cmp	r3, #0
 800951a:	d007      	beq.n	800952c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800951c:	4b39      	ldr	r3, [pc, #228]	; (8009604 <xQueueGenericSend+0x1f0>)
 800951e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009522:	601a      	str	r2, [r3, #0]
 8009524:	f3bf 8f4f 	dsb	sy
 8009528:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800952c:	f001 fecc 	bl	800b2c8 <vPortExitCritical>
				return pdPASS;
 8009530:	2301      	movs	r3, #1
 8009532:	e063      	b.n	80095fc <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d103      	bne.n	8009542 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800953a:	f001 fec5 	bl	800b2c8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800953e:	2300      	movs	r3, #0
 8009540:	e05c      	b.n	80095fc <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009544:	2b00      	cmp	r3, #0
 8009546:	d106      	bne.n	8009556 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009548:	f107 0314 	add.w	r3, r7, #20
 800954c:	4618      	mov	r0, r3
 800954e:	f001 f9cf 	bl	800a8f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009552:	2301      	movs	r3, #1
 8009554:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009556:	f001 feb7 	bl	800b2c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800955a:	f000 ff61 	bl	800a420 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800955e:	f001 fe85 	bl	800b26c <vPortEnterCritical>
 8009562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009564:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009568:	b25b      	sxtb	r3, r3
 800956a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800956e:	d103      	bne.n	8009578 <xQueueGenericSend+0x164>
 8009570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009572:	2200      	movs	r2, #0
 8009574:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800957a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800957e:	b25b      	sxtb	r3, r3
 8009580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009584:	d103      	bne.n	800958e <xQueueGenericSend+0x17a>
 8009586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009588:	2200      	movs	r2, #0
 800958a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800958e:	f001 fe9b 	bl	800b2c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009592:	1d3a      	adds	r2, r7, #4
 8009594:	f107 0314 	add.w	r3, r7, #20
 8009598:	4611      	mov	r1, r2
 800959a:	4618      	mov	r0, r3
 800959c:	f001 f9be 	bl	800a91c <xTaskCheckForTimeOut>
 80095a0:	4603      	mov	r3, r0
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d124      	bne.n	80095f0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80095a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095a8:	f000 fcdf 	bl	8009f6a <prvIsQueueFull>
 80095ac:	4603      	mov	r3, r0
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d018      	beq.n	80095e4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80095b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b4:	3310      	adds	r3, #16
 80095b6:	687a      	ldr	r2, [r7, #4]
 80095b8:	4611      	mov	r1, r2
 80095ba:	4618      	mov	r0, r3
 80095bc:	f001 f912 	bl	800a7e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80095c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095c2:	f000 fc6a 	bl	8009e9a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80095c6:	f000 ff39 	bl	800a43c <xTaskResumeAll>
 80095ca:	4603      	mov	r3, r0
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	f47f af7c 	bne.w	80094ca <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80095d2:	4b0c      	ldr	r3, [pc, #48]	; (8009604 <xQueueGenericSend+0x1f0>)
 80095d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095d8:	601a      	str	r2, [r3, #0]
 80095da:	f3bf 8f4f 	dsb	sy
 80095de:	f3bf 8f6f 	isb	sy
 80095e2:	e772      	b.n	80094ca <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80095e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095e6:	f000 fc58 	bl	8009e9a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80095ea:	f000 ff27 	bl	800a43c <xTaskResumeAll>
 80095ee:	e76c      	b.n	80094ca <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80095f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095f2:	f000 fc52 	bl	8009e9a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80095f6:	f000 ff21 	bl	800a43c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80095fa:	2300      	movs	r3, #0
		}
	}
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3738      	adds	r7, #56	; 0x38
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}
 8009604:	e000ed04 	.word	0xe000ed04

08009608 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b08e      	sub	sp, #56	; 0x38
 800960c:	af00      	add	r7, sp, #0
 800960e:	60f8      	str	r0, [r7, #12]
 8009610:	60b9      	str	r1, [r7, #8]
 8009612:	607a      	str	r2, [r7, #4]
 8009614:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800961a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800961c:	2b00      	cmp	r3, #0
 800961e:	d109      	bne.n	8009634 <xQueueGenericSendFromISR+0x2c>
 8009620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009624:	f383 8811 	msr	BASEPRI, r3
 8009628:	f3bf 8f6f 	isb	sy
 800962c:	f3bf 8f4f 	dsb	sy
 8009630:	627b      	str	r3, [r7, #36]	; 0x24
 8009632:	e7fe      	b.n	8009632 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d103      	bne.n	8009642 <xQueueGenericSendFromISR+0x3a>
 800963a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800963c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800963e:	2b00      	cmp	r3, #0
 8009640:	d101      	bne.n	8009646 <xQueueGenericSendFromISR+0x3e>
 8009642:	2301      	movs	r3, #1
 8009644:	e000      	b.n	8009648 <xQueueGenericSendFromISR+0x40>
 8009646:	2300      	movs	r3, #0
 8009648:	2b00      	cmp	r3, #0
 800964a:	d109      	bne.n	8009660 <xQueueGenericSendFromISR+0x58>
 800964c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009650:	f383 8811 	msr	BASEPRI, r3
 8009654:	f3bf 8f6f 	isb	sy
 8009658:	f3bf 8f4f 	dsb	sy
 800965c:	623b      	str	r3, [r7, #32]
 800965e:	e7fe      	b.n	800965e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	2b02      	cmp	r3, #2
 8009664:	d103      	bne.n	800966e <xQueueGenericSendFromISR+0x66>
 8009666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800966a:	2b01      	cmp	r3, #1
 800966c:	d101      	bne.n	8009672 <xQueueGenericSendFromISR+0x6a>
 800966e:	2301      	movs	r3, #1
 8009670:	e000      	b.n	8009674 <xQueueGenericSendFromISR+0x6c>
 8009672:	2300      	movs	r3, #0
 8009674:	2b00      	cmp	r3, #0
 8009676:	d109      	bne.n	800968c <xQueueGenericSendFromISR+0x84>
 8009678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800967c:	f383 8811 	msr	BASEPRI, r3
 8009680:	f3bf 8f6f 	isb	sy
 8009684:	f3bf 8f4f 	dsb	sy
 8009688:	61fb      	str	r3, [r7, #28]
 800968a:	e7fe      	b.n	800968a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800968c:	f001 feca 	bl	800b424 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009690:	f3ef 8211 	mrs	r2, BASEPRI
 8009694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009698:	f383 8811 	msr	BASEPRI, r3
 800969c:	f3bf 8f6f 	isb	sy
 80096a0:	f3bf 8f4f 	dsb	sy
 80096a4:	61ba      	str	r2, [r7, #24]
 80096a6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80096a8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80096aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80096ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096b4:	429a      	cmp	r2, r3
 80096b6:	d302      	bcc.n	80096be <xQueueGenericSendFromISR+0xb6>
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	2b02      	cmp	r3, #2
 80096bc:	d12c      	bne.n	8009718 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80096be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80096c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80096c8:	683a      	ldr	r2, [r7, #0]
 80096ca:	68b9      	ldr	r1, [r7, #8]
 80096cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096ce:	f000 fb54 	bl	8009d7a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80096d2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80096d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096da:	d112      	bne.n	8009702 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80096dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d016      	beq.n	8009712 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80096e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e6:	3324      	adds	r3, #36	; 0x24
 80096e8:	4618      	mov	r0, r3
 80096ea:	f001 f89f 	bl	800a82c <xTaskRemoveFromEventList>
 80096ee:	4603      	mov	r3, r0
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d00e      	beq.n	8009712 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d00b      	beq.n	8009712 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2201      	movs	r2, #1
 80096fe:	601a      	str	r2, [r3, #0]
 8009700:	e007      	b.n	8009712 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009702:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009706:	3301      	adds	r3, #1
 8009708:	b2db      	uxtb	r3, r3
 800970a:	b25a      	sxtb	r2, r3
 800970c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800970e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009712:	2301      	movs	r3, #1
 8009714:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009716:	e001      	b.n	800971c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009718:	2300      	movs	r3, #0
 800971a:	637b      	str	r3, [r7, #52]	; 0x34
 800971c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800971e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009728:	4618      	mov	r0, r3
 800972a:	3738      	adds	r7, #56	; 0x38
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}

08009730 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b08e      	sub	sp, #56	; 0x38
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
 8009738:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800973e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009740:	2b00      	cmp	r3, #0
 8009742:	d109      	bne.n	8009758 <xQueueGiveFromISR+0x28>
	__asm volatile
 8009744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009748:	f383 8811 	msr	BASEPRI, r3
 800974c:	f3bf 8f6f 	isb	sy
 8009750:	f3bf 8f4f 	dsb	sy
 8009754:	623b      	str	r3, [r7, #32]
 8009756:	e7fe      	b.n	8009756 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800975a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800975c:	2b00      	cmp	r3, #0
 800975e:	d009      	beq.n	8009774 <xQueueGiveFromISR+0x44>
 8009760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009764:	f383 8811 	msr	BASEPRI, r3
 8009768:	f3bf 8f6f 	isb	sy
 800976c:	f3bf 8f4f 	dsb	sy
 8009770:	61fb      	str	r3, [r7, #28]
 8009772:	e7fe      	b.n	8009772 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8009774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d103      	bne.n	8009784 <xQueueGiveFromISR+0x54>
 800977c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800977e:	685b      	ldr	r3, [r3, #4]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d101      	bne.n	8009788 <xQueueGiveFromISR+0x58>
 8009784:	2301      	movs	r3, #1
 8009786:	e000      	b.n	800978a <xQueueGiveFromISR+0x5a>
 8009788:	2300      	movs	r3, #0
 800978a:	2b00      	cmp	r3, #0
 800978c:	d109      	bne.n	80097a2 <xQueueGiveFromISR+0x72>
 800978e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009792:	f383 8811 	msr	BASEPRI, r3
 8009796:	f3bf 8f6f 	isb	sy
 800979a:	f3bf 8f4f 	dsb	sy
 800979e:	61bb      	str	r3, [r7, #24]
 80097a0:	e7fe      	b.n	80097a0 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80097a2:	f001 fe3f 	bl	800b424 <vPortValidateInterruptPriority>
	__asm volatile
 80097a6:	f3ef 8211 	mrs	r2, BASEPRI
 80097aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ae:	f383 8811 	msr	BASEPRI, r3
 80097b2:	f3bf 8f6f 	isb	sy
 80097b6:	f3bf 8f4f 	dsb	sy
 80097ba:	617a      	str	r2, [r7, #20]
 80097bc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80097be:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80097c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80097c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097c6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80097c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097ce:	429a      	cmp	r2, r3
 80097d0:	d22b      	bcs.n	800982a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80097d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80097d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80097dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097de:	1c5a      	adds	r2, r3, #1
 80097e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80097e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80097e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097ec:	d112      	bne.n	8009814 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80097ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d016      	beq.n	8009824 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80097f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f8:	3324      	adds	r3, #36	; 0x24
 80097fa:	4618      	mov	r0, r3
 80097fc:	f001 f816 	bl	800a82c <xTaskRemoveFromEventList>
 8009800:	4603      	mov	r3, r0
 8009802:	2b00      	cmp	r3, #0
 8009804:	d00e      	beq.n	8009824 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d00b      	beq.n	8009824 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	2201      	movs	r2, #1
 8009810:	601a      	str	r2, [r3, #0]
 8009812:	e007      	b.n	8009824 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009814:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009818:	3301      	adds	r3, #1
 800981a:	b2db      	uxtb	r3, r3
 800981c:	b25a      	sxtb	r2, r3
 800981e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009820:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009824:	2301      	movs	r3, #1
 8009826:	637b      	str	r3, [r7, #52]	; 0x34
 8009828:	e001      	b.n	800982e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800982a:	2300      	movs	r3, #0
 800982c:	637b      	str	r3, [r7, #52]	; 0x34
 800982e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009830:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800983a:	4618      	mov	r0, r3
 800983c:	3738      	adds	r7, #56	; 0x38
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}
	...

08009844 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b08c      	sub	sp, #48	; 0x30
 8009848:	af00      	add	r7, sp, #0
 800984a:	60f8      	str	r0, [r7, #12]
 800984c:	60b9      	str	r1, [r7, #8]
 800984e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009850:	2300      	movs	r3, #0
 8009852:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800985a:	2b00      	cmp	r3, #0
 800985c:	d109      	bne.n	8009872 <xQueueReceive+0x2e>
	__asm volatile
 800985e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009862:	f383 8811 	msr	BASEPRI, r3
 8009866:	f3bf 8f6f 	isb	sy
 800986a:	f3bf 8f4f 	dsb	sy
 800986e:	623b      	str	r3, [r7, #32]
 8009870:	e7fe      	b.n	8009870 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d103      	bne.n	8009880 <xQueueReceive+0x3c>
 8009878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800987a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800987c:	2b00      	cmp	r3, #0
 800987e:	d101      	bne.n	8009884 <xQueueReceive+0x40>
 8009880:	2301      	movs	r3, #1
 8009882:	e000      	b.n	8009886 <xQueueReceive+0x42>
 8009884:	2300      	movs	r3, #0
 8009886:	2b00      	cmp	r3, #0
 8009888:	d109      	bne.n	800989e <xQueueReceive+0x5a>
 800988a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800988e:	f383 8811 	msr	BASEPRI, r3
 8009892:	f3bf 8f6f 	isb	sy
 8009896:	f3bf 8f4f 	dsb	sy
 800989a:	61fb      	str	r3, [r7, #28]
 800989c:	e7fe      	b.n	800989c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800989e:	f001 f981 	bl	800aba4 <xTaskGetSchedulerState>
 80098a2:	4603      	mov	r3, r0
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d102      	bne.n	80098ae <xQueueReceive+0x6a>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d101      	bne.n	80098b2 <xQueueReceive+0x6e>
 80098ae:	2301      	movs	r3, #1
 80098b0:	e000      	b.n	80098b4 <xQueueReceive+0x70>
 80098b2:	2300      	movs	r3, #0
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d109      	bne.n	80098cc <xQueueReceive+0x88>
 80098b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098bc:	f383 8811 	msr	BASEPRI, r3
 80098c0:	f3bf 8f6f 	isb	sy
 80098c4:	f3bf 8f4f 	dsb	sy
 80098c8:	61bb      	str	r3, [r7, #24]
 80098ca:	e7fe      	b.n	80098ca <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80098cc:	f001 fcce 	bl	800b26c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80098d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098d4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80098d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d01f      	beq.n	800991c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80098dc:	68b9      	ldr	r1, [r7, #8]
 80098de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098e0:	f000 fab5 	bl	8009e4e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80098e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e6:	1e5a      	subs	r2, r3, #1
 80098e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ea:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ee:	691b      	ldr	r3, [r3, #16]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d00f      	beq.n	8009914 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098f6:	3310      	adds	r3, #16
 80098f8:	4618      	mov	r0, r3
 80098fa:	f000 ff97 	bl	800a82c <xTaskRemoveFromEventList>
 80098fe:	4603      	mov	r3, r0
 8009900:	2b00      	cmp	r3, #0
 8009902:	d007      	beq.n	8009914 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009904:	4b3c      	ldr	r3, [pc, #240]	; (80099f8 <xQueueReceive+0x1b4>)
 8009906:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800990a:	601a      	str	r2, [r3, #0]
 800990c:	f3bf 8f4f 	dsb	sy
 8009910:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009914:	f001 fcd8 	bl	800b2c8 <vPortExitCritical>
				return pdPASS;
 8009918:	2301      	movs	r3, #1
 800991a:	e069      	b.n	80099f0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d103      	bne.n	800992a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009922:	f001 fcd1 	bl	800b2c8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009926:	2300      	movs	r3, #0
 8009928:	e062      	b.n	80099f0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800992a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800992c:	2b00      	cmp	r3, #0
 800992e:	d106      	bne.n	800993e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009930:	f107 0310 	add.w	r3, r7, #16
 8009934:	4618      	mov	r0, r3
 8009936:	f000 ffdb 	bl	800a8f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800993a:	2301      	movs	r3, #1
 800993c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800993e:	f001 fcc3 	bl	800b2c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009942:	f000 fd6d 	bl	800a420 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009946:	f001 fc91 	bl	800b26c <vPortEnterCritical>
 800994a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800994c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009950:	b25b      	sxtb	r3, r3
 8009952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009956:	d103      	bne.n	8009960 <xQueueReceive+0x11c>
 8009958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800995a:	2200      	movs	r2, #0
 800995c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009962:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009966:	b25b      	sxtb	r3, r3
 8009968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800996c:	d103      	bne.n	8009976 <xQueueReceive+0x132>
 800996e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009970:	2200      	movs	r2, #0
 8009972:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009976:	f001 fca7 	bl	800b2c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800997a:	1d3a      	adds	r2, r7, #4
 800997c:	f107 0310 	add.w	r3, r7, #16
 8009980:	4611      	mov	r1, r2
 8009982:	4618      	mov	r0, r3
 8009984:	f000 ffca 	bl	800a91c <xTaskCheckForTimeOut>
 8009988:	4603      	mov	r3, r0
 800998a:	2b00      	cmp	r3, #0
 800998c:	d123      	bne.n	80099d6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800998e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009990:	f000 fad5 	bl	8009f3e <prvIsQueueEmpty>
 8009994:	4603      	mov	r3, r0
 8009996:	2b00      	cmp	r3, #0
 8009998:	d017      	beq.n	80099ca <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800999a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800999c:	3324      	adds	r3, #36	; 0x24
 800999e:	687a      	ldr	r2, [r7, #4]
 80099a0:	4611      	mov	r1, r2
 80099a2:	4618      	mov	r0, r3
 80099a4:	f000 ff1e 	bl	800a7e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80099a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099aa:	f000 fa76 	bl	8009e9a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80099ae:	f000 fd45 	bl	800a43c <xTaskResumeAll>
 80099b2:	4603      	mov	r3, r0
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d189      	bne.n	80098cc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80099b8:	4b0f      	ldr	r3, [pc, #60]	; (80099f8 <xQueueReceive+0x1b4>)
 80099ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099be:	601a      	str	r2, [r3, #0]
 80099c0:	f3bf 8f4f 	dsb	sy
 80099c4:	f3bf 8f6f 	isb	sy
 80099c8:	e780      	b.n	80098cc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80099ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099cc:	f000 fa65 	bl	8009e9a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80099d0:	f000 fd34 	bl	800a43c <xTaskResumeAll>
 80099d4:	e77a      	b.n	80098cc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80099d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099d8:	f000 fa5f 	bl	8009e9a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80099dc:	f000 fd2e 	bl	800a43c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80099e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099e2:	f000 faac 	bl	8009f3e <prvIsQueueEmpty>
 80099e6:	4603      	mov	r3, r0
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	f43f af6f 	beq.w	80098cc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80099ee:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3730      	adds	r7, #48	; 0x30
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}
 80099f8:	e000ed04 	.word	0xe000ed04

080099fc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b08e      	sub	sp, #56	; 0x38
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009a06:	2300      	movs	r3, #0
 8009a08:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d109      	bne.n	8009a2c <xQueueSemaphoreTake+0x30>
 8009a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a1c:	f383 8811 	msr	BASEPRI, r3
 8009a20:	f3bf 8f6f 	isb	sy
 8009a24:	f3bf 8f4f 	dsb	sy
 8009a28:	623b      	str	r3, [r7, #32]
 8009a2a:	e7fe      	b.n	8009a2a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d009      	beq.n	8009a48 <xQueueSemaphoreTake+0x4c>
 8009a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a38:	f383 8811 	msr	BASEPRI, r3
 8009a3c:	f3bf 8f6f 	isb	sy
 8009a40:	f3bf 8f4f 	dsb	sy
 8009a44:	61fb      	str	r3, [r7, #28]
 8009a46:	e7fe      	b.n	8009a46 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009a48:	f001 f8ac 	bl	800aba4 <xTaskGetSchedulerState>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d102      	bne.n	8009a58 <xQueueSemaphoreTake+0x5c>
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d101      	bne.n	8009a5c <xQueueSemaphoreTake+0x60>
 8009a58:	2301      	movs	r3, #1
 8009a5a:	e000      	b.n	8009a5e <xQueueSemaphoreTake+0x62>
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d109      	bne.n	8009a76 <xQueueSemaphoreTake+0x7a>
 8009a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a66:	f383 8811 	msr	BASEPRI, r3
 8009a6a:	f3bf 8f6f 	isb	sy
 8009a6e:	f3bf 8f4f 	dsb	sy
 8009a72:	61bb      	str	r3, [r7, #24]
 8009a74:	e7fe      	b.n	8009a74 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8009a76:	f001 fbf9 	bl	800b26c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a7e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d024      	beq.n	8009ad0 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a88:	1e5a      	subs	r2, r3, #1
 8009a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a8c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d104      	bne.n	8009aa0 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8009a96:	f001 fa4b 	bl	800af30 <pvTaskIncrementMutexHeldCount>
 8009a9a:	4602      	mov	r2, r0
 8009a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a9e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aa2:	691b      	ldr	r3, [r3, #16]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d00f      	beq.n	8009ac8 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aaa:	3310      	adds	r3, #16
 8009aac:	4618      	mov	r0, r3
 8009aae:	f000 febd 	bl	800a82c <xTaskRemoveFromEventList>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d007      	beq.n	8009ac8 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009ab8:	4b53      	ldr	r3, [pc, #332]	; (8009c08 <xQueueSemaphoreTake+0x20c>)
 8009aba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009abe:	601a      	str	r2, [r3, #0]
 8009ac0:	f3bf 8f4f 	dsb	sy
 8009ac4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009ac8:	f001 fbfe 	bl	800b2c8 <vPortExitCritical>
				return pdPASS;
 8009acc:	2301      	movs	r3, #1
 8009ace:	e096      	b.n	8009bfe <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d110      	bne.n	8009af8 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d009      	beq.n	8009af0 <xQueueSemaphoreTake+0xf4>
 8009adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae0:	f383 8811 	msr	BASEPRI, r3
 8009ae4:	f3bf 8f6f 	isb	sy
 8009ae8:	f3bf 8f4f 	dsb	sy
 8009aec:	617b      	str	r3, [r7, #20]
 8009aee:	e7fe      	b.n	8009aee <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009af0:	f001 fbea 	bl	800b2c8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009af4:	2300      	movs	r3, #0
 8009af6:	e082      	b.n	8009bfe <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d106      	bne.n	8009b0c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009afe:	f107 030c 	add.w	r3, r7, #12
 8009b02:	4618      	mov	r0, r3
 8009b04:	f000 fef4 	bl	800a8f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009b08:	2301      	movs	r3, #1
 8009b0a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009b0c:	f001 fbdc 	bl	800b2c8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009b10:	f000 fc86 	bl	800a420 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009b14:	f001 fbaa 	bl	800b26c <vPortEnterCritical>
 8009b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b1e:	b25b      	sxtb	r3, r3
 8009b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b24:	d103      	bne.n	8009b2e <xQueueSemaphoreTake+0x132>
 8009b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b28:	2200      	movs	r2, #0
 8009b2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b34:	b25b      	sxtb	r3, r3
 8009b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b3a:	d103      	bne.n	8009b44 <xQueueSemaphoreTake+0x148>
 8009b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b3e:	2200      	movs	r2, #0
 8009b40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b44:	f001 fbc0 	bl	800b2c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009b48:	463a      	mov	r2, r7
 8009b4a:	f107 030c 	add.w	r3, r7, #12
 8009b4e:	4611      	mov	r1, r2
 8009b50:	4618      	mov	r0, r3
 8009b52:	f000 fee3 	bl	800a91c <xTaskCheckForTimeOut>
 8009b56:	4603      	mov	r3, r0
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d132      	bne.n	8009bc2 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009b5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b5e:	f000 f9ee 	bl	8009f3e <prvIsQueueEmpty>
 8009b62:	4603      	mov	r3, r0
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d026      	beq.n	8009bb6 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d109      	bne.n	8009b84 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8009b70:	f001 fb7c 	bl	800b26c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8009b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b76:	685b      	ldr	r3, [r3, #4]
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f001 f831 	bl	800abe0 <xTaskPriorityInherit>
 8009b7e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009b80:	f001 fba2 	bl	800b2c8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b86:	3324      	adds	r3, #36	; 0x24
 8009b88:	683a      	ldr	r2, [r7, #0]
 8009b8a:	4611      	mov	r1, r2
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f000 fe29 	bl	800a7e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009b92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b94:	f000 f981 	bl	8009e9a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009b98:	f000 fc50 	bl	800a43c <xTaskResumeAll>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	f47f af69 	bne.w	8009a76 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8009ba4:	4b18      	ldr	r3, [pc, #96]	; (8009c08 <xQueueSemaphoreTake+0x20c>)
 8009ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009baa:	601a      	str	r2, [r3, #0]
 8009bac:	f3bf 8f4f 	dsb	sy
 8009bb0:	f3bf 8f6f 	isb	sy
 8009bb4:	e75f      	b.n	8009a76 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009bb6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009bb8:	f000 f96f 	bl	8009e9a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009bbc:	f000 fc3e 	bl	800a43c <xTaskResumeAll>
 8009bc0:	e759      	b.n	8009a76 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009bc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009bc4:	f000 f969 	bl	8009e9a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009bc8:	f000 fc38 	bl	800a43c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009bcc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009bce:	f000 f9b6 	bl	8009f3e <prvIsQueueEmpty>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	f43f af4e 	beq.w	8009a76 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d00d      	beq.n	8009bfc <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8009be0:	f001 fb44 	bl	800b26c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009be4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009be6:	f000 f8b0 	bl	8009d4a <prvGetDisinheritPriorityAfterTimeout>
 8009bea:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8009bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bee:	685b      	ldr	r3, [r3, #4]
 8009bf0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f001 f8fe 	bl	800adf4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009bf8:	f001 fb66 	bl	800b2c8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009bfc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3738      	adds	r7, #56	; 0x38
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}
 8009c06:	bf00      	nop
 8009c08:	e000ed04 	.word	0xe000ed04

08009c0c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b08e      	sub	sp, #56	; 0x38
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	60f8      	str	r0, [r7, #12]
 8009c14:	60b9      	str	r1, [r7, #8]
 8009c16:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d109      	bne.n	8009c36 <xQueueReceiveFromISR+0x2a>
 8009c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c26:	f383 8811 	msr	BASEPRI, r3
 8009c2a:	f3bf 8f6f 	isb	sy
 8009c2e:	f3bf 8f4f 	dsb	sy
 8009c32:	623b      	str	r3, [r7, #32]
 8009c34:	e7fe      	b.n	8009c34 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d103      	bne.n	8009c44 <xQueueReceiveFromISR+0x38>
 8009c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d101      	bne.n	8009c48 <xQueueReceiveFromISR+0x3c>
 8009c44:	2301      	movs	r3, #1
 8009c46:	e000      	b.n	8009c4a <xQueueReceiveFromISR+0x3e>
 8009c48:	2300      	movs	r3, #0
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d109      	bne.n	8009c62 <xQueueReceiveFromISR+0x56>
 8009c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c52:	f383 8811 	msr	BASEPRI, r3
 8009c56:	f3bf 8f6f 	isb	sy
 8009c5a:	f3bf 8f4f 	dsb	sy
 8009c5e:	61fb      	str	r3, [r7, #28]
 8009c60:	e7fe      	b.n	8009c60 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009c62:	f001 fbdf 	bl	800b424 <vPortValidateInterruptPriority>
	__asm volatile
 8009c66:	f3ef 8211 	mrs	r2, BASEPRI
 8009c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c6e:	f383 8811 	msr	BASEPRI, r3
 8009c72:	f3bf 8f6f 	isb	sy
 8009c76:	f3bf 8f4f 	dsb	sy
 8009c7a:	61ba      	str	r2, [r7, #24]
 8009c7c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009c7e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009c80:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c86:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d02f      	beq.n	8009cee <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009c98:	68b9      	ldr	r1, [r7, #8]
 8009c9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c9c:	f000 f8d7 	bl	8009e4e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ca2:	1e5a      	subs	r2, r3, #1
 8009ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009ca8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cb0:	d112      	bne.n	8009cd8 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb4:	691b      	ldr	r3, [r3, #16]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d016      	beq.n	8009ce8 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cbc:	3310      	adds	r3, #16
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f000 fdb4 	bl	800a82c <xTaskRemoveFromEventList>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d00e      	beq.n	8009ce8 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d00b      	beq.n	8009ce8 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	601a      	str	r2, [r3, #0]
 8009cd6:	e007      	b.n	8009ce8 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009cd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009cdc:	3301      	adds	r3, #1
 8009cde:	b2db      	uxtb	r3, r3
 8009ce0:	b25a      	sxtb	r2, r3
 8009ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ce4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009ce8:	2301      	movs	r3, #1
 8009cea:	637b      	str	r3, [r7, #52]	; 0x34
 8009cec:	e001      	b.n	8009cf2 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	637b      	str	r3, [r7, #52]	; 0x34
 8009cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cf4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3738      	adds	r7, #56	; 0x38
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}

08009d06 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009d06:	b580      	push	{r7, lr}
 8009d08:	b084      	sub	sp, #16
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d109      	bne.n	8009d2c <vQueueDelete+0x26>
	__asm volatile
 8009d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d1c:	f383 8811 	msr	BASEPRI, r3
 8009d20:	f3bf 8f6f 	isb	sy
 8009d24:	f3bf 8f4f 	dsb	sy
 8009d28:	60bb      	str	r3, [r7, #8]
 8009d2a:	e7fe      	b.n	8009d2a <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009d2c:	68f8      	ldr	r0, [r7, #12]
 8009d2e:	f000 f935 	bl	8009f9c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d102      	bne.n	8009d42 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8009d3c:	68f8      	ldr	r0, [r7, #12]
 8009d3e:	f001 fc71 	bl	800b624 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009d42:	bf00      	nop
 8009d44:	3710      	adds	r7, #16
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}

08009d4a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009d4a:	b480      	push	{r7}
 8009d4c:	b085      	sub	sp, #20
 8009d4e:	af00      	add	r7, sp, #0
 8009d50:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d006      	beq.n	8009d68 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f1c3 0307 	rsb	r3, r3, #7
 8009d64:	60fb      	str	r3, [r7, #12]
 8009d66:	e001      	b.n	8009d6c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
	}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3714      	adds	r7, #20
 8009d72:	46bd      	mov	sp, r7
 8009d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d78:	4770      	bx	lr

08009d7a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009d7a:	b580      	push	{r7, lr}
 8009d7c:	b086      	sub	sp, #24
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	60f8      	str	r0, [r7, #12]
 8009d82:	60b9      	str	r1, [r7, #8]
 8009d84:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009d86:	2300      	movs	r3, #0
 8009d88:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d8e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d10d      	bne.n	8009db4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d14d      	bne.n	8009e3c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	685b      	ldr	r3, [r3, #4]
 8009da4:	4618      	mov	r0, r3
 8009da6:	f000 ffa1 	bl	800acec <xTaskPriorityDisinherit>
 8009daa:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	2200      	movs	r2, #0
 8009db0:	605a      	str	r2, [r3, #4]
 8009db2:	e043      	b.n	8009e3c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d119      	bne.n	8009dee <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	6898      	ldr	r0, [r3, #8]
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dc2:	461a      	mov	r2, r3
 8009dc4:	68b9      	ldr	r1, [r7, #8]
 8009dc6:	f008 fc26 	bl	8012616 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	689a      	ldr	r2, [r3, #8]
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dd2:	441a      	add	r2, r3
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	689a      	ldr	r2, [r3, #8]
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	429a      	cmp	r2, r3
 8009de2:	d32b      	bcc.n	8009e3c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681a      	ldr	r2, [r3, #0]
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	609a      	str	r2, [r3, #8]
 8009dec:	e026      	b.n	8009e3c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	68d8      	ldr	r0, [r3, #12]
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009df6:	461a      	mov	r2, r3
 8009df8:	68b9      	ldr	r1, [r7, #8]
 8009dfa:	f008 fc0c 	bl	8012616 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	68da      	ldr	r2, [r3, #12]
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e06:	425b      	negs	r3, r3
 8009e08:	441a      	add	r2, r3
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	68da      	ldr	r2, [r3, #12]
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	429a      	cmp	r2, r3
 8009e18:	d207      	bcs.n	8009e2a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	685a      	ldr	r2, [r3, #4]
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e22:	425b      	negs	r3, r3
 8009e24:	441a      	add	r2, r3
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2b02      	cmp	r3, #2
 8009e2e:	d105      	bne.n	8009e3c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d002      	beq.n	8009e3c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009e36:	693b      	ldr	r3, [r7, #16]
 8009e38:	3b01      	subs	r3, #1
 8009e3a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009e3c:	693b      	ldr	r3, [r7, #16]
 8009e3e:	1c5a      	adds	r2, r3, #1
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009e44:	697b      	ldr	r3, [r7, #20]
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3718      	adds	r7, #24
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}

08009e4e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009e4e:	b580      	push	{r7, lr}
 8009e50:	b082      	sub	sp, #8
 8009e52:	af00      	add	r7, sp, #0
 8009e54:	6078      	str	r0, [r7, #4]
 8009e56:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d018      	beq.n	8009e92 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	68da      	ldr	r2, [r3, #12]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e68:	441a      	add	r2, r3
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	68da      	ldr	r2, [r3, #12]
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	685b      	ldr	r3, [r3, #4]
 8009e76:	429a      	cmp	r2, r3
 8009e78:	d303      	bcc.n	8009e82 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681a      	ldr	r2, [r3, #0]
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	68d9      	ldr	r1, [r3, #12]
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e8a:	461a      	mov	r2, r3
 8009e8c:	6838      	ldr	r0, [r7, #0]
 8009e8e:	f008 fbc2 	bl	8012616 <memcpy>
	}
}
 8009e92:	bf00      	nop
 8009e94:	3708      	adds	r7, #8
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}

08009e9a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009e9a:	b580      	push	{r7, lr}
 8009e9c:	b084      	sub	sp, #16
 8009e9e:	af00      	add	r7, sp, #0
 8009ea0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009ea2:	f001 f9e3 	bl	800b26c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009eac:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009eae:	e011      	b.n	8009ed4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d012      	beq.n	8009ede <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	3324      	adds	r3, #36	; 0x24
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f000 fcb5 	bl	800a82c <xTaskRemoveFromEventList>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d001      	beq.n	8009ecc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009ec8:	f000 fd88 	bl	800a9dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009ecc:	7bfb      	ldrb	r3, [r7, #15]
 8009ece:	3b01      	subs	r3, #1
 8009ed0:	b2db      	uxtb	r3, r3
 8009ed2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009ed4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	dce9      	bgt.n	8009eb0 <prvUnlockQueue+0x16>
 8009edc:	e000      	b.n	8009ee0 <prvUnlockQueue+0x46>
					break;
 8009ede:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	22ff      	movs	r2, #255	; 0xff
 8009ee4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009ee8:	f001 f9ee 	bl	800b2c8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009eec:	f001 f9be 	bl	800b26c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009ef6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009ef8:	e011      	b.n	8009f1e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	691b      	ldr	r3, [r3, #16]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d012      	beq.n	8009f28 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	3310      	adds	r3, #16
 8009f06:	4618      	mov	r0, r3
 8009f08:	f000 fc90 	bl	800a82c <xTaskRemoveFromEventList>
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d001      	beq.n	8009f16 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009f12:	f000 fd63 	bl	800a9dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009f16:	7bbb      	ldrb	r3, [r7, #14]
 8009f18:	3b01      	subs	r3, #1
 8009f1a:	b2db      	uxtb	r3, r3
 8009f1c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009f1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	dce9      	bgt.n	8009efa <prvUnlockQueue+0x60>
 8009f26:	e000      	b.n	8009f2a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009f28:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	22ff      	movs	r2, #255	; 0xff
 8009f2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009f32:	f001 f9c9 	bl	800b2c8 <vPortExitCritical>
}
 8009f36:	bf00      	nop
 8009f38:	3710      	adds	r7, #16
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}

08009f3e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009f3e:	b580      	push	{r7, lr}
 8009f40:	b084      	sub	sp, #16
 8009f42:	af00      	add	r7, sp, #0
 8009f44:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009f46:	f001 f991 	bl	800b26c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d102      	bne.n	8009f58 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009f52:	2301      	movs	r3, #1
 8009f54:	60fb      	str	r3, [r7, #12]
 8009f56:	e001      	b.n	8009f5c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009f5c:	f001 f9b4 	bl	800b2c8 <vPortExitCritical>

	return xReturn;
 8009f60:	68fb      	ldr	r3, [r7, #12]
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3710      	adds	r7, #16
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}

08009f6a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009f6a:	b580      	push	{r7, lr}
 8009f6c:	b084      	sub	sp, #16
 8009f6e:	af00      	add	r7, sp, #0
 8009f70:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009f72:	f001 f97b 	bl	800b26c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f7e:	429a      	cmp	r2, r3
 8009f80:	d102      	bne.n	8009f88 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009f82:	2301      	movs	r3, #1
 8009f84:	60fb      	str	r3, [r7, #12]
 8009f86:	e001      	b.n	8009f8c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009f8c:	f001 f99c 	bl	800b2c8 <vPortExitCritical>

	return xReturn;
 8009f90:	68fb      	ldr	r3, [r7, #12]
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	3710      	adds	r7, #16
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}
	...

08009f9c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b085      	sub	sp, #20
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	60fb      	str	r3, [r7, #12]
 8009fa8:	e016      	b.n	8009fd8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009faa:	4a10      	ldr	r2, [pc, #64]	; (8009fec <vQueueUnregisterQueue+0x50>)
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	00db      	lsls	r3, r3, #3
 8009fb0:	4413      	add	r3, r2
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	687a      	ldr	r2, [r7, #4]
 8009fb6:	429a      	cmp	r2, r3
 8009fb8:	d10b      	bne.n	8009fd2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009fba:	4a0c      	ldr	r2, [pc, #48]	; (8009fec <vQueueUnregisterQueue+0x50>)
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	2100      	movs	r1, #0
 8009fc0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009fc4:	4a09      	ldr	r2, [pc, #36]	; (8009fec <vQueueUnregisterQueue+0x50>)
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	00db      	lsls	r3, r3, #3
 8009fca:	4413      	add	r3, r2
 8009fcc:	2200      	movs	r2, #0
 8009fce:	605a      	str	r2, [r3, #4]
				break;
 8009fd0:	e005      	b.n	8009fde <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	3301      	adds	r3, #1
 8009fd6:	60fb      	str	r3, [r7, #12]
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	2b07      	cmp	r3, #7
 8009fdc:	d9e5      	bls.n	8009faa <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009fde:	bf00      	nop
 8009fe0:	3714      	adds	r7, #20
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe8:	4770      	bx	lr
 8009fea:	bf00      	nop
 8009fec:	20006ad4 	.word	0x20006ad4

08009ff0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b08e      	sub	sp, #56	; 0x38
 8009ff4:	af04      	add	r7, sp, #16
 8009ff6:	60f8      	str	r0, [r7, #12]
 8009ff8:	60b9      	str	r1, [r7, #8]
 8009ffa:	607a      	str	r2, [r7, #4]
 8009ffc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a000:	2b00      	cmp	r3, #0
 800a002:	d109      	bne.n	800a018 <xTaskCreateStatic+0x28>
 800a004:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a008:	f383 8811 	msr	BASEPRI, r3
 800a00c:	f3bf 8f6f 	isb	sy
 800a010:	f3bf 8f4f 	dsb	sy
 800a014:	623b      	str	r3, [r7, #32]
 800a016:	e7fe      	b.n	800a016 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800a018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d109      	bne.n	800a032 <xTaskCreateStatic+0x42>
 800a01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a022:	f383 8811 	msr	BASEPRI, r3
 800a026:	f3bf 8f6f 	isb	sy
 800a02a:	f3bf 8f4f 	dsb	sy
 800a02e:	61fb      	str	r3, [r7, #28]
 800a030:	e7fe      	b.n	800a030 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a032:	2354      	movs	r3, #84	; 0x54
 800a034:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	2b54      	cmp	r3, #84	; 0x54
 800a03a:	d009      	beq.n	800a050 <xTaskCreateStatic+0x60>
 800a03c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a040:	f383 8811 	msr	BASEPRI, r3
 800a044:	f3bf 8f6f 	isb	sy
 800a048:	f3bf 8f4f 	dsb	sy
 800a04c:	61bb      	str	r3, [r7, #24]
 800a04e:	e7fe      	b.n	800a04e <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a052:	2b00      	cmp	r3, #0
 800a054:	d01e      	beq.n	800a094 <xTaskCreateStatic+0xa4>
 800a056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d01b      	beq.n	800a094 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a05c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a05e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a062:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a064:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a068:	2202      	movs	r2, #2
 800a06a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a06e:	2300      	movs	r3, #0
 800a070:	9303      	str	r3, [sp, #12]
 800a072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a074:	9302      	str	r3, [sp, #8]
 800a076:	f107 0314 	add.w	r3, r7, #20
 800a07a:	9301      	str	r3, [sp, #4]
 800a07c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a07e:	9300      	str	r3, [sp, #0]
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	687a      	ldr	r2, [r7, #4]
 800a084:	68b9      	ldr	r1, [r7, #8]
 800a086:	68f8      	ldr	r0, [r7, #12]
 800a088:	f000 f850 	bl	800a12c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a08c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a08e:	f000 f8cb 	bl	800a228 <prvAddNewTaskToReadyList>
 800a092:	e001      	b.n	800a098 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800a094:	2300      	movs	r3, #0
 800a096:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a098:	697b      	ldr	r3, [r7, #20]
	}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3728      	adds	r7, #40	; 0x28
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}

0800a0a2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a0a2:	b580      	push	{r7, lr}
 800a0a4:	b08c      	sub	sp, #48	; 0x30
 800a0a6:	af04      	add	r7, sp, #16
 800a0a8:	60f8      	str	r0, [r7, #12]
 800a0aa:	60b9      	str	r1, [r7, #8]
 800a0ac:	603b      	str	r3, [r7, #0]
 800a0ae:	4613      	mov	r3, r2
 800a0b0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0b2:	88fb      	ldrh	r3, [r7, #6]
 800a0b4:	009b      	lsls	r3, r3, #2
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f001 f9f2 	bl	800b4a0 <pvPortMalloc>
 800a0bc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d00e      	beq.n	800a0e2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800a0c4:	2054      	movs	r0, #84	; 0x54
 800a0c6:	f001 f9eb 	bl	800b4a0 <pvPortMalloc>
 800a0ca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a0cc:	69fb      	ldr	r3, [r7, #28]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d003      	beq.n	800a0da <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a0d2:	69fb      	ldr	r3, [r7, #28]
 800a0d4:	697a      	ldr	r2, [r7, #20]
 800a0d6:	631a      	str	r2, [r3, #48]	; 0x30
 800a0d8:	e005      	b.n	800a0e6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a0da:	6978      	ldr	r0, [r7, #20]
 800a0dc:	f001 faa2 	bl	800b624 <vPortFree>
 800a0e0:	e001      	b.n	800a0e6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a0e6:	69fb      	ldr	r3, [r7, #28]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d017      	beq.n	800a11c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a0ec:	69fb      	ldr	r3, [r7, #28]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a0f4:	88fa      	ldrh	r2, [r7, #6]
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	9303      	str	r3, [sp, #12]
 800a0fa:	69fb      	ldr	r3, [r7, #28]
 800a0fc:	9302      	str	r3, [sp, #8]
 800a0fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a100:	9301      	str	r3, [sp, #4]
 800a102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a104:	9300      	str	r3, [sp, #0]
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	68b9      	ldr	r1, [r7, #8]
 800a10a:	68f8      	ldr	r0, [r7, #12]
 800a10c:	f000 f80e 	bl	800a12c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a110:	69f8      	ldr	r0, [r7, #28]
 800a112:	f000 f889 	bl	800a228 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a116:	2301      	movs	r3, #1
 800a118:	61bb      	str	r3, [r7, #24]
 800a11a:	e002      	b.n	800a122 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a11c:	f04f 33ff 	mov.w	r3, #4294967295
 800a120:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a122:	69bb      	ldr	r3, [r7, #24]
	}
 800a124:	4618      	mov	r0, r3
 800a126:	3720      	adds	r7, #32
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}

0800a12c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b088      	sub	sp, #32
 800a130:	af00      	add	r7, sp, #0
 800a132:	60f8      	str	r0, [r7, #12]
 800a134:	60b9      	str	r1, [r7, #8]
 800a136:	607a      	str	r2, [r7, #4]
 800a138:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800a13a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a13c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a144:	3b01      	subs	r3, #1
 800a146:	009b      	lsls	r3, r3, #2
 800a148:	4413      	add	r3, r2
 800a14a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800a14c:	69bb      	ldr	r3, [r7, #24]
 800a14e:	f023 0307 	bic.w	r3, r3, #7
 800a152:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a154:	69bb      	ldr	r3, [r7, #24]
 800a156:	f003 0307 	and.w	r3, r3, #7
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d009      	beq.n	800a172 <prvInitialiseNewTask+0x46>
 800a15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a162:	f383 8811 	msr	BASEPRI, r3
 800a166:	f3bf 8f6f 	isb	sy
 800a16a:	f3bf 8f4f 	dsb	sy
 800a16e:	617b      	str	r3, [r7, #20]
 800a170:	e7fe      	b.n	800a170 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a172:	2300      	movs	r3, #0
 800a174:	61fb      	str	r3, [r7, #28]
 800a176:	e012      	b.n	800a19e <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a178:	68ba      	ldr	r2, [r7, #8]
 800a17a:	69fb      	ldr	r3, [r7, #28]
 800a17c:	4413      	add	r3, r2
 800a17e:	7819      	ldrb	r1, [r3, #0]
 800a180:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a182:	69fb      	ldr	r3, [r7, #28]
 800a184:	4413      	add	r3, r2
 800a186:	3334      	adds	r3, #52	; 0x34
 800a188:	460a      	mov	r2, r1
 800a18a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800a18c:	68ba      	ldr	r2, [r7, #8]
 800a18e:	69fb      	ldr	r3, [r7, #28]
 800a190:	4413      	add	r3, r2
 800a192:	781b      	ldrb	r3, [r3, #0]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d006      	beq.n	800a1a6 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a198:	69fb      	ldr	r3, [r7, #28]
 800a19a:	3301      	adds	r3, #1
 800a19c:	61fb      	str	r3, [r7, #28]
 800a19e:	69fb      	ldr	r3, [r7, #28]
 800a1a0:	2b0f      	cmp	r3, #15
 800a1a2:	d9e9      	bls.n	800a178 <prvInitialiseNewTask+0x4c>
 800a1a4:	e000      	b.n	800a1a8 <prvInitialiseNewTask+0x7c>
		{
			break;
 800a1a6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a1a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1b2:	2b06      	cmp	r3, #6
 800a1b4:	d901      	bls.n	800a1ba <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a1b6:	2306      	movs	r3, #6
 800a1b8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1be:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1c4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a1c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a1cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ce:	3304      	adds	r3, #4
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f7fe ff55 	bl	8009080 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d8:	3318      	adds	r3, #24
 800a1da:	4618      	mov	r0, r3
 800a1dc:	f7fe ff50 	bl	8009080 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1e4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e8:	f1c3 0207 	rsb	r2, r3, #7
 800a1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ee:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1f4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1fe:	2200      	movs	r2, #0
 800a200:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a204:	683a      	ldr	r2, [r7, #0]
 800a206:	68f9      	ldr	r1, [r7, #12]
 800a208:	69b8      	ldr	r0, [r7, #24]
 800a20a:	f000 ff0b 	bl	800b024 <pxPortInitialiseStack>
 800a20e:	4602      	mov	r2, r0
 800a210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a212:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800a214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a216:	2b00      	cmp	r3, #0
 800a218:	d002      	beq.n	800a220 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a21a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a21c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a21e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a220:	bf00      	nop
 800a222:	3720      	adds	r7, #32
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}

0800a228 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b082      	sub	sp, #8
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a230:	f001 f81c 	bl	800b26c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a234:	4b2a      	ldr	r3, [pc, #168]	; (800a2e0 <prvAddNewTaskToReadyList+0xb8>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	3301      	adds	r3, #1
 800a23a:	4a29      	ldr	r2, [pc, #164]	; (800a2e0 <prvAddNewTaskToReadyList+0xb8>)
 800a23c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a23e:	4b29      	ldr	r3, [pc, #164]	; (800a2e4 <prvAddNewTaskToReadyList+0xbc>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d109      	bne.n	800a25a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a246:	4a27      	ldr	r2, [pc, #156]	; (800a2e4 <prvAddNewTaskToReadyList+0xbc>)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a24c:	4b24      	ldr	r3, [pc, #144]	; (800a2e0 <prvAddNewTaskToReadyList+0xb8>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	2b01      	cmp	r3, #1
 800a252:	d110      	bne.n	800a276 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a254:	f000 fbe6 	bl	800aa24 <prvInitialiseTaskLists>
 800a258:	e00d      	b.n	800a276 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a25a:	4b23      	ldr	r3, [pc, #140]	; (800a2e8 <prvAddNewTaskToReadyList+0xc0>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d109      	bne.n	800a276 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a262:	4b20      	ldr	r3, [pc, #128]	; (800a2e4 <prvAddNewTaskToReadyList+0xbc>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a26c:	429a      	cmp	r2, r3
 800a26e:	d802      	bhi.n	800a276 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a270:	4a1c      	ldr	r2, [pc, #112]	; (800a2e4 <prvAddNewTaskToReadyList+0xbc>)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a276:	4b1d      	ldr	r3, [pc, #116]	; (800a2ec <prvAddNewTaskToReadyList+0xc4>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	3301      	adds	r3, #1
 800a27c:	4a1b      	ldr	r2, [pc, #108]	; (800a2ec <prvAddNewTaskToReadyList+0xc4>)
 800a27e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a284:	2201      	movs	r2, #1
 800a286:	409a      	lsls	r2, r3
 800a288:	4b19      	ldr	r3, [pc, #100]	; (800a2f0 <prvAddNewTaskToReadyList+0xc8>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	4313      	orrs	r3, r2
 800a28e:	4a18      	ldr	r2, [pc, #96]	; (800a2f0 <prvAddNewTaskToReadyList+0xc8>)
 800a290:	6013      	str	r3, [r2, #0]
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a296:	4613      	mov	r3, r2
 800a298:	009b      	lsls	r3, r3, #2
 800a29a:	4413      	add	r3, r2
 800a29c:	009b      	lsls	r3, r3, #2
 800a29e:	4a15      	ldr	r2, [pc, #84]	; (800a2f4 <prvAddNewTaskToReadyList+0xcc>)
 800a2a0:	441a      	add	r2, r3
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	3304      	adds	r3, #4
 800a2a6:	4619      	mov	r1, r3
 800a2a8:	4610      	mov	r0, r2
 800a2aa:	f7fe fef6 	bl	800909a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a2ae:	f001 f80b 	bl	800b2c8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a2b2:	4b0d      	ldr	r3, [pc, #52]	; (800a2e8 <prvAddNewTaskToReadyList+0xc0>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d00e      	beq.n	800a2d8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a2ba:	4b0a      	ldr	r3, [pc, #40]	; (800a2e4 <prvAddNewTaskToReadyList+0xbc>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2c4:	429a      	cmp	r2, r3
 800a2c6:	d207      	bcs.n	800a2d8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a2c8:	4b0b      	ldr	r3, [pc, #44]	; (800a2f8 <prvAddNewTaskToReadyList+0xd0>)
 800a2ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2ce:	601a      	str	r2, [r3, #0]
 800a2d0:	f3bf 8f4f 	dsb	sy
 800a2d4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a2d8:	bf00      	nop
 800a2da:	3708      	adds	r7, #8
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}
 800a2e0:	200007f0 	.word	0x200007f0
 800a2e4:	200006f0 	.word	0x200006f0
 800a2e8:	200007fc 	.word	0x200007fc
 800a2ec:	2000080c 	.word	0x2000080c
 800a2f0:	200007f8 	.word	0x200007f8
 800a2f4:	200006f4 	.word	0x200006f4
 800a2f8:	e000ed04 	.word	0xe000ed04

0800a2fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b084      	sub	sp, #16
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a304:	2300      	movs	r3, #0
 800a306:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d016      	beq.n	800a33c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a30e:	4b13      	ldr	r3, [pc, #76]	; (800a35c <vTaskDelay+0x60>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d009      	beq.n	800a32a <vTaskDelay+0x2e>
 800a316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a31a:	f383 8811 	msr	BASEPRI, r3
 800a31e:	f3bf 8f6f 	isb	sy
 800a322:	f3bf 8f4f 	dsb	sy
 800a326:	60bb      	str	r3, [r7, #8]
 800a328:	e7fe      	b.n	800a328 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800a32a:	f000 f879 	bl	800a420 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a32e:	2100      	movs	r1, #0
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f000 fe11 	bl	800af58 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a336:	f000 f881 	bl	800a43c <xTaskResumeAll>
 800a33a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d107      	bne.n	800a352 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800a342:	4b07      	ldr	r3, [pc, #28]	; (800a360 <vTaskDelay+0x64>)
 800a344:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a348:	601a      	str	r2, [r3, #0]
 800a34a:	f3bf 8f4f 	dsb	sy
 800a34e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a352:	bf00      	nop
 800a354:	3710      	adds	r7, #16
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}
 800a35a:	bf00      	nop
 800a35c:	20000818 	.word	0x20000818
 800a360:	e000ed04 	.word	0xe000ed04

0800a364 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b08a      	sub	sp, #40	; 0x28
 800a368:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a36a:	2300      	movs	r3, #0
 800a36c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a36e:	2300      	movs	r3, #0
 800a370:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a372:	463a      	mov	r2, r7
 800a374:	1d39      	adds	r1, r7, #4
 800a376:	f107 0308 	add.w	r3, r7, #8
 800a37a:	4618      	mov	r0, r3
 800a37c:	f002 f9a4 	bl	800c6c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a380:	6839      	ldr	r1, [r7, #0]
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	68ba      	ldr	r2, [r7, #8]
 800a386:	9202      	str	r2, [sp, #8]
 800a388:	9301      	str	r3, [sp, #4]
 800a38a:	2300      	movs	r3, #0
 800a38c:	9300      	str	r3, [sp, #0]
 800a38e:	2300      	movs	r3, #0
 800a390:	460a      	mov	r2, r1
 800a392:	491d      	ldr	r1, [pc, #116]	; (800a408 <vTaskStartScheduler+0xa4>)
 800a394:	481d      	ldr	r0, [pc, #116]	; (800a40c <vTaskStartScheduler+0xa8>)
 800a396:	f7ff fe2b 	bl	8009ff0 <xTaskCreateStatic>
 800a39a:	4602      	mov	r2, r0
 800a39c:	4b1c      	ldr	r3, [pc, #112]	; (800a410 <vTaskStartScheduler+0xac>)
 800a39e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a3a0:	4b1b      	ldr	r3, [pc, #108]	; (800a410 <vTaskStartScheduler+0xac>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d002      	beq.n	800a3ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	617b      	str	r3, [r7, #20]
 800a3ac:	e001      	b.n	800a3b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	2b01      	cmp	r3, #1
 800a3b6:	d115      	bne.n	800a3e4 <vTaskStartScheduler+0x80>
 800a3b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3bc:	f383 8811 	msr	BASEPRI, r3
 800a3c0:	f3bf 8f6f 	isb	sy
 800a3c4:	f3bf 8f4f 	dsb	sy
 800a3c8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a3ca:	4b12      	ldr	r3, [pc, #72]	; (800a414 <vTaskStartScheduler+0xb0>)
 800a3cc:	f04f 32ff 	mov.w	r2, #4294967295
 800a3d0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a3d2:	4b11      	ldr	r3, [pc, #68]	; (800a418 <vTaskStartScheduler+0xb4>)
 800a3d4:	2201      	movs	r2, #1
 800a3d6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800a3d8:	4b10      	ldr	r3, [pc, #64]	; (800a41c <vTaskStartScheduler+0xb8>)
 800a3da:	2200      	movs	r2, #0
 800a3dc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a3de:	f000 fea7 	bl	800b130 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a3e2:	e00d      	b.n	800a400 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a3e4:	697b      	ldr	r3, [r7, #20]
 800a3e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3ea:	d109      	bne.n	800a400 <vTaskStartScheduler+0x9c>
 800a3ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f0:	f383 8811 	msr	BASEPRI, r3
 800a3f4:	f3bf 8f6f 	isb	sy
 800a3f8:	f3bf 8f4f 	dsb	sy
 800a3fc:	60fb      	str	r3, [r7, #12]
 800a3fe:	e7fe      	b.n	800a3fe <vTaskStartScheduler+0x9a>
}
 800a400:	bf00      	nop
 800a402:	3718      	adds	r7, #24
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}
 800a408:	08012e90 	.word	0x08012e90
 800a40c:	0800a9f5 	.word	0x0800a9f5
 800a410:	20000814 	.word	0x20000814
 800a414:	20000810 	.word	0x20000810
 800a418:	200007fc 	.word	0x200007fc
 800a41c:	200007f4 	.word	0x200007f4

0800a420 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a420:	b480      	push	{r7}
 800a422:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a424:	4b04      	ldr	r3, [pc, #16]	; (800a438 <vTaskSuspendAll+0x18>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	3301      	adds	r3, #1
 800a42a:	4a03      	ldr	r2, [pc, #12]	; (800a438 <vTaskSuspendAll+0x18>)
 800a42c:	6013      	str	r3, [r2, #0]
}
 800a42e:	bf00      	nop
 800a430:	46bd      	mov	sp, r7
 800a432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a436:	4770      	bx	lr
 800a438:	20000818 	.word	0x20000818

0800a43c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b084      	sub	sp, #16
 800a440:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a442:	2300      	movs	r3, #0
 800a444:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a446:	2300      	movs	r3, #0
 800a448:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a44a:	4b41      	ldr	r3, [pc, #260]	; (800a550 <xTaskResumeAll+0x114>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d109      	bne.n	800a466 <xTaskResumeAll+0x2a>
 800a452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a456:	f383 8811 	msr	BASEPRI, r3
 800a45a:	f3bf 8f6f 	isb	sy
 800a45e:	f3bf 8f4f 	dsb	sy
 800a462:	603b      	str	r3, [r7, #0]
 800a464:	e7fe      	b.n	800a464 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a466:	f000 ff01 	bl	800b26c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a46a:	4b39      	ldr	r3, [pc, #228]	; (800a550 <xTaskResumeAll+0x114>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	3b01      	subs	r3, #1
 800a470:	4a37      	ldr	r2, [pc, #220]	; (800a550 <xTaskResumeAll+0x114>)
 800a472:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a474:	4b36      	ldr	r3, [pc, #216]	; (800a550 <xTaskResumeAll+0x114>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d161      	bne.n	800a540 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a47c:	4b35      	ldr	r3, [pc, #212]	; (800a554 <xTaskResumeAll+0x118>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d05d      	beq.n	800a540 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a484:	e02e      	b.n	800a4e4 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800a486:	4b34      	ldr	r3, [pc, #208]	; (800a558 <xTaskResumeAll+0x11c>)
 800a488:	68db      	ldr	r3, [r3, #12]
 800a48a:	68db      	ldr	r3, [r3, #12]
 800a48c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	3318      	adds	r3, #24
 800a492:	4618      	mov	r0, r3
 800a494:	f7fe fe5e 	bl	8009154 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	3304      	adds	r3, #4
 800a49c:	4618      	mov	r0, r3
 800a49e:	f7fe fe59 	bl	8009154 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	409a      	lsls	r2, r3
 800a4aa:	4b2c      	ldr	r3, [pc, #176]	; (800a55c <xTaskResumeAll+0x120>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	4313      	orrs	r3, r2
 800a4b0:	4a2a      	ldr	r2, [pc, #168]	; (800a55c <xTaskResumeAll+0x120>)
 800a4b2:	6013      	str	r3, [r2, #0]
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4b8:	4613      	mov	r3, r2
 800a4ba:	009b      	lsls	r3, r3, #2
 800a4bc:	4413      	add	r3, r2
 800a4be:	009b      	lsls	r3, r3, #2
 800a4c0:	4a27      	ldr	r2, [pc, #156]	; (800a560 <xTaskResumeAll+0x124>)
 800a4c2:	441a      	add	r2, r3
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	3304      	adds	r3, #4
 800a4c8:	4619      	mov	r1, r3
 800a4ca:	4610      	mov	r0, r2
 800a4cc:	f7fe fde5 	bl	800909a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4d4:	4b23      	ldr	r3, [pc, #140]	; (800a564 <xTaskResumeAll+0x128>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	d302      	bcc.n	800a4e4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800a4de:	4b22      	ldr	r3, [pc, #136]	; (800a568 <xTaskResumeAll+0x12c>)
 800a4e0:	2201      	movs	r2, #1
 800a4e2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a4e4:	4b1c      	ldr	r3, [pc, #112]	; (800a558 <xTaskResumeAll+0x11c>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d1cc      	bne.n	800a486 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d001      	beq.n	800a4f6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a4f2:	f000 fb31 	bl	800ab58 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a4f6:	4b1d      	ldr	r3, [pc, #116]	; (800a56c <xTaskResumeAll+0x130>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d010      	beq.n	800a524 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a502:	f000 f859 	bl	800a5b8 <xTaskIncrementTick>
 800a506:	4603      	mov	r3, r0
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d002      	beq.n	800a512 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800a50c:	4b16      	ldr	r3, [pc, #88]	; (800a568 <xTaskResumeAll+0x12c>)
 800a50e:	2201      	movs	r2, #1
 800a510:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	3b01      	subs	r3, #1
 800a516:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d1f1      	bne.n	800a502 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800a51e:	4b13      	ldr	r3, [pc, #76]	; (800a56c <xTaskResumeAll+0x130>)
 800a520:	2200      	movs	r2, #0
 800a522:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a524:	4b10      	ldr	r3, [pc, #64]	; (800a568 <xTaskResumeAll+0x12c>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d009      	beq.n	800a540 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a52c:	2301      	movs	r3, #1
 800a52e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a530:	4b0f      	ldr	r3, [pc, #60]	; (800a570 <xTaskResumeAll+0x134>)
 800a532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a536:	601a      	str	r2, [r3, #0]
 800a538:	f3bf 8f4f 	dsb	sy
 800a53c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a540:	f000 fec2 	bl	800b2c8 <vPortExitCritical>

	return xAlreadyYielded;
 800a544:	68bb      	ldr	r3, [r7, #8]
}
 800a546:	4618      	mov	r0, r3
 800a548:	3710      	adds	r7, #16
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}
 800a54e:	bf00      	nop
 800a550:	20000818 	.word	0x20000818
 800a554:	200007f0 	.word	0x200007f0
 800a558:	200007b0 	.word	0x200007b0
 800a55c:	200007f8 	.word	0x200007f8
 800a560:	200006f4 	.word	0x200006f4
 800a564:	200006f0 	.word	0x200006f0
 800a568:	20000804 	.word	0x20000804
 800a56c:	20000800 	.word	0x20000800
 800a570:	e000ed04 	.word	0xe000ed04

0800a574 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a574:	b480      	push	{r7}
 800a576:	b083      	sub	sp, #12
 800a578:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a57a:	4b05      	ldr	r3, [pc, #20]	; (800a590 <xTaskGetTickCount+0x1c>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a580:	687b      	ldr	r3, [r7, #4]
}
 800a582:	4618      	mov	r0, r3
 800a584:	370c      	adds	r7, #12
 800a586:	46bd      	mov	sp, r7
 800a588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58c:	4770      	bx	lr
 800a58e:	bf00      	nop
 800a590:	200007f4 	.word	0x200007f4

0800a594 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b082      	sub	sp, #8
 800a598:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a59a:	f000 ff43 	bl	800b424 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a59e:	2300      	movs	r3, #0
 800a5a0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800a5a2:	4b04      	ldr	r3, [pc, #16]	; (800a5b4 <xTaskGetTickCountFromISR+0x20>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a5a8:	683b      	ldr	r3, [r7, #0]
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3708      	adds	r7, #8
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}
 800a5b2:	bf00      	nop
 800a5b4:	200007f4 	.word	0x200007f4

0800a5b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b086      	sub	sp, #24
 800a5bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a5c2:	4b50      	ldr	r3, [pc, #320]	; (800a704 <xTaskIncrementTick+0x14c>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	f040 808c 	bne.w	800a6e4 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a5cc:	4b4e      	ldr	r3, [pc, #312]	; (800a708 <xTaskIncrementTick+0x150>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	3301      	adds	r3, #1
 800a5d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a5d4:	4a4c      	ldr	r2, [pc, #304]	; (800a708 <xTaskIncrementTick+0x150>)
 800a5d6:	693b      	ldr	r3, [r7, #16]
 800a5d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a5da:	693b      	ldr	r3, [r7, #16]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d11f      	bne.n	800a620 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800a5e0:	4b4a      	ldr	r3, [pc, #296]	; (800a70c <xTaskIncrementTick+0x154>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d009      	beq.n	800a5fe <xTaskIncrementTick+0x46>
 800a5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ee:	f383 8811 	msr	BASEPRI, r3
 800a5f2:	f3bf 8f6f 	isb	sy
 800a5f6:	f3bf 8f4f 	dsb	sy
 800a5fa:	603b      	str	r3, [r7, #0]
 800a5fc:	e7fe      	b.n	800a5fc <xTaskIncrementTick+0x44>
 800a5fe:	4b43      	ldr	r3, [pc, #268]	; (800a70c <xTaskIncrementTick+0x154>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	60fb      	str	r3, [r7, #12]
 800a604:	4b42      	ldr	r3, [pc, #264]	; (800a710 <xTaskIncrementTick+0x158>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	4a40      	ldr	r2, [pc, #256]	; (800a70c <xTaskIncrementTick+0x154>)
 800a60a:	6013      	str	r3, [r2, #0]
 800a60c:	4a40      	ldr	r2, [pc, #256]	; (800a710 <xTaskIncrementTick+0x158>)
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	6013      	str	r3, [r2, #0]
 800a612:	4b40      	ldr	r3, [pc, #256]	; (800a714 <xTaskIncrementTick+0x15c>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	3301      	adds	r3, #1
 800a618:	4a3e      	ldr	r2, [pc, #248]	; (800a714 <xTaskIncrementTick+0x15c>)
 800a61a:	6013      	str	r3, [r2, #0]
 800a61c:	f000 fa9c 	bl	800ab58 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a620:	4b3d      	ldr	r3, [pc, #244]	; (800a718 <xTaskIncrementTick+0x160>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	693a      	ldr	r2, [r7, #16]
 800a626:	429a      	cmp	r2, r3
 800a628:	d34d      	bcc.n	800a6c6 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a62a:	4b38      	ldr	r3, [pc, #224]	; (800a70c <xTaskIncrementTick+0x154>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d101      	bne.n	800a638 <xTaskIncrementTick+0x80>
 800a634:	2301      	movs	r3, #1
 800a636:	e000      	b.n	800a63a <xTaskIncrementTick+0x82>
 800a638:	2300      	movs	r3, #0
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d004      	beq.n	800a648 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a63e:	4b36      	ldr	r3, [pc, #216]	; (800a718 <xTaskIncrementTick+0x160>)
 800a640:	f04f 32ff 	mov.w	r2, #4294967295
 800a644:	601a      	str	r2, [r3, #0]
					break;
 800a646:	e03e      	b.n	800a6c6 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a648:	4b30      	ldr	r3, [pc, #192]	; (800a70c <xTaskIncrementTick+0x154>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	68db      	ldr	r3, [r3, #12]
 800a64e:	68db      	ldr	r3, [r3, #12]
 800a650:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	685b      	ldr	r3, [r3, #4]
 800a656:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a658:	693a      	ldr	r2, [r7, #16]
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	429a      	cmp	r2, r3
 800a65e:	d203      	bcs.n	800a668 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a660:	4a2d      	ldr	r2, [pc, #180]	; (800a718 <xTaskIncrementTick+0x160>)
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6013      	str	r3, [r2, #0]
						break;
 800a666:	e02e      	b.n	800a6c6 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	3304      	adds	r3, #4
 800a66c:	4618      	mov	r0, r3
 800a66e:	f7fe fd71 	bl	8009154 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a676:	2b00      	cmp	r3, #0
 800a678:	d004      	beq.n	800a684 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	3318      	adds	r3, #24
 800a67e:	4618      	mov	r0, r3
 800a680:	f7fe fd68 	bl	8009154 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a688:	2201      	movs	r2, #1
 800a68a:	409a      	lsls	r2, r3
 800a68c:	4b23      	ldr	r3, [pc, #140]	; (800a71c <xTaskIncrementTick+0x164>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	4313      	orrs	r3, r2
 800a692:	4a22      	ldr	r2, [pc, #136]	; (800a71c <xTaskIncrementTick+0x164>)
 800a694:	6013      	str	r3, [r2, #0]
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a69a:	4613      	mov	r3, r2
 800a69c:	009b      	lsls	r3, r3, #2
 800a69e:	4413      	add	r3, r2
 800a6a0:	009b      	lsls	r3, r3, #2
 800a6a2:	4a1f      	ldr	r2, [pc, #124]	; (800a720 <xTaskIncrementTick+0x168>)
 800a6a4:	441a      	add	r2, r3
 800a6a6:	68bb      	ldr	r3, [r7, #8]
 800a6a8:	3304      	adds	r3, #4
 800a6aa:	4619      	mov	r1, r3
 800a6ac:	4610      	mov	r0, r2
 800a6ae:	f7fe fcf4 	bl	800909a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6b6:	4b1b      	ldr	r3, [pc, #108]	; (800a724 <xTaskIncrementTick+0x16c>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6bc:	429a      	cmp	r2, r3
 800a6be:	d3b4      	bcc.n	800a62a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a6c4:	e7b1      	b.n	800a62a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a6c6:	4b17      	ldr	r3, [pc, #92]	; (800a724 <xTaskIncrementTick+0x16c>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6cc:	4914      	ldr	r1, [pc, #80]	; (800a720 <xTaskIncrementTick+0x168>)
 800a6ce:	4613      	mov	r3, r2
 800a6d0:	009b      	lsls	r3, r3, #2
 800a6d2:	4413      	add	r3, r2
 800a6d4:	009b      	lsls	r3, r3, #2
 800a6d6:	440b      	add	r3, r1
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	2b01      	cmp	r3, #1
 800a6dc:	d907      	bls.n	800a6ee <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800a6de:	2301      	movs	r3, #1
 800a6e0:	617b      	str	r3, [r7, #20]
 800a6e2:	e004      	b.n	800a6ee <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a6e4:	4b10      	ldr	r3, [pc, #64]	; (800a728 <xTaskIncrementTick+0x170>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	3301      	adds	r3, #1
 800a6ea:	4a0f      	ldr	r2, [pc, #60]	; (800a728 <xTaskIncrementTick+0x170>)
 800a6ec:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a6ee:	4b0f      	ldr	r3, [pc, #60]	; (800a72c <xTaskIncrementTick+0x174>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d001      	beq.n	800a6fa <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a6fa:	697b      	ldr	r3, [r7, #20]
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	3718      	adds	r7, #24
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}
 800a704:	20000818 	.word	0x20000818
 800a708:	200007f4 	.word	0x200007f4
 800a70c:	200007a8 	.word	0x200007a8
 800a710:	200007ac 	.word	0x200007ac
 800a714:	20000808 	.word	0x20000808
 800a718:	20000810 	.word	0x20000810
 800a71c:	200007f8 	.word	0x200007f8
 800a720:	200006f4 	.word	0x200006f4
 800a724:	200006f0 	.word	0x200006f0
 800a728:	20000800 	.word	0x20000800
 800a72c:	20000804 	.word	0x20000804

0800a730 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a730:	b480      	push	{r7}
 800a732:	b087      	sub	sp, #28
 800a734:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a736:	4b26      	ldr	r3, [pc, #152]	; (800a7d0 <vTaskSwitchContext+0xa0>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d003      	beq.n	800a746 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a73e:	4b25      	ldr	r3, [pc, #148]	; (800a7d4 <vTaskSwitchContext+0xa4>)
 800a740:	2201      	movs	r2, #1
 800a742:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a744:	e03e      	b.n	800a7c4 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800a746:	4b23      	ldr	r3, [pc, #140]	; (800a7d4 <vTaskSwitchContext+0xa4>)
 800a748:	2200      	movs	r2, #0
 800a74a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800a74c:	4b22      	ldr	r3, [pc, #136]	; (800a7d8 <vTaskSwitchContext+0xa8>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	fab3 f383 	clz	r3, r3
 800a758:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a75a:	7afb      	ldrb	r3, [r7, #11]
 800a75c:	f1c3 031f 	rsb	r3, r3, #31
 800a760:	617b      	str	r3, [r7, #20]
 800a762:	491e      	ldr	r1, [pc, #120]	; (800a7dc <vTaskSwitchContext+0xac>)
 800a764:	697a      	ldr	r2, [r7, #20]
 800a766:	4613      	mov	r3, r2
 800a768:	009b      	lsls	r3, r3, #2
 800a76a:	4413      	add	r3, r2
 800a76c:	009b      	lsls	r3, r3, #2
 800a76e:	440b      	add	r3, r1
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d109      	bne.n	800a78a <vTaskSwitchContext+0x5a>
	__asm volatile
 800a776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a77a:	f383 8811 	msr	BASEPRI, r3
 800a77e:	f3bf 8f6f 	isb	sy
 800a782:	f3bf 8f4f 	dsb	sy
 800a786:	607b      	str	r3, [r7, #4]
 800a788:	e7fe      	b.n	800a788 <vTaskSwitchContext+0x58>
 800a78a:	697a      	ldr	r2, [r7, #20]
 800a78c:	4613      	mov	r3, r2
 800a78e:	009b      	lsls	r3, r3, #2
 800a790:	4413      	add	r3, r2
 800a792:	009b      	lsls	r3, r3, #2
 800a794:	4a11      	ldr	r2, [pc, #68]	; (800a7dc <vTaskSwitchContext+0xac>)
 800a796:	4413      	add	r3, r2
 800a798:	613b      	str	r3, [r7, #16]
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	685b      	ldr	r3, [r3, #4]
 800a79e:	685a      	ldr	r2, [r3, #4]
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	605a      	str	r2, [r3, #4]
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	685a      	ldr	r2, [r3, #4]
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	3308      	adds	r3, #8
 800a7ac:	429a      	cmp	r2, r3
 800a7ae:	d104      	bne.n	800a7ba <vTaskSwitchContext+0x8a>
 800a7b0:	693b      	ldr	r3, [r7, #16]
 800a7b2:	685b      	ldr	r3, [r3, #4]
 800a7b4:	685a      	ldr	r2, [r3, #4]
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	605a      	str	r2, [r3, #4]
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	685b      	ldr	r3, [r3, #4]
 800a7be:	68db      	ldr	r3, [r3, #12]
 800a7c0:	4a07      	ldr	r2, [pc, #28]	; (800a7e0 <vTaskSwitchContext+0xb0>)
 800a7c2:	6013      	str	r3, [r2, #0]
}
 800a7c4:	bf00      	nop
 800a7c6:	371c      	adds	r7, #28
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ce:	4770      	bx	lr
 800a7d0:	20000818 	.word	0x20000818
 800a7d4:	20000804 	.word	0x20000804
 800a7d8:	200007f8 	.word	0x200007f8
 800a7dc:	200006f4 	.word	0x200006f4
 800a7e0:	200006f0 	.word	0x200006f0

0800a7e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b084      	sub	sp, #16
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d109      	bne.n	800a808 <vTaskPlaceOnEventList+0x24>
 800a7f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f8:	f383 8811 	msr	BASEPRI, r3
 800a7fc:	f3bf 8f6f 	isb	sy
 800a800:	f3bf 8f4f 	dsb	sy
 800a804:	60fb      	str	r3, [r7, #12]
 800a806:	e7fe      	b.n	800a806 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a808:	4b07      	ldr	r3, [pc, #28]	; (800a828 <vTaskPlaceOnEventList+0x44>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	3318      	adds	r3, #24
 800a80e:	4619      	mov	r1, r3
 800a810:	6878      	ldr	r0, [r7, #4]
 800a812:	f7fe fc66 	bl	80090e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a816:	2101      	movs	r1, #1
 800a818:	6838      	ldr	r0, [r7, #0]
 800a81a:	f000 fb9d 	bl	800af58 <prvAddCurrentTaskToDelayedList>
}
 800a81e:	bf00      	nop
 800a820:	3710      	adds	r7, #16
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}
 800a826:	bf00      	nop
 800a828:	200006f0 	.word	0x200006f0

0800a82c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b086      	sub	sp, #24
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	68db      	ldr	r3, [r3, #12]
 800a838:	68db      	ldr	r3, [r3, #12]
 800a83a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d109      	bne.n	800a856 <xTaskRemoveFromEventList+0x2a>
 800a842:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a846:	f383 8811 	msr	BASEPRI, r3
 800a84a:	f3bf 8f6f 	isb	sy
 800a84e:	f3bf 8f4f 	dsb	sy
 800a852:	60fb      	str	r3, [r7, #12]
 800a854:	e7fe      	b.n	800a854 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a856:	693b      	ldr	r3, [r7, #16]
 800a858:	3318      	adds	r3, #24
 800a85a:	4618      	mov	r0, r3
 800a85c:	f7fe fc7a 	bl	8009154 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a860:	4b1d      	ldr	r3, [pc, #116]	; (800a8d8 <xTaskRemoveFromEventList+0xac>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d11c      	bne.n	800a8a2 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a868:	693b      	ldr	r3, [r7, #16]
 800a86a:	3304      	adds	r3, #4
 800a86c:	4618      	mov	r0, r3
 800a86e:	f7fe fc71 	bl	8009154 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a876:	2201      	movs	r2, #1
 800a878:	409a      	lsls	r2, r3
 800a87a:	4b18      	ldr	r3, [pc, #96]	; (800a8dc <xTaskRemoveFromEventList+0xb0>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	4313      	orrs	r3, r2
 800a880:	4a16      	ldr	r2, [pc, #88]	; (800a8dc <xTaskRemoveFromEventList+0xb0>)
 800a882:	6013      	str	r3, [r2, #0]
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a888:	4613      	mov	r3, r2
 800a88a:	009b      	lsls	r3, r3, #2
 800a88c:	4413      	add	r3, r2
 800a88e:	009b      	lsls	r3, r3, #2
 800a890:	4a13      	ldr	r2, [pc, #76]	; (800a8e0 <xTaskRemoveFromEventList+0xb4>)
 800a892:	441a      	add	r2, r3
 800a894:	693b      	ldr	r3, [r7, #16]
 800a896:	3304      	adds	r3, #4
 800a898:	4619      	mov	r1, r3
 800a89a:	4610      	mov	r0, r2
 800a89c:	f7fe fbfd 	bl	800909a <vListInsertEnd>
 800a8a0:	e005      	b.n	800a8ae <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	3318      	adds	r3, #24
 800a8a6:	4619      	mov	r1, r3
 800a8a8:	480e      	ldr	r0, [pc, #56]	; (800a8e4 <xTaskRemoveFromEventList+0xb8>)
 800a8aa:	f7fe fbf6 	bl	800909a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a8ae:	693b      	ldr	r3, [r7, #16]
 800a8b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8b2:	4b0d      	ldr	r3, [pc, #52]	; (800a8e8 <xTaskRemoveFromEventList+0xbc>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8b8:	429a      	cmp	r2, r3
 800a8ba:	d905      	bls.n	800a8c8 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a8bc:	2301      	movs	r3, #1
 800a8be:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a8c0:	4b0a      	ldr	r3, [pc, #40]	; (800a8ec <xTaskRemoveFromEventList+0xc0>)
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	601a      	str	r2, [r3, #0]
 800a8c6:	e001      	b.n	800a8cc <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800a8cc:	697b      	ldr	r3, [r7, #20]
}
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	3718      	adds	r7, #24
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}
 800a8d6:	bf00      	nop
 800a8d8:	20000818 	.word	0x20000818
 800a8dc:	200007f8 	.word	0x200007f8
 800a8e0:	200006f4 	.word	0x200006f4
 800a8e4:	200007b0 	.word	0x200007b0
 800a8e8:	200006f0 	.word	0x200006f0
 800a8ec:	20000804 	.word	0x20000804

0800a8f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b083      	sub	sp, #12
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a8f8:	4b06      	ldr	r3, [pc, #24]	; (800a914 <vTaskInternalSetTimeOutState+0x24>)
 800a8fa:	681a      	ldr	r2, [r3, #0]
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a900:	4b05      	ldr	r3, [pc, #20]	; (800a918 <vTaskInternalSetTimeOutState+0x28>)
 800a902:	681a      	ldr	r2, [r3, #0]
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	605a      	str	r2, [r3, #4]
}
 800a908:	bf00      	nop
 800a90a:	370c      	adds	r7, #12
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr
 800a914:	20000808 	.word	0x20000808
 800a918:	200007f4 	.word	0x200007f4

0800a91c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b088      	sub	sp, #32
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
 800a924:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d109      	bne.n	800a940 <xTaskCheckForTimeOut+0x24>
 800a92c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a930:	f383 8811 	msr	BASEPRI, r3
 800a934:	f3bf 8f6f 	isb	sy
 800a938:	f3bf 8f4f 	dsb	sy
 800a93c:	613b      	str	r3, [r7, #16]
 800a93e:	e7fe      	b.n	800a93e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d109      	bne.n	800a95a <xTaskCheckForTimeOut+0x3e>
 800a946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a94a:	f383 8811 	msr	BASEPRI, r3
 800a94e:	f3bf 8f6f 	isb	sy
 800a952:	f3bf 8f4f 	dsb	sy
 800a956:	60fb      	str	r3, [r7, #12]
 800a958:	e7fe      	b.n	800a958 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800a95a:	f000 fc87 	bl	800b26c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a95e:	4b1d      	ldr	r3, [pc, #116]	; (800a9d4 <xTaskCheckForTimeOut+0xb8>)
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	685b      	ldr	r3, [r3, #4]
 800a968:	69ba      	ldr	r2, [r7, #24]
 800a96a:	1ad3      	subs	r3, r2, r3
 800a96c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a976:	d102      	bne.n	800a97e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a978:	2300      	movs	r3, #0
 800a97a:	61fb      	str	r3, [r7, #28]
 800a97c:	e023      	b.n	800a9c6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681a      	ldr	r2, [r3, #0]
 800a982:	4b15      	ldr	r3, [pc, #84]	; (800a9d8 <xTaskCheckForTimeOut+0xbc>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	429a      	cmp	r2, r3
 800a988:	d007      	beq.n	800a99a <xTaskCheckForTimeOut+0x7e>
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	685b      	ldr	r3, [r3, #4]
 800a98e:	69ba      	ldr	r2, [r7, #24]
 800a990:	429a      	cmp	r2, r3
 800a992:	d302      	bcc.n	800a99a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a994:	2301      	movs	r3, #1
 800a996:	61fb      	str	r3, [r7, #28]
 800a998:	e015      	b.n	800a9c6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	697a      	ldr	r2, [r7, #20]
 800a9a0:	429a      	cmp	r2, r3
 800a9a2:	d20b      	bcs.n	800a9bc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	681a      	ldr	r2, [r3, #0]
 800a9a8:	697b      	ldr	r3, [r7, #20]
 800a9aa:	1ad2      	subs	r2, r2, r3
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f7ff ff9d 	bl	800a8f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	61fb      	str	r3, [r7, #28]
 800a9ba:	e004      	b.n	800a9c6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a9c6:	f000 fc7f 	bl	800b2c8 <vPortExitCritical>

	return xReturn;
 800a9ca:	69fb      	ldr	r3, [r7, #28]
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	3720      	adds	r7, #32
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}
 800a9d4:	200007f4 	.word	0x200007f4
 800a9d8:	20000808 	.word	0x20000808

0800a9dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a9dc:	b480      	push	{r7}
 800a9de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a9e0:	4b03      	ldr	r3, [pc, #12]	; (800a9f0 <vTaskMissedYield+0x14>)
 800a9e2:	2201      	movs	r2, #1
 800a9e4:	601a      	str	r2, [r3, #0]
}
 800a9e6:	bf00      	nop
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ee:	4770      	bx	lr
 800a9f0:	20000804 	.word	0x20000804

0800a9f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b082      	sub	sp, #8
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a9fc:	f000 f852 	bl	800aaa4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800aa00:	4b06      	ldr	r3, [pc, #24]	; (800aa1c <prvIdleTask+0x28>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	2b01      	cmp	r3, #1
 800aa06:	d9f9      	bls.n	800a9fc <prvIdleTask+0x8>
			{
				taskYIELD();
 800aa08:	4b05      	ldr	r3, [pc, #20]	; (800aa20 <prvIdleTask+0x2c>)
 800aa0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa0e:	601a      	str	r2, [r3, #0]
 800aa10:	f3bf 8f4f 	dsb	sy
 800aa14:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800aa18:	e7f0      	b.n	800a9fc <prvIdleTask+0x8>
 800aa1a:	bf00      	nop
 800aa1c:	200006f4 	.word	0x200006f4
 800aa20:	e000ed04 	.word	0xe000ed04

0800aa24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b082      	sub	sp, #8
 800aa28:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	607b      	str	r3, [r7, #4]
 800aa2e:	e00c      	b.n	800aa4a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800aa30:	687a      	ldr	r2, [r7, #4]
 800aa32:	4613      	mov	r3, r2
 800aa34:	009b      	lsls	r3, r3, #2
 800aa36:	4413      	add	r3, r2
 800aa38:	009b      	lsls	r3, r3, #2
 800aa3a:	4a12      	ldr	r2, [pc, #72]	; (800aa84 <prvInitialiseTaskLists+0x60>)
 800aa3c:	4413      	add	r3, r2
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f7fe fafe 	bl	8009040 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	3301      	adds	r3, #1
 800aa48:	607b      	str	r3, [r7, #4]
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2b06      	cmp	r3, #6
 800aa4e:	d9ef      	bls.n	800aa30 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800aa50:	480d      	ldr	r0, [pc, #52]	; (800aa88 <prvInitialiseTaskLists+0x64>)
 800aa52:	f7fe faf5 	bl	8009040 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800aa56:	480d      	ldr	r0, [pc, #52]	; (800aa8c <prvInitialiseTaskLists+0x68>)
 800aa58:	f7fe faf2 	bl	8009040 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800aa5c:	480c      	ldr	r0, [pc, #48]	; (800aa90 <prvInitialiseTaskLists+0x6c>)
 800aa5e:	f7fe faef 	bl	8009040 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800aa62:	480c      	ldr	r0, [pc, #48]	; (800aa94 <prvInitialiseTaskLists+0x70>)
 800aa64:	f7fe faec 	bl	8009040 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800aa68:	480b      	ldr	r0, [pc, #44]	; (800aa98 <prvInitialiseTaskLists+0x74>)
 800aa6a:	f7fe fae9 	bl	8009040 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800aa6e:	4b0b      	ldr	r3, [pc, #44]	; (800aa9c <prvInitialiseTaskLists+0x78>)
 800aa70:	4a05      	ldr	r2, [pc, #20]	; (800aa88 <prvInitialiseTaskLists+0x64>)
 800aa72:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800aa74:	4b0a      	ldr	r3, [pc, #40]	; (800aaa0 <prvInitialiseTaskLists+0x7c>)
 800aa76:	4a05      	ldr	r2, [pc, #20]	; (800aa8c <prvInitialiseTaskLists+0x68>)
 800aa78:	601a      	str	r2, [r3, #0]
}
 800aa7a:	bf00      	nop
 800aa7c:	3708      	adds	r7, #8
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}
 800aa82:	bf00      	nop
 800aa84:	200006f4 	.word	0x200006f4
 800aa88:	20000780 	.word	0x20000780
 800aa8c:	20000794 	.word	0x20000794
 800aa90:	200007b0 	.word	0x200007b0
 800aa94:	200007c4 	.word	0x200007c4
 800aa98:	200007dc 	.word	0x200007dc
 800aa9c:	200007a8 	.word	0x200007a8
 800aaa0:	200007ac 	.word	0x200007ac

0800aaa4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b082      	sub	sp, #8
 800aaa8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aaaa:	e019      	b.n	800aae0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800aaac:	f000 fbde 	bl	800b26c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800aab0:	4b0f      	ldr	r3, [pc, #60]	; (800aaf0 <prvCheckTasksWaitingTermination+0x4c>)
 800aab2:	68db      	ldr	r3, [r3, #12]
 800aab4:	68db      	ldr	r3, [r3, #12]
 800aab6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	3304      	adds	r3, #4
 800aabc:	4618      	mov	r0, r3
 800aabe:	f7fe fb49 	bl	8009154 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800aac2:	4b0c      	ldr	r3, [pc, #48]	; (800aaf4 <prvCheckTasksWaitingTermination+0x50>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	3b01      	subs	r3, #1
 800aac8:	4a0a      	ldr	r2, [pc, #40]	; (800aaf4 <prvCheckTasksWaitingTermination+0x50>)
 800aaca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800aacc:	4b0a      	ldr	r3, [pc, #40]	; (800aaf8 <prvCheckTasksWaitingTermination+0x54>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	3b01      	subs	r3, #1
 800aad2:	4a09      	ldr	r2, [pc, #36]	; (800aaf8 <prvCheckTasksWaitingTermination+0x54>)
 800aad4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800aad6:	f000 fbf7 	bl	800b2c8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f000 f80e 	bl	800aafc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aae0:	4b05      	ldr	r3, [pc, #20]	; (800aaf8 <prvCheckTasksWaitingTermination+0x54>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d1e1      	bne.n	800aaac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800aae8:	bf00      	nop
 800aaea:	3708      	adds	r7, #8
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}
 800aaf0:	200007c4 	.word	0x200007c4
 800aaf4:	200007f0 	.word	0x200007f0
 800aaf8:	200007d8 	.word	0x200007d8

0800aafc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b084      	sub	sp, #16
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d108      	bne.n	800ab20 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab12:	4618      	mov	r0, r3
 800ab14:	f000 fd86 	bl	800b624 <vPortFree>
				vPortFree( pxTCB );
 800ab18:	6878      	ldr	r0, [r7, #4]
 800ab1a:	f000 fd83 	bl	800b624 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ab1e:	e017      	b.n	800ab50 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ab26:	2b01      	cmp	r3, #1
 800ab28:	d103      	bne.n	800ab32 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f000 fd7a 	bl	800b624 <vPortFree>
	}
 800ab30:	e00e      	b.n	800ab50 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ab38:	2b02      	cmp	r3, #2
 800ab3a:	d009      	beq.n	800ab50 <prvDeleteTCB+0x54>
 800ab3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab40:	f383 8811 	msr	BASEPRI, r3
 800ab44:	f3bf 8f6f 	isb	sy
 800ab48:	f3bf 8f4f 	dsb	sy
 800ab4c:	60fb      	str	r3, [r7, #12]
 800ab4e:	e7fe      	b.n	800ab4e <prvDeleteTCB+0x52>
	}
 800ab50:	bf00      	nop
 800ab52:	3710      	adds	r7, #16
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}

0800ab58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b083      	sub	sp, #12
 800ab5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab5e:	4b0f      	ldr	r3, [pc, #60]	; (800ab9c <prvResetNextTaskUnblockTime+0x44>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d101      	bne.n	800ab6c <prvResetNextTaskUnblockTime+0x14>
 800ab68:	2301      	movs	r3, #1
 800ab6a:	e000      	b.n	800ab6e <prvResetNextTaskUnblockTime+0x16>
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d004      	beq.n	800ab7c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ab72:	4b0b      	ldr	r3, [pc, #44]	; (800aba0 <prvResetNextTaskUnblockTime+0x48>)
 800ab74:	f04f 32ff 	mov.w	r2, #4294967295
 800ab78:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ab7a:	e008      	b.n	800ab8e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ab7c:	4b07      	ldr	r3, [pc, #28]	; (800ab9c <prvResetNextTaskUnblockTime+0x44>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	68db      	ldr	r3, [r3, #12]
 800ab82:	68db      	ldr	r3, [r3, #12]
 800ab84:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	685b      	ldr	r3, [r3, #4]
 800ab8a:	4a05      	ldr	r2, [pc, #20]	; (800aba0 <prvResetNextTaskUnblockTime+0x48>)
 800ab8c:	6013      	str	r3, [r2, #0]
}
 800ab8e:	bf00      	nop
 800ab90:	370c      	adds	r7, #12
 800ab92:	46bd      	mov	sp, r7
 800ab94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab98:	4770      	bx	lr
 800ab9a:	bf00      	nop
 800ab9c:	200007a8 	.word	0x200007a8
 800aba0:	20000810 	.word	0x20000810

0800aba4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800aba4:	b480      	push	{r7}
 800aba6:	b083      	sub	sp, #12
 800aba8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800abaa:	4b0b      	ldr	r3, [pc, #44]	; (800abd8 <xTaskGetSchedulerState+0x34>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d102      	bne.n	800abb8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800abb2:	2301      	movs	r3, #1
 800abb4:	607b      	str	r3, [r7, #4]
 800abb6:	e008      	b.n	800abca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800abb8:	4b08      	ldr	r3, [pc, #32]	; (800abdc <xTaskGetSchedulerState+0x38>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d102      	bne.n	800abc6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800abc0:	2302      	movs	r3, #2
 800abc2:	607b      	str	r3, [r7, #4]
 800abc4:	e001      	b.n	800abca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800abc6:	2300      	movs	r3, #0
 800abc8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800abca:	687b      	ldr	r3, [r7, #4]
	}
 800abcc:	4618      	mov	r0, r3
 800abce:	370c      	adds	r7, #12
 800abd0:	46bd      	mov	sp, r7
 800abd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd6:	4770      	bx	lr
 800abd8:	200007fc 	.word	0x200007fc
 800abdc:	20000818 	.word	0x20000818

0800abe0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b084      	sub	sp, #16
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800abec:	2300      	movs	r3, #0
 800abee:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d06e      	beq.n	800acd4 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abfa:	4b39      	ldr	r3, [pc, #228]	; (800ace0 <xTaskPriorityInherit+0x100>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac00:	429a      	cmp	r2, r3
 800ac02:	d25e      	bcs.n	800acc2 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	699b      	ldr	r3, [r3, #24]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	db06      	blt.n	800ac1a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac0c:	4b34      	ldr	r3, [pc, #208]	; (800ace0 <xTaskPriorityInherit+0x100>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac12:	f1c3 0207 	rsb	r2, r3, #7
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	6959      	ldr	r1, [r3, #20]
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac22:	4613      	mov	r3, r2
 800ac24:	009b      	lsls	r3, r3, #2
 800ac26:	4413      	add	r3, r2
 800ac28:	009b      	lsls	r3, r3, #2
 800ac2a:	4a2e      	ldr	r2, [pc, #184]	; (800ace4 <xTaskPriorityInherit+0x104>)
 800ac2c:	4413      	add	r3, r2
 800ac2e:	4299      	cmp	r1, r3
 800ac30:	d101      	bne.n	800ac36 <xTaskPriorityInherit+0x56>
 800ac32:	2301      	movs	r3, #1
 800ac34:	e000      	b.n	800ac38 <xTaskPriorityInherit+0x58>
 800ac36:	2300      	movs	r3, #0
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d03a      	beq.n	800acb2 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	3304      	adds	r3, #4
 800ac40:	4618      	mov	r0, r3
 800ac42:	f7fe fa87 	bl	8009154 <uxListRemove>
 800ac46:	4603      	mov	r3, r0
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d115      	bne.n	800ac78 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac50:	4924      	ldr	r1, [pc, #144]	; (800ace4 <xTaskPriorityInherit+0x104>)
 800ac52:	4613      	mov	r3, r2
 800ac54:	009b      	lsls	r3, r3, #2
 800ac56:	4413      	add	r3, r2
 800ac58:	009b      	lsls	r3, r3, #2
 800ac5a:	440b      	add	r3, r1
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d10a      	bne.n	800ac78 <xTaskPriorityInherit+0x98>
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac66:	2201      	movs	r2, #1
 800ac68:	fa02 f303 	lsl.w	r3, r2, r3
 800ac6c:	43da      	mvns	r2, r3
 800ac6e:	4b1e      	ldr	r3, [pc, #120]	; (800ace8 <xTaskPriorityInherit+0x108>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	4013      	ands	r3, r2
 800ac74:	4a1c      	ldr	r2, [pc, #112]	; (800ace8 <xTaskPriorityInherit+0x108>)
 800ac76:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ac78:	4b19      	ldr	r3, [pc, #100]	; (800ace0 <xTaskPriorityInherit+0x100>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac86:	2201      	movs	r2, #1
 800ac88:	409a      	lsls	r2, r3
 800ac8a:	4b17      	ldr	r3, [pc, #92]	; (800ace8 <xTaskPriorityInherit+0x108>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	4313      	orrs	r3, r2
 800ac90:	4a15      	ldr	r2, [pc, #84]	; (800ace8 <xTaskPriorityInherit+0x108>)
 800ac92:	6013      	str	r3, [r2, #0]
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac98:	4613      	mov	r3, r2
 800ac9a:	009b      	lsls	r3, r3, #2
 800ac9c:	4413      	add	r3, r2
 800ac9e:	009b      	lsls	r3, r3, #2
 800aca0:	4a10      	ldr	r2, [pc, #64]	; (800ace4 <xTaskPriorityInherit+0x104>)
 800aca2:	441a      	add	r2, r3
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	3304      	adds	r3, #4
 800aca8:	4619      	mov	r1, r3
 800acaa:	4610      	mov	r0, r2
 800acac:	f7fe f9f5 	bl	800909a <vListInsertEnd>
 800acb0:	e004      	b.n	800acbc <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800acb2:	4b0b      	ldr	r3, [pc, #44]	; (800ace0 <xTaskPriorityInherit+0x100>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800acbc:	2301      	movs	r3, #1
 800acbe:	60fb      	str	r3, [r7, #12]
 800acc0:	e008      	b.n	800acd4 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800acc6:	4b06      	ldr	r3, [pc, #24]	; (800ace0 <xTaskPriorityInherit+0x100>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800accc:	429a      	cmp	r2, r3
 800acce:	d201      	bcs.n	800acd4 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800acd0:	2301      	movs	r3, #1
 800acd2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800acd4:	68fb      	ldr	r3, [r7, #12]
	}
 800acd6:	4618      	mov	r0, r3
 800acd8:	3710      	adds	r7, #16
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}
 800acde:	bf00      	nop
 800ace0:	200006f0 	.word	0x200006f0
 800ace4:	200006f4 	.word	0x200006f4
 800ace8:	200007f8 	.word	0x200007f8

0800acec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800acec:	b580      	push	{r7, lr}
 800acee:	b086      	sub	sp, #24
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800acf8:	2300      	movs	r3, #0
 800acfa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d06c      	beq.n	800addc <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ad02:	4b39      	ldr	r3, [pc, #228]	; (800ade8 <xTaskPriorityDisinherit+0xfc>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	693a      	ldr	r2, [r7, #16]
 800ad08:	429a      	cmp	r2, r3
 800ad0a:	d009      	beq.n	800ad20 <xTaskPriorityDisinherit+0x34>
 800ad0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad10:	f383 8811 	msr	BASEPRI, r3
 800ad14:	f3bf 8f6f 	isb	sy
 800ad18:	f3bf 8f4f 	dsb	sy
 800ad1c:	60fb      	str	r3, [r7, #12]
 800ad1e:	e7fe      	b.n	800ad1e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d109      	bne.n	800ad3c <xTaskPriorityDisinherit+0x50>
 800ad28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad2c:	f383 8811 	msr	BASEPRI, r3
 800ad30:	f3bf 8f6f 	isb	sy
 800ad34:	f3bf 8f4f 	dsb	sy
 800ad38:	60bb      	str	r3, [r7, #8]
 800ad3a:	e7fe      	b.n	800ad3a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800ad3c:	693b      	ldr	r3, [r7, #16]
 800ad3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad40:	1e5a      	subs	r2, r3, #1
 800ad42:	693b      	ldr	r3, [r7, #16]
 800ad44:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ad46:	693b      	ldr	r3, [r7, #16]
 800ad48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad4a:	693b      	ldr	r3, [r7, #16]
 800ad4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	d044      	beq.n	800addc <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ad52:	693b      	ldr	r3, [r7, #16]
 800ad54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d140      	bne.n	800addc <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad5a:	693b      	ldr	r3, [r7, #16]
 800ad5c:	3304      	adds	r3, #4
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f7fe f9f8 	bl	8009154 <uxListRemove>
 800ad64:	4603      	mov	r3, r0
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d115      	bne.n	800ad96 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ad6a:	693b      	ldr	r3, [r7, #16]
 800ad6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad6e:	491f      	ldr	r1, [pc, #124]	; (800adec <xTaskPriorityDisinherit+0x100>)
 800ad70:	4613      	mov	r3, r2
 800ad72:	009b      	lsls	r3, r3, #2
 800ad74:	4413      	add	r3, r2
 800ad76:	009b      	lsls	r3, r3, #2
 800ad78:	440b      	add	r3, r1
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d10a      	bne.n	800ad96 <xTaskPriorityDisinherit+0xaa>
 800ad80:	693b      	ldr	r3, [r7, #16]
 800ad82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad84:	2201      	movs	r2, #1
 800ad86:	fa02 f303 	lsl.w	r3, r2, r3
 800ad8a:	43da      	mvns	r2, r3
 800ad8c:	4b18      	ldr	r3, [pc, #96]	; (800adf0 <xTaskPriorityDisinherit+0x104>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	4013      	ands	r3, r2
 800ad92:	4a17      	ldr	r2, [pc, #92]	; (800adf0 <xTaskPriorityDisinherit+0x104>)
 800ad94:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ad96:	693b      	ldr	r3, [r7, #16]
 800ad98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ad9a:	693b      	ldr	r3, [r7, #16]
 800ad9c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad9e:	693b      	ldr	r3, [r7, #16]
 800ada0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ada2:	f1c3 0207 	rsb	r2, r3, #7
 800ada6:	693b      	ldr	r3, [r7, #16]
 800ada8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800adaa:	693b      	ldr	r3, [r7, #16]
 800adac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adae:	2201      	movs	r2, #1
 800adb0:	409a      	lsls	r2, r3
 800adb2:	4b0f      	ldr	r3, [pc, #60]	; (800adf0 <xTaskPriorityDisinherit+0x104>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	4313      	orrs	r3, r2
 800adb8:	4a0d      	ldr	r2, [pc, #52]	; (800adf0 <xTaskPriorityDisinherit+0x104>)
 800adba:	6013      	str	r3, [r2, #0]
 800adbc:	693b      	ldr	r3, [r7, #16]
 800adbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adc0:	4613      	mov	r3, r2
 800adc2:	009b      	lsls	r3, r3, #2
 800adc4:	4413      	add	r3, r2
 800adc6:	009b      	lsls	r3, r3, #2
 800adc8:	4a08      	ldr	r2, [pc, #32]	; (800adec <xTaskPriorityDisinherit+0x100>)
 800adca:	441a      	add	r2, r3
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	3304      	adds	r3, #4
 800add0:	4619      	mov	r1, r3
 800add2:	4610      	mov	r0, r2
 800add4:	f7fe f961 	bl	800909a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800add8:	2301      	movs	r3, #1
 800adda:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800addc:	697b      	ldr	r3, [r7, #20]
	}
 800adde:	4618      	mov	r0, r3
 800ade0:	3718      	adds	r7, #24
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}
 800ade6:	bf00      	nop
 800ade8:	200006f0 	.word	0x200006f0
 800adec:	200006f4 	.word	0x200006f4
 800adf0:	200007f8 	.word	0x200007f8

0800adf4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b088      	sub	sp, #32
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
 800adfc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ae02:	2301      	movs	r3, #1
 800ae04:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	f000 8086 	beq.w	800af1a <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ae0e:	69bb      	ldr	r3, [r7, #24]
 800ae10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d109      	bne.n	800ae2a <vTaskPriorityDisinheritAfterTimeout+0x36>
 800ae16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae1a:	f383 8811 	msr	BASEPRI, r3
 800ae1e:	f3bf 8f6f 	isb	sy
 800ae22:	f3bf 8f4f 	dsb	sy
 800ae26:	60fb      	str	r3, [r7, #12]
 800ae28:	e7fe      	b.n	800ae28 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ae2a:	69bb      	ldr	r3, [r7, #24]
 800ae2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae2e:	683a      	ldr	r2, [r7, #0]
 800ae30:	429a      	cmp	r2, r3
 800ae32:	d902      	bls.n	800ae3a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	61fb      	str	r3, [r7, #28]
 800ae38:	e002      	b.n	800ae40 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ae3a:	69bb      	ldr	r3, [r7, #24]
 800ae3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae3e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ae40:	69bb      	ldr	r3, [r7, #24]
 800ae42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae44:	69fa      	ldr	r2, [r7, #28]
 800ae46:	429a      	cmp	r2, r3
 800ae48:	d067      	beq.n	800af1a <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ae4a:	69bb      	ldr	r3, [r7, #24]
 800ae4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae4e:	697a      	ldr	r2, [r7, #20]
 800ae50:	429a      	cmp	r2, r3
 800ae52:	d162      	bne.n	800af1a <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ae54:	4b33      	ldr	r3, [pc, #204]	; (800af24 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	69ba      	ldr	r2, [r7, #24]
 800ae5a:	429a      	cmp	r2, r3
 800ae5c:	d109      	bne.n	800ae72 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800ae5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae62:	f383 8811 	msr	BASEPRI, r3
 800ae66:	f3bf 8f6f 	isb	sy
 800ae6a:	f3bf 8f4f 	dsb	sy
 800ae6e:	60bb      	str	r3, [r7, #8]
 800ae70:	e7fe      	b.n	800ae70 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ae72:	69bb      	ldr	r3, [r7, #24]
 800ae74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae76:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ae78:	69bb      	ldr	r3, [r7, #24]
 800ae7a:	69fa      	ldr	r2, [r7, #28]
 800ae7c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ae7e:	69bb      	ldr	r3, [r7, #24]
 800ae80:	699b      	ldr	r3, [r3, #24]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	db04      	blt.n	800ae90 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae86:	69fb      	ldr	r3, [r7, #28]
 800ae88:	f1c3 0207 	rsb	r2, r3, #7
 800ae8c:	69bb      	ldr	r3, [r7, #24]
 800ae8e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ae90:	69bb      	ldr	r3, [r7, #24]
 800ae92:	6959      	ldr	r1, [r3, #20]
 800ae94:	693a      	ldr	r2, [r7, #16]
 800ae96:	4613      	mov	r3, r2
 800ae98:	009b      	lsls	r3, r3, #2
 800ae9a:	4413      	add	r3, r2
 800ae9c:	009b      	lsls	r3, r3, #2
 800ae9e:	4a22      	ldr	r2, [pc, #136]	; (800af28 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800aea0:	4413      	add	r3, r2
 800aea2:	4299      	cmp	r1, r3
 800aea4:	d101      	bne.n	800aeaa <vTaskPriorityDisinheritAfterTimeout+0xb6>
 800aea6:	2301      	movs	r3, #1
 800aea8:	e000      	b.n	800aeac <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800aeaa:	2300      	movs	r3, #0
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d034      	beq.n	800af1a <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aeb0:	69bb      	ldr	r3, [r7, #24]
 800aeb2:	3304      	adds	r3, #4
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f7fe f94d 	bl	8009154 <uxListRemove>
 800aeba:	4603      	mov	r3, r0
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d115      	bne.n	800aeec <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800aec0:	69bb      	ldr	r3, [r7, #24]
 800aec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aec4:	4918      	ldr	r1, [pc, #96]	; (800af28 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800aec6:	4613      	mov	r3, r2
 800aec8:	009b      	lsls	r3, r3, #2
 800aeca:	4413      	add	r3, r2
 800aecc:	009b      	lsls	r3, r3, #2
 800aece:	440b      	add	r3, r1
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d10a      	bne.n	800aeec <vTaskPriorityDisinheritAfterTimeout+0xf8>
 800aed6:	69bb      	ldr	r3, [r7, #24]
 800aed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeda:	2201      	movs	r2, #1
 800aedc:	fa02 f303 	lsl.w	r3, r2, r3
 800aee0:	43da      	mvns	r2, r3
 800aee2:	4b12      	ldr	r3, [pc, #72]	; (800af2c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	4013      	ands	r3, r2
 800aee8:	4a10      	ldr	r2, [pc, #64]	; (800af2c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800aeea:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800aeec:	69bb      	ldr	r3, [r7, #24]
 800aeee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aef0:	2201      	movs	r2, #1
 800aef2:	409a      	lsls	r2, r3
 800aef4:	4b0d      	ldr	r3, [pc, #52]	; (800af2c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	4313      	orrs	r3, r2
 800aefa:	4a0c      	ldr	r2, [pc, #48]	; (800af2c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800aefc:	6013      	str	r3, [r2, #0]
 800aefe:	69bb      	ldr	r3, [r7, #24]
 800af00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af02:	4613      	mov	r3, r2
 800af04:	009b      	lsls	r3, r3, #2
 800af06:	4413      	add	r3, r2
 800af08:	009b      	lsls	r3, r3, #2
 800af0a:	4a07      	ldr	r2, [pc, #28]	; (800af28 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800af0c:	441a      	add	r2, r3
 800af0e:	69bb      	ldr	r3, [r7, #24]
 800af10:	3304      	adds	r3, #4
 800af12:	4619      	mov	r1, r3
 800af14:	4610      	mov	r0, r2
 800af16:	f7fe f8c0 	bl	800909a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800af1a:	bf00      	nop
 800af1c:	3720      	adds	r7, #32
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}
 800af22:	bf00      	nop
 800af24:	200006f0 	.word	0x200006f0
 800af28:	200006f4 	.word	0x200006f4
 800af2c:	200007f8 	.word	0x200007f8

0800af30 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800af30:	b480      	push	{r7}
 800af32:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800af34:	4b07      	ldr	r3, [pc, #28]	; (800af54 <pvTaskIncrementMutexHeldCount+0x24>)
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d004      	beq.n	800af46 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800af3c:	4b05      	ldr	r3, [pc, #20]	; (800af54 <pvTaskIncrementMutexHeldCount+0x24>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800af42:	3201      	adds	r2, #1
 800af44:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800af46:	4b03      	ldr	r3, [pc, #12]	; (800af54 <pvTaskIncrementMutexHeldCount+0x24>)
 800af48:	681b      	ldr	r3, [r3, #0]
	}
 800af4a:	4618      	mov	r0, r3
 800af4c:	46bd      	mov	sp, r7
 800af4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af52:	4770      	bx	lr
 800af54:	200006f0 	.word	0x200006f0

0800af58 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b084      	sub	sp, #16
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
 800af60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800af62:	4b29      	ldr	r3, [pc, #164]	; (800b008 <prvAddCurrentTaskToDelayedList+0xb0>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800af68:	4b28      	ldr	r3, [pc, #160]	; (800b00c <prvAddCurrentTaskToDelayedList+0xb4>)
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	3304      	adds	r3, #4
 800af6e:	4618      	mov	r0, r3
 800af70:	f7fe f8f0 	bl	8009154 <uxListRemove>
 800af74:	4603      	mov	r3, r0
 800af76:	2b00      	cmp	r3, #0
 800af78:	d10b      	bne.n	800af92 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800af7a:	4b24      	ldr	r3, [pc, #144]	; (800b00c <prvAddCurrentTaskToDelayedList+0xb4>)
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af80:	2201      	movs	r2, #1
 800af82:	fa02 f303 	lsl.w	r3, r2, r3
 800af86:	43da      	mvns	r2, r3
 800af88:	4b21      	ldr	r3, [pc, #132]	; (800b010 <prvAddCurrentTaskToDelayedList+0xb8>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	4013      	ands	r3, r2
 800af8e:	4a20      	ldr	r2, [pc, #128]	; (800b010 <prvAddCurrentTaskToDelayedList+0xb8>)
 800af90:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af98:	d10a      	bne.n	800afb0 <prvAddCurrentTaskToDelayedList+0x58>
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d007      	beq.n	800afb0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800afa0:	4b1a      	ldr	r3, [pc, #104]	; (800b00c <prvAddCurrentTaskToDelayedList+0xb4>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	3304      	adds	r3, #4
 800afa6:	4619      	mov	r1, r3
 800afa8:	481a      	ldr	r0, [pc, #104]	; (800b014 <prvAddCurrentTaskToDelayedList+0xbc>)
 800afaa:	f7fe f876 	bl	800909a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800afae:	e026      	b.n	800affe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800afb0:	68fa      	ldr	r2, [r7, #12]
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	4413      	add	r3, r2
 800afb6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800afb8:	4b14      	ldr	r3, [pc, #80]	; (800b00c <prvAddCurrentTaskToDelayedList+0xb4>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	68ba      	ldr	r2, [r7, #8]
 800afbe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800afc0:	68ba      	ldr	r2, [r7, #8]
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	429a      	cmp	r2, r3
 800afc6:	d209      	bcs.n	800afdc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800afc8:	4b13      	ldr	r3, [pc, #76]	; (800b018 <prvAddCurrentTaskToDelayedList+0xc0>)
 800afca:	681a      	ldr	r2, [r3, #0]
 800afcc:	4b0f      	ldr	r3, [pc, #60]	; (800b00c <prvAddCurrentTaskToDelayedList+0xb4>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	3304      	adds	r3, #4
 800afd2:	4619      	mov	r1, r3
 800afd4:	4610      	mov	r0, r2
 800afd6:	f7fe f884 	bl	80090e2 <vListInsert>
}
 800afda:	e010      	b.n	800affe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800afdc:	4b0f      	ldr	r3, [pc, #60]	; (800b01c <prvAddCurrentTaskToDelayedList+0xc4>)
 800afde:	681a      	ldr	r2, [r3, #0]
 800afe0:	4b0a      	ldr	r3, [pc, #40]	; (800b00c <prvAddCurrentTaskToDelayedList+0xb4>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	3304      	adds	r3, #4
 800afe6:	4619      	mov	r1, r3
 800afe8:	4610      	mov	r0, r2
 800afea:	f7fe f87a 	bl	80090e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800afee:	4b0c      	ldr	r3, [pc, #48]	; (800b020 <prvAddCurrentTaskToDelayedList+0xc8>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	68ba      	ldr	r2, [r7, #8]
 800aff4:	429a      	cmp	r2, r3
 800aff6:	d202      	bcs.n	800affe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800aff8:	4a09      	ldr	r2, [pc, #36]	; (800b020 <prvAddCurrentTaskToDelayedList+0xc8>)
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	6013      	str	r3, [r2, #0]
}
 800affe:	bf00      	nop
 800b000:	3710      	adds	r7, #16
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}
 800b006:	bf00      	nop
 800b008:	200007f4 	.word	0x200007f4
 800b00c:	200006f0 	.word	0x200006f0
 800b010:	200007f8 	.word	0x200007f8
 800b014:	200007dc 	.word	0x200007dc
 800b018:	200007ac 	.word	0x200007ac
 800b01c:	200007a8 	.word	0x200007a8
 800b020:	20000810 	.word	0x20000810

0800b024 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b024:	b480      	push	{r7}
 800b026:	b085      	sub	sp, #20
 800b028:	af00      	add	r7, sp, #0
 800b02a:	60f8      	str	r0, [r7, #12]
 800b02c:	60b9      	str	r1, [r7, #8]
 800b02e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	3b04      	subs	r3, #4
 800b034:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b03c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	3b04      	subs	r3, #4
 800b042:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	f023 0201 	bic.w	r2, r3, #1
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	3b04      	subs	r3, #4
 800b052:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b054:	4a0c      	ldr	r2, [pc, #48]	; (800b088 <pxPortInitialiseStack+0x64>)
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	3b14      	subs	r3, #20
 800b05e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b060:	687a      	ldr	r2, [r7, #4]
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	3b04      	subs	r3, #4
 800b06a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	f06f 0202 	mvn.w	r2, #2
 800b072:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	3b20      	subs	r3, #32
 800b078:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b07a:	68fb      	ldr	r3, [r7, #12]
}
 800b07c:	4618      	mov	r0, r3
 800b07e:	3714      	adds	r7, #20
 800b080:	46bd      	mov	sp, r7
 800b082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b086:	4770      	bx	lr
 800b088:	0800b08d 	.word	0x0800b08d

0800b08c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b08c:	b480      	push	{r7}
 800b08e:	b085      	sub	sp, #20
 800b090:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b092:	2300      	movs	r3, #0
 800b094:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b096:	4b11      	ldr	r3, [pc, #68]	; (800b0dc <prvTaskExitError+0x50>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b09e:	d009      	beq.n	800b0b4 <prvTaskExitError+0x28>
 800b0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a4:	f383 8811 	msr	BASEPRI, r3
 800b0a8:	f3bf 8f6f 	isb	sy
 800b0ac:	f3bf 8f4f 	dsb	sy
 800b0b0:	60fb      	str	r3, [r7, #12]
 800b0b2:	e7fe      	b.n	800b0b2 <prvTaskExitError+0x26>
 800b0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0b8:	f383 8811 	msr	BASEPRI, r3
 800b0bc:	f3bf 8f6f 	isb	sy
 800b0c0:	f3bf 8f4f 	dsb	sy
 800b0c4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b0c6:	bf00      	nop
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d0fc      	beq.n	800b0c8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b0ce:	bf00      	nop
 800b0d0:	3714      	adds	r7, #20
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d8:	4770      	bx	lr
 800b0da:	bf00      	nop
 800b0dc:	20000008 	.word	0x20000008

0800b0e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b0e0:	4b07      	ldr	r3, [pc, #28]	; (800b100 <pxCurrentTCBConst2>)
 800b0e2:	6819      	ldr	r1, [r3, #0]
 800b0e4:	6808      	ldr	r0, [r1, #0]
 800b0e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0ea:	f380 8809 	msr	PSP, r0
 800b0ee:	f3bf 8f6f 	isb	sy
 800b0f2:	f04f 0000 	mov.w	r0, #0
 800b0f6:	f380 8811 	msr	BASEPRI, r0
 800b0fa:	4770      	bx	lr
 800b0fc:	f3af 8000 	nop.w

0800b100 <pxCurrentTCBConst2>:
 800b100:	200006f0 	.word	0x200006f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b104:	bf00      	nop
 800b106:	bf00      	nop

0800b108 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b108:	4808      	ldr	r0, [pc, #32]	; (800b12c <prvPortStartFirstTask+0x24>)
 800b10a:	6800      	ldr	r0, [r0, #0]
 800b10c:	6800      	ldr	r0, [r0, #0]
 800b10e:	f380 8808 	msr	MSP, r0
 800b112:	f04f 0000 	mov.w	r0, #0
 800b116:	f380 8814 	msr	CONTROL, r0
 800b11a:	b662      	cpsie	i
 800b11c:	b661      	cpsie	f
 800b11e:	f3bf 8f4f 	dsb	sy
 800b122:	f3bf 8f6f 	isb	sy
 800b126:	df00      	svc	0
 800b128:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b12a:	bf00      	nop
 800b12c:	e000ed08 	.word	0xe000ed08

0800b130 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b086      	sub	sp, #24
 800b134:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b136:	4b44      	ldr	r3, [pc, #272]	; (800b248 <xPortStartScheduler+0x118>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	4a44      	ldr	r2, [pc, #272]	; (800b24c <xPortStartScheduler+0x11c>)
 800b13c:	4293      	cmp	r3, r2
 800b13e:	d109      	bne.n	800b154 <xPortStartScheduler+0x24>
 800b140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b144:	f383 8811 	msr	BASEPRI, r3
 800b148:	f3bf 8f6f 	isb	sy
 800b14c:	f3bf 8f4f 	dsb	sy
 800b150:	613b      	str	r3, [r7, #16]
 800b152:	e7fe      	b.n	800b152 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b154:	4b3c      	ldr	r3, [pc, #240]	; (800b248 <xPortStartScheduler+0x118>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	4a3d      	ldr	r2, [pc, #244]	; (800b250 <xPortStartScheduler+0x120>)
 800b15a:	4293      	cmp	r3, r2
 800b15c:	d109      	bne.n	800b172 <xPortStartScheduler+0x42>
 800b15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b162:	f383 8811 	msr	BASEPRI, r3
 800b166:	f3bf 8f6f 	isb	sy
 800b16a:	f3bf 8f4f 	dsb	sy
 800b16e:	60fb      	str	r3, [r7, #12]
 800b170:	e7fe      	b.n	800b170 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b172:	4b38      	ldr	r3, [pc, #224]	; (800b254 <xPortStartScheduler+0x124>)
 800b174:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b176:	697b      	ldr	r3, [r7, #20]
 800b178:	781b      	ldrb	r3, [r3, #0]
 800b17a:	b2db      	uxtb	r3, r3
 800b17c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b17e:	697b      	ldr	r3, [r7, #20]
 800b180:	22ff      	movs	r2, #255	; 0xff
 800b182:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b184:	697b      	ldr	r3, [r7, #20]
 800b186:	781b      	ldrb	r3, [r3, #0]
 800b188:	b2db      	uxtb	r3, r3
 800b18a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b18c:	78fb      	ldrb	r3, [r7, #3]
 800b18e:	b2db      	uxtb	r3, r3
 800b190:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b194:	b2da      	uxtb	r2, r3
 800b196:	4b30      	ldr	r3, [pc, #192]	; (800b258 <xPortStartScheduler+0x128>)
 800b198:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b19a:	4b30      	ldr	r3, [pc, #192]	; (800b25c <xPortStartScheduler+0x12c>)
 800b19c:	2207      	movs	r2, #7
 800b19e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b1a0:	e009      	b.n	800b1b6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800b1a2:	4b2e      	ldr	r3, [pc, #184]	; (800b25c <xPortStartScheduler+0x12c>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	3b01      	subs	r3, #1
 800b1a8:	4a2c      	ldr	r2, [pc, #176]	; (800b25c <xPortStartScheduler+0x12c>)
 800b1aa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b1ac:	78fb      	ldrb	r3, [r7, #3]
 800b1ae:	b2db      	uxtb	r3, r3
 800b1b0:	005b      	lsls	r3, r3, #1
 800b1b2:	b2db      	uxtb	r3, r3
 800b1b4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b1b6:	78fb      	ldrb	r3, [r7, #3]
 800b1b8:	b2db      	uxtb	r3, r3
 800b1ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1be:	2b80      	cmp	r3, #128	; 0x80
 800b1c0:	d0ef      	beq.n	800b1a2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b1c2:	4b26      	ldr	r3, [pc, #152]	; (800b25c <xPortStartScheduler+0x12c>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f1c3 0307 	rsb	r3, r3, #7
 800b1ca:	2b04      	cmp	r3, #4
 800b1cc:	d009      	beq.n	800b1e2 <xPortStartScheduler+0xb2>
 800b1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d2:	f383 8811 	msr	BASEPRI, r3
 800b1d6:	f3bf 8f6f 	isb	sy
 800b1da:	f3bf 8f4f 	dsb	sy
 800b1de:	60bb      	str	r3, [r7, #8]
 800b1e0:	e7fe      	b.n	800b1e0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b1e2:	4b1e      	ldr	r3, [pc, #120]	; (800b25c <xPortStartScheduler+0x12c>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	021b      	lsls	r3, r3, #8
 800b1e8:	4a1c      	ldr	r2, [pc, #112]	; (800b25c <xPortStartScheduler+0x12c>)
 800b1ea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b1ec:	4b1b      	ldr	r3, [pc, #108]	; (800b25c <xPortStartScheduler+0x12c>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b1f4:	4a19      	ldr	r2, [pc, #100]	; (800b25c <xPortStartScheduler+0x12c>)
 800b1f6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	b2da      	uxtb	r2, r3
 800b1fc:	697b      	ldr	r3, [r7, #20]
 800b1fe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b200:	4b17      	ldr	r3, [pc, #92]	; (800b260 <xPortStartScheduler+0x130>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	4a16      	ldr	r2, [pc, #88]	; (800b260 <xPortStartScheduler+0x130>)
 800b206:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b20a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b20c:	4b14      	ldr	r3, [pc, #80]	; (800b260 <xPortStartScheduler+0x130>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	4a13      	ldr	r2, [pc, #76]	; (800b260 <xPortStartScheduler+0x130>)
 800b212:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b216:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b218:	f000 f8d6 	bl	800b3c8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b21c:	4b11      	ldr	r3, [pc, #68]	; (800b264 <xPortStartScheduler+0x134>)
 800b21e:	2200      	movs	r2, #0
 800b220:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b222:	f000 f8f5 	bl	800b410 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b226:	4b10      	ldr	r3, [pc, #64]	; (800b268 <xPortStartScheduler+0x138>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	4a0f      	ldr	r2, [pc, #60]	; (800b268 <xPortStartScheduler+0x138>)
 800b22c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b230:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b232:	f7ff ff69 	bl	800b108 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b236:	f7ff fa7b 	bl	800a730 <vTaskSwitchContext>
	prvTaskExitError();
 800b23a:	f7ff ff27 	bl	800b08c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b23e:	2300      	movs	r3, #0
}
 800b240:	4618      	mov	r0, r3
 800b242:	3718      	adds	r7, #24
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}
 800b248:	e000ed00 	.word	0xe000ed00
 800b24c:	410fc271 	.word	0x410fc271
 800b250:	410fc270 	.word	0x410fc270
 800b254:	e000e400 	.word	0xe000e400
 800b258:	2000081c 	.word	0x2000081c
 800b25c:	20000820 	.word	0x20000820
 800b260:	e000ed20 	.word	0xe000ed20
 800b264:	20000008 	.word	0x20000008
 800b268:	e000ef34 	.word	0xe000ef34

0800b26c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b26c:	b480      	push	{r7}
 800b26e:	b083      	sub	sp, #12
 800b270:	af00      	add	r7, sp, #0
 800b272:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b276:	f383 8811 	msr	BASEPRI, r3
 800b27a:	f3bf 8f6f 	isb	sy
 800b27e:	f3bf 8f4f 	dsb	sy
 800b282:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b284:	4b0e      	ldr	r3, [pc, #56]	; (800b2c0 <vPortEnterCritical+0x54>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	3301      	adds	r3, #1
 800b28a:	4a0d      	ldr	r2, [pc, #52]	; (800b2c0 <vPortEnterCritical+0x54>)
 800b28c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b28e:	4b0c      	ldr	r3, [pc, #48]	; (800b2c0 <vPortEnterCritical+0x54>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	2b01      	cmp	r3, #1
 800b294:	d10e      	bne.n	800b2b4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b296:	4b0b      	ldr	r3, [pc, #44]	; (800b2c4 <vPortEnterCritical+0x58>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	b2db      	uxtb	r3, r3
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d009      	beq.n	800b2b4 <vPortEnterCritical+0x48>
 800b2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2a4:	f383 8811 	msr	BASEPRI, r3
 800b2a8:	f3bf 8f6f 	isb	sy
 800b2ac:	f3bf 8f4f 	dsb	sy
 800b2b0:	603b      	str	r3, [r7, #0]
 800b2b2:	e7fe      	b.n	800b2b2 <vPortEnterCritical+0x46>
	}
}
 800b2b4:	bf00      	nop
 800b2b6:	370c      	adds	r7, #12
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2be:	4770      	bx	lr
 800b2c0:	20000008 	.word	0x20000008
 800b2c4:	e000ed04 	.word	0xe000ed04

0800b2c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b083      	sub	sp, #12
 800b2cc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b2ce:	4b11      	ldr	r3, [pc, #68]	; (800b314 <vPortExitCritical+0x4c>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d109      	bne.n	800b2ea <vPortExitCritical+0x22>
 800b2d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2da:	f383 8811 	msr	BASEPRI, r3
 800b2de:	f3bf 8f6f 	isb	sy
 800b2e2:	f3bf 8f4f 	dsb	sy
 800b2e6:	607b      	str	r3, [r7, #4]
 800b2e8:	e7fe      	b.n	800b2e8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800b2ea:	4b0a      	ldr	r3, [pc, #40]	; (800b314 <vPortExitCritical+0x4c>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	3b01      	subs	r3, #1
 800b2f0:	4a08      	ldr	r2, [pc, #32]	; (800b314 <vPortExitCritical+0x4c>)
 800b2f2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b2f4:	4b07      	ldr	r3, [pc, #28]	; (800b314 <vPortExitCritical+0x4c>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d104      	bne.n	800b306 <vPortExitCritical+0x3e>
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800b306:	bf00      	nop
 800b308:	370c      	adds	r7, #12
 800b30a:	46bd      	mov	sp, r7
 800b30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b310:	4770      	bx	lr
 800b312:	bf00      	nop
 800b314:	20000008 	.word	0x20000008
	...

0800b320 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b320:	f3ef 8009 	mrs	r0, PSP
 800b324:	f3bf 8f6f 	isb	sy
 800b328:	4b15      	ldr	r3, [pc, #84]	; (800b380 <pxCurrentTCBConst>)
 800b32a:	681a      	ldr	r2, [r3, #0]
 800b32c:	f01e 0f10 	tst.w	lr, #16
 800b330:	bf08      	it	eq
 800b332:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b336:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b33a:	6010      	str	r0, [r2, #0]
 800b33c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b340:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b344:	f380 8811 	msr	BASEPRI, r0
 800b348:	f3bf 8f4f 	dsb	sy
 800b34c:	f3bf 8f6f 	isb	sy
 800b350:	f7ff f9ee 	bl	800a730 <vTaskSwitchContext>
 800b354:	f04f 0000 	mov.w	r0, #0
 800b358:	f380 8811 	msr	BASEPRI, r0
 800b35c:	bc09      	pop	{r0, r3}
 800b35e:	6819      	ldr	r1, [r3, #0]
 800b360:	6808      	ldr	r0, [r1, #0]
 800b362:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b366:	f01e 0f10 	tst.w	lr, #16
 800b36a:	bf08      	it	eq
 800b36c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b370:	f380 8809 	msr	PSP, r0
 800b374:	f3bf 8f6f 	isb	sy
 800b378:	4770      	bx	lr
 800b37a:	bf00      	nop
 800b37c:	f3af 8000 	nop.w

0800b380 <pxCurrentTCBConst>:
 800b380:	200006f0 	.word	0x200006f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b384:	bf00      	nop
 800b386:	bf00      	nop

0800b388 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b082      	sub	sp, #8
 800b38c:	af00      	add	r7, sp, #0
	__asm volatile
 800b38e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b392:	f383 8811 	msr	BASEPRI, r3
 800b396:	f3bf 8f6f 	isb	sy
 800b39a:	f3bf 8f4f 	dsb	sy
 800b39e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b3a0:	f7ff f90a 	bl	800a5b8 <xTaskIncrementTick>
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d003      	beq.n	800b3b2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b3aa:	4b06      	ldr	r3, [pc, #24]	; (800b3c4 <xPortSysTickHandler+0x3c>)
 800b3ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3b0:	601a      	str	r2, [r3, #0]
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800b3bc:	bf00      	nop
 800b3be:	3708      	adds	r7, #8
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}
 800b3c4:	e000ed04 	.word	0xe000ed04

0800b3c8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b3c8:	b480      	push	{r7}
 800b3ca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b3cc:	4b0b      	ldr	r3, [pc, #44]	; (800b3fc <vPortSetupTimerInterrupt+0x34>)
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b3d2:	4b0b      	ldr	r3, [pc, #44]	; (800b400 <vPortSetupTimerInterrupt+0x38>)
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b3d8:	4b0a      	ldr	r3, [pc, #40]	; (800b404 <vPortSetupTimerInterrupt+0x3c>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	4a0a      	ldr	r2, [pc, #40]	; (800b408 <vPortSetupTimerInterrupt+0x40>)
 800b3de:	fba2 2303 	umull	r2, r3, r2, r3
 800b3e2:	099b      	lsrs	r3, r3, #6
 800b3e4:	4a09      	ldr	r2, [pc, #36]	; (800b40c <vPortSetupTimerInterrupt+0x44>)
 800b3e6:	3b01      	subs	r3, #1
 800b3e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b3ea:	4b04      	ldr	r3, [pc, #16]	; (800b3fc <vPortSetupTimerInterrupt+0x34>)
 800b3ec:	2207      	movs	r2, #7
 800b3ee:	601a      	str	r2, [r3, #0]
}
 800b3f0:	bf00      	nop
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f8:	4770      	bx	lr
 800b3fa:	bf00      	nop
 800b3fc:	e000e010 	.word	0xe000e010
 800b400:	e000e018 	.word	0xe000e018
 800b404:	20000638 	.word	0x20000638
 800b408:	10624dd3 	.word	0x10624dd3
 800b40c:	e000e014 	.word	0xe000e014

0800b410 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b410:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b420 <vPortEnableVFP+0x10>
 800b414:	6801      	ldr	r1, [r0, #0]
 800b416:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b41a:	6001      	str	r1, [r0, #0]
 800b41c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b41e:	bf00      	nop
 800b420:	e000ed88 	.word	0xe000ed88

0800b424 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b424:	b480      	push	{r7}
 800b426:	b085      	sub	sp, #20
 800b428:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b42a:	f3ef 8305 	mrs	r3, IPSR
 800b42e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	2b0f      	cmp	r3, #15
 800b434:	d913      	bls.n	800b45e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b436:	4a16      	ldr	r2, [pc, #88]	; (800b490 <vPortValidateInterruptPriority+0x6c>)
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	4413      	add	r3, r2
 800b43c:	781b      	ldrb	r3, [r3, #0]
 800b43e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b440:	4b14      	ldr	r3, [pc, #80]	; (800b494 <vPortValidateInterruptPriority+0x70>)
 800b442:	781b      	ldrb	r3, [r3, #0]
 800b444:	7afa      	ldrb	r2, [r7, #11]
 800b446:	429a      	cmp	r2, r3
 800b448:	d209      	bcs.n	800b45e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800b44a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b44e:	f383 8811 	msr	BASEPRI, r3
 800b452:	f3bf 8f6f 	isb	sy
 800b456:	f3bf 8f4f 	dsb	sy
 800b45a:	607b      	str	r3, [r7, #4]
 800b45c:	e7fe      	b.n	800b45c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b45e:	4b0e      	ldr	r3, [pc, #56]	; (800b498 <vPortValidateInterruptPriority+0x74>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b466:	4b0d      	ldr	r3, [pc, #52]	; (800b49c <vPortValidateInterruptPriority+0x78>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	429a      	cmp	r2, r3
 800b46c:	d909      	bls.n	800b482 <vPortValidateInterruptPriority+0x5e>
 800b46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b472:	f383 8811 	msr	BASEPRI, r3
 800b476:	f3bf 8f6f 	isb	sy
 800b47a:	f3bf 8f4f 	dsb	sy
 800b47e:	603b      	str	r3, [r7, #0]
 800b480:	e7fe      	b.n	800b480 <vPortValidateInterruptPriority+0x5c>
	}
 800b482:	bf00      	nop
 800b484:	3714      	adds	r7, #20
 800b486:	46bd      	mov	sp, r7
 800b488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48c:	4770      	bx	lr
 800b48e:	bf00      	nop
 800b490:	e000e3f0 	.word	0xe000e3f0
 800b494:	2000081c 	.word	0x2000081c
 800b498:	e000ed0c 	.word	0xe000ed0c
 800b49c:	20000820 	.word	0x20000820

0800b4a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b08a      	sub	sp, #40	; 0x28
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b4ac:	f7fe ffb8 	bl	800a420 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b4b0:	4b57      	ldr	r3, [pc, #348]	; (800b610 <pvPortMalloc+0x170>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d101      	bne.n	800b4bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b4b8:	f000 f90c 	bl	800b6d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b4bc:	4b55      	ldr	r3, [pc, #340]	; (800b614 <pvPortMalloc+0x174>)
 800b4be:	681a      	ldr	r2, [r3, #0]
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	4013      	ands	r3, r2
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	f040 808c 	bne.w	800b5e2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d01c      	beq.n	800b50a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800b4d0:	2208      	movs	r2, #8
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	4413      	add	r3, r2
 800b4d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f003 0307 	and.w	r3, r3, #7
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d013      	beq.n	800b50a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	f023 0307 	bic.w	r3, r3, #7
 800b4e8:	3308      	adds	r3, #8
 800b4ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f003 0307 	and.w	r3, r3, #7
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d009      	beq.n	800b50a <pvPortMalloc+0x6a>
 800b4f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4fa:	f383 8811 	msr	BASEPRI, r3
 800b4fe:	f3bf 8f6f 	isb	sy
 800b502:	f3bf 8f4f 	dsb	sy
 800b506:	617b      	str	r3, [r7, #20]
 800b508:	e7fe      	b.n	800b508 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d068      	beq.n	800b5e2 <pvPortMalloc+0x142>
 800b510:	4b41      	ldr	r3, [pc, #260]	; (800b618 <pvPortMalloc+0x178>)
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	687a      	ldr	r2, [r7, #4]
 800b516:	429a      	cmp	r2, r3
 800b518:	d863      	bhi.n	800b5e2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b51a:	4b40      	ldr	r3, [pc, #256]	; (800b61c <pvPortMalloc+0x17c>)
 800b51c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b51e:	4b3f      	ldr	r3, [pc, #252]	; (800b61c <pvPortMalloc+0x17c>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b524:	e004      	b.n	800b530 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800b526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b528:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b532:	685b      	ldr	r3, [r3, #4]
 800b534:	687a      	ldr	r2, [r7, #4]
 800b536:	429a      	cmp	r2, r3
 800b538:	d903      	bls.n	800b542 <pvPortMalloc+0xa2>
 800b53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d1f1      	bne.n	800b526 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b542:	4b33      	ldr	r3, [pc, #204]	; (800b610 <pvPortMalloc+0x170>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b548:	429a      	cmp	r2, r3
 800b54a:	d04a      	beq.n	800b5e2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b54c:	6a3b      	ldr	r3, [r7, #32]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	2208      	movs	r2, #8
 800b552:	4413      	add	r3, r2
 800b554:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b558:	681a      	ldr	r2, [r3, #0]
 800b55a:	6a3b      	ldr	r3, [r7, #32]
 800b55c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b55e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b560:	685a      	ldr	r2, [r3, #4]
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	1ad2      	subs	r2, r2, r3
 800b566:	2308      	movs	r3, #8
 800b568:	005b      	lsls	r3, r3, #1
 800b56a:	429a      	cmp	r2, r3
 800b56c:	d91e      	bls.n	800b5ac <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b56e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	4413      	add	r3, r2
 800b574:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b576:	69bb      	ldr	r3, [r7, #24]
 800b578:	f003 0307 	and.w	r3, r3, #7
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d009      	beq.n	800b594 <pvPortMalloc+0xf4>
 800b580:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b584:	f383 8811 	msr	BASEPRI, r3
 800b588:	f3bf 8f6f 	isb	sy
 800b58c:	f3bf 8f4f 	dsb	sy
 800b590:	613b      	str	r3, [r7, #16]
 800b592:	e7fe      	b.n	800b592 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b596:	685a      	ldr	r2, [r3, #4]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	1ad2      	subs	r2, r2, r3
 800b59c:	69bb      	ldr	r3, [r7, #24]
 800b59e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5a2:	687a      	ldr	r2, [r7, #4]
 800b5a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b5a6:	69b8      	ldr	r0, [r7, #24]
 800b5a8:	f000 f8f6 	bl	800b798 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b5ac:	4b1a      	ldr	r3, [pc, #104]	; (800b618 <pvPortMalloc+0x178>)
 800b5ae:	681a      	ldr	r2, [r3, #0]
 800b5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5b2:	685b      	ldr	r3, [r3, #4]
 800b5b4:	1ad3      	subs	r3, r2, r3
 800b5b6:	4a18      	ldr	r2, [pc, #96]	; (800b618 <pvPortMalloc+0x178>)
 800b5b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b5ba:	4b17      	ldr	r3, [pc, #92]	; (800b618 <pvPortMalloc+0x178>)
 800b5bc:	681a      	ldr	r2, [r3, #0]
 800b5be:	4b18      	ldr	r3, [pc, #96]	; (800b620 <pvPortMalloc+0x180>)
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	429a      	cmp	r2, r3
 800b5c4:	d203      	bcs.n	800b5ce <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b5c6:	4b14      	ldr	r3, [pc, #80]	; (800b618 <pvPortMalloc+0x178>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	4a15      	ldr	r2, [pc, #84]	; (800b620 <pvPortMalloc+0x180>)
 800b5cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d0:	685a      	ldr	r2, [r3, #4]
 800b5d2:	4b10      	ldr	r3, [pc, #64]	; (800b614 <pvPortMalloc+0x174>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	431a      	orrs	r2, r3
 800b5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5de:	2200      	movs	r2, #0
 800b5e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b5e2:	f7fe ff2b 	bl	800a43c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b5e6:	69fb      	ldr	r3, [r7, #28]
 800b5e8:	f003 0307 	and.w	r3, r3, #7
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d009      	beq.n	800b604 <pvPortMalloc+0x164>
 800b5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5f4:	f383 8811 	msr	BASEPRI, r3
 800b5f8:	f3bf 8f6f 	isb	sy
 800b5fc:	f3bf 8f4f 	dsb	sy
 800b600:	60fb      	str	r3, [r7, #12]
 800b602:	e7fe      	b.n	800b602 <pvPortMalloc+0x162>
	return pvReturn;
 800b604:	69fb      	ldr	r3, [r7, #28]
}
 800b606:	4618      	mov	r0, r3
 800b608:	3728      	adds	r7, #40	; 0x28
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}
 800b60e:	bf00      	nop
 800b610:	2000442c 	.word	0x2000442c
 800b614:	20004438 	.word	0x20004438
 800b618:	20004430 	.word	0x20004430
 800b61c:	20004424 	.word	0x20004424
 800b620:	20004434 	.word	0x20004434

0800b624 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b086      	sub	sp, #24
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d046      	beq.n	800b6c4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b636:	2308      	movs	r3, #8
 800b638:	425b      	negs	r3, r3
 800b63a:	697a      	ldr	r2, [r7, #20]
 800b63c:	4413      	add	r3, r2
 800b63e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b640:	697b      	ldr	r3, [r7, #20]
 800b642:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b644:	693b      	ldr	r3, [r7, #16]
 800b646:	685a      	ldr	r2, [r3, #4]
 800b648:	4b20      	ldr	r3, [pc, #128]	; (800b6cc <vPortFree+0xa8>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	4013      	ands	r3, r2
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d109      	bne.n	800b666 <vPortFree+0x42>
 800b652:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b656:	f383 8811 	msr	BASEPRI, r3
 800b65a:	f3bf 8f6f 	isb	sy
 800b65e:	f3bf 8f4f 	dsb	sy
 800b662:	60fb      	str	r3, [r7, #12]
 800b664:	e7fe      	b.n	800b664 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b666:	693b      	ldr	r3, [r7, #16]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d009      	beq.n	800b682 <vPortFree+0x5e>
 800b66e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b672:	f383 8811 	msr	BASEPRI, r3
 800b676:	f3bf 8f6f 	isb	sy
 800b67a:	f3bf 8f4f 	dsb	sy
 800b67e:	60bb      	str	r3, [r7, #8]
 800b680:	e7fe      	b.n	800b680 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b682:	693b      	ldr	r3, [r7, #16]
 800b684:	685a      	ldr	r2, [r3, #4]
 800b686:	4b11      	ldr	r3, [pc, #68]	; (800b6cc <vPortFree+0xa8>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	4013      	ands	r3, r2
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d019      	beq.n	800b6c4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b690:	693b      	ldr	r3, [r7, #16]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d115      	bne.n	800b6c4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b698:	693b      	ldr	r3, [r7, #16]
 800b69a:	685a      	ldr	r2, [r3, #4]
 800b69c:	4b0b      	ldr	r3, [pc, #44]	; (800b6cc <vPortFree+0xa8>)
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	43db      	mvns	r3, r3
 800b6a2:	401a      	ands	r2, r3
 800b6a4:	693b      	ldr	r3, [r7, #16]
 800b6a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b6a8:	f7fe feba 	bl	800a420 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b6ac:	693b      	ldr	r3, [r7, #16]
 800b6ae:	685a      	ldr	r2, [r3, #4]
 800b6b0:	4b07      	ldr	r3, [pc, #28]	; (800b6d0 <vPortFree+0xac>)
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	4413      	add	r3, r2
 800b6b6:	4a06      	ldr	r2, [pc, #24]	; (800b6d0 <vPortFree+0xac>)
 800b6b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b6ba:	6938      	ldr	r0, [r7, #16]
 800b6bc:	f000 f86c 	bl	800b798 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b6c0:	f7fe febc 	bl	800a43c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b6c4:	bf00      	nop
 800b6c6:	3718      	adds	r7, #24
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}
 800b6cc:	20004438 	.word	0x20004438
 800b6d0:	20004430 	.word	0x20004430

0800b6d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	b085      	sub	sp, #20
 800b6d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b6da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b6de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b6e0:	4b27      	ldr	r3, [pc, #156]	; (800b780 <prvHeapInit+0xac>)
 800b6e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	f003 0307 	and.w	r3, r3, #7
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d00c      	beq.n	800b708 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	3307      	adds	r3, #7
 800b6f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	f023 0307 	bic.w	r3, r3, #7
 800b6fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b6fc:	68ba      	ldr	r2, [r7, #8]
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	1ad3      	subs	r3, r2, r3
 800b702:	4a1f      	ldr	r2, [pc, #124]	; (800b780 <prvHeapInit+0xac>)
 800b704:	4413      	add	r3, r2
 800b706:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b70c:	4a1d      	ldr	r2, [pc, #116]	; (800b784 <prvHeapInit+0xb0>)
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b712:	4b1c      	ldr	r3, [pc, #112]	; (800b784 <prvHeapInit+0xb0>)
 800b714:	2200      	movs	r2, #0
 800b716:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	68ba      	ldr	r2, [r7, #8]
 800b71c:	4413      	add	r3, r2
 800b71e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b720:	2208      	movs	r2, #8
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	1a9b      	subs	r3, r3, r2
 800b726:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	f023 0307 	bic.w	r3, r3, #7
 800b72e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	4a15      	ldr	r2, [pc, #84]	; (800b788 <prvHeapInit+0xb4>)
 800b734:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b736:	4b14      	ldr	r3, [pc, #80]	; (800b788 <prvHeapInit+0xb4>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	2200      	movs	r2, #0
 800b73c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b73e:	4b12      	ldr	r3, [pc, #72]	; (800b788 <prvHeapInit+0xb4>)
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	2200      	movs	r2, #0
 800b744:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	68fa      	ldr	r2, [r7, #12]
 800b74e:	1ad2      	subs	r2, r2, r3
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b754:	4b0c      	ldr	r3, [pc, #48]	; (800b788 <prvHeapInit+0xb4>)
 800b756:	681a      	ldr	r2, [r3, #0]
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	685b      	ldr	r3, [r3, #4]
 800b760:	4a0a      	ldr	r2, [pc, #40]	; (800b78c <prvHeapInit+0xb8>)
 800b762:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b764:	683b      	ldr	r3, [r7, #0]
 800b766:	685b      	ldr	r3, [r3, #4]
 800b768:	4a09      	ldr	r2, [pc, #36]	; (800b790 <prvHeapInit+0xbc>)
 800b76a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b76c:	4b09      	ldr	r3, [pc, #36]	; (800b794 <prvHeapInit+0xc0>)
 800b76e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b772:	601a      	str	r2, [r3, #0]
}
 800b774:	bf00      	nop
 800b776:	3714      	adds	r7, #20
 800b778:	46bd      	mov	sp, r7
 800b77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77e:	4770      	bx	lr
 800b780:	20000824 	.word	0x20000824
 800b784:	20004424 	.word	0x20004424
 800b788:	2000442c 	.word	0x2000442c
 800b78c:	20004434 	.word	0x20004434
 800b790:	20004430 	.word	0x20004430
 800b794:	20004438 	.word	0x20004438

0800b798 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b798:	b480      	push	{r7}
 800b79a:	b085      	sub	sp, #20
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b7a0:	4b28      	ldr	r3, [pc, #160]	; (800b844 <prvInsertBlockIntoFreeList+0xac>)
 800b7a2:	60fb      	str	r3, [r7, #12]
 800b7a4:	e002      	b.n	800b7ac <prvInsertBlockIntoFreeList+0x14>
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	60fb      	str	r3, [r7, #12]
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	687a      	ldr	r2, [r7, #4]
 800b7b2:	429a      	cmp	r2, r3
 800b7b4:	d8f7      	bhi.n	800b7a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	685b      	ldr	r3, [r3, #4]
 800b7be:	68ba      	ldr	r2, [r7, #8]
 800b7c0:	4413      	add	r3, r2
 800b7c2:	687a      	ldr	r2, [r7, #4]
 800b7c4:	429a      	cmp	r2, r3
 800b7c6:	d108      	bne.n	800b7da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	685a      	ldr	r2, [r3, #4]
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	685b      	ldr	r3, [r3, #4]
 800b7d0:	441a      	add	r2, r3
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	685b      	ldr	r3, [r3, #4]
 800b7e2:	68ba      	ldr	r2, [r7, #8]
 800b7e4:	441a      	add	r2, r3
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	429a      	cmp	r2, r3
 800b7ec:	d118      	bne.n	800b820 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	681a      	ldr	r2, [r3, #0]
 800b7f2:	4b15      	ldr	r3, [pc, #84]	; (800b848 <prvInsertBlockIntoFreeList+0xb0>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	429a      	cmp	r2, r3
 800b7f8:	d00d      	beq.n	800b816 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	685a      	ldr	r2, [r3, #4]
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	685b      	ldr	r3, [r3, #4]
 800b804:	441a      	add	r2, r3
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	681a      	ldr	r2, [r3, #0]
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	601a      	str	r2, [r3, #0]
 800b814:	e008      	b.n	800b828 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b816:	4b0c      	ldr	r3, [pc, #48]	; (800b848 <prvInsertBlockIntoFreeList+0xb0>)
 800b818:	681a      	ldr	r2, [r3, #0]
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	601a      	str	r2, [r3, #0]
 800b81e:	e003      	b.n	800b828 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	681a      	ldr	r2, [r3, #0]
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b828:	68fa      	ldr	r2, [r7, #12]
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	429a      	cmp	r2, r3
 800b82e:	d002      	beq.n	800b836 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	687a      	ldr	r2, [r7, #4]
 800b834:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b836:	bf00      	nop
 800b838:	3714      	adds	r7, #20
 800b83a:	46bd      	mov	sp, r7
 800b83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b840:	4770      	bx	lr
 800b842:	bf00      	nop
 800b844:	20004424 	.word	0x20004424
 800b848:	2000442c 	.word	0x2000442c

0800b84c <gpioInit>:
extern QueueHandle_t disSignal;


extern struct detectSetStruct detectSetValue;
void gpioInit(void)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b086      	sub	sp, #24
 800b850:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b852:	1d3b      	adds	r3, r7, #4
 800b854:	2200      	movs	r2, #0
 800b856:	601a      	str	r2, [r3, #0]
 800b858:	605a      	str	r2, [r3, #4]
 800b85a:	609a      	str	r2, [r3, #8]
 800b85c:	60da      	str	r2, [r3, #12]
 800b85e:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800b860:	2300      	movs	r3, #0
 800b862:	603b      	str	r3, [r7, #0]
 800b864:	4b10      	ldr	r3, [pc, #64]	; (800b8a8 <gpioInit+0x5c>)
 800b866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b868:	4a0f      	ldr	r2, [pc, #60]	; (800b8a8 <gpioInit+0x5c>)
 800b86a:	f043 0301 	orr.w	r3, r3, #1
 800b86e:	6313      	str	r3, [r2, #48]	; 0x30
 800b870:	4b0d      	ldr	r3, [pc, #52]	; (800b8a8 <gpioInit+0x5c>)
 800b872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b874:	f003 0301 	and.w	r3, r3, #1
 800b878:	603b      	str	r3, [r7, #0]
 800b87a:	683b      	ldr	r3, [r7, #0]
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 800b87c:	2302      	movs	r3, #2
 800b87e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b880:	2301      	movs	r3, #1
 800b882:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b884:	2301      	movs	r3, #1
 800b886:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b888:	2300      	movs	r3, #0
 800b88a:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b88c:	1d3b      	adds	r3, r7, #4
 800b88e:	4619      	mov	r1, r3
 800b890:	4806      	ldr	r0, [pc, #24]	; (800b8ac <gpioInit+0x60>)
 800b892:	f7f6 fa95 	bl	8001dc0 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, SET);
 800b896:	2201      	movs	r2, #1
 800b898:	2102      	movs	r1, #2
 800b89a:	4804      	ldr	r0, [pc, #16]	; (800b8ac <gpioInit+0x60>)
 800b89c:	f7f6 fc42 	bl	8002124 <HAL_GPIO_WritePin>
}
 800b8a0:	bf00      	nop
 800b8a2:	3718      	adds	r7, #24
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}
 800b8a8:	40023800 	.word	0x40023800
 800b8ac:	40020000 	.word	0x40020000

0800b8b0 <sendEnable>:

void sendEnable(void){
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, SET);
 800b8b4:	2201      	movs	r2, #1
 800b8b6:	2102      	movs	r1, #2
 800b8b8:	4802      	ldr	r0, [pc, #8]	; (800b8c4 <sendEnable+0x14>)
 800b8ba:	f7f6 fc33 	bl	8002124 <HAL_GPIO_WritePin>
}
 800b8be:	bf00      	nop
 800b8c0:	bd80      	pop	{r7, pc}
 800b8c2:	bf00      	nop
 800b8c4:	40020000 	.word	0x40020000

0800b8c8 <sendDIsEnable>:

void sendDIsEnable(void){
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, RESET);
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	2102      	movs	r1, #2
 800b8d0:	4802      	ldr	r0, [pc, #8]	; (800b8dc <sendDIsEnable+0x14>)
 800b8d2:	f7f6 fc27 	bl	8002124 <HAL_GPIO_WritePin>
}
 800b8d6:	bf00      	nop
 800b8d8:	bd80      	pop	{r7, pc}
 800b8da:	bf00      	nop
 800b8dc:	40020000 	.word	0x40020000

0800b8e0 <setLimit>:
};
struct uartStruct  uartRecieveInfo;



void setLimit(int func,int value){
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b082      	sub	sp, #8
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
 800b8e8:	6039      	str	r1, [r7, #0]
	switch(func){
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	2b01      	cmp	r3, #1
 800b8ee:	d002      	beq.n	800b8f6 <setLimit+0x16>
 800b8f0:	2b02      	cmp	r3, #2
 800b8f2:	d004      	beq.n	800b8fe <setLimit+0x1e>
 800b8f4:	e007      	b.n	800b906 <setLimit+0x26>
		case 1: deviceOwnInfo.highPercent = value; break;
 800b8f6:	4a0c      	ldr	r2, [pc, #48]	; (800b928 <setLimit+0x48>)
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b8fc:	e003      	b.n	800b906 <setLimit+0x26>
		case 2: deviceOwnInfo.lowPercent = value; break;
 800b8fe:	4a0a      	ldr	r2, [pc, #40]	; (800b928 <setLimit+0x48>)
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	6313      	str	r3, [r2, #48]	; 0x30
 800b904:	bf00      	nop
	}
	if(pageInfoList[5].isDis)
 800b906:	4b09      	ldr	r3, [pc, #36]	; (800b92c <setLimit+0x4c>)
 800b908:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d006      	beq.n	800b91e <setLimit+0x3e>
		xSemaphoreGive(disSignal);
 800b910:	4b07      	ldr	r3, [pc, #28]	; (800b930 <setLimit+0x50>)
 800b912:	6818      	ldr	r0, [r3, #0]
 800b914:	2300      	movs	r3, #0
 800b916:	2200      	movs	r2, #0
 800b918:	2100      	movs	r1, #0
 800b91a:	f7fd fd7b 	bl	8009414 <xQueueGenericSend>
}
 800b91e:	bf00      	nop
 800b920:	3708      	adds	r7, #8
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}
 800b926:	bf00      	nop
 800b928:	2000017c 	.word	0x2000017c
 800b92c:	20000200 	.word	0x20000200
 800b930:	20006cd0 	.word	0x20006cd0

0800b934 <locationSolve>:

void locationSolve(char * x){
 800b934:	b580      	push	{r7, lr}
 800b936:	b082      	sub	sp, #8
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
	memcpy(deviceOwnInfo.loc, x, uartRecieveInfo.length);
 800b93c:	4b09      	ldr	r3, [pc, #36]	; (800b964 <locationSolve+0x30>)
 800b93e:	685b      	ldr	r3, [r3, #4]
 800b940:	461a      	mov	r2, r3
 800b942:	6879      	ldr	r1, [r7, #4]
 800b944:	4808      	ldr	r0, [pc, #32]	; (800b968 <locationSolve+0x34>)
 800b946:	f006 fe66 	bl	8012616 <memcpy>
	deviceOwnInfo.locInfoLenth = uartRecieveInfo.length/2;
 800b94a:	4b06      	ldr	r3, [pc, #24]	; (800b964 <locationSolve+0x30>)
 800b94c:	685b      	ldr	r3, [r3, #4]
 800b94e:	0fda      	lsrs	r2, r3, #31
 800b950:	4413      	add	r3, r2
 800b952:	105b      	asrs	r3, r3, #1
 800b954:	461a      	mov	r2, r3
 800b956:	4b05      	ldr	r3, [pc, #20]	; (800b96c <locationSolve+0x38>)
 800b958:	619a      	str	r2, [r3, #24]
}
 800b95a:	bf00      	nop
 800b95c:	3708      	adds	r7, #8
 800b95e:	46bd      	mov	sp, r7
 800b960:	bd80      	pop	{r7, pc}
 800b962:	bf00      	nop
 800b964:	20006b4c 	.word	0x20006b4c
 800b968:	20000180 	.word	0x20000180
 800b96c:	2000017c 	.word	0x2000017c

0800b970 <uartDataSend>:
	.zeroDemarcateFlag = 1,
	.spanDemarcateFlag = 1,
};
struct deviceInfoInUart uartSendInfoOther;

void uartDataSend(void){
 800b970:	b580      	push	{r7, lr}
 800b972:	b09c      	sub	sp, #112	; 0x70
 800b974:	af00      	add	r7, sp, #0
	static int x = 0;
	x++;
 800b976:	4bb0      	ldr	r3, [pc, #704]	; (800bc38 <uartDataSend+0x2c8>)
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	3301      	adds	r3, #1
 800b97c:	4aae      	ldr	r2, [pc, #696]	; (800bc38 <uartDataSend+0x2c8>)
 800b97e:	6013      	str	r3, [r2, #0]
	//高浓度查询
	if(!uartSendInfo.highLimitFlag&&x==1){
 800b980:	4bae      	ldr	r3, [pc, #696]	; (800bc3c <uartDataSend+0x2cc>)
 800b982:	68db      	ldr	r3, [r3, #12]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d116      	bne.n	800b9b6 <uartDataSend+0x46>
 800b988:	4bab      	ldr	r3, [pc, #684]	; (800bc38 <uartDataSend+0x2c8>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	2b01      	cmp	r3, #1
 800b98e:	d112      	bne.n	800b9b6 <uartDataSend+0x46>
		uint8_t  dataSend[] = {0x76, 0xf5, 0x01, 0x00, 0x00, 0x45, 0xcc};
 800b990:	4aab      	ldr	r2, [pc, #684]	; (800bc40 <uartDataSend+0x2d0>)
 800b992:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b996:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b99a:	6018      	str	r0, [r3, #0]
 800b99c:	3304      	adds	r3, #4
 800b99e:	8019      	strh	r1, [r3, #0]
 800b9a0:	3302      	adds	r3, #2
 800b9a2:	0c0a      	lsrs	r2, r1, #16
 800b9a4:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, dataSend, sizeof(dataSend), 1000);
 800b9a6:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800b9aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b9ae:	2207      	movs	r2, #7
 800b9b0:	48a4      	ldr	r0, [pc, #656]	; (800bc44 <uartDataSend+0x2d4>)
 800b9b2:	f7f8 fb89 	bl	80040c8 <HAL_UART_Transmit>
	}
	//低浓度查询
	if(!uartSendInfo.lowLimitFlag&&x==2){
 800b9b6:	4ba1      	ldr	r3, [pc, #644]	; (800bc3c <uartDataSend+0x2cc>)
 800b9b8:	691b      	ldr	r3, [r3, #16]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d116      	bne.n	800b9ec <uartDataSend+0x7c>
 800b9be:	4b9e      	ldr	r3, [pc, #632]	; (800bc38 <uartDataSend+0x2c8>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	2b02      	cmp	r3, #2
 800b9c4:	d112      	bne.n	800b9ec <uartDataSend+0x7c>
		uint8_t  dataSend[] = {0x76, 0xf5, 0x02, 0x00, 0x00, 0x45, 0xcc};
 800b9c6:	4aa0      	ldr	r2, [pc, #640]	; (800bc48 <uartDataSend+0x2d8>)
 800b9c8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b9cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b9d0:	6018      	str	r0, [r3, #0]
 800b9d2:	3304      	adds	r3, #4
 800b9d4:	8019      	strh	r1, [r3, #0]
 800b9d6:	3302      	adds	r3, #2
 800b9d8:	0c0a      	lsrs	r2, r1, #16
 800b9da:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, dataSend, sizeof(dataSend), 1000);
 800b9dc:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800b9e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b9e4:	2207      	movs	r2, #7
 800b9e6:	4897      	ldr	r0, [pc, #604]	; (800bc44 <uartDataSend+0x2d4>)
 800b9e8:	f7f8 fb6e 	bl	80040c8 <HAL_UART_Transmit>
	}
	//未收到标定信息
	if(!uartSendInfo.demarcateFlag&&x==3){
 800b9ec:	4b93      	ldr	r3, [pc, #588]	; (800bc3c <uartDataSend+0x2cc>)
 800b9ee:	695b      	ldr	r3, [r3, #20]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d116      	bne.n	800ba22 <uartDataSend+0xb2>
 800b9f4:	4b90      	ldr	r3, [pc, #576]	; (800bc38 <uartDataSend+0x2c8>)
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	2b03      	cmp	r3, #3
 800b9fa:	d112      	bne.n	800ba22 <uartDataSend+0xb2>
		uint8_t  dataSend[] = {0x76, 0xf5, 0x03, 0x00, 0x00, 0x45, 0xcc};
 800b9fc:	4a93      	ldr	r2, [pc, #588]	; (800bc4c <uartDataSend+0x2dc>)
 800b9fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ba02:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ba06:	6018      	str	r0, [r3, #0]
 800ba08:	3304      	adds	r3, #4
 800ba0a:	8019      	strh	r1, [r3, #0]
 800ba0c:	3302      	adds	r3, #2
 800ba0e:	0c0a      	lsrs	r2, r1, #16
 800ba10:	701a      	strb	r2, [r3, #0]
 		HAL_UART_Transmit(&huart2, dataSend, sizeof(dataSend), 1000);
 800ba12:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800ba16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ba1a:	2207      	movs	r2, #7
 800ba1c:	4889      	ldr	r0, [pc, #548]	; (800bc44 <uartDataSend+0x2d4>)
 800ba1e:	f7f8 fb53 	bl	80040c8 <HAL_UART_Transmit>
	}
	if(!uartSendInfo.zeroDemarcateFlag&&x==4){
 800ba22:	4b86      	ldr	r3, [pc, #536]	; (800bc3c <uartDataSend+0x2cc>)
 800ba24:	685b      	ldr	r3, [r3, #4]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d116      	bne.n	800ba58 <uartDataSend+0xe8>
 800ba2a:	4b83      	ldr	r3, [pc, #524]	; (800bc38 <uartDataSend+0x2c8>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	2b04      	cmp	r3, #4
 800ba30:	d112      	bne.n	800ba58 <uartDataSend+0xe8>
		uint8_t  dataSend[] = {0x76, 0xf5, 0x08, 0x00, 0x00, 0x45, 0xcc};
 800ba32:	4a87      	ldr	r2, [pc, #540]	; (800bc50 <uartDataSend+0x2e0>)
 800ba34:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ba38:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ba3c:	6018      	str	r0, [r3, #0]
 800ba3e:	3304      	adds	r3, #4
 800ba40:	8019      	strh	r1, [r3, #0]
 800ba42:	3302      	adds	r3, #2
 800ba44:	0c0a      	lsrs	r2, r1, #16
 800ba46:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, dataSend, sizeof(dataSend), 1000);
 800ba48:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800ba4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ba50:	2207      	movs	r2, #7
 800ba52:	487c      	ldr	r0, [pc, #496]	; (800bc44 <uartDataSend+0x2d4>)
 800ba54:	f7f8 fb38 	bl	80040c8 <HAL_UART_Transmit>
	}
	if(!uartSendInfo.spanDemarcateFlag&&x==5){
 800ba58:	4b78      	ldr	r3, [pc, #480]	; (800bc3c <uartDataSend+0x2cc>)
 800ba5a:	689b      	ldr	r3, [r3, #8]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d116      	bne.n	800ba8e <uartDataSend+0x11e>
 800ba60:	4b75      	ldr	r3, [pc, #468]	; (800bc38 <uartDataSend+0x2c8>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	2b05      	cmp	r3, #5
 800ba66:	d112      	bne.n	800ba8e <uartDataSend+0x11e>
		uint8_t  dataSend[] = {0x76, 0xf5, 0x09, 0x00, 0x03, 0x00,0x00,0x00, 0x45, 0xcc};
 800ba68:	4a7a      	ldr	r2, [pc, #488]	; (800bc54 <uartDataSend+0x2e4>)
 800ba6a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ba6e:	ca07      	ldmia	r2, {r0, r1, r2}
 800ba70:	c303      	stmia	r3!, {r0, r1}
 800ba72:	801a      	strh	r2, [r3, #0]
		dataSend[7] = deviceOwnInfo.spanValue;
 800ba74:	4b78      	ldr	r3, [pc, #480]	; (800bc58 <uartDataSend+0x2e8>)
 800ba76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba78:	b2db      	uxtb	r3, r3
 800ba7a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		HAL_UART_Transmit(&huart2, dataSend, sizeof(dataSend), 1000);
 800ba7e:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800ba82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ba86:	220a      	movs	r2, #10
 800ba88:	486e      	ldr	r0, [pc, #440]	; (800bc44 <uartDataSend+0x2d4>)
 800ba8a:	f7f8 fb1d 	bl	80040c8 <HAL_UART_Transmit>
	}
//	//位置查询
	if(!uartSendInfo.locFlag &&x==11){
 800ba8e:	4b6b      	ldr	r3, [pc, #428]	; (800bc3c <uartDataSend+0x2cc>)
 800ba90:	699b      	ldr	r3, [r3, #24]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d116      	bne.n	800bac4 <uartDataSend+0x154>
 800ba96:	4b68      	ldr	r3, [pc, #416]	; (800bc38 <uartDataSend+0x2c8>)
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	2b0b      	cmp	r3, #11
 800ba9c:	d112      	bne.n	800bac4 <uartDataSend+0x154>
		uint8_t dataSend[] = {0x76, 0xf5, 0x06, 0x00, 0x00, 0x45, 0xcc};
 800ba9e:	4a6f      	ldr	r2, [pc, #444]	; (800bc5c <uartDataSend+0x2ec>)
 800baa0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800baa4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800baa8:	6018      	str	r0, [r3, #0]
 800baaa:	3304      	adds	r3, #4
 800baac:	8019      	strh	r1, [r3, #0]
 800baae:	3302      	adds	r3, #2
 800bab0:	0c0a      	lsrs	r2, r1, #16
 800bab2:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, dataSend, sizeof(dataSend), 1000);
 800bab4:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800bab8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800babc:	2207      	movs	r2, #7
 800babe:	4861      	ldr	r0, [pc, #388]	; (800bc44 <uartDataSend+0x2d4>)
 800bac0:	f7f8 fb02 	bl	80040c8 <HAL_UART_Transmit>
	}
	if(!uartSendInfo.sensorValueFlag&&x==6){
 800bac4:	4b5d      	ldr	r3, [pc, #372]	; (800bc3c <uartDataSend+0x2cc>)
 800bac6:	69db      	ldr	r3, [r3, #28]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d116      	bne.n	800bafa <uartDataSend+0x18a>
 800bacc:	4b5a      	ldr	r3, [pc, #360]	; (800bc38 <uartDataSend+0x2c8>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	2b06      	cmp	r3, #6
 800bad2:	d112      	bne.n	800bafa <uartDataSend+0x18a>
		uint8_t  dataSend[] = {0x76, 0xf5, 0x07, 0x00, 0x00, 0x45, 0xcc};
 800bad4:	4a62      	ldr	r2, [pc, #392]	; (800bc60 <uartDataSend+0x2f0>)
 800bad6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800bada:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bade:	6018      	str	r0, [r3, #0]
 800bae0:	3304      	adds	r3, #4
 800bae2:	8019      	strh	r1, [r3, #0]
 800bae4:	3302      	adds	r3, #2
 800bae6:	0c0a      	lsrs	r2, r1, #16
 800bae8:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, dataSend, sizeof(dataSend), 1000);
 800baea:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800baee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800baf2:	2207      	movs	r2, #7
 800baf4:	4853      	ldr	r0, [pc, #332]	; (800bc44 <uartDataSend+0x2d4>)
 800baf6:	f7f8 fae7 	bl	80040c8 <HAL_UART_Transmit>
	}
	if(!uartSendInfo.unitFlag&&x==7){
 800bafa:	4b50      	ldr	r3, [pc, #320]	; (800bc3c <uartDataSend+0x2cc>)
 800bafc:	6a1b      	ldr	r3, [r3, #32]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d116      	bne.n	800bb30 <uartDataSend+0x1c0>
 800bb02:	4b4d      	ldr	r3, [pc, #308]	; (800bc38 <uartDataSend+0x2c8>)
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	2b07      	cmp	r3, #7
 800bb08:	d112      	bne.n	800bb30 <uartDataSend+0x1c0>
		uint8_t dataSend[] = {0x76, 0xf5, 0x04, 0x00, 0x00, 0x45, 0xcc};
 800bb0a:	4a56      	ldr	r2, [pc, #344]	; (800bc64 <uartDataSend+0x2f4>)
 800bb0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bb10:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bb14:	6018      	str	r0, [r3, #0]
 800bb16:	3304      	adds	r3, #4
 800bb18:	8019      	strh	r1, [r3, #0]
 800bb1a:	3302      	adds	r3, #2
 800bb1c:	0c0a      	lsrs	r2, r1, #16
 800bb1e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, dataSend, sizeof(dataSend), 1000);
 800bb20:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800bb24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bb28:	2207      	movs	r2, #7
 800bb2a:	4846      	ldr	r0, [pc, #280]	; (800bc44 <uartDataSend+0x2d4>)
 800bb2c:	f7f8 facc 	bl	80040c8 <HAL_UART_Transmit>
	}

	if(!uartSendInfo.highLimitSetFlag&&x==8){
 800bb30:	4b42      	ldr	r3, [pc, #264]	; (800bc3c <uartDataSend+0x2cc>)
 800bb32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d128      	bne.n	800bb8a <uartDataSend+0x21a>
 800bb38:	4b3f      	ldr	r3, [pc, #252]	; (800bc38 <uartDataSend+0x2c8>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	2b08      	cmp	r3, #8
 800bb3e:	d124      	bne.n	800bb8a <uartDataSend+0x21a>
		uint8_t dataSend[] = {0x76, 0xf5, 0x0B, 0x00, 0x03, 0x01, 0x00, 0x00,0x45, 0xcc};
 800bb40:	4a49      	ldr	r2, [pc, #292]	; (800bc68 <uartDataSend+0x2f8>)
 800bb42:	f107 0320 	add.w	r3, r7, #32
 800bb46:	ca07      	ldmia	r2, {r0, r1, r2}
 800bb48:	c303      	stmia	r3!, {r0, r1}
 800bb4a:	801a      	strh	r2, [r3, #0]
		dataSend[5] = pageInfoList[0].unitInfo;
 800bb4c:	4b47      	ldr	r3, [pc, #284]	; (800bc6c <uartDataSend+0x2fc>)
 800bb4e:	7e1b      	ldrb	r3, [r3, #24]
 800bb50:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		dataSend[6] = deviceOwnInfo.highPercent /256;
 800bb54:	4b40      	ldr	r3, [pc, #256]	; (800bc58 <uartDataSend+0x2e8>)
 800bb56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	da00      	bge.n	800bb5e <uartDataSend+0x1ee>
 800bb5c:	33ff      	adds	r3, #255	; 0xff
 800bb5e:	121b      	asrs	r3, r3, #8
 800bb60:	b2db      	uxtb	r3, r3
 800bb62:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		dataSend[7] = deviceOwnInfo.highPercent %256;
 800bb66:	4b3c      	ldr	r3, [pc, #240]	; (800bc58 <uartDataSend+0x2e8>)
 800bb68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb6a:	425a      	negs	r2, r3
 800bb6c:	b2db      	uxtb	r3, r3
 800bb6e:	b2d2      	uxtb	r2, r2
 800bb70:	bf58      	it	pl
 800bb72:	4253      	negpl	r3, r2
 800bb74:	b2db      	uxtb	r3, r3
 800bb76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		HAL_UART_Transmit(&huart2, dataSend, sizeof(dataSend), 1000);
 800bb7a:	f107 0120 	add.w	r1, r7, #32
 800bb7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bb82:	220a      	movs	r2, #10
 800bb84:	482f      	ldr	r0, [pc, #188]	; (800bc44 <uartDataSend+0x2d4>)
 800bb86:	f7f8 fa9f 	bl	80040c8 <HAL_UART_Transmit>
	}
	if(!uartSendInfo.lowLimitSetFlag&&x==9){
 800bb8a:	4b2c      	ldr	r3, [pc, #176]	; (800bc3c <uartDataSend+0x2cc>)
 800bb8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d125      	bne.n	800bbde <uartDataSend+0x26e>
 800bb92:	4b29      	ldr	r3, [pc, #164]	; (800bc38 <uartDataSend+0x2c8>)
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	2b09      	cmp	r3, #9
 800bb98:	d121      	bne.n	800bbde <uartDataSend+0x26e>
		uint8_t dataSend[] = {0x76, 0xf5, 0x0c, 0x00, 0x03, 0x01, 0x00, 0x00,0x45, 0xcc};
 800bb9a:	4a35      	ldr	r2, [pc, #212]	; (800bc70 <uartDataSend+0x300>)
 800bb9c:	f107 0314 	add.w	r3, r7, #20
 800bba0:	ca07      	ldmia	r2, {r0, r1, r2}
 800bba2:	c303      	stmia	r3!, {r0, r1}
 800bba4:	801a      	strh	r2, [r3, #0]
		dataSend[5] = pageInfoList[0].unitInfo;
 800bba6:	4b31      	ldr	r3, [pc, #196]	; (800bc6c <uartDataSend+0x2fc>)
 800bba8:	7e1b      	ldrb	r3, [r3, #24]
 800bbaa:	767b      	strb	r3, [r7, #25]
		dataSend[6] = deviceOwnInfo.lowPercent /256;
 800bbac:	4b2a      	ldr	r3, [pc, #168]	; (800bc58 <uartDataSend+0x2e8>)
 800bbae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	da00      	bge.n	800bbb6 <uartDataSend+0x246>
 800bbb4:	33ff      	adds	r3, #255	; 0xff
 800bbb6:	121b      	asrs	r3, r3, #8
 800bbb8:	b2db      	uxtb	r3, r3
 800bbba:	76bb      	strb	r3, [r7, #26]
		dataSend[7] = deviceOwnInfo.lowPercent %256;
 800bbbc:	4b26      	ldr	r3, [pc, #152]	; (800bc58 <uartDataSend+0x2e8>)
 800bbbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbc0:	425a      	negs	r2, r3
 800bbc2:	b2db      	uxtb	r3, r3
 800bbc4:	b2d2      	uxtb	r2, r2
 800bbc6:	bf58      	it	pl
 800bbc8:	4253      	negpl	r3, r2
 800bbca:	b2db      	uxtb	r3, r3
 800bbcc:	76fb      	strb	r3, [r7, #27]
		HAL_UART_Transmit(&huart2, dataSend, sizeof(dataSend), 1000);
 800bbce:	f107 0114 	add.w	r1, r7, #20
 800bbd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bbd6:	220a      	movs	r2, #10
 800bbd8:	481a      	ldr	r0, [pc, #104]	; (800bc44 <uartDataSend+0x2d4>)
 800bbda:	f7f8 fa75 	bl	80040c8 <HAL_UART_Transmit>
	}
	if(!uartSendInfo.unitChangeFlag&&x==10){
 800bbde:	4b17      	ldr	r3, [pc, #92]	; (800bc3c <uartDataSend+0x2cc>)
 800bbe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d116      	bne.n	800bc14 <uartDataSend+0x2a4>
 800bbe6:	4b14      	ldr	r3, [pc, #80]	; (800bc38 <uartDataSend+0x2c8>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	2b0a      	cmp	r3, #10
 800bbec:	d112      	bne.n	800bc14 <uartDataSend+0x2a4>
		uint8_t dataSend[] = {0x76, 0xf5, 0x0A, 0x00, 0x01, 0x00, 0x45, 0xcc};
 800bbee:	4a21      	ldr	r2, [pc, #132]	; (800bc74 <uartDataSend+0x304>)
 800bbf0:	f107 030c 	add.w	r3, r7, #12
 800bbf4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bbf8:	e883 0003 	stmia.w	r3, {r0, r1}
		dataSend[5] = deviceOwnInfo.uint;
 800bbfc:	4b16      	ldr	r3, [pc, #88]	; (800bc58 <uartDataSend+0x2e8>)
 800bbfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc00:	b2db      	uxtb	r3, r3
 800bc02:	747b      	strb	r3, [r7, #17]
		HAL_UART_Transmit(&huart2, dataSend, sizeof(dataSend), 1000);
 800bc04:	f107 010c 	add.w	r1, r7, #12
 800bc08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bc0c:	2208      	movs	r2, #8
 800bc0e:	480d      	ldr	r0, [pc, #52]	; (800bc44 <uartDataSend+0x2d4>)
 800bc10:	f7f8 fa5a 	bl	80040c8 <HAL_UART_Transmit>
	}

	if(!uartSendInfo.measureFlag && x ==11)
 800bc14:	4b09      	ldr	r3, [pc, #36]	; (800bc3c <uartDataSend+0x2cc>)
 800bc16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d137      	bne.n	800bc8c <uartDataSend+0x31c>
 800bc1c:	4b06      	ldr	r3, [pc, #24]	; (800bc38 <uartDataSend+0x2c8>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	2b0b      	cmp	r3, #11
 800bc22:	d133      	bne.n	800bc8c <uartDataSend+0x31c>
	{
		uint8_t dataSend[] = {0x76, 0xf5, 0x05, 0x00, 0x00, 0x45, 0xcc};
 800bc24:	4a14      	ldr	r2, [pc, #80]	; (800bc78 <uartDataSend+0x308>)
 800bc26:	1d3b      	adds	r3, r7, #4
 800bc28:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bc2c:	6018      	str	r0, [r3, #0]
 800bc2e:	3304      	adds	r3, #4
 800bc30:	8019      	strh	r1, [r3, #0]
 800bc32:	3302      	adds	r3, #2
 800bc34:	0c0a      	lsrs	r2, r1, #16
 800bc36:	e021      	b.n	800bc7c <uartDataSend+0x30c>
 800bc38:	2000443c 	.word	0x2000443c
 800bc3c:	2000000c 	.word	0x2000000c
 800bc40:	08012e98 	.word	0x08012e98
 800bc44:	20006fc8 	.word	0x20006fc8
 800bc48:	08012ea0 	.word	0x08012ea0
 800bc4c:	08012ea8 	.word	0x08012ea8
 800bc50:	08012eb0 	.word	0x08012eb0
 800bc54:	08012eb8 	.word	0x08012eb8
 800bc58:	2000017c 	.word	0x2000017c
 800bc5c:	08012ec4 	.word	0x08012ec4
 800bc60:	08012ecc 	.word	0x08012ecc
 800bc64:	08012ed4 	.word	0x08012ed4
 800bc68:	08012edc 	.word	0x08012edc
 800bc6c:	20000200 	.word	0x20000200
 800bc70:	08012ee8 	.word	0x08012ee8
 800bc74:	08012ef4 	.word	0x08012ef4
 800bc78:	08012efc 	.word	0x08012efc
 800bc7c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, dataSend, sizeof(dataSend), 1000);
 800bc7e:	1d39      	adds	r1, r7, #4
 800bc80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bc84:	2207      	movs	r2, #7
 800bc86:	4807      	ldr	r0, [pc, #28]	; (800bca4 <uartDataSend+0x334>)
 800bc88:	f7f8 fa1e 	bl	80040c8 <HAL_UART_Transmit>
	}

	if(x == 12)
 800bc8c:	4b06      	ldr	r3, [pc, #24]	; (800bca8 <uartDataSend+0x338>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	2b0c      	cmp	r3, #12
 800bc92:	d102      	bne.n	800bc9a <uartDataSend+0x32a>
		x = 0;
 800bc94:	4b04      	ldr	r3, [pc, #16]	; (800bca8 <uartDataSend+0x338>)
 800bc96:	2200      	movs	r2, #0
 800bc98:	601a      	str	r2, [r3, #0]
}
 800bc9a:	bf00      	nop
 800bc9c:	3770      	adds	r7, #112	; 0x70
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	bd80      	pop	{r7, pc}
 800bca2:	bf00      	nop
 800bca4:	20006fc8 	.word	0x20006fc8
 800bca8:	2000443c 	.word	0x2000443c

0800bcac <dataSolve>:



//operationRecord(zeroDemarcateRecordValue, deviceOwnInfo.addr);
void dataSolve(void){
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b082      	sub	sp, #8
 800bcb0:	af00      	add	r7, sp, #0
	uartSendInfo.recNum++;
 800bcb2:	4b7d      	ldr	r3, [pc, #500]	; (800bea8 <dataSolve+0x1fc>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	3301      	adds	r3, #1
 800bcb8:	4a7b      	ldr	r2, [pc, #492]	; (800bea8 <dataSolve+0x1fc>)
 800bcba:	6013      	str	r3, [r2, #0]
	int value =  uartRecieveInfo.data[1]*256 + uartRecieveInfo.data[2];
 800bcbc:	4b7b      	ldr	r3, [pc, #492]	; (800beac <dataSolve+0x200>)
 800bcbe:	7b5b      	ldrb	r3, [r3, #13]
 800bcc0:	021b      	lsls	r3, r3, #8
 800bcc2:	4a7a      	ldr	r2, [pc, #488]	; (800beac <dataSolve+0x200>)
 800bcc4:	7b92      	ldrb	r2, [r2, #14]
 800bcc6:	4413      	add	r3, r2
 800bcc8:	607b      	str	r3, [r7, #4]
	if(value < 0)
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	f2c0 80e2 	blt.w	800be96 <dataSolve+0x1ea>
		return;
	switch(uartRecieveInfo.funNum){
 800bcd2:	4b76      	ldr	r3, [pc, #472]	; (800beac <dataSolve+0x200>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	3b01      	subs	r3, #1
 800bcd8:	2b0b      	cmp	r3, #11
 800bcda:	f200 80e1 	bhi.w	800bea0 <dataSolve+0x1f4>
 800bcde:	a201      	add	r2, pc, #4	; (adr r2, 800bce4 <dataSolve+0x38>)
 800bce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bce4:	0800bd15 	.word	0x0800bd15
 800bce8:	0800bd35 	.word	0x0800bd35
 800bcec:	0800bd55 	.word	0x0800bd55
 800bcf0:	0800be1f 	.word	0x0800be1f
 800bcf4:	0800bda3 	.word	0x0800bda3
 800bcf8:	0800bdd3 	.word	0x0800bdd3
 800bcfc:	0800bde1 	.word	0x0800bde1
 800bd00:	0800bd8b 	.word	0x0800bd8b
 800bd04:	0800be65 	.word	0x0800be65
 800bd08:	0800be7d 	.word	0x0800be7d
 800bd0c:	0800be85 	.word	0x0800be85
 800bd10:	0800be8d 	.word	0x0800be8d
		case highLimit:
			if(uartRecieveInfo.addr)
 800bd14:	4b65      	ldr	r3, [pc, #404]	; (800beac <dataSolve+0x200>)
 800bd16:	689b      	ldr	r3, [r3, #8]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d003      	beq.n	800bd24 <dataSolve+0x78>
				operationRecord(setHighLimitRecordValue, value);
 800bd1c:	6879      	ldr	r1, [r7, #4]
 800bd1e:	2008      	movs	r0, #8
 800bd20:	f005 fac8 	bl	80112b4 <operationRecord>
			setLimit(highLimit, value);
 800bd24:	6879      	ldr	r1, [r7, #4]
 800bd26:	2001      	movs	r0, #1
 800bd28:	f7ff fdda 	bl	800b8e0 <setLimit>
			uartSendInfo.highLimitFlag = 1;
 800bd2c:	4b5e      	ldr	r3, [pc, #376]	; (800bea8 <dataSolve+0x1fc>)
 800bd2e:	2201      	movs	r2, #1
 800bd30:	60da      	str	r2, [r3, #12]
			break;
 800bd32:	e0b5      	b.n	800bea0 <dataSolve+0x1f4>
		case lowLimit:
			if(uartRecieveInfo.addr)
 800bd34:	4b5d      	ldr	r3, [pc, #372]	; (800beac <dataSolve+0x200>)
 800bd36:	689b      	ldr	r3, [r3, #8]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d003      	beq.n	800bd44 <dataSolve+0x98>
				operationRecord(setLowLimitRecordValue, value);
 800bd3c:	6879      	ldr	r1, [r7, #4]
 800bd3e:	2009      	movs	r0, #9
 800bd40:	f005 fab8 	bl	80112b4 <operationRecord>
			setLimit(lowLimit, value);
 800bd44:	6879      	ldr	r1, [r7, #4]
 800bd46:	2002      	movs	r0, #2
 800bd48:	f7ff fdca 	bl	800b8e0 <setLimit>
			uartSendInfo.lowLimitFlag = 1;
 800bd4c:	4b56      	ldr	r3, [pc, #344]	; (800bea8 <dataSolve+0x1fc>)
 800bd4e:	2201      	movs	r2, #1
 800bd50:	611a      	str	r2, [r3, #16]
			break;
 800bd52:	e0a5      	b.n	800bea0 <dataSolve+0x1f4>
		case hasDemarcate:
			if((uartRecieveInfo.data[0]*10 + uartRecieveInfo.data[1]) == 11){
 800bd54:	4b55      	ldr	r3, [pc, #340]	; (800beac <dataSolve+0x200>)
 800bd56:	7b1b      	ldrb	r3, [r3, #12]
 800bd58:	461a      	mov	r2, r3
 800bd5a:	4613      	mov	r3, r2
 800bd5c:	009b      	lsls	r3, r3, #2
 800bd5e:	4413      	add	r3, r2
 800bd60:	005b      	lsls	r3, r3, #1
 800bd62:	461a      	mov	r2, r3
 800bd64:	4b51      	ldr	r3, [pc, #324]	; (800beac <dataSolve+0x200>)
 800bd66:	7b5b      	ldrb	r3, [r3, #13]
 800bd68:	4413      	add	r3, r2
 800bd6a:	2b0b      	cmp	r3, #11
 800bd6c:	d106      	bne.n	800bd7c <dataSolve+0xd0>
				uartSendInfo.demarcateFlag = 1;
 800bd6e:	4b4e      	ldr	r3, [pc, #312]	; (800bea8 <dataSolve+0x1fc>)
 800bd70:	2201      	movs	r2, #1
 800bd72:	615a      	str	r2, [r3, #20]
				deviceOwnInfo.noDemarcate = 0;
 800bd74:	4b4e      	ldr	r3, [pc, #312]	; (800beb0 <dataSolve+0x204>)
 800bd76:	2200      	movs	r2, #0
 800bd78:	659a      	str	r2, [r3, #88]	; 0x58
			}
			else{
				uartSendInfo.demarcateFlag = 0;
				deviceOwnInfo.noDemarcate = 1;
			}
			break;
 800bd7a:	e091      	b.n	800bea0 <dataSolve+0x1f4>
				uartSendInfo.demarcateFlag = 0;
 800bd7c:	4b4a      	ldr	r3, [pc, #296]	; (800bea8 <dataSolve+0x1fc>)
 800bd7e:	2200      	movs	r2, #0
 800bd80:	615a      	str	r2, [r3, #20]
				deviceOwnInfo.noDemarcate = 1;
 800bd82:	4b4b      	ldr	r3, [pc, #300]	; (800beb0 <dataSolve+0x204>)
 800bd84:	2201      	movs	r2, #1
 800bd86:	659a      	str	r2, [r3, #88]	; 0x58
			break;
 800bd88:	e08a      	b.n	800bea0 <dataSolve+0x1f4>
		case zeroDemarcate:
			if(uartRecieveInfo.addr)
 800bd8a:	4b48      	ldr	r3, [pc, #288]	; (800beac <dataSolve+0x200>)
 800bd8c:	689b      	ldr	r3, [r3, #8]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d003      	beq.n	800bd9a <dataSolve+0xee>
				operationRecord(zeroDemarcateRecordValue, 0);
 800bd92:	2100      	movs	r1, #0
 800bd94:	200d      	movs	r0, #13
 800bd96:	f005 fa8d 	bl	80112b4 <operationRecord>
			uartSendInfo.zeroDemarcateFlag = 1;
 800bd9a:	4b43      	ldr	r3, [pc, #268]	; (800bea8 <dataSolve+0x1fc>)
 800bd9c:	2201      	movs	r2, #1
 800bd9e:	605a      	str	r2, [r3, #4]
			break;
 800bda0:	e07e      	b.n	800bea0 <dataSolve+0x1f4>
		case rangeQueries:
			deviceOwnInfo.measureRange = value;
 800bda2:	4a43      	ldr	r2, [pc, #268]	; (800beb0 <dataSolve+0x204>)
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	6653      	str	r3, [r2, #100]	; 0x64
			uartSendInfo.measureFlag = 1;
 800bda8:	4b3f      	ldr	r3, [pc, #252]	; (800bea8 <dataSolve+0x1fc>)
 800bdaa:	2201      	movs	r2, #1
 800bdac:	631a      	str	r2, [r3, #48]	; 0x30
			if(uartRecieveInfo.addr)
 800bdae:	4b3f      	ldr	r3, [pc, #252]	; (800beac <dataSolve+0x200>)
 800bdb0:	689b      	ldr	r3, [r3, #8]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d005      	beq.n	800bdc2 <dataSolve+0x116>
				operationRecord(spanDemarcateRecordValue, deviceOwnInfo.measureRange);
 800bdb6:	4b3e      	ldr	r3, [pc, #248]	; (800beb0 <dataSolve+0x204>)
 800bdb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bdba:	4619      	mov	r1, r3
 800bdbc:	200c      	movs	r0, #12
 800bdbe:	f005 fa79 	bl	80112b4 <operationRecord>
			xSemaphoreGive(disSignal);
 800bdc2:	4b3c      	ldr	r3, [pc, #240]	; (800beb4 <dataSolve+0x208>)
 800bdc4:	6818      	ldr	r0, [r3, #0]
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	2200      	movs	r2, #0
 800bdca:	2100      	movs	r1, #0
 800bdcc:	f7fd fb22 	bl	8009414 <xQueueGenericSend>
			break;
 800bdd0:	e066      	b.n	800bea0 <dataSolve+0x1f4>
		case locQueries:
			uartSendInfo.locFlag = 1;
 800bdd2:	4b35      	ldr	r3, [pc, #212]	; (800bea8 <dataSolve+0x1fc>)
 800bdd4:	2201      	movs	r2, #1
 800bdd6:	619a      	str	r2, [r3, #24]
			locationSolve(uartRecieveInfo.data);break;
 800bdd8:	4837      	ldr	r0, [pc, #220]	; (800beb8 <dataSolve+0x20c>)
 800bdda:	f7ff fdab 	bl	800b934 <locationSolve>
 800bdde:	e05f      	b.n	800bea0 <dataSolve+0x1f4>
		case sensorValueQuery:
			if(!deviceOwnInfo.noDemarcate){
 800bde0:	4b33      	ldr	r3, [pc, #204]	; (800beb0 <dataSolve+0x204>)
 800bde2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d10e      	bne.n	800be06 <dataSolve+0x15a>
				if(value < 10000){
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	f242 720f 	movw	r2, #9999	; 0x270f
 800bdee:	4293      	cmp	r3, r2
 800bdf0:	dc06      	bgt.n	800be00 <dataSolve+0x154>
					deviceOwnInfo.sensorValue  = value;
 800bdf2:	4a2f      	ldr	r2, [pc, #188]	; (800beb0 <dataSolve+0x204>)
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	6213      	str	r3, [r2, #32]
					deviceOwnInfo.sensorFault = 0;
 800bdf8:	4b2d      	ldr	r3, [pc, #180]	; (800beb0 <dataSolve+0x204>)
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	655a      	str	r2, [r3, #84]	; 0x54
 800bdfe:	e002      	b.n	800be06 <dataSolve+0x15a>
				}
				else{
					deviceOwnInfo.sensorFault = 1;
 800be00:	4b2b      	ldr	r3, [pc, #172]	; (800beb0 <dataSolve+0x204>)
 800be02:	2201      	movs	r2, #1
 800be04:	655a      	str	r2, [r3, #84]	; 0x54
				}
			}
			if(pageInfoList[0].isDis)
 800be06:	4b2d      	ldr	r3, [pc, #180]	; (800bebc <dataSolve+0x210>)
 800be08:	781b      	ldrb	r3, [r3, #0]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d045      	beq.n	800be9a <dataSolve+0x1ee>
				xSemaphoreGive(disSignal);
 800be0e:	4b29      	ldr	r3, [pc, #164]	; (800beb4 <dataSolve+0x208>)
 800be10:	6818      	ldr	r0, [r3, #0]
 800be12:	2300      	movs	r3, #0
 800be14:	2200      	movs	r2, #0
 800be16:	2100      	movs	r1, #0
 800be18:	f7fd fafc 	bl	8009414 <xQueueGenericSend>
			break;
 800be1c:	e03d      	b.n	800be9a <dataSolve+0x1ee>
		case unitQueries:
			deviceOwnInfo.uint = uartRecieveInfo.data[0];
 800be1e:	4b23      	ldr	r3, [pc, #140]	; (800beac <dataSolve+0x200>)
 800be20:	7b1b      	ldrb	r3, [r3, #12]
 800be22:	461a      	mov	r2, r3
 800be24:	4b22      	ldr	r3, [pc, #136]	; (800beb0 <dataSolve+0x204>)
 800be26:	629a      	str	r2, [r3, #40]	; 0x28
			if(uartRecieveInfo.addr)
 800be28:	4b20      	ldr	r3, [pc, #128]	; (800beac <dataSolve+0x200>)
 800be2a:	689b      	ldr	r3, [r3, #8]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d005      	beq.n	800be3c <dataSolve+0x190>
				operationRecord(changeUnitRecordValue, deviceOwnInfo.uint);
 800be30:	4b1f      	ldr	r3, [pc, #124]	; (800beb0 <dataSolve+0x204>)
 800be32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be34:	4619      	mov	r1, r3
 800be36:	200f      	movs	r0, #15
 800be38:	f005 fa3c 	bl	80112b4 <operationRecord>
			uartSendInfo.unitFlag = 1;
 800be3c:	4b1a      	ldr	r3, [pc, #104]	; (800bea8 <dataSolve+0x1fc>)
 800be3e:	2201      	movs	r2, #1
 800be40:	621a      	str	r2, [r3, #32]
			if(pageInfoList[0].isDis||pageInfoList[5].isDis)
 800be42:	4b1e      	ldr	r3, [pc, #120]	; (800bebc <dataSolve+0x210>)
 800be44:	781b      	ldrb	r3, [r3, #0]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d104      	bne.n	800be54 <dataSolve+0x1a8>
 800be4a:	4b1c      	ldr	r3, [pc, #112]	; (800bebc <dataSolve+0x210>)
 800be4c:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800be50:	2b00      	cmp	r3, #0
 800be52:	d024      	beq.n	800be9e <dataSolve+0x1f2>
				xSemaphoreGive(disSignal);
 800be54:	4b17      	ldr	r3, [pc, #92]	; (800beb4 <dataSolve+0x208>)
 800be56:	6818      	ldr	r0, [r3, #0]
 800be58:	2300      	movs	r3, #0
 800be5a:	2200      	movs	r2, #0
 800be5c:	2100      	movs	r1, #0
 800be5e:	f7fd fad9 	bl	8009414 <xQueueGenericSend>
			break;
 800be62:	e01c      	b.n	800be9e <dataSolve+0x1f2>
		case spanDemarcate:
			if(uartRecieveInfo.addr)
 800be64:	4b11      	ldr	r3, [pc, #68]	; (800beac <dataSolve+0x200>)
 800be66:	689b      	ldr	r3, [r3, #8]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d003      	beq.n	800be74 <dataSolve+0x1c8>
				operationRecord(spanDemarcateRecordValue, 0);
 800be6c:	2100      	movs	r1, #0
 800be6e:	200c      	movs	r0, #12
 800be70:	f005 fa20 	bl	80112b4 <operationRecord>
			 uartSendInfo.spanDemarcateFlag = 1;
 800be74:	4b0c      	ldr	r3, [pc, #48]	; (800bea8 <dataSolve+0x1fc>)
 800be76:	2201      	movs	r2, #1
 800be78:	609a      	str	r2, [r3, #8]
			 break;
 800be7a:	e011      	b.n	800bea0 <dataSolve+0x1f4>
		case unitChange: uartSendInfo.unitChangeFlag = 1;	break;
 800be7c:	4b0a      	ldr	r3, [pc, #40]	; (800bea8 <dataSolve+0x1fc>)
 800be7e:	2201      	movs	r2, #1
 800be80:	625a      	str	r2, [r3, #36]	; 0x24
 800be82:	e00d      	b.n	800bea0 <dataSolve+0x1f4>
		case highLimitSet: uartSendInfo.highLimitSetFlag =1;	break;
 800be84:	4b08      	ldr	r3, [pc, #32]	; (800bea8 <dataSolve+0x1fc>)
 800be86:	2201      	movs	r2, #1
 800be88:	629a      	str	r2, [r3, #40]	; 0x28
 800be8a:	e009      	b.n	800bea0 <dataSolve+0x1f4>
		case lowLimitSet: uartSendInfo.lowLimitSetFlag =1;	break;
 800be8c:	4b06      	ldr	r3, [pc, #24]	; (800bea8 <dataSolve+0x1fc>)
 800be8e:	2201      	movs	r2, #1
 800be90:	62da      	str	r2, [r3, #44]	; 0x2c
 800be92:	bf00      	nop
 800be94:	e004      	b.n	800bea0 <dataSolve+0x1f4>
		return;
 800be96:	bf00      	nop
 800be98:	e002      	b.n	800bea0 <dataSolve+0x1f4>
			break;
 800be9a:	bf00      	nop
 800be9c:	e000      	b.n	800bea0 <dataSolve+0x1f4>
			break;
 800be9e:	bf00      	nop
	}
}
 800bea0:	3708      	adds	r7, #8
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd80      	pop	{r7, pc}
 800bea6:	bf00      	nop
 800bea8:	2000000c 	.word	0x2000000c
 800beac:	20006b4c 	.word	0x20006b4c
 800beb0:	2000017c 	.word	0x2000017c
 800beb4:	20006cd0 	.word	0x20006cd0
 800beb8:	20006b58 	.word	0x20006b58
 800bebc:	20000200 	.word	0x20000200

0800bec0 <uartDataGet>:

void uartDataGet(void)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b084      	sub	sp, #16
 800bec4:	af00      	add	r7, sp, #0
	int recOverFlag = 0;
 800bec6:	2300      	movs	r3, #0
 800bec8:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < uart2RecLoc-1; i++){
 800beca:	2300      	movs	r3, #0
 800becc:	60bb      	str	r3, [r7, #8]
 800bece:	e010      	b.n	800bef2 <uartDataGet+0x32>
		if(uartBuf[i] == 0x45 && 0xcc == uartBuf[i+1]){
 800bed0:	4a2f      	ldr	r2, [pc, #188]	; (800bf90 <uartDataGet+0xd0>)
 800bed2:	68bb      	ldr	r3, [r7, #8]
 800bed4:	4413      	add	r3, r2
 800bed6:	781b      	ldrb	r3, [r3, #0]
 800bed8:	2b45      	cmp	r3, #69	; 0x45
 800beda:	d107      	bne.n	800beec <uartDataGet+0x2c>
 800bedc:	68bb      	ldr	r3, [r7, #8]
 800bede:	3301      	adds	r3, #1
 800bee0:	4a2b      	ldr	r2, [pc, #172]	; (800bf90 <uartDataGet+0xd0>)
 800bee2:	5cd3      	ldrb	r3, [r2, r3]
 800bee4:	2bcc      	cmp	r3, #204	; 0xcc
 800bee6:	d101      	bne.n	800beec <uartDataGet+0x2c>
			recOverFlag = 1;
 800bee8:	2301      	movs	r3, #1
 800beea:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < uart2RecLoc-1; i++){
 800beec:	68bb      	ldr	r3, [r7, #8]
 800beee:	3301      	adds	r3, #1
 800bef0:	60bb      	str	r3, [r7, #8]
 800bef2:	4b28      	ldr	r3, [pc, #160]	; (800bf94 <uartDataGet+0xd4>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	3b01      	subs	r3, #1
 800bef8:	68ba      	ldr	r2, [r7, #8]
 800befa:	429a      	cmp	r2, r3
 800befc:	dbe8      	blt.n	800bed0 <uartDataGet+0x10>
		}
	}
	if(!recOverFlag)
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d040      	beq.n	800bf86 <uartDataGet+0xc6>
		return;
	for(int i = 0; i < uart2RecLoc; i++){
 800bf04:	2300      	movs	r3, #0
 800bf06:	607b      	str	r3, [r7, #4]
 800bf08:	e034      	b.n	800bf74 <uartDataGet+0xb4>
		if(uartBuf[i] == 0x76 && uartBuf[i+1]== 0xf5){
 800bf0a:	4a21      	ldr	r2, [pc, #132]	; (800bf90 <uartDataGet+0xd0>)
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	4413      	add	r3, r2
 800bf10:	781b      	ldrb	r3, [r3, #0]
 800bf12:	2b76      	cmp	r3, #118	; 0x76
 800bf14:	d12b      	bne.n	800bf6e <uartDataGet+0xae>
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	3301      	adds	r3, #1
 800bf1a:	4a1d      	ldr	r2, [pc, #116]	; (800bf90 <uartDataGet+0xd0>)
 800bf1c:	5cd3      	ldrb	r3, [r2, r3]
 800bf1e:	2bf5      	cmp	r3, #245	; 0xf5
 800bf20:	d125      	bne.n	800bf6e <uartDataGet+0xae>
			uartRecieveInfo.funNum = uartBuf[i+2];
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	3302      	adds	r3, #2
 800bf26:	4a1a      	ldr	r2, [pc, #104]	; (800bf90 <uartDataGet+0xd0>)
 800bf28:	5cd3      	ldrb	r3, [r2, r3]
 800bf2a:	461a      	mov	r2, r3
 800bf2c:	4b1a      	ldr	r3, [pc, #104]	; (800bf98 <uartDataGet+0xd8>)
 800bf2e:	601a      	str	r2, [r3, #0]
			uartRecieveInfo.length = uartBuf[i+4];
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	3304      	adds	r3, #4
 800bf34:	4a16      	ldr	r2, [pc, #88]	; (800bf90 <uartDataGet+0xd0>)
 800bf36:	5cd3      	ldrb	r3, [r2, r3]
 800bf38:	461a      	mov	r2, r3
 800bf3a:	4b17      	ldr	r3, [pc, #92]	; (800bf98 <uartDataGet+0xd8>)
 800bf3c:	605a      	str	r2, [r3, #4]
			uartRecieveInfo.addr = uartBuf[i+3];
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	3303      	adds	r3, #3
 800bf42:	4a13      	ldr	r2, [pc, #76]	; (800bf90 <uartDataGet+0xd0>)
 800bf44:	5cd3      	ldrb	r3, [r2, r3]
 800bf46:	461a      	mov	r2, r3
 800bf48:	4b13      	ldr	r3, [pc, #76]	; (800bf98 <uartDataGet+0xd8>)
 800bf4a:	609a      	str	r2, [r3, #8]
			memcpy(uartRecieveInfo.data, uartBuf+5+i, uartRecieveInfo.length);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	3305      	adds	r3, #5
 800bf50:	4a0f      	ldr	r2, [pc, #60]	; (800bf90 <uartDataGet+0xd0>)
 800bf52:	1899      	adds	r1, r3, r2
 800bf54:	4b10      	ldr	r3, [pc, #64]	; (800bf98 <uartDataGet+0xd8>)
 800bf56:	685b      	ldr	r3, [r3, #4]
 800bf58:	461a      	mov	r2, r3
 800bf5a:	4810      	ldr	r0, [pc, #64]	; (800bf9c <uartDataGet+0xdc>)
 800bf5c:	f006 fb5b 	bl	8012616 <memcpy>
			dataSolve();
 800bf60:	f7ff fea4 	bl	800bcac <dataSolve>
			memset(uartBuf, 0, 100);
 800bf64:	2264      	movs	r2, #100	; 0x64
 800bf66:	2100      	movs	r1, #0
 800bf68:	4809      	ldr	r0, [pc, #36]	; (800bf90 <uartDataGet+0xd0>)
 800bf6a:	f006 fb5f 	bl	801262c <memset>
	for(int i = 0; i < uart2RecLoc; i++){
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	3301      	adds	r3, #1
 800bf72:	607b      	str	r3, [r7, #4]
 800bf74:	4b07      	ldr	r3, [pc, #28]	; (800bf94 <uartDataGet+0xd4>)
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	687a      	ldr	r2, [r7, #4]
 800bf7a:	429a      	cmp	r2, r3
 800bf7c:	dbc5      	blt.n	800bf0a <uartDataGet+0x4a>
		}
	}
	uart2RecLoc = 0;
 800bf7e:	4b05      	ldr	r3, [pc, #20]	; (800bf94 <uartDataGet+0xd4>)
 800bf80:	2200      	movs	r2, #0
 800bf82:	601a      	str	r2, [r3, #0]
 800bf84:	e000      	b.n	800bf88 <uartDataGet+0xc8>
		return;
 800bf86:	bf00      	nop
}
 800bf88:	3710      	adds	r7, #16
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd80      	pop	{r7, pc}
 800bf8e:	bf00      	nop
 800bf90:	20006b64 	.word	0x20006b64
 800bf94:	20006bd0 	.word	0x20006bd0
 800bf98:	20006b4c 	.word	0x20006b4c
 800bf9c:	20006b58 	.word	0x20006b58

0800bfa0 <HAL_UART_RxCpltCallback>:

uint8_t temporayValue;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b082      	sub	sp, #8
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
	if(uart2RecLoc == 100)
 800bfa8:	4b0f      	ldr	r3, [pc, #60]	; (800bfe8 <HAL_UART_RxCpltCallback+0x48>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	2b64      	cmp	r3, #100	; 0x64
 800bfae:	d102      	bne.n	800bfb6 <HAL_UART_RxCpltCallback+0x16>
		uart2RecLoc = 0;
 800bfb0:	4b0d      	ldr	r3, [pc, #52]	; (800bfe8 <HAL_UART_RxCpltCallback+0x48>)
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	601a      	str	r2, [r3, #0]
	uartBuf[uart2RecLoc] = temporayValue;
 800bfb6:	4b0c      	ldr	r3, [pc, #48]	; (800bfe8 <HAL_UART_RxCpltCallback+0x48>)
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	4a0c      	ldr	r2, [pc, #48]	; (800bfec <HAL_UART_RxCpltCallback+0x4c>)
 800bfbc:	7811      	ldrb	r1, [r2, #0]
 800bfbe:	4a0c      	ldr	r2, [pc, #48]	; (800bff0 <HAL_UART_RxCpltCallback+0x50>)
 800bfc0:	54d1      	strb	r1, [r2, r3]
	while(HAL_UART_Receive_IT(&huart2,&temporayValue,1)!=HAL_BUSY);
 800bfc2:	bf00      	nop
 800bfc4:	2201      	movs	r2, #1
 800bfc6:	4909      	ldr	r1, [pc, #36]	; (800bfec <HAL_UART_RxCpltCallback+0x4c>)
 800bfc8:	480a      	ldr	r0, [pc, #40]	; (800bff4 <HAL_UART_RxCpltCallback+0x54>)
 800bfca:	f7f8 f91f 	bl	800420c <HAL_UART_Receive_IT>
 800bfce:	4603      	mov	r3, r0
 800bfd0:	2b02      	cmp	r3, #2
 800bfd2:	d1f7      	bne.n	800bfc4 <HAL_UART_RxCpltCallback+0x24>
	uart2RecLoc++;
 800bfd4:	4b04      	ldr	r3, [pc, #16]	; (800bfe8 <HAL_UART_RxCpltCallback+0x48>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	3301      	adds	r3, #1
 800bfda:	4a03      	ldr	r2, [pc, #12]	; (800bfe8 <HAL_UART_RxCpltCallback+0x48>)
 800bfdc:	6013      	str	r3, [r2, #0]
}
 800bfde:	bf00      	nop
 800bfe0:	3708      	adds	r7, #8
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd80      	pop	{r7, pc}
 800bfe6:	bf00      	nop
 800bfe8:	20006bd0 	.word	0x20006bd0
 800bfec:	20006b48 	.word	0x20006b48
 800bff0:	20006b64 	.word	0x20006b64
 800bff4:	20006fc8 	.word	0x20006fc8

0800bff8 <DS1302_Delay>:
 */

#include "DS1302.h"
DateTime datatime;
void DS1302_Delay(uint16_t time)
{
 800bff8:	b480      	push	{r7}
 800bffa:	b085      	sub	sp, #20
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	4603      	mov	r3, r0
 800c000:	80fb      	strh	r3, [r7, #6]
	uint16_t temp;
	for(temp = 0; temp < time; temp++);
 800c002:	2300      	movs	r3, #0
 800c004:	81fb      	strh	r3, [r7, #14]
 800c006:	e002      	b.n	800c00e <DS1302_Delay+0x16>
 800c008:	89fb      	ldrh	r3, [r7, #14]
 800c00a:	3301      	adds	r3, #1
 800c00c:	81fb      	strh	r3, [r7, #14]
 800c00e:	89fa      	ldrh	r2, [r7, #14]
 800c010:	88fb      	ldrh	r3, [r7, #6]
 800c012:	429a      	cmp	r2, r3
 800c014:	d3f8      	bcc.n	800c008 <DS1302_Delay+0x10>
}
 800c016:	bf00      	nop
 800c018:	3714      	adds	r7, #20
 800c01a:	46bd      	mov	sp, r7
 800c01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c020:	4770      	bx	lr
	...

0800c024 <AsciiToBcd>:
uint8_t ascii_time[7] = {0};     //保存ascii格式数据

uint8_t bcd_time[7] = {0};       //保存bcd码数据

static uint8_t AsciiToBcd(uint8_t asciiData)
{
 800c024:	b480      	push	{r7}
 800c026:	b085      	sub	sp, #20
 800c028:	af00      	add	r7, sp, #0
 800c02a:	4603      	mov	r3, r0
 800c02c:	71fb      	strb	r3, [r7, #7]
	uint8_t bcdData = 0;
 800c02e:	2300      	movs	r3, #0
 800c030:	73fb      	strb	r3, [r7, #15]
    bcdData = (((asciiData/10)<<4)|((asciiData%10)));
 800c032:	79fb      	ldrb	r3, [r7, #7]
 800c034:	4a0e      	ldr	r2, [pc, #56]	; (800c070 <AsciiToBcd+0x4c>)
 800c036:	fba2 2303 	umull	r2, r3, r2, r3
 800c03a:	08db      	lsrs	r3, r3, #3
 800c03c:	b2db      	uxtb	r3, r3
 800c03e:	011b      	lsls	r3, r3, #4
 800c040:	b258      	sxtb	r0, r3
 800c042:	79fa      	ldrb	r2, [r7, #7]
 800c044:	4b0a      	ldr	r3, [pc, #40]	; (800c070 <AsciiToBcd+0x4c>)
 800c046:	fba3 1302 	umull	r1, r3, r3, r2
 800c04a:	08d9      	lsrs	r1, r3, #3
 800c04c:	460b      	mov	r3, r1
 800c04e:	009b      	lsls	r3, r3, #2
 800c050:	440b      	add	r3, r1
 800c052:	005b      	lsls	r3, r3, #1
 800c054:	1ad3      	subs	r3, r2, r3
 800c056:	b2db      	uxtb	r3, r3
 800c058:	b25b      	sxtb	r3, r3
 800c05a:	4303      	orrs	r3, r0
 800c05c:	b25b      	sxtb	r3, r3
 800c05e:	73fb      	strb	r3, [r7, #15]
    return bcdData;
 800c060:	7bfb      	ldrb	r3, [r7, #15]
}
 800c062:	4618      	mov	r0, r3
 800c064:	3714      	adds	r7, #20
 800c066:	46bd      	mov	sp, r7
 800c068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06c:	4770      	bx	lr
 800c06e:	bf00      	nop
 800c070:	cccccccd 	.word	0xcccccccd

0800c074 <BcdToAscii>:

static uint8_t BcdToAscii(uint8_t bcdData)
{
 800c074:	b480      	push	{r7}
 800c076:	b085      	sub	sp, #20
 800c078:	af00      	add	r7, sp, #0
 800c07a:	4603      	mov	r3, r0
 800c07c:	71fb      	strb	r3, [r7, #7]
	uint8_t asciiData = 0;
 800c07e:	2300      	movs	r3, #0
 800c080:	73fb      	strb	r3, [r7, #15]
    asciiData = (((bcdData&0xf0)>>4)*10 + (bcdData&0x0f));
 800c082:	79fb      	ldrb	r3, [r7, #7]
 800c084:	091b      	lsrs	r3, r3, #4
 800c086:	b2db      	uxtb	r3, r3
 800c088:	461a      	mov	r2, r3
 800c08a:	0092      	lsls	r2, r2, #2
 800c08c:	4413      	add	r3, r2
 800c08e:	005b      	lsls	r3, r3, #1
 800c090:	b2da      	uxtb	r2, r3
 800c092:	79fb      	ldrb	r3, [r7, #7]
 800c094:	f003 030f 	and.w	r3, r3, #15
 800c098:	b2db      	uxtb	r3, r3
 800c09a:	4413      	add	r3, r2
 800c09c:	73fb      	strb	r3, [r7, #15]
    return asciiData;
 800c09e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	3714      	adds	r7, #20
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0aa:	4770      	bx	lr

0800c0ac <Ds1302_Gpio_Init>:

//IO口初始化
void Ds1302_Gpio_Init(void)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b086      	sub	sp, #24
 800c0b0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c0b2:	1d3b      	adds	r3, r7, #4
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	601a      	str	r2, [r3, #0]
 800c0b8:	605a      	str	r2, [r3, #4]
 800c0ba:	609a      	str	r2, [r3, #8]
 800c0bc:	60da      	str	r2, [r3, #12]
 800c0be:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	603b      	str	r3, [r7, #0]
 800c0c4:	4b0e      	ldr	r3, [pc, #56]	; (800c100 <Ds1302_Gpio_Init+0x54>)
 800c0c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0c8:	4a0d      	ldr	r2, [pc, #52]	; (800c100 <Ds1302_Gpio_Init+0x54>)
 800c0ca:	f043 0302 	orr.w	r3, r3, #2
 800c0ce:	6313      	str	r3, [r2, #48]	; 0x30
 800c0d0:	4b0b      	ldr	r3, [pc, #44]	; (800c100 <Ds1302_Gpio_Init+0x54>)
 800c0d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0d4:	f003 0302 	and.w	r3, r3, #2
 800c0d8:	603b      	str	r3, [r7, #0]
 800c0da:	683b      	ldr	r3, [r7, #0]
	GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800c0dc:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800c0e0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c0ee:	1d3b      	adds	r3, r7, #4
 800c0f0:	4619      	mov	r1, r3
 800c0f2:	4804      	ldr	r0, [pc, #16]	; (800c104 <Ds1302_Gpio_Init+0x58>)
 800c0f4:	f7f5 fe64 	bl	8001dc0 <HAL_GPIO_Init>
}
 800c0f8:	bf00      	nop
 800c0fa:	3718      	adds	r7, #24
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}
 800c100:	40023800 	.word	0x40023800
 800c104:	40020400 	.word	0x40020400

0800c108 <Ds1302_sda_input>:

void Ds1302_sda_input(void)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b086      	sub	sp, #24
 800c10c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c10e:	1d3b      	adds	r3, r7, #4
 800c110:	2200      	movs	r2, #0
 800c112:	601a      	str	r2, [r3, #0]
 800c114:	605a      	str	r2, [r3, #4]
 800c116:	609a      	str	r2, [r3, #8]
 800c118:	60da      	str	r2, [r3, #12]
 800c11a:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800c11c:	2300      	movs	r3, #0
 800c11e:	603b      	str	r3, [r7, #0]
 800c120:	4b0e      	ldr	r3, [pc, #56]	; (800c15c <Ds1302_sda_input+0x54>)
 800c122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c124:	4a0d      	ldr	r2, [pc, #52]	; (800c15c <Ds1302_sda_input+0x54>)
 800c126:	f043 0302 	orr.w	r3, r3, #2
 800c12a:	6313      	str	r3, [r2, #48]	; 0x30
 800c12c:	4b0b      	ldr	r3, [pc, #44]	; (800c15c <Ds1302_sda_input+0x54>)
 800c12e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c130:	f003 0302 	and.w	r3, r3, #2
 800c134:	603b      	str	r3, [r7, #0]
 800c136:	683b      	ldr	r3, [r7, #0]
	GPIO_InitStruct.Pin = GPIO_PIN_14;
 800c138:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c13c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c13e:	2300      	movs	r3, #0
 800c140:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c142:	2301      	movs	r3, #1
 800c144:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c146:	2300      	movs	r3, #0
 800c148:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c14a:	1d3b      	adds	r3, r7, #4
 800c14c:	4619      	mov	r1, r3
 800c14e:	4804      	ldr	r0, [pc, #16]	; (800c160 <Ds1302_sda_input+0x58>)
 800c150:	f7f5 fe36 	bl	8001dc0 <HAL_GPIO_Init>
}
 800c154:	bf00      	nop
 800c156:	3718      	adds	r7, #24
 800c158:	46bd      	mov	sp, r7
 800c15a:	bd80      	pop	{r7, pc}
 800c15c:	40023800 	.word	0x40023800
 800c160:	40020400 	.word	0x40020400

0800c164 <Ds1302_sda_output>:
void Ds1302_sda_output(void)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b086      	sub	sp, #24
 800c168:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c16a:	1d3b      	adds	r3, r7, #4
 800c16c:	2200      	movs	r2, #0
 800c16e:	601a      	str	r2, [r3, #0]
 800c170:	605a      	str	r2, [r3, #4]
 800c172:	609a      	str	r2, [r3, #8]
 800c174:	60da      	str	r2, [r3, #12]
 800c176:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800c178:	2300      	movs	r3, #0
 800c17a:	603b      	str	r3, [r7, #0]
 800c17c:	4b0e      	ldr	r3, [pc, #56]	; (800c1b8 <Ds1302_sda_output+0x54>)
 800c17e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c180:	4a0d      	ldr	r2, [pc, #52]	; (800c1b8 <Ds1302_sda_output+0x54>)
 800c182:	f043 0302 	orr.w	r3, r3, #2
 800c186:	6313      	str	r3, [r2, #48]	; 0x30
 800c188:	4b0b      	ldr	r3, [pc, #44]	; (800c1b8 <Ds1302_sda_output+0x54>)
 800c18a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c18c:	f003 0302 	and.w	r3, r3, #2
 800c190:	603b      	str	r3, [r7, #0]
 800c192:	683b      	ldr	r3, [r7, #0]
	GPIO_InitStruct.Pin = GPIO_PIN_14;
 800c194:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c198:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c19a:	2301      	movs	r3, #1
 800c19c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c19e:	2301      	movs	r3, #1
 800c1a0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c1a6:	1d3b      	adds	r3, r7, #4
 800c1a8:	4619      	mov	r1, r3
 800c1aa:	4804      	ldr	r0, [pc, #16]	; (800c1bc <Ds1302_sda_output+0x58>)
 800c1ac:	f7f5 fe08 	bl	8001dc0 <HAL_GPIO_Init>
}
 800c1b0:	bf00      	nop
 800c1b2:	3718      	adds	r7, #24
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bd80      	pop	{r7, pc}
 800c1b8:	40023800 	.word	0x40023800
 800c1bc:	40020400 	.word	0x40020400

0800c1c0 <DS1302_SetTime>:
    DS1302_Write(0x8c,AsciiToBcd(19));  //年
    DS1302_Write(0x8E,0x80);  //打开写保护
}

void DS1302_SetTime(DateTime datatime)
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b082      	sub	sp, #8
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	463b      	mov	r3, r7
 800c1c8:	e883 0003 	stmia.w	r3, {r0, r1}
  taskENTER_CRITICAL();
 800c1cc:	f7ff f84e 	bl	800b26c <vPortEnterCritical>
  DS1302_Write(0x8E,0x00);  //取消写保护
 800c1d0:	2100      	movs	r1, #0
 800c1d2:	208e      	movs	r0, #142	; 0x8e
 800c1d4:	f000 f88c 	bl	800c2f0 <DS1302_Write>
  DS1302_Write(0x80,00);
 800c1d8:	2100      	movs	r1, #0
 800c1da:	2080      	movs	r0, #128	; 0x80
 800c1dc:	f000 f888 	bl	800c2f0 <DS1302_Write>
  DS1302_Write(0x80,AsciiToBcd(datatime.Sec));  //秒
 800c1e0:	79bb      	ldrb	r3, [r7, #6]
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	f7ff ff1e 	bl	800c024 <AsciiToBcd>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	4619      	mov	r1, r3
 800c1ec:	2080      	movs	r0, #128	; 0x80
 800c1ee:	f000 f87f 	bl	800c2f0 <DS1302_Write>
  DS1302_Write(0x82,AsciiToBcd(datatime.Min));  //分
 800c1f2:	797b      	ldrb	r3, [r7, #5]
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f7ff ff15 	bl	800c024 <AsciiToBcd>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	4619      	mov	r1, r3
 800c1fe:	2082      	movs	r0, #130	; 0x82
 800c200:	f000 f876 	bl	800c2f0 <DS1302_Write>
  DS1302_Write(0x84,AsciiToBcd(datatime.Hour));  //时
 800c204:	793b      	ldrb	r3, [r7, #4]
 800c206:	4618      	mov	r0, r3
 800c208:	f7ff ff0c 	bl	800c024 <AsciiToBcd>
 800c20c:	4603      	mov	r3, r0
 800c20e:	4619      	mov	r1, r3
 800c210:	2084      	movs	r0, #132	; 0x84
 800c212:	f000 f86d 	bl	800c2f0 <DS1302_Write>
  DS1302_Write(0x86,AsciiToBcd(datatime.Day));  //日
 800c216:	78fb      	ldrb	r3, [r7, #3]
 800c218:	4618      	mov	r0, r3
 800c21a:	f7ff ff03 	bl	800c024 <AsciiToBcd>
 800c21e:	4603      	mov	r3, r0
 800c220:	4619      	mov	r1, r3
 800c222:	2086      	movs	r0, #134	; 0x86
 800c224:	f000 f864 	bl	800c2f0 <DS1302_Write>
  DS1302_Write(0x88,AsciiToBcd(datatime.Month));//月
 800c228:	78bb      	ldrb	r3, [r7, #2]
 800c22a:	4618      	mov	r0, r3
 800c22c:	f7ff fefa 	bl	800c024 <AsciiToBcd>
 800c230:	4603      	mov	r3, r0
 800c232:	4619      	mov	r1, r3
 800c234:	2088      	movs	r0, #136	; 0x88
 800c236:	f000 f85b 	bl	800c2f0 <DS1302_Write>
  DS1302_Write(0x8c,AsciiToBcd(datatime.Year));  //年
 800c23a:	883b      	ldrh	r3, [r7, #0]
 800c23c:	b2db      	uxtb	r3, r3
 800c23e:	4618      	mov	r0, r3
 800c240:	f7ff fef0 	bl	800c024 <AsciiToBcd>
 800c244:	4603      	mov	r3, r0
 800c246:	4619      	mov	r1, r3
 800c248:	208c      	movs	r0, #140	; 0x8c
 800c24a:	f000 f851 	bl	800c2f0 <DS1302_Write>
  DS1302_Write(0x8E,0x80);  //打开写保护
 800c24e:	2180      	movs	r1, #128	; 0x80
 800c250:	208e      	movs	r0, #142	; 0x8e
 800c252:	f000 f84d 	bl	800c2f0 <DS1302_Write>
  taskEXIT_CRITICAL();
 800c256:	f7ff f837 	bl	800b2c8 <vPortExitCritical>
}
 800c25a:	bf00      	nop
 800c25c:	3708      	adds	r7, #8
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd80      	pop	{r7, pc}
	...

0800c264 <DS1302_WriteByte>:

//写入一个字节
void DS1302_WriteByte(uint8_t dat)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b084      	sub	sp, #16
 800c268:	af00      	add	r7, sp, #0
 800c26a:	4603      	mov	r3, r0
 800c26c:	71fb      	strb	r3, [r7, #7]
  uint8_t i = 0;
 800c26e:	2300      	movs	r3, #0
 800c270:	73fb      	strb	r3, [r7, #15]

  DS1302_DAT_OUTPUT();
 800c272:	f7ff ff77 	bl	800c164 <Ds1302_sda_output>
  DS_CEH;
 800c276:	2201      	movs	r2, #1
 800c278:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c27c:	481b      	ldr	r0, [pc, #108]	; (800c2ec <DS1302_WriteByte+0x88>)
 800c27e:	f7f5 ff51 	bl	8002124 <HAL_GPIO_WritePin>

  for(i = 8; i > 0; i--)
 800c282:	2308      	movs	r3, #8
 800c284:	73fb      	strb	r3, [r7, #15]
 800c286:	e029      	b.n	800c2dc <DS1302_WriteByte+0x78>
  {
    if(dat& 0x01)
 800c288:	79fb      	ldrb	r3, [r7, #7]
 800c28a:	f003 0301 	and.w	r3, r3, #1
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d006      	beq.n	800c2a0 <DS1302_WriteByte+0x3c>
    	DS1302_DATOUT(1);
 800c292:	2201      	movs	r2, #1
 800c294:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c298:	4814      	ldr	r0, [pc, #80]	; (800c2ec <DS1302_WriteByte+0x88>)
 800c29a:	f7f5 ff43 	bl	8002124 <HAL_GPIO_WritePin>
 800c29e:	e005      	b.n	800c2ac <DS1302_WriteByte+0x48>
    else
    	DS1302_DATOUT(0);
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c2a6:	4811      	ldr	r0, [pc, #68]	; (800c2ec <DS1302_WriteByte+0x88>)
 800c2a8:	f7f5 ff3c 	bl	8002124 <HAL_GPIO_WritePin>
    DS_CLKL;
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c2b2:	480e      	ldr	r0, [pc, #56]	; (800c2ec <DS1302_WriteByte+0x88>)
 800c2b4:	f7f5 ff36 	bl	8002124 <HAL_GPIO_WritePin>
    DS1302_Delay(10);
 800c2b8:	200a      	movs	r0, #10
 800c2ba:	f7ff fe9d 	bl	800bff8 <DS1302_Delay>
    DS_CLKH;
 800c2be:	2201      	movs	r2, #1
 800c2c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c2c4:	4809      	ldr	r0, [pc, #36]	; (800c2ec <DS1302_WriteByte+0x88>)
 800c2c6:	f7f5 ff2d 	bl	8002124 <HAL_GPIO_WritePin>
    DS1302_Delay(10);
 800c2ca:	200a      	movs	r0, #10
 800c2cc:	f7ff fe94 	bl	800bff8 <DS1302_Delay>
    dat >>= 1;
 800c2d0:	79fb      	ldrb	r3, [r7, #7]
 800c2d2:	085b      	lsrs	r3, r3, #1
 800c2d4:	71fb      	strb	r3, [r7, #7]
  for(i = 8; i > 0; i--)
 800c2d6:	7bfb      	ldrb	r3, [r7, #15]
 800c2d8:	3b01      	subs	r3, #1
 800c2da:	73fb      	strb	r3, [r7, #15]
 800c2dc:	7bfb      	ldrb	r3, [r7, #15]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d1d2      	bne.n	800c288 <DS1302_WriteByte+0x24>
  }
}
 800c2e2:	bf00      	nop
 800c2e4:	3710      	adds	r7, #16
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	bd80      	pop	{r7, pc}
 800c2ea:	bf00      	nop
 800c2ec:	40020400 	.word	0x40020400

0800c2f0 <DS1302_Write>:

//写入一个寄存器
void DS1302_Write(uint8_t address, uint8_t dat)
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b082      	sub	sp, #8
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	460a      	mov	r2, r1
 800c2fa:	71fb      	strb	r3, [r7, #7]
 800c2fc:	4613      	mov	r3, r2
 800c2fe:	71bb      	strb	r3, [r7, #6]
	DS_CEL;
 800c300:	2200      	movs	r2, #0
 800c302:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c306:	4813      	ldr	r0, [pc, #76]	; (800c354 <DS1302_Write+0x64>)
 800c308:	f7f5 ff0c 	bl	8002124 <HAL_GPIO_WritePin>
	DS_CLKL;
 800c30c:	2200      	movs	r2, #0
 800c30e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c312:	4810      	ldr	r0, [pc, #64]	; (800c354 <DS1302_Write+0x64>)
 800c314:	f7f5 ff06 	bl	8002124 <HAL_GPIO_WritePin>
	DS_CEH;
 800c318:	2201      	movs	r2, #1
 800c31a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c31e:	480d      	ldr	r0, [pc, #52]	; (800c354 <DS1302_Write+0x64>)
 800c320:	f7f5 ff00 	bl	8002124 <HAL_GPIO_WritePin>

	DS1302_WriteByte(address);
 800c324:	79fb      	ldrb	r3, [r7, #7]
 800c326:	4618      	mov	r0, r3
 800c328:	f7ff ff9c 	bl	800c264 <DS1302_WriteByte>
  DS1302_WriteByte(dat);
 800c32c:	79bb      	ldrb	r3, [r7, #6]
 800c32e:	4618      	mov	r0, r3
 800c330:	f7ff ff98 	bl	800c264 <DS1302_WriteByte>

	DS_CLKH;
 800c334:	2201      	movs	r2, #1
 800c336:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c33a:	4806      	ldr	r0, [pc, #24]	; (800c354 <DS1302_Write+0x64>)
 800c33c:	f7f5 fef2 	bl	8002124 <HAL_GPIO_WritePin>
	DS_CEL;
 800c340:	2200      	movs	r2, #0
 800c342:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c346:	4803      	ldr	r0, [pc, #12]	; (800c354 <DS1302_Write+0x64>)
 800c348:	f7f5 feec 	bl	8002124 <HAL_GPIO_WritePin>
}
 800c34c:	bf00      	nop
 800c34e:	3708      	adds	r7, #8
 800c350:	46bd      	mov	sp, r7
 800c352:	bd80      	pop	{r7, pc}
 800c354:	40020400 	.word	0x40020400

0800c358 <DS1302_ReadByte>:

//读取一个字节
uint8_t DS1302_ReadByte(void)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b082      	sub	sp, #8
 800c35c:	af00      	add	r7, sp, #0
  uint8_t i = 0, dat = 0;
 800c35e:	2300      	movs	r3, #0
 800c360:	71fb      	strb	r3, [r7, #7]
 800c362:	2300      	movs	r3, #0
 800c364:	71bb      	strb	r3, [r7, #6]
  DS_CEH;
 800c366:	2201      	movs	r2, #1
 800c368:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c36c:	4819      	ldr	r0, [pc, #100]	; (800c3d4 <DS1302_ReadByte+0x7c>)
 800c36e:	f7f5 fed9 	bl	8002124 <HAL_GPIO_WritePin>
  DS1302_DAT_INPUT();
 800c372:	f7ff fec9 	bl	800c108 <Ds1302_sda_input>

  for(i=8; i>0; i--)
 800c376:	2308      	movs	r3, #8
 800c378:	71fb      	strb	r3, [r7, #7]
 800c37a:	e023      	b.n	800c3c4 <DS1302_ReadByte+0x6c>
  {
    DS_CLKH;
 800c37c:	2201      	movs	r2, #1
 800c37e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c382:	4814      	ldr	r0, [pc, #80]	; (800c3d4 <DS1302_ReadByte+0x7c>)
 800c384:	f7f5 fece 	bl	8002124 <HAL_GPIO_WritePin>
    DS1302_Delay(10);
 800c388:	200a      	movs	r0, #10
 800c38a:	f7ff fe35 	bl	800bff8 <DS1302_Delay>
    DS_CLKL;
 800c38e:	2200      	movs	r2, #0
 800c390:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c394:	480f      	ldr	r0, [pc, #60]	; (800c3d4 <DS1302_ReadByte+0x7c>)
 800c396:	f7f5 fec5 	bl	8002124 <HAL_GPIO_WritePin>
    DS1302_Delay(10);
 800c39a:	200a      	movs	r0, #10
 800c39c:	f7ff fe2c 	bl	800bff8 <DS1302_Delay>
    dat >>= 1;
 800c3a0:	79bb      	ldrb	r3, [r7, #6]
 800c3a2:	085b      	lsrs	r3, r3, #1
 800c3a4:	71bb      	strb	r3, [r7, #6]
    if(DS1302_DATIN) dat |= 0x80;
 800c3a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c3aa:	480a      	ldr	r0, [pc, #40]	; (800c3d4 <DS1302_ReadByte+0x7c>)
 800c3ac:	f7f5 fea2 	bl	80020f4 <HAL_GPIO_ReadPin>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d003      	beq.n	800c3be <DS1302_ReadByte+0x66>
 800c3b6:	79bb      	ldrb	r3, [r7, #6]
 800c3b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c3bc:	71bb      	strb	r3, [r7, #6]
  for(i=8; i>0; i--)
 800c3be:	79fb      	ldrb	r3, [r7, #7]
 800c3c0:	3b01      	subs	r3, #1
 800c3c2:	71fb      	strb	r3, [r7, #7]
 800c3c4:	79fb      	ldrb	r3, [r7, #7]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d1d8      	bne.n	800c37c <DS1302_ReadByte+0x24>
  }
  return dat;
 800c3ca:	79bb      	ldrb	r3, [r7, #6]
}
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	3708      	adds	r7, #8
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	bd80      	pop	{r7, pc}
 800c3d4:	40020400 	.word	0x40020400

0800c3d8 <DS1302_Read>:

//读取一个寄存器
uint8_t DS1302_Read(uint8_t address)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b084      	sub	sp, #16
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	4603      	mov	r3, r0
 800c3e0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = 0;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	73fb      	strb	r3, [r7, #15]
  DS_CEL;
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c3ec:	4813      	ldr	r0, [pc, #76]	; (800c43c <DS1302_Read+0x64>)
 800c3ee:	f7f5 fe99 	bl	8002124 <HAL_GPIO_WritePin>
  DS_CLKL;
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c3f8:	4810      	ldr	r0, [pc, #64]	; (800c43c <DS1302_Read+0x64>)
 800c3fa:	f7f5 fe93 	bl	8002124 <HAL_GPIO_WritePin>
  DS_CEH;
 800c3fe:	2201      	movs	r2, #1
 800c400:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c404:	480d      	ldr	r0, [pc, #52]	; (800c43c <DS1302_Read+0x64>)
 800c406:	f7f5 fe8d 	bl	8002124 <HAL_GPIO_WritePin>

  DS1302_WriteByte(address);
 800c40a:	79fb      	ldrb	r3, [r7, #7]
 800c40c:	4618      	mov	r0, r3
 800c40e:	f7ff ff29 	bl	800c264 <DS1302_WriteByte>
  data = DS1302_ReadByte();
 800c412:	f7ff ffa1 	bl	800c358 <DS1302_ReadByte>
 800c416:	4603      	mov	r3, r0
 800c418:	73fb      	strb	r3, [r7, #15]

  DS_CLKH;
 800c41a:	2201      	movs	r2, #1
 800c41c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c420:	4806      	ldr	r0, [pc, #24]	; (800c43c <DS1302_Read+0x64>)
 800c422:	f7f5 fe7f 	bl	8002124 <HAL_GPIO_WritePin>
  DS_CEL;
 800c426:	2200      	movs	r2, #0
 800c428:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c42c:	4803      	ldr	r0, [pc, #12]	; (800c43c <DS1302_Read+0x64>)
 800c42e:	f7f5 fe79 	bl	8002124 <HAL_GPIO_WritePin>
  return data;
 800c432:	7bfb      	ldrb	r3, [r7, #15]
}
 800c434:	4618      	mov	r0, r3
 800c436:	3710      	adds	r7, #16
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}
 800c43c:	40020400 	.word	0x40020400

0800c440 <DS1302_ReadTime>:
extern int timeData[];
void DS1302_ReadTime(DateTime *datatime)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b082      	sub	sp, #8
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
	taskENTER_CRITICAL();
 800c448:	f7fe ff10 	bl	800b26c <vPortEnterCritical>
	timeData[5] = datatime->Sec = BcdToAscii(DS1302_Read(0x81));  //秒
 800c44c:	2081      	movs	r0, #129	; 0x81
 800c44e:	f7ff ffc3 	bl	800c3d8 <DS1302_Read>
 800c452:	4603      	mov	r3, r0
 800c454:	4618      	mov	r0, r3
 800c456:	f7ff fe0d 	bl	800c074 <BcdToAscii>
 800c45a:	4603      	mov	r3, r0
 800c45c:	461a      	mov	r2, r3
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	719a      	strb	r2, [r3, #6]
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	799b      	ldrb	r3, [r3, #6]
 800c466:	461a      	mov	r2, r3
 800c468:	4b2e      	ldr	r3, [pc, #184]	; (800c524 <DS1302_ReadTime+0xe4>)
 800c46a:	615a      	str	r2, [r3, #20]
	timeData[4] = datatime->Min = BcdToAscii(DS1302_Read(0x83));  //分
 800c46c:	2083      	movs	r0, #131	; 0x83
 800c46e:	f7ff ffb3 	bl	800c3d8 <DS1302_Read>
 800c472:	4603      	mov	r3, r0
 800c474:	4618      	mov	r0, r3
 800c476:	f7ff fdfd 	bl	800c074 <BcdToAscii>
 800c47a:	4603      	mov	r3, r0
 800c47c:	461a      	mov	r2, r3
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	715a      	strb	r2, [r3, #5]
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	795b      	ldrb	r3, [r3, #5]
 800c486:	461a      	mov	r2, r3
 800c488:	4b26      	ldr	r3, [pc, #152]	; (800c524 <DS1302_ReadTime+0xe4>)
 800c48a:	611a      	str	r2, [r3, #16]
	timeData[3] = datatime->Hour = BcdToAscii(DS1302_Read(0x85));   //时
 800c48c:	2085      	movs	r0, #133	; 0x85
 800c48e:	f7ff ffa3 	bl	800c3d8 <DS1302_Read>
 800c492:	4603      	mov	r3, r0
 800c494:	4618      	mov	r0, r3
 800c496:	f7ff fded 	bl	800c074 <BcdToAscii>
 800c49a:	4603      	mov	r3, r0
 800c49c:	461a      	mov	r2, r3
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	711a      	strb	r2, [r3, #4]
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	791b      	ldrb	r3, [r3, #4]
 800c4a6:	461a      	mov	r2, r3
 800c4a8:	4b1e      	ldr	r3, [pc, #120]	; (800c524 <DS1302_ReadTime+0xe4>)
 800c4aa:	60da      	str	r2, [r3, #12]
	timeData[2] = datatime->Day = BcdToAscii(DS1302_Read(0x87)); //日
 800c4ac:	2087      	movs	r0, #135	; 0x87
 800c4ae:	f7ff ff93 	bl	800c3d8 <DS1302_Read>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	f7ff fddd 	bl	800c074 <BcdToAscii>
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	461a      	mov	r2, r3
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	70da      	strb	r2, [r3, #3]
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	78db      	ldrb	r3, [r3, #3]
 800c4c6:	461a      	mov	r2, r3
 800c4c8:	4b16      	ldr	r3, [pc, #88]	; (800c524 <DS1302_ReadTime+0xe4>)
 800c4ca:	609a      	str	r2, [r3, #8]
	timeData[1] = datatime->Month = BcdToAscii(DS1302_Read(0x89)); //月
 800c4cc:	2089      	movs	r0, #137	; 0x89
 800c4ce:	f7ff ff83 	bl	800c3d8 <DS1302_Read>
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	f7ff fdcd 	bl	800c074 <BcdToAscii>
 800c4da:	4603      	mov	r3, r0
 800c4dc:	461a      	mov	r2, r3
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	709a      	strb	r2, [r3, #2]
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	789b      	ldrb	r3, [r3, #2]
 800c4e6:	461a      	mov	r2, r3
 800c4e8:	4b0e      	ldr	r3, [pc, #56]	; (800c524 <DS1302_ReadTime+0xe4>)
 800c4ea:	605a      	str	r2, [r3, #4]
	timeData[0] = datatime->Year = BcdToAscii(DS1302_Read(0x8D)); //年
 800c4ec:	208d      	movs	r0, #141	; 0x8d
 800c4ee:	f7ff ff73 	bl	800c3d8 <DS1302_Read>
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	f7ff fdbd 	bl	800c074 <BcdToAscii>
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	b29a      	uxth	r2, r3
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	801a      	strh	r2, [r3, #0]
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	881b      	ldrh	r3, [r3, #0]
 800c506:	461a      	mov	r2, r3
 800c508:	4b06      	ldr	r3, [pc, #24]	; (800c524 <DS1302_ReadTime+0xe4>)
 800c50a:	601a      	str	r2, [r3, #0]
	timeData[0] += 2000;
 800c50c:	4b05      	ldr	r3, [pc, #20]	; (800c524 <DS1302_ReadTime+0xe4>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800c514:	4a03      	ldr	r2, [pc, #12]	; (800c524 <DS1302_ReadTime+0xe4>)
 800c516:	6013      	str	r3, [r2, #0]
	taskEXIT_CRITICAL();
 800c518:	f7fe fed6 	bl	800b2c8 <vPortExitCritical>
}
 800c51c:	bf00      	nop
 800c51e:	3708      	adds	r7, #8
 800c520:	46bd      	mov	sp, r7
 800c522:	bd80      	pop	{r7, pc}
 800c524:	20000164 	.word	0x20000164

0800c528 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b082      	sub	sp, #8
 800c52c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c52e:	2300      	movs	r3, #0
 800c530:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c532:	f000 f896 	bl	800c662 <BSP_SD_IsDetected>
 800c536:	4603      	mov	r3, r0
 800c538:	2b01      	cmp	r3, #1
 800c53a:	d001      	beq.n	800c540 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800c53c:	2301      	movs	r3, #1
 800c53e:	e012      	b.n	800c566 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800c540:	480b      	ldr	r0, [pc, #44]	; (800c570 <BSP_SD_Init+0x48>)
 800c542:	f7f6 fa51 	bl	80029e8 <HAL_SD_Init>
 800c546:	4603      	mov	r3, r0
 800c548:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800c54a:	79fb      	ldrb	r3, [r7, #7]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d109      	bne.n	800c564 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800c550:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c554:	4806      	ldr	r0, [pc, #24]	; (800c570 <BSP_SD_Init+0x48>)
 800c556:	f7f7 f82c 	bl	80035b2 <HAL_SD_ConfigWideBusOperation>
 800c55a:	4603      	mov	r3, r0
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d001      	beq.n	800c564 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800c560:	2301      	movs	r3, #1
 800c562:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800c564:	79fb      	ldrb	r3, [r7, #7]
}
 800c566:	4618      	mov	r0, r3
 800c568:	3708      	adds	r7, #8
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}
 800c56e:	bf00      	nop
 800c570:	20006ecc 	.word	0x20006ecc

0800c574 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b086      	sub	sp, #24
 800c578:	af00      	add	r7, sp, #0
 800c57a:	60f8      	str	r0, [r7, #12]
 800c57c:	60b9      	str	r1, [r7, #8]
 800c57e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c580:	2300      	movs	r3, #0
 800c582:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	68ba      	ldr	r2, [r7, #8]
 800c588:	68f9      	ldr	r1, [r7, #12]
 800c58a:	4806      	ldr	r0, [pc, #24]	; (800c5a4 <BSP_SD_ReadBlocks_DMA+0x30>)
 800c58c:	f7f6 fab4 	bl	8002af8 <HAL_SD_ReadBlocks_DMA>
 800c590:	4603      	mov	r3, r0
 800c592:	2b00      	cmp	r3, #0
 800c594:	d001      	beq.n	800c59a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c596:	2301      	movs	r3, #1
 800c598:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800c59a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c59c:	4618      	mov	r0, r3
 800c59e:	3718      	adds	r7, #24
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}
 800c5a4:	20006ecc 	.word	0x20006ecc

0800c5a8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b086      	sub	sp, #24
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	60f8      	str	r0, [r7, #12]
 800c5b0:	60b9      	str	r1, [r7, #8]
 800c5b2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	68ba      	ldr	r2, [r7, #8]
 800c5bc:	68f9      	ldr	r1, [r7, #12]
 800c5be:	4806      	ldr	r0, [pc, #24]	; (800c5d8 <BSP_SD_WriteBlocks_DMA+0x30>)
 800c5c0:	f7f6 fb66 	bl	8002c90 <HAL_SD_WriteBlocks_DMA>
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d001      	beq.n	800c5ce <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c5ca:	2301      	movs	r3, #1
 800c5cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800c5ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	3718      	adds	r7, #24
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bd80      	pop	{r7, pc}
 800c5d8:	20006ecc 	.word	0x20006ecc

0800c5dc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c5e0:	4805      	ldr	r0, [pc, #20]	; (800c5f8 <BSP_SD_GetCardState+0x1c>)
 800c5e2:	f7f7 f862 	bl	80036aa <HAL_SD_GetCardState>
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	2b04      	cmp	r3, #4
 800c5ea:	bf14      	ite	ne
 800c5ec:	2301      	movne	r3, #1
 800c5ee:	2300      	moveq	r3, #0
 800c5f0:	b2db      	uxtb	r3, r3
}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	bd80      	pop	{r7, pc}
 800c5f6:	bf00      	nop
 800c5f8:	20006ecc 	.word	0x20006ecc

0800c5fc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b082      	sub	sp, #8
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800c604:	6879      	ldr	r1, [r7, #4]
 800c606:	4803      	ldr	r0, [pc, #12]	; (800c614 <BSP_SD_GetCardInfo+0x18>)
 800c608:	f7f6 ffa7 	bl	800355a <HAL_SD_GetCardInfo>
}
 800c60c:	bf00      	nop
 800c60e:	3708      	adds	r7, #8
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}
 800c614:	20006ecc 	.word	0x20006ecc

0800c618 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b082      	sub	sp, #8
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800c620:	f000 f818 	bl	800c654 <BSP_SD_AbortCallback>
}
 800c624:	bf00      	nop
 800c626:	3708      	adds	r7, #8
 800c628:	46bd      	mov	sp, r7
 800c62a:	bd80      	pop	{r7, pc}

0800c62c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b082      	sub	sp, #8
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800c634:	f005 f9d2 	bl	80119dc <BSP_SD_WriteCpltCallback>
}
 800c638:	bf00      	nop
 800c63a:	3708      	adds	r7, #8
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}

0800c640 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b082      	sub	sp, #8
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800c648:	f005 f9d6 	bl	80119f8 <BSP_SD_ReadCpltCallback>
}
 800c64c:	bf00      	nop
 800c64e:	3708      	adds	r7, #8
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}

0800c654 <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callback
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{
 800c654:	b480      	push	{r7}
 800c656:	af00      	add	r7, sp, #0

}
 800c658:	bf00      	nop
 800c65a:	46bd      	mov	sp, r7
 800c65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c660:	4770      	bx	lr

0800c662 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 800c662:	b480      	push	{r7}
 800c664:	b083      	sub	sp, #12
 800c666:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c668:	2301      	movs	r3, #1
 800c66a:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */    	

  return status;
 800c66c:	79fb      	ldrb	r3, [r7, #7]
 800c66e:	b2db      	uxtb	r3, r3
}
 800c670:	4618      	mov	r0, r3
 800c672:	370c      	adds	r7, #12
 800c674:	46bd      	mov	sp, r7
 800c676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67a:	4770      	bx	lr

0800c67c <MX_FATFS_Init>:

#include "fatfs.h"
#include "record.h"

void MX_FATFS_Init(void) 
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c680:	4909      	ldr	r1, [pc, #36]	; (800c6a8 <MX_FATFS_Init+0x2c>)
 800c682:	480a      	ldr	r0, [pc, #40]	; (800c6ac <MX_FATFS_Init+0x30>)
 800c684:	f7fc fa2c 	bl	8008ae0 <FATFS_LinkDriver>
 800c688:	4603      	mov	r3, r0
 800c68a:	461a      	mov	r2, r3
 800c68c:	4b08      	ldr	r3, [pc, #32]	; (800c6b0 <MX_FATFS_Init+0x34>)
 800c68e:	701a      	strb	r2, [r3, #0]
  f_mount(&SDFatFS, SDPath, retSD);
 800c690:	4b07      	ldr	r3, [pc, #28]	; (800c6b0 <MX_FATFS_Init+0x34>)
 800c692:	781b      	ldrb	r3, [r3, #0]
 800c694:	461a      	mov	r2, r3
 800c696:	4904      	ldr	r1, [pc, #16]	; (800c6a8 <MX_FATFS_Init+0x2c>)
 800c698:	4806      	ldr	r0, [pc, #24]	; (800c6b4 <MX_FATFS_Init+0x38>)
 800c69a:	f7fa ff1d 	bl	80074d8 <f_mount>
  recordCheck();
 800c69e:	f004 fd87 	bl	80111b0 <recordCheck>
}
 800c6a2:	bf00      	nop
 800c6a4:	bd80      	pop	{r7, pc}
 800c6a6:	bf00      	nop
 800c6a8:	20000630 	.word	0x20000630
 800c6ac:	0806dfbc 	.word	0x0806dfbc
 800c6b0:	200093b0 	.word	0x200093b0
 800c6b4:	20009974 	.word	0x20009974

0800c6b8 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c6b8:	b480      	push	{r7}
 800c6ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c6bc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800c6be:	4618      	mov	r0, r3
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c6:	4770      	bx	lr

0800c6c8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800c6c8:	b480      	push	{r7}
 800c6ca:	b085      	sub	sp, #20
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	60f8      	str	r0, [r7, #12]
 800c6d0:	60b9      	str	r1, [r7, #8]
 800c6d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	4a07      	ldr	r2, [pc, #28]	; (800c6f4 <vApplicationGetIdleTaskMemory+0x2c>)
 800c6d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800c6da:	68bb      	ldr	r3, [r7, #8]
 800c6dc:	4a06      	ldr	r2, [pc, #24]	; (800c6f8 <vApplicationGetIdleTaskMemory+0x30>)
 800c6de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800c6e6:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800c6e8:	bf00      	nop
 800c6ea:	3714      	adds	r7, #20
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f2:	4770      	bx	lr
 800c6f4:	20004440 	.word	0x20004440
 800c6f8:	20004494 	.word	0x20004494

0800c6fc <ledGpioInit>:
 */
#include "led.h"
#include "main.h"
#include "cmsis_os.h"
#include "mylcd.h"
void ledGpioInit(void){
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b088      	sub	sp, #32
 800c700:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c702:	f107 030c 	add.w	r3, r7, #12
 800c706:	2200      	movs	r2, #0
 800c708:	601a      	str	r2, [r3, #0]
 800c70a:	605a      	str	r2, [r3, #4]
 800c70c:	609a      	str	r2, [r3, #8]
 800c70e:	60da      	str	r2, [r3, #12]
 800c710:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800c712:	2300      	movs	r3, #0
 800c714:	60bb      	str	r3, [r7, #8]
 800c716:	4b51      	ldr	r3, [pc, #324]	; (800c85c <ledGpioInit+0x160>)
 800c718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c71a:	4a50      	ldr	r2, [pc, #320]	; (800c85c <ledGpioInit+0x160>)
 800c71c:	f043 0304 	orr.w	r3, r3, #4
 800c720:	6313      	str	r3, [r2, #48]	; 0x30
 800c722:	4b4e      	ldr	r3, [pc, #312]	; (800c85c <ledGpioInit+0x160>)
 800c724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c726:	f003 0304 	and.w	r3, r3, #4
 800c72a:	60bb      	str	r3, [r7, #8]
 800c72c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800c72e:	2300      	movs	r3, #0
 800c730:	607b      	str	r3, [r7, #4]
 800c732:	4b4a      	ldr	r3, [pc, #296]	; (800c85c <ledGpioInit+0x160>)
 800c734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c736:	4a49      	ldr	r2, [pc, #292]	; (800c85c <ledGpioInit+0x160>)
 800c738:	f043 0302 	orr.w	r3, r3, #2
 800c73c:	6313      	str	r3, [r2, #48]	; 0x30
 800c73e:	4b47      	ldr	r3, [pc, #284]	; (800c85c <ledGpioInit+0x160>)
 800c740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c742:	f003 0302 	and.w	r3, r3, #2
 800c746:	607b      	str	r3, [r7, #4]
 800c748:	687b      	ldr	r3, [r7, #4]
	HAL_GPIO_WritePin(NORMALPORT, NORMALPIN, GPIO_PIN_SET);
 800c74a:	2201      	movs	r2, #1
 800c74c:	2101      	movs	r1, #1
 800c74e:	4844      	ldr	r0, [pc, #272]	; (800c860 <ledGpioInit+0x164>)
 800c750:	f7f5 fce8 	bl	8002124 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ERRPORT, ERRPIN, GPIO_PIN_SET);
 800c754:	2201      	movs	r2, #1
 800c756:	2102      	movs	r1, #2
 800c758:	4841      	ldr	r0, [pc, #260]	; (800c860 <ledGpioInit+0x164>)
 800c75a:	f7f5 fce3 	bl	8002124 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HALARMPORT, HALARMPIN, GPIO_PIN_SET);
 800c75e:	2201      	movs	r2, #1
 800c760:	2110      	movs	r1, #16
 800c762:	4840      	ldr	r0, [pc, #256]	; (800c864 <ledGpioInit+0x168>)
 800c764:	f7f5 fcde 	bl	8002124 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LALARMPORT, LALARMPIN, GPIO_PIN_SET);
 800c768:	2201      	movs	r2, #1
 800c76a:	2120      	movs	r1, #32
 800c76c:	483d      	ldr	r0, [pc, #244]	; (800c864 <ledGpioInit+0x168>)
 800c76e:	f7f5 fcd9 	bl	8002124 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(POWERLEDPORT, POWERLEDPIN, GPIO_PIN_RESET);

	GPIO_InitStruct.Pin = NORMALPIN;
 800c772:	2301      	movs	r3, #1
 800c774:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c776:	2301      	movs	r3, #1
 800c778:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c77a:	2300      	movs	r3, #0
 800c77c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c77e:	2300      	movs	r3, #0
 800c780:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(NORMALPORT, &GPIO_InitStruct);
 800c782:	f107 030c 	add.w	r3, r7, #12
 800c786:	4619      	mov	r1, r3
 800c788:	4835      	ldr	r0, [pc, #212]	; (800c860 <ledGpioInit+0x164>)
 800c78a:	f7f5 fb19 	bl	8001dc0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = ERRPIN;
 800c78e:	2302      	movs	r3, #2
 800c790:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c792:	2301      	movs	r3, #1
 800c794:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c796:	2300      	movs	r3, #0
 800c798:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c79a:	2300      	movs	r3, #0
 800c79c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(ERRPORT, &GPIO_InitStruct);
 800c79e:	f107 030c 	add.w	r3, r7, #12
 800c7a2:	4619      	mov	r1, r3
 800c7a4:	482e      	ldr	r0, [pc, #184]	; (800c860 <ledGpioInit+0x164>)
 800c7a6:	f7f5 fb0b 	bl	8001dc0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = HALARMPIN;
 800c7aa:	2310      	movs	r3, #16
 800c7ac:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c7ae:	2301      	movs	r3, #1
 800c7b0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(HALARMPORT, &GPIO_InitStruct);
 800c7ba:	f107 030c 	add.w	r3, r7, #12
 800c7be:	4619      	mov	r1, r3
 800c7c0:	4828      	ldr	r0, [pc, #160]	; (800c864 <ledGpioInit+0x168>)
 800c7c2:	f7f5 fafd 	bl	8001dc0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LALARMPIN;
 800c7c6:	2320      	movs	r3, #32
 800c7c8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c7ca:	2301      	movs	r3, #1
 800c7cc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(LALARMPORT, &GPIO_InitStruct);
 800c7d6:	f107 030c 	add.w	r3, r7, #12
 800c7da:	4619      	mov	r1, r3
 800c7dc:	4821      	ldr	r0, [pc, #132]	; (800c864 <ledGpioInit+0x168>)
 800c7de:	f7f5 faef 	bl	8001dc0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = POWERLEDPIN;
 800c7e2:	2340      	movs	r3, #64	; 0x40
 800c7e4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c7e6:	2301      	movs	r3, #1
 800c7e8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(POWERLEDPORT, &GPIO_InitStruct);
 800c7f2:	f107 030c 	add.w	r3, r7, #12
 800c7f6:	4619      	mov	r1, r3
 800c7f8:	481a      	ldr	r0, [pc, #104]	; (800c864 <ledGpioInit+0x168>)
 800c7fa:	f7f5 fae1 	bl	8001dc0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = BuzzerPIN;;
 800c7fe:	2380      	movs	r3, #128	; 0x80
 800c800:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c802:	2301      	movs	r3, #1
 800c804:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c806:	2300      	movs	r3, #0
 800c808:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c80a:	2300      	movs	r3, #0
 800c80c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(BuzzerPORT, &GPIO_InitStruct);
 800c80e:	f107 030c 	add.w	r3, r7, #12
 800c812:	4619      	mov	r1, r3
 800c814:	4813      	ldr	r0, [pc, #76]	; (800c864 <ledGpioInit+0x168>)
 800c816:	f7f5 fad3 	bl	8001dc0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = MAINPOWERDETECTPIN;
 800c81a:	2301      	movs	r3, #1
 800c81c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c81e:	2300      	movs	r3, #0
 800c820:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c822:	2301      	movs	r3, #1
 800c824:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c826:	2300      	movs	r3, #0
 800c828:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(MAINPOWERDETECTPORT, &GPIO_InitStruct);
 800c82a:	f107 030c 	add.w	r3, r7, #12
 800c82e:	4619      	mov	r1, r3
 800c830:	480c      	ldr	r0, [pc, #48]	; (800c864 <ledGpioInit+0x168>)
 800c832:	f7f5 fac5 	bl	8001dc0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = BAKPOWERDETECTPIN;
 800c836:	2302      	movs	r3, #2
 800c838:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c83a:	2300      	movs	r3, #0
 800c83c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c83e:	2301      	movs	r3, #1
 800c840:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c842:	2300      	movs	r3, #0
 800c844:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(BAKPOWERDETECTPORT, &GPIO_InitStruct);
 800c846:	f107 030c 	add.w	r3, r7, #12
 800c84a:	4619      	mov	r1, r3
 800c84c:	4805      	ldr	r0, [pc, #20]	; (800c864 <ledGpioInit+0x168>)
 800c84e:	f7f5 fab7 	bl	8001dc0 <HAL_GPIO_Init>
}
 800c852:	bf00      	nop
 800c854:	3720      	adds	r7, #32
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}
 800c85a:	bf00      	nop
 800c85c:	40023800 	.word	0x40023800
 800c860:	40020400 	.word	0x40020400
 800c864:	40020800 	.word	0x40020800

0800c868 <allLedOn>:

void allLedOn(void){
 800c868:	b580      	push	{r7, lr}
 800c86a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NORMALPORT, NORMALPIN, GPIO_PIN_RESET);
 800c86c:	2200      	movs	r2, #0
 800c86e:	2101      	movs	r1, #1
 800c870:	480a      	ldr	r0, [pc, #40]	; (800c89c <allLedOn+0x34>)
 800c872:	f7f5 fc57 	bl	8002124 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ERRPORT, ERRPIN, GPIO_PIN_RESET);
 800c876:	2200      	movs	r2, #0
 800c878:	2102      	movs	r1, #2
 800c87a:	4808      	ldr	r0, [pc, #32]	; (800c89c <allLedOn+0x34>)
 800c87c:	f7f5 fc52 	bl	8002124 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HALARMPORT, HALARMPIN, GPIO_PIN_RESET);
 800c880:	2200      	movs	r2, #0
 800c882:	2110      	movs	r1, #16
 800c884:	4806      	ldr	r0, [pc, #24]	; (800c8a0 <allLedOn+0x38>)
 800c886:	f7f5 fc4d 	bl	8002124 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LALARMPORT, LALARMPIN, GPIO_PIN_RESET);
 800c88a:	2200      	movs	r2, #0
 800c88c:	2120      	movs	r1, #32
 800c88e:	4804      	ldr	r0, [pc, #16]	; (800c8a0 <allLedOn+0x38>)
 800c890:	f7f5 fc48 	bl	8002124 <HAL_GPIO_WritePin>
	buzzerOn();
 800c894:	f000 f806 	bl	800c8a4 <buzzerOn>
}
 800c898:	bf00      	nop
 800c89a:	bd80      	pop	{r7, pc}
 800c89c:	40020400 	.word	0x40020400
 800c8a0:	40020800 	.word	0x40020800

0800c8a4 <buzzerOn>:
int alamBan = 1;
void buzzerOn(void){
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	af00      	add	r7, sp, #0
	if(alamBan == 1)
 800c8a8:	4b08      	ldr	r3, [pc, #32]	; (800c8cc <buzzerOn+0x28>)
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	2b01      	cmp	r3, #1
 800c8ae:	d105      	bne.n	800c8bc <buzzerOn+0x18>
		HAL_GPIO_WritePin(BuzzerPORT, BuzzerPIN, GPIO_PIN_SET);
 800c8b0:	2201      	movs	r2, #1
 800c8b2:	2180      	movs	r1, #128	; 0x80
 800c8b4:	4806      	ldr	r0, [pc, #24]	; (800c8d0 <buzzerOn+0x2c>)
 800c8b6:	f7f5 fc35 	bl	8002124 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(BuzzerPORT, BuzzerPIN, GPIO_PIN_RESET);
}
 800c8ba:	e004      	b.n	800c8c6 <buzzerOn+0x22>
		HAL_GPIO_WritePin(BuzzerPORT, BuzzerPIN, GPIO_PIN_RESET);
 800c8bc:	2200      	movs	r2, #0
 800c8be:	2180      	movs	r1, #128	; 0x80
 800c8c0:	4803      	ldr	r0, [pc, #12]	; (800c8d0 <buzzerOn+0x2c>)
 800c8c2:	f7f5 fc2f 	bl	8002124 <HAL_GPIO_WritePin>
}
 800c8c6:	bf00      	nop
 800c8c8:	bd80      	pop	{r7, pc}
 800c8ca:	bf00      	nop
 800c8cc:	20000090 	.word	0x20000090
 800c8d0:	40020800 	.word	0x40020800

0800c8d4 <buzzerOff>:

void buzzerOff(void){
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BuzzerPORT, BuzzerPIN, GPIO_PIN_RESET);
 800c8d8:	2200      	movs	r2, #0
 800c8da:	2180      	movs	r1, #128	; 0x80
 800c8dc:	4802      	ldr	r0, [pc, #8]	; (800c8e8 <buzzerOff+0x14>)
 800c8de:	f7f5 fc21 	bl	8002124 <HAL_GPIO_WritePin>
}
 800c8e2:	bf00      	nop
 800c8e4:	bd80      	pop	{r7, pc}
 800c8e6:	bf00      	nop
 800c8e8:	40020800 	.word	0x40020800

0800c8ec <allLedOff>:

void allLedOff(void){
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NORMALPORT, NORMALPIN, GPIO_PIN_SET);
 800c8f0:	2201      	movs	r2, #1
 800c8f2:	2101      	movs	r1, #1
 800c8f4:	480a      	ldr	r0, [pc, #40]	; (800c920 <allLedOff+0x34>)
 800c8f6:	f7f5 fc15 	bl	8002124 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ERRPORT, ERRPIN, GPIO_PIN_SET);
 800c8fa:	2201      	movs	r2, #1
 800c8fc:	2102      	movs	r1, #2
 800c8fe:	4808      	ldr	r0, [pc, #32]	; (800c920 <allLedOff+0x34>)
 800c900:	f7f5 fc10 	bl	8002124 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HALARMPORT, HALARMPIN, GPIO_PIN_SET);
 800c904:	2201      	movs	r2, #1
 800c906:	2110      	movs	r1, #16
 800c908:	4806      	ldr	r0, [pc, #24]	; (800c924 <allLedOff+0x38>)
 800c90a:	f7f5 fc0b 	bl	8002124 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LALARMPORT, LALARMPIN, GPIO_PIN_SET);
 800c90e:	2201      	movs	r2, #1
 800c910:	2120      	movs	r1, #32
 800c912:	4804      	ldr	r0, [pc, #16]	; (800c924 <allLedOff+0x38>)
 800c914:	f7f5 fc06 	bl	8002124 <HAL_GPIO_WritePin>
	buzzerOff();
 800c918:	f7ff ffdc 	bl	800c8d4 <buzzerOff>
}
 800c91c:	bf00      	nop
 800c91e:	bd80      	pop	{r7, pc}
 800c920:	40020400 	.word	0x40020400
 800c924:	40020800 	.word	0x40020800

0800c928 <normal>:

void normal(void)
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LALARMPORT, LALARMPIN, GPIO_PIN_SET);
 800c92c:	2201      	movs	r2, #1
 800c92e:	2120      	movs	r1, #32
 800c930:	4808      	ldr	r0, [pc, #32]	; (800c954 <normal+0x2c>)
 800c932:	f7f5 fbf7 	bl	8002124 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HALARMPORT, HALARMPIN, GPIO_PIN_SET);
 800c936:	2201      	movs	r2, #1
 800c938:	2110      	movs	r1, #16
 800c93a:	4806      	ldr	r0, [pc, #24]	; (800c954 <normal+0x2c>)
 800c93c:	f7f5 fbf2 	bl	8002124 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(NORMALPORT, NORMALPIN, GPIO_PIN_RESET);
 800c940:	2200      	movs	r2, #0
 800c942:	2101      	movs	r1, #1
 800c944:	4804      	ldr	r0, [pc, #16]	; (800c958 <normal+0x30>)
 800c946:	f7f5 fbed 	bl	8002124 <HAL_GPIO_WritePin>
	buzzerOff();
 800c94a:	f7ff ffc3 	bl	800c8d4 <buzzerOff>
}
 800c94e:	bf00      	nop
 800c950:	bd80      	pop	{r7, pc}
 800c952:	bf00      	nop
 800c954:	40020800 	.word	0x40020800
 800c958:	40020400 	.word	0x40020400

0800c95c <HALARM>:

void HALARM(void)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NORMALPORT, NORMALPIN, GPIO_PIN_SET);
 800c960:	2201      	movs	r2, #1
 800c962:	2101      	movs	r1, #1
 800c964:	480c      	ldr	r0, [pc, #48]	; (800c998 <HALARM+0x3c>)
 800c966:	f7f5 fbdd 	bl	8002124 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LALARMPORT, LALARMPIN, GPIO_PIN_SET);
 800c96a:	2201      	movs	r2, #1
 800c96c:	2120      	movs	r1, #32
 800c96e:	480b      	ldr	r0, [pc, #44]	; (800c99c <HALARM+0x40>)
 800c970:	f7f5 fbd8 	bl	8002124 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HALARMPORT, HALARMPIN, GPIO_PIN_RESET);
 800c974:	2200      	movs	r2, #0
 800c976:	2110      	movs	r1, #16
 800c978:	4808      	ldr	r0, [pc, #32]	; (800c99c <HALARM+0x40>)
 800c97a:	f7f5 fbd3 	bl	8002124 <HAL_GPIO_WritePin>
	buzzerOn();
 800c97e:	f7ff ff91 	bl	800c8a4 <buzzerOn>
	osDelay(100);
 800c982:	2064      	movs	r0, #100	; 0x64
 800c984:	f7fc f9a0 	bl	8008cc8 <osDelay>
	HAL_GPIO_WritePin(HALARMPORT, HALARMPIN, GPIO_PIN_SET);
 800c988:	2201      	movs	r2, #1
 800c98a:	2110      	movs	r1, #16
 800c98c:	4803      	ldr	r0, [pc, #12]	; (800c99c <HALARM+0x40>)
 800c98e:	f7f5 fbc9 	bl	8002124 <HAL_GPIO_WritePin>
}
 800c992:	bf00      	nop
 800c994:	bd80      	pop	{r7, pc}
 800c996:	bf00      	nop
 800c998:	40020400 	.word	0x40020400
 800c99c:	40020800 	.word	0x40020800

0800c9a0 <LALARM>:
void LALARM(void)
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NORMALPORT, NORMALPIN, GPIO_PIN_SET);
 800c9a4:	2201      	movs	r2, #1
 800c9a6:	2101      	movs	r1, #1
 800c9a8:	480d      	ldr	r0, [pc, #52]	; (800c9e0 <LALARM+0x40>)
 800c9aa:	f7f5 fbbb 	bl	8002124 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HALARMPORT, HALARMPIN, GPIO_PIN_SET);
 800c9ae:	2201      	movs	r2, #1
 800c9b0:	2110      	movs	r1, #16
 800c9b2:	480c      	ldr	r0, [pc, #48]	; (800c9e4 <LALARM+0x44>)
 800c9b4:	f7f5 fbb6 	bl	8002124 <HAL_GPIO_WritePin>
	buzzerOn();
 800c9b8:	f7ff ff74 	bl	800c8a4 <buzzerOn>
	HAL_GPIO_WritePin(LALARMPORT, LALARMPIN, GPIO_PIN_RESET);
 800c9bc:	2200      	movs	r2, #0
 800c9be:	2120      	movs	r1, #32
 800c9c0:	4808      	ldr	r0, [pc, #32]	; (800c9e4 <LALARM+0x44>)
 800c9c2:	f7f5 fbaf 	bl	8002124 <HAL_GPIO_WritePin>
	osDelay(100);
 800c9c6:	2064      	movs	r0, #100	; 0x64
 800c9c8:	f7fc f97e 	bl	8008cc8 <osDelay>
	HAL_GPIO_WritePin(LALARMPORT, LALARMPIN, GPIO_PIN_SET);
 800c9cc:	2201      	movs	r2, #1
 800c9ce:	2120      	movs	r1, #32
 800c9d0:	4804      	ldr	r0, [pc, #16]	; (800c9e4 <LALARM+0x44>)
 800c9d2:	f7f5 fba7 	bl	8002124 <HAL_GPIO_WritePin>
	buzzerOff();
 800c9d6:	f7ff ff7d 	bl	800c8d4 <buzzerOff>
}
 800c9da:	bf00      	nop
 800c9dc:	bd80      	pop	{r7, pc}
 800c9de:	bf00      	nop
 800c9e0:	40020400 	.word	0x40020400
 800c9e4:	40020800 	.word	0x40020800

0800c9e8 <hardWareFault>:

void hardWareFault(void){
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NORMALPORT, NORMALPIN, GPIO_PIN_SET);
 800c9ec:	2201      	movs	r2, #1
 800c9ee:	2101      	movs	r1, #1
 800c9f0:	480f      	ldr	r0, [pc, #60]	; (800ca30 <hardWareFault+0x48>)
 800c9f2:	f7f5 fb97 	bl	8002124 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LALARMPORT, LALARMPIN, GPIO_PIN_SET);
 800c9f6:	2201      	movs	r2, #1
 800c9f8:	2120      	movs	r1, #32
 800c9fa:	480e      	ldr	r0, [pc, #56]	; (800ca34 <hardWareFault+0x4c>)
 800c9fc:	f7f5 fb92 	bl	8002124 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HALARMPORT, HALARMPIN, GPIO_PIN_SET);
 800ca00:	2201      	movs	r2, #1
 800ca02:	2110      	movs	r1, #16
 800ca04:	480b      	ldr	r0, [pc, #44]	; (800ca34 <hardWareFault+0x4c>)
 800ca06:	f7f5 fb8d 	bl	8002124 <HAL_GPIO_WritePin>
	buzzerOn();
 800ca0a:	f7ff ff4b 	bl	800c8a4 <buzzerOn>
	HAL_GPIO_WritePin(ERRPORT, ERRPIN, GPIO_PIN_RESET);
 800ca0e:	2200      	movs	r2, #0
 800ca10:	2102      	movs	r1, #2
 800ca12:	4807      	ldr	r0, [pc, #28]	; (800ca30 <hardWareFault+0x48>)
 800ca14:	f7f5 fb86 	bl	8002124 <HAL_GPIO_WritePin>
	osDelay(100);
 800ca18:	2064      	movs	r0, #100	; 0x64
 800ca1a:	f7fc f955 	bl	8008cc8 <osDelay>
	HAL_GPIO_WritePin(ERRPORT, ERRPIN, GPIO_PIN_SET);
 800ca1e:	2201      	movs	r2, #1
 800ca20:	2102      	movs	r1, #2
 800ca22:	4803      	ldr	r0, [pc, #12]	; (800ca30 <hardWareFault+0x48>)
 800ca24:	f7f5 fb7e 	bl	8002124 <HAL_GPIO_WritePin>
	buzzerOff();
 800ca28:	f7ff ff54 	bl	800c8d4 <buzzerOff>
}
 800ca2c:	bf00      	nop
 800ca2e:	bd80      	pop	{r7, pc}
 800ca30:	40020400 	.word	0x40020400
 800ca34:	40020800 	.word	0x40020800

0800ca38 <powerLedOn>:
void powerLedOn(void){
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(POWERLEDPORT, POWERLEDPIN, GPIO_PIN_SET);
 800ca3c:	2201      	movs	r2, #1
 800ca3e:	2140      	movs	r1, #64	; 0x40
 800ca40:	4802      	ldr	r0, [pc, #8]	; (800ca4c <powerLedOn+0x14>)
 800ca42:	f7f5 fb6f 	bl	8002124 <HAL_GPIO_WritePin>
}
 800ca46:	bf00      	nop
 800ca48:	bd80      	pop	{r7, pc}
 800ca4a:	bf00      	nop
 800ca4c:	40020800 	.word	0x40020800

0800ca50 <powerLedOff>:

void powerLedOff(void){
 800ca50:	b580      	push	{r7, lr}
 800ca52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(POWERLEDPORT, POWERLEDPIN, GPIO_PIN_RESET);
 800ca54:	2200      	movs	r2, #0
 800ca56:	2140      	movs	r1, #64	; 0x40
 800ca58:	4802      	ldr	r0, [pc, #8]	; (800ca64 <powerLedOff+0x14>)
 800ca5a:	f7f5 fb63 	bl	8002124 <HAL_GPIO_WritePin>
}
 800ca5e:	bf00      	nop
 800ca60:	bd80      	pop	{r7, pc}
 800ca62:	bf00      	nop
 800ca64:	40020800 	.word	0x40020800

0800ca68 <powerFault>:
extern struct deviceInfo deviceOwnInfo;
void powerFault(void){
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	af00      	add	r7, sp, #0
	powerLedOn();
 800ca6c:	f7ff ffe4 	bl	800ca38 <powerLedOn>
	buzzerOn();
 800ca70:	f7ff ff18 	bl	800c8a4 <buzzerOn>
	osDelay(100);
 800ca74:	2064      	movs	r0, #100	; 0x64
 800ca76:	f7fc f927 	bl	8008cc8 <osDelay>
	powerLedOff();
 800ca7a:	f7ff ffe9 	bl	800ca50 <powerLedOff>
	if(deviceOwnInfo.sensorValue < deviceOwnInfo.currentLowLimit)
 800ca7e:	4b05      	ldr	r3, [pc, #20]	; (800ca94 <powerFault+0x2c>)
 800ca80:	6a1a      	ldr	r2, [r3, #32]
 800ca82:	4b04      	ldr	r3, [pc, #16]	; (800ca94 <powerFault+0x2c>)
 800ca84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca86:	429a      	cmp	r2, r3
 800ca88:	da01      	bge.n	800ca8e <powerFault+0x26>
		buzzerOff();
 800ca8a:	f7ff ff23 	bl	800c8d4 <buzzerOff>
}
 800ca8e:	bf00      	nop
 800ca90:	bd80      	pop	{r7, pc}
 800ca92:	bf00      	nop
 800ca94:	2000017c 	.word	0x2000017c

0800ca98 <mainPowerNormal>:

int mainPowerNormal(void){
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(MAINPOWERDETECTPORT, MAINPOWERDETECTPIN);
 800ca9c:	2101      	movs	r1, #1
 800ca9e:	4803      	ldr	r0, [pc, #12]	; (800caac <mainPowerNormal+0x14>)
 800caa0:	f7f5 fb28 	bl	80020f4 <HAL_GPIO_ReadPin>
 800caa4:	4603      	mov	r3, r0
}
 800caa6:	4618      	mov	r0, r3
 800caa8:	bd80      	pop	{r7, pc}
 800caaa:	bf00      	nop
 800caac:	40020800 	.word	0x40020800

0800cab0 <bakPowerNormal>:

int bakPowerNormal(void){
 800cab0:	b580      	push	{r7, lr}
 800cab2:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(BAKPOWERDETECTPORT, BAKPOWERDETECTPIN);
 800cab4:	2102      	movs	r1, #2
 800cab6:	4803      	ldr	r0, [pc, #12]	; (800cac4 <bakPowerNormal+0x14>)
 800cab8:	f7f5 fb1c 	bl	80020f4 <HAL_GPIO_ReadPin>
 800cabc:	4603      	mov	r3, r0
}
 800cabe:	4618      	mov	r0, r3
 800cac0:	bd80      	pop	{r7, pc}
 800cac2:	bf00      	nop
 800cac4:	40020800 	.word	0x40020800

0800cac8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800cac8:	b5b0      	push	{r4, r5, r7, lr}
 800caca:	b096      	sub	sp, #88	; 0x58
 800cacc:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  HAL_Init();
 800cace:	f7f3 fd4f 	bl	8000570 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800cad2:	f000 f86d 	bl	800cbb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800cad6:	f000 f9e5 	bl	800cea4 <MX_GPIO_Init>
  WORDInit();
 800cada:	f005 faaf 	bl	801203c <WORDInit>
  MX_DMA_Init();
 800cade:	f000 f9b9 	bl	800ce54 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 800cae2:	f000 f935 	bl	800cd50 <MX_SDIO_SD_Init>
  MX_CAN1_Init();
 800cae6:	f000 f8cd 	bl	800cc84 <MX_CAN1_Init>
  MX_FSMC_Init();
 800caea:	f000 fadd 	bl	800d0a8 <MX_FSMC_Init>
  gpioInit();
 800caee:	f7fe fead 	bl	800b84c <gpioInit>
  MX_USART1_UART_Init();
 800caf2:	f000 f94d 	bl	800cd90 <MX_USART1_UART_Init>

  MX_USART2_UART_Init();
 800caf6:	f000 f97b 	bl	800cdf0 <MX_USART2_UART_Init>

  vSemaphoreCreateBinary(disSignal);
 800cafa:	2203      	movs	r2, #3
 800cafc:	2100      	movs	r1, #0
 800cafe:	2001      	movs	r0, #1
 800cb00:	f7fc fc2c 	bl	800935c <xQueueGenericCreate>
 800cb04:	4602      	mov	r2, r0
 800cb06:	4b23      	ldr	r3, [pc, #140]	; (800cb94 <main+0xcc>)
 800cb08:	601a      	str	r2, [r3, #0]
 800cb0a:	4b22      	ldr	r3, [pc, #136]	; (800cb94 <main+0xcc>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d006      	beq.n	800cb20 <main+0x58>
 800cb12:	4b20      	ldr	r3, [pc, #128]	; (800cb94 <main+0xcc>)
 800cb14:	6818      	ldr	r0, [r3, #0]
 800cb16:	2300      	movs	r3, #0
 800cb18:	2200      	movs	r2, #0
 800cb1a:	2100      	movs	r1, #0
 800cb1c:	f7fc fc7a 	bl	8009414 <xQueueGenericSend>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 800cb20:	4b1d      	ldr	r3, [pc, #116]	; (800cb98 <main+0xd0>)
 800cb22:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800cb26:	461d      	mov	r5, r3
 800cb28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cb2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cb2c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800cb30:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800cb34:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800cb38:	2100      	movs	r1, #0
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	f7fc f878 	bl	8008c30 <osThreadCreate>
 800cb40:	4602      	mov	r2, r0
 800cb42:	4b16      	ldr	r3, [pc, #88]	; (800cb9c <main+0xd4>)
 800cb44:	601a      	str	r2, [r3, #0]

  osThreadDef(dataGet, dataGetTask, osPriorityNormal, 0, 256);
 800cb46:	4b16      	ldr	r3, [pc, #88]	; (800cba0 <main+0xd8>)
 800cb48:	f107 0420 	add.w	r4, r7, #32
 800cb4c:	461d      	mov	r5, r3
 800cb4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cb50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cb52:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800cb56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  dataGet = osThreadCreate(osThread(dataGet), NULL);
 800cb5a:	f107 0320 	add.w	r3, r7, #32
 800cb5e:	2100      	movs	r1, #0
 800cb60:	4618      	mov	r0, r3
 800cb62:	f7fc f865 	bl	8008c30 <osThreadCreate>
 800cb66:	4602      	mov	r2, r0
 800cb68:	4b0e      	ldr	r3, [pc, #56]	; (800cba4 <main+0xdc>)
 800cb6a:	601a      	str	r2, [r3, #0]

  osThreadDef(scanButton, scanButtonTask, osPriorityNormal, 0, 256);
 800cb6c:	4b0e      	ldr	r3, [pc, #56]	; (800cba8 <main+0xe0>)
 800cb6e:	1d3c      	adds	r4, r7, #4
 800cb70:	461d      	mov	r5, r3
 800cb72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cb74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cb76:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800cb7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  scanButtonHandle = osThreadCreate(osThread(scanButton), NULL);
 800cb7e:	1d3b      	adds	r3, r7, #4
 800cb80:	2100      	movs	r1, #0
 800cb82:	4618      	mov	r0, r3
 800cb84:	f7fc f854 	bl	8008c30 <osThreadCreate>
 800cb88:	4602      	mov	r2, r0
 800cb8a:	4b08      	ldr	r3, [pc, #32]	; (800cbac <main+0xe4>)
 800cb8c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800cb8e:	f7fc f82c 	bl	8008bea <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800cb92:	e7fe      	b.n	800cb92 <main+0xca>
 800cb94:	20006cd0 	.word	0x20006cd0
 800cb98:	08012f10 	.word	0x08012f10
 800cb9c:	20006c3c 	.word	0x20006c3c
 800cba0:	08012f34 	.word	0x08012f34
 800cba4:	20006f50 	.word	0x20006f50
 800cba8:	08012f5c 	.word	0x08012f5c
 800cbac:	2000706c 	.word	0x2000706c

0800cbb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b094      	sub	sp, #80	; 0x50
 800cbb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800cbb6:	f107 0320 	add.w	r3, r7, #32
 800cbba:	2230      	movs	r2, #48	; 0x30
 800cbbc:	2100      	movs	r1, #0
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	f005 fd34 	bl	801262c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800cbc4:	f107 030c 	add.w	r3, r7, #12
 800cbc8:	2200      	movs	r2, #0
 800cbca:	601a      	str	r2, [r3, #0]
 800cbcc:	605a      	str	r2, [r3, #4]
 800cbce:	609a      	str	r2, [r3, #8]
 800cbd0:	60da      	str	r2, [r3, #12]
 800cbd2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	60bb      	str	r3, [r7, #8]
 800cbd8:	4b28      	ldr	r3, [pc, #160]	; (800cc7c <SystemClock_Config+0xcc>)
 800cbda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbdc:	4a27      	ldr	r2, [pc, #156]	; (800cc7c <SystemClock_Config+0xcc>)
 800cbde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cbe2:	6413      	str	r3, [r2, #64]	; 0x40
 800cbe4:	4b25      	ldr	r3, [pc, #148]	; (800cc7c <SystemClock_Config+0xcc>)
 800cbe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cbec:	60bb      	str	r3, [r7, #8]
 800cbee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	607b      	str	r3, [r7, #4]
 800cbf4:	4b22      	ldr	r3, [pc, #136]	; (800cc80 <SystemClock_Config+0xd0>)
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	4a21      	ldr	r2, [pc, #132]	; (800cc80 <SystemClock_Config+0xd0>)
 800cbfa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cbfe:	6013      	str	r3, [r2, #0]
 800cc00:	4b1f      	ldr	r3, [pc, #124]	; (800cc80 <SystemClock_Config+0xd0>)
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cc08:	607b      	str	r3, [r7, #4]
 800cc0a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800cc0c:	2301      	movs	r3, #1
 800cc0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800cc10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800cc14:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800cc16:	2302      	movs	r3, #2
 800cc18:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800cc1a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800cc1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800cc20:	2304      	movs	r3, #4
 800cc22:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800cc24:	23a8      	movs	r3, #168	; 0xa8
 800cc26:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800cc28:	2302      	movs	r3, #2
 800cc2a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800cc2c:	2307      	movs	r3, #7
 800cc2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800cc30:	f107 0320 	add.w	r3, r7, #32
 800cc34:	4618      	mov	r0, r3
 800cc36:	f7f5 faa7 	bl	8002188 <HAL_RCC_OscConfig>
 800cc3a:	4603      	mov	r3, r0
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d001      	beq.n	800cc44 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800cc40:	f001 f8da 	bl	800ddf8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800cc44:	230f      	movs	r3, #15
 800cc46:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800cc48:	2302      	movs	r3, #2
 800cc4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800cc50:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800cc54:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800cc56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cc5a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800cc5c:	f107 030c 	add.w	r3, r7, #12
 800cc60:	2105      	movs	r1, #5
 800cc62:	4618      	mov	r0, r3
 800cc64:	f7f5 fcd2 	bl	800260c <HAL_RCC_ClockConfig>
 800cc68:	4603      	mov	r3, r0
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d001      	beq.n	800cc72 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800cc6e:	f001 f8c3 	bl	800ddf8 <Error_Handler>
  }
}
 800cc72:	bf00      	nop
 800cc74:	3750      	adds	r7, #80	; 0x50
 800cc76:	46bd      	mov	sp, r7
 800cc78:	bd80      	pop	{r7, pc}
 800cc7a:	bf00      	nop
 800cc7c:	40023800 	.word	0x40023800
 800cc80:	40007000 	.word	0x40007000

0800cc84 <MX_CAN1_Init>:
#define ANOTHER_SENSOR_BOARD_CAN_ID       0x003
#define THIRD_SENSOR_BOARD_CAN_ID  	  0x004
#define   CAN1FIFO   CAN_RX_FIFO0
#define   CAN2FIFO   CAN_RX_FIFO1
static void MX_CAN1_Init(void)
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b08a      	sub	sp, #40	; 0x28
 800cc88:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN CAN1_Init 0 */
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */
	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 800cc8a:	4b2a      	ldr	r3, [pc, #168]	; (800cd34 <MX_CAN1_Init+0xb0>)
 800cc8c:	4a2a      	ldr	r2, [pc, #168]	; (800cd38 <MX_CAN1_Init+0xb4>)
 800cc8e:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 6;
 800cc90:	4b28      	ldr	r3, [pc, #160]	; (800cd34 <MX_CAN1_Init+0xb0>)
 800cc92:	2206      	movs	r2, #6
 800cc94:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 800cc96:	4b27      	ldr	r3, [pc, #156]	; (800cd34 <MX_CAN1_Init+0xb0>)
 800cc98:	2200      	movs	r2, #0
 800cc9a:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800cc9c:	4b25      	ldr	r3, [pc, #148]	; (800cd34 <MX_CAN1_Init+0xb0>)
 800cc9e:	2200      	movs	r2, #0
 800cca0:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 800cca2:	4b24      	ldr	r3, [pc, #144]	; (800cd34 <MX_CAN1_Init+0xb0>)
 800cca4:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 800cca8:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_6TQ;
 800ccaa:	4b22      	ldr	r3, [pc, #136]	; (800cd34 <MX_CAN1_Init+0xb0>)
 800ccac:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
 800ccb0:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 800ccb2:	4b20      	ldr	r3, [pc, #128]	; (800cd34 <MX_CAN1_Init+0xb0>)
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 800ccb8:	4b1e      	ldr	r3, [pc, #120]	; (800cd34 <MX_CAN1_Init+0xb0>)
 800ccba:	2200      	movs	r2, #0
 800ccbc:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 800ccbe:	4b1d      	ldr	r3, [pc, #116]	; (800cd34 <MX_CAN1_Init+0xb0>)
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 800ccc4:	4b1b      	ldr	r3, [pc, #108]	; (800cd34 <MX_CAN1_Init+0xb0>)
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 800ccca:	4b1a      	ldr	r3, [pc, #104]	; (800cd34 <MX_CAN1_Init+0xb0>)
 800cccc:	2200      	movs	r2, #0
 800ccce:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 800ccd0:	4b18      	ldr	r3, [pc, #96]	; (800cd34 <MX_CAN1_Init+0xb0>)
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	775a      	strb	r2, [r3, #29]
	hcan1.Init.AutoRetransmission = ENABLE;
 800ccd6:	4b17      	ldr	r3, [pc, #92]	; (800cd34 <MX_CAN1_Init+0xb0>)
 800ccd8:	2201      	movs	r2, #1
 800ccda:	76da      	strb	r2, [r3, #27]


	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800ccdc:	4815      	ldr	r0, [pc, #84]	; (800cd34 <MX_CAN1_Init+0xb0>)
 800ccde:	f7f3 fcdb 	bl	8000698 <HAL_CAN_Init>
 800cce2:	4603      	mov	r3, r0
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d001      	beq.n	800ccec <MX_CAN1_Init+0x68>
	{
		Error_Handler();
 800cce8:	f001 f886 	bl	800ddf8 <Error_Handler>
	}
	//

	CAN_FilterTypeDef  sFilterConfig;
	sFilterConfig.FilterBank = 0;                       //过滤器0
 800ccec:	2300      	movs	r3, #0
 800ccee:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode =  CAN_FILTERMODE_IDMASK;  //设为列表模式
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;;
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = F407VET6_BOARD_CAN_ID<<5;   //基本ID放入到STID中
 800ccf8:	2320      	movs	r3, #32
 800ccfa:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow  = SENSOR_BOARD_CAN_ID <<5;
 800ccfc:	2340      	movs	r3, #64	; 0x40
 800ccfe:	607b      	str	r3, [r7, #4]

	sFilterConfig.FilterMaskIdHigh =0;
 800cd00:	2300      	movs	r3, #0
 800cd02:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow  =0;
 800cd04:	2300      	movs	r3, #0
 800cd06:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN1FIFO;    //接收到的报文放入到FIFO0中
 800cd08:	2300      	movs	r3, #0
 800cd0a:	613b      	str	r3, [r7, #16]

	sFilterConfig.FilterActivation = ENABLE;  	//激活过滤器
 800cd0c:	2301      	movs	r3, #1
 800cd0e:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank  = 0;
 800cd10:	2300      	movs	r3, #0
 800cd12:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 800cd14:	463b      	mov	r3, r7
 800cd16:	4619      	mov	r1, r3
 800cd18:	4806      	ldr	r0, [pc, #24]	; (800cd34 <MX_CAN1_Init+0xb0>)
 800cd1a:	f7f3 fe03 	bl	8000924 <HAL_CAN_ConfigFilter>

	HAL_CAN_Start(&hcan1);
 800cd1e:	4805      	ldr	r0, [pc, #20]	; (800cd34 <MX_CAN1_Init+0xb0>)
 800cd20:	f7f3 fee0 	bl	8000ae4 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING);
 800cd24:	2102      	movs	r1, #2
 800cd26:	4803      	ldr	r0, [pc, #12]	; (800cd34 <MX_CAN1_Init+0xb0>)
 800cd28:	f7f4 f943 	bl	8000fb2 <HAL_CAN_ActivateNotification>

	/* USER CODE END CAN1_Init 2 */

}
 800cd2c:	bf00      	nop
 800cd2e:	3728      	adds	r7, #40	; 0x28
 800cd30:	46bd      	mov	sp, r7
 800cd32:	bd80      	pop	{r7, pc}
 800cd34:	20007008 	.word	0x20007008
 800cd38:	40006400 	.word	0x40006400

0800cd3c <CAN1_RX0_IRQHandler>:


void CAN1_RX0_IRQHandler(void)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800cd40:	4802      	ldr	r0, [pc, #8]	; (800cd4c <CAN1_RX0_IRQHandler+0x10>)
 800cd42:	f7f4 f95c 	bl	8000ffe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800cd46:	bf00      	nop
 800cd48:	bd80      	pop	{r7, pc}
 800cd4a:	bf00      	nop
 800cd4c:	20007008 	.word	0x20007008

0800cd50 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800cd50:	b480      	push	{r7}
 800cd52:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800cd54:	4b0c      	ldr	r3, [pc, #48]	; (800cd88 <MX_SDIO_SD_Init+0x38>)
 800cd56:	4a0d      	ldr	r2, [pc, #52]	; (800cd8c <MX_SDIO_SD_Init+0x3c>)
 800cd58:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800cd5a:	4b0b      	ldr	r3, [pc, #44]	; (800cd88 <MX_SDIO_SD_Init+0x38>)
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800cd60:	4b09      	ldr	r3, [pc, #36]	; (800cd88 <MX_SDIO_SD_Init+0x38>)
 800cd62:	2200      	movs	r2, #0
 800cd64:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800cd66:	4b08      	ldr	r3, [pc, #32]	; (800cd88 <MX_SDIO_SD_Init+0x38>)
 800cd68:	2200      	movs	r2, #0
 800cd6a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800cd6c:	4b06      	ldr	r3, [pc, #24]	; (800cd88 <MX_SDIO_SD_Init+0x38>)
 800cd6e:	2200      	movs	r2, #0
 800cd70:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800cd72:	4b05      	ldr	r3, [pc, #20]	; (800cd88 <MX_SDIO_SD_Init+0x38>)
 800cd74:	2200      	movs	r2, #0
 800cd76:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800cd78:	4b03      	ldr	r3, [pc, #12]	; (800cd88 <MX_SDIO_SD_Init+0x38>)
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800cd7e:	bf00      	nop
 800cd80:	46bd      	mov	sp, r7
 800cd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd86:	4770      	bx	lr
 800cd88:	20006ecc 	.word	0x20006ecc
 800cd8c:	40012c00 	.word	0x40012c00

0800cd90 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */
  HAL_UART_Receive_IT(&huart1, uartBuf1, 200);
 800cd94:	22c8      	movs	r2, #200	; 0xc8
 800cd96:	4913      	ldr	r1, [pc, #76]	; (800cde4 <MX_USART1_UART_Init+0x54>)
 800cd98:	4813      	ldr	r0, [pc, #76]	; (800cde8 <MX_USART1_UART_Init+0x58>)
 800cd9a:	f7f7 fa37 	bl	800420c <HAL_UART_Receive_IT>
  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800cd9e:	4b12      	ldr	r3, [pc, #72]	; (800cde8 <MX_USART1_UART_Init+0x58>)
 800cda0:	4a12      	ldr	r2, [pc, #72]	; (800cdec <MX_USART1_UART_Init+0x5c>)
 800cda2:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800cda4:	4b10      	ldr	r3, [pc, #64]	; (800cde8 <MX_USART1_UART_Init+0x58>)
 800cda6:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800cdaa:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800cdac:	4b0e      	ldr	r3, [pc, #56]	; (800cde8 <MX_USART1_UART_Init+0x58>)
 800cdae:	2200      	movs	r2, #0
 800cdb0:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800cdb2:	4b0d      	ldr	r3, [pc, #52]	; (800cde8 <MX_USART1_UART_Init+0x58>)
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800cdb8:	4b0b      	ldr	r3, [pc, #44]	; (800cde8 <MX_USART1_UART_Init+0x58>)
 800cdba:	2200      	movs	r2, #0
 800cdbc:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800cdbe:	4b0a      	ldr	r3, [pc, #40]	; (800cde8 <MX_USART1_UART_Init+0x58>)
 800cdc0:	220c      	movs	r2, #12
 800cdc2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800cdc4:	4b08      	ldr	r3, [pc, #32]	; (800cde8 <MX_USART1_UART_Init+0x58>)
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800cdca:	4b07      	ldr	r3, [pc, #28]	; (800cde8 <MX_USART1_UART_Init+0x58>)
 800cdcc:	2200      	movs	r2, #0
 800cdce:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800cdd0:	4805      	ldr	r0, [pc, #20]	; (800cde8 <MX_USART1_UART_Init+0x58>)
 800cdd2:	f7f7 f92c 	bl	800402e <HAL_UART_Init>
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d001      	beq.n	800cde0 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 800cddc:	f001 f80c 	bl	800ddf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800cde0:	bf00      	nop
 800cde2:	bd80      	pop	{r7, pc}
 800cde4:	20006e04 	.word	0x20006e04
 800cde8:	20006c90 	.word	0x20006c90
 800cdec:	40011000 	.word	0x40011000

0800cdf0 <MX_USART2_UART_Init>:
  * @param None
  * @retval None
  */
uint8_t uartBuf2[200];
static void MX_USART2_UART_Init(void)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800cdf4:	2026      	movs	r0, #38	; 0x26
 800cdf6:	f7f4 fc30 	bl	800165a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 3);
 800cdfa:	2203      	movs	r2, #3
 800cdfc:	2103      	movs	r1, #3
 800cdfe:	2026      	movs	r0, #38	; 0x26
 800ce00:	f7f4 fc0f 	bl	8001622 <HAL_NVIC_SetPriority>
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800ce04:	4b11      	ldr	r3, [pc, #68]	; (800ce4c <MX_USART2_UART_Init+0x5c>)
 800ce06:	4a12      	ldr	r2, [pc, #72]	; (800ce50 <MX_USART2_UART_Init+0x60>)
 800ce08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800ce0a:	4b10      	ldr	r3, [pc, #64]	; (800ce4c <MX_USART2_UART_Init+0x5c>)
 800ce0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800ce10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800ce12:	4b0e      	ldr	r3, [pc, #56]	; (800ce4c <MX_USART2_UART_Init+0x5c>)
 800ce14:	2200      	movs	r2, #0
 800ce16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800ce18:	4b0c      	ldr	r3, [pc, #48]	; (800ce4c <MX_USART2_UART_Init+0x5c>)
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800ce1e:	4b0b      	ldr	r3, [pc, #44]	; (800ce4c <MX_USART2_UART_Init+0x5c>)
 800ce20:	2200      	movs	r2, #0
 800ce22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800ce24:	4b09      	ldr	r3, [pc, #36]	; (800ce4c <MX_USART2_UART_Init+0x5c>)
 800ce26:	220c      	movs	r2, #12
 800ce28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ce2a:	4b08      	ldr	r3, [pc, #32]	; (800ce4c <MX_USART2_UART_Init+0x5c>)
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800ce30:	4b06      	ldr	r3, [pc, #24]	; (800ce4c <MX_USART2_UART_Init+0x5c>)
 800ce32:	2200      	movs	r2, #0
 800ce34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800ce36:	4805      	ldr	r0, [pc, #20]	; (800ce4c <MX_USART2_UART_Init+0x5c>)
 800ce38:	f7f7 f8f9 	bl	800402e <HAL_UART_Init>
 800ce3c:	4603      	mov	r3, r0
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d001      	beq.n	800ce46 <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 800ce42:	f000 ffd9 	bl	800ddf8 <Error_Handler>

  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800ce46:	bf00      	nop
 800ce48:	bd80      	pop	{r7, pc}
 800ce4a:	bf00      	nop
 800ce4c:	20006fc8 	.word	0x20006fc8
 800ce50:	40004400 	.word	0x40004400

0800ce54 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b082      	sub	sp, #8
 800ce58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	607b      	str	r3, [r7, #4]
 800ce5e:	4b10      	ldr	r3, [pc, #64]	; (800cea0 <MX_DMA_Init+0x4c>)
 800ce60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce62:	4a0f      	ldr	r2, [pc, #60]	; (800cea0 <MX_DMA_Init+0x4c>)
 800ce64:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ce68:	6313      	str	r3, [r2, #48]	; 0x30
 800ce6a:	4b0d      	ldr	r3, [pc, #52]	; (800cea0 <MX_DMA_Init+0x4c>)
 800ce6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ce72:	607b      	str	r3, [r7, #4]
 800ce74:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800ce76:	2200      	movs	r2, #0
 800ce78:	2105      	movs	r1, #5
 800ce7a:	203b      	movs	r0, #59	; 0x3b
 800ce7c:	f7f4 fbd1 	bl	8001622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800ce80:	203b      	movs	r0, #59	; 0x3b
 800ce82:	f7f4 fbea 	bl	800165a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800ce86:	2200      	movs	r2, #0
 800ce88:	2105      	movs	r1, #5
 800ce8a:	2045      	movs	r0, #69	; 0x45
 800ce8c:	f7f4 fbc9 	bl	8001622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800ce90:	2045      	movs	r0, #69	; 0x45
 800ce92:	f7f4 fbe2 	bl	800165a <HAL_NVIC_EnableIRQ>

}
 800ce96:	bf00      	nop
 800ce98:	3708      	adds	r7, #8
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	bd80      	pop	{r7, pc}
 800ce9e:	bf00      	nop
 800cea0:	40023800 	.word	0x40023800

0800cea4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b08c      	sub	sp, #48	; 0x30
 800cea8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ceaa:	f107 031c 	add.w	r3, r7, #28
 800ceae:	2200      	movs	r2, #0
 800ceb0:	601a      	str	r2, [r3, #0]
 800ceb2:	605a      	str	r2, [r3, #4]
 800ceb4:	609a      	str	r2, [r3, #8]
 800ceb6:	60da      	str	r2, [r3, #12]
 800ceb8:	611a      	str	r2, [r3, #16]
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800ceba:	2300      	movs	r3, #0
 800cebc:	61bb      	str	r3, [r7, #24]
 800cebe:	4b74      	ldr	r3, [pc, #464]	; (800d090 <MX_GPIO_Init+0x1ec>)
 800cec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cec2:	4a73      	ldr	r2, [pc, #460]	; (800d090 <MX_GPIO_Init+0x1ec>)
 800cec4:	f043 0310 	orr.w	r3, r3, #16
 800cec8:	6313      	str	r3, [r2, #48]	; 0x30
 800ceca:	4b71      	ldr	r3, [pc, #452]	; (800d090 <MX_GPIO_Init+0x1ec>)
 800cecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cece:	f003 0310 	and.w	r3, r3, #16
 800ced2:	61bb      	str	r3, [r7, #24]
 800ced4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800ced6:	2300      	movs	r3, #0
 800ced8:	617b      	str	r3, [r7, #20]
 800ceda:	4b6d      	ldr	r3, [pc, #436]	; (800d090 <MX_GPIO_Init+0x1ec>)
 800cedc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cede:	4a6c      	ldr	r2, [pc, #432]	; (800d090 <MX_GPIO_Init+0x1ec>)
 800cee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cee4:	6313      	str	r3, [r2, #48]	; 0x30
 800cee6:	4b6a      	ldr	r3, [pc, #424]	; (800d090 <MX_GPIO_Init+0x1ec>)
 800cee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ceea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ceee:	617b      	str	r3, [r7, #20]
 800cef0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800cef2:	2300      	movs	r3, #0
 800cef4:	613b      	str	r3, [r7, #16]
 800cef6:	4b66      	ldr	r3, [pc, #408]	; (800d090 <MX_GPIO_Init+0x1ec>)
 800cef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cefa:	4a65      	ldr	r2, [pc, #404]	; (800d090 <MX_GPIO_Init+0x1ec>)
 800cefc:	f043 0304 	orr.w	r3, r3, #4
 800cf00:	6313      	str	r3, [r2, #48]	; 0x30
 800cf02:	4b63      	ldr	r3, [pc, #396]	; (800d090 <MX_GPIO_Init+0x1ec>)
 800cf04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf06:	f003 0304 	and.w	r3, r3, #4
 800cf0a:	613b      	str	r3, [r7, #16]
 800cf0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800cf0e:	2300      	movs	r3, #0
 800cf10:	60fb      	str	r3, [r7, #12]
 800cf12:	4b5f      	ldr	r3, [pc, #380]	; (800d090 <MX_GPIO_Init+0x1ec>)
 800cf14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf16:	4a5e      	ldr	r2, [pc, #376]	; (800d090 <MX_GPIO_Init+0x1ec>)
 800cf18:	f043 0301 	orr.w	r3, r3, #1
 800cf1c:	6313      	str	r3, [r2, #48]	; 0x30
 800cf1e:	4b5c      	ldr	r3, [pc, #368]	; (800d090 <MX_GPIO_Init+0x1ec>)
 800cf20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf22:	f003 0301 	and.w	r3, r3, #1
 800cf26:	60fb      	str	r3, [r7, #12]
 800cf28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	60bb      	str	r3, [r7, #8]
 800cf2e:	4b58      	ldr	r3, [pc, #352]	; (800d090 <MX_GPIO_Init+0x1ec>)
 800cf30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf32:	4a57      	ldr	r2, [pc, #348]	; (800d090 <MX_GPIO_Init+0x1ec>)
 800cf34:	f043 0302 	orr.w	r3, r3, #2
 800cf38:	6313      	str	r3, [r2, #48]	; 0x30
 800cf3a:	4b55      	ldr	r3, [pc, #340]	; (800d090 <MX_GPIO_Init+0x1ec>)
 800cf3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf3e:	f003 0302 	and.w	r3, r3, #2
 800cf42:	60bb      	str	r3, [r7, #8]
 800cf44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800cf46:	2300      	movs	r3, #0
 800cf48:	607b      	str	r3, [r7, #4]
 800cf4a:	4b51      	ldr	r3, [pc, #324]	; (800d090 <MX_GPIO_Init+0x1ec>)
 800cf4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf4e:	4a50      	ldr	r2, [pc, #320]	; (800d090 <MX_GPIO_Init+0x1ec>)
 800cf50:	f043 0308 	orr.w	r3, r3, #8
 800cf54:	6313      	str	r3, [r2, #48]	; 0x30
 800cf56:	4b4e      	ldr	r3, [pc, #312]	; (800d090 <MX_GPIO_Init+0x1ec>)
 800cf58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf5a:	f003 0308 	and.w	r3, r3, #8
 800cf5e:	607b      	str	r3, [r7, #4]
 800cf60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 800cf62:	2200      	movs	r2, #0
 800cf64:	2177      	movs	r1, #119	; 0x77
 800cf66:	484b      	ldr	r0, [pc, #300]	; (800d094 <MX_GPIO_Init+0x1f0>)
 800cf68:	f7f5 f8dc 	bl	8002124 <HAL_GPIO_WritePin>
                          |GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	2102      	movs	r1, #2
 800cf70:	4849      	ldr	r0, [pc, #292]	; (800d098 <MX_GPIO_Init+0x1f4>)
 800cf72:	f7f5 f8d7 	bl	8002124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_SET);
 800cf76:	2201      	movs	r2, #1
 800cf78:	2170      	movs	r1, #112	; 0x70
 800cf7a:	4848      	ldr	r0, [pc, #288]	; (800d09c <MX_GPIO_Init+0x1f8>)
 800cf7c:	f7f5 f8d2 	bl	8002124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_SET);
 800cf80:	2201      	movs	r2, #1
 800cf82:	2103      	movs	r1, #3
 800cf84:	4846      	ldr	r0, [pc, #280]	; (800d0a0 <MX_GPIO_Init+0x1fc>)
 800cf86:	f7f5 f8cd 	bl	8002124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 800cf90:	4843      	ldr	r0, [pc, #268]	; (800d0a0 <MX_GPIO_Init+0x1fc>)
 800cf92:	f7f5 f8c7 	bl	8002124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800cf96:	2201      	movs	r2, #1
 800cf98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800cf9c:	4841      	ldr	r0, [pc, #260]	; (800d0a4 <MX_GPIO_Init+0x200>)
 800cf9e:	f7f5 f8c1 	bl	8002124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	2180      	movs	r1, #128	; 0x80
 800cfa6:	483d      	ldr	r0, [pc, #244]	; (800d09c <MX_GPIO_Init+0x1f8>)
 800cfa8:	f7f5 f8bc 	bl	8002124 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE4 PE5 PE6 
                           PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 800cfac:	2377      	movs	r3, #119	; 0x77
 800cfae:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cfb0:	2301      	movs	r3, #1
 800cfb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cfb8:	2300      	movs	r3, #0
 800cfba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800cfbc:	f107 031c 	add.w	r3, r7, #28
 800cfc0:	4619      	mov	r1, r3
 800cfc2:	4834      	ldr	r0, [pc, #208]	; (800d094 <MX_GPIO_Init+0x1f0>)
 800cfc4:	f7f4 fefc 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800cfc8:	2303      	movs	r3, #3
 800cfca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cfcc:	2300      	movs	r3, #0
 800cfce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cfd4:	f107 031c 	add.w	r3, r7, #28
 800cfd8:	4619      	mov	r1, r3
 800cfda:	4830      	ldr	r0, [pc, #192]	; (800d09c <MX_GPIO_Init+0x1f8>)
 800cfdc:	f7f4 fef0 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800cfe0:	2302      	movs	r3, #2
 800cfe2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cfe4:	2301      	movs	r3, #1
 800cfe6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cfe8:	2300      	movs	r3, #0
 800cfea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cfec:	2300      	movs	r3, #0
 800cfee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cff0:	f107 031c 	add.w	r3, r7, #28
 800cff4:	4619      	mov	r1, r3
 800cff6:	4828      	ldr	r0, [pc, #160]	; (800d098 <MX_GPIO_Init+0x1f4>)
 800cff8:	f7f4 fee2 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800cffc:	23f0      	movs	r3, #240	; 0xf0
 800cffe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d000:	2301      	movs	r3, #1
 800d002:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d004:	2300      	movs	r3, #0
 800d006:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d008:	2300      	movs	r3, #0
 800d00a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d00c:	f107 031c 	add.w	r3, r7, #28
 800d010:	4619      	mov	r1, r3
 800d012:	4822      	ldr	r0, [pc, #136]	; (800d09c <MX_GPIO_Init+0x1f8>)
 800d014:	f7f4 fed4 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB12 PB13 
                           PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_13 
 800d018:	f247 0303 	movw	r3, #28675	; 0x7003
 800d01c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d01e:	2301      	movs	r3, #1
 800d020:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d022:	2300      	movs	r3, #0
 800d024:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d026:	2300      	movs	r3, #0
 800d028:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d02a:	f107 031c 	add.w	r3, r7, #28
 800d02e:	4619      	mov	r1, r3
 800d030:	481b      	ldr	r0, [pc, #108]	; (800d0a0 <MX_GPIO_Init+0x1fc>)
 800d032:	f7f4 fec5 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800d036:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d03a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d03c:	2301      	movs	r3, #1
 800d03e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d040:	2301      	movs	r3, #1
 800d042:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d044:	2300      	movs	r3, #0
 800d046:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800d048:	f107 031c 	add.w	r3, r7, #28
 800d04c:	4619      	mov	r1, r3
 800d04e:	4815      	ldr	r0, [pc, #84]	; (800d0a4 <MX_GPIO_Init+0x200>)
 800d050:	f7f4 feb6 	bl	8001dc0 <HAL_GPIO_Init>
  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800d054:	2340      	movs	r3, #64	; 0x40
 800d056:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d058:	2300      	movs	r3, #0
 800d05a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d05c:	2301      	movs	r3, #1
 800d05e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800d060:	f107 031c 	add.w	r3, r7, #28
 800d064:	4619      	mov	r1, r3
 800d066:	480f      	ldr	r0, [pc, #60]	; (800d0a4 <MX_GPIO_Init+0x200>)
 800d068:	f7f4 feaa 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800d06c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 800d070:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d072:	2300      	movs	r3, #0
 800d074:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d076:	2301      	movs	r3, #1
 800d078:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d07a:	f107 031c 	add.w	r3, r7, #28
 800d07e:	4619      	mov	r1, r3
 800d080:	4807      	ldr	r0, [pc, #28]	; (800d0a0 <MX_GPIO_Init+0x1fc>)
 800d082:	f7f4 fe9d 	bl	8001dc0 <HAL_GPIO_Init>

}
 800d086:	bf00      	nop
 800d088:	3730      	adds	r7, #48	; 0x30
 800d08a:	46bd      	mov	sp, r7
 800d08c:	bd80      	pop	{r7, pc}
 800d08e:	bf00      	nop
 800d090:	40023800 	.word	0x40023800
 800d094:	40021000 	.word	0x40021000
 800d098:	40020000 	.word	0x40020000
 800d09c:	40020800 	.word	0x40020800
 800d0a0:	40020400 	.word	0x40020400
 800d0a4:	40020c00 	.word	0x40020c00

0800d0a8 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b08e      	sub	sp, #56	; 0x38
 800d0ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800d0ae:	f107 031c 	add.w	r3, r7, #28
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	601a      	str	r2, [r3, #0]
 800d0b6:	605a      	str	r2, [r3, #4]
 800d0b8:	609a      	str	r2, [r3, #8]
 800d0ba:	60da      	str	r2, [r3, #12]
 800d0bc:	611a      	str	r2, [r3, #16]
 800d0be:	615a      	str	r2, [r3, #20]
 800d0c0:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800d0c2:	463b      	mov	r3, r7
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	601a      	str	r2, [r3, #0]
 800d0c8:	605a      	str	r2, [r3, #4]
 800d0ca:	609a      	str	r2, [r3, #8]
 800d0cc:	60da      	str	r2, [r3, #12]
 800d0ce:	611a      	str	r2, [r3, #16]
 800d0d0:	615a      	str	r2, [r3, #20]
 800d0d2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800d0d4:	4b31      	ldr	r3, [pc, #196]	; (800d19c <MX_FSMC_Init+0xf4>)
 800d0d6:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800d0da:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800d0dc:	4b2f      	ldr	r3, [pc, #188]	; (800d19c <MX_FSMC_Init+0xf4>)
 800d0de:	4a30      	ldr	r2, [pc, #192]	; (800d1a0 <MX_FSMC_Init+0xf8>)
 800d0e0:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800d0e2:	4b2e      	ldr	r3, [pc, #184]	; (800d19c <MX_FSMC_Init+0xf4>)
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800d0e8:	4b2c      	ldr	r3, [pc, #176]	; (800d19c <MX_FSMC_Init+0xf4>)
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800d0ee:	4b2b      	ldr	r3, [pc, #172]	; (800d19c <MX_FSMC_Init+0xf4>)
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800d0f4:	4b29      	ldr	r3, [pc, #164]	; (800d19c <MX_FSMC_Init+0xf4>)
 800d0f6:	2210      	movs	r2, #16
 800d0f8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800d0fa:	4b28      	ldr	r3, [pc, #160]	; (800d19c <MX_FSMC_Init+0xf4>)
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800d100:	4b26      	ldr	r3, [pc, #152]	; (800d19c <MX_FSMC_Init+0xf4>)
 800d102:	2200      	movs	r2, #0
 800d104:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800d106:	4b25      	ldr	r3, [pc, #148]	; (800d19c <MX_FSMC_Init+0xf4>)
 800d108:	2200      	movs	r2, #0
 800d10a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800d10c:	4b23      	ldr	r3, [pc, #140]	; (800d19c <MX_FSMC_Init+0xf4>)
 800d10e:	2200      	movs	r2, #0
 800d110:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800d112:	4b22      	ldr	r3, [pc, #136]	; (800d19c <MX_FSMC_Init+0xf4>)
 800d114:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d118:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800d11a:	4b20      	ldr	r3, [pc, #128]	; (800d19c <MX_FSMC_Init+0xf4>)
 800d11c:	2200      	movs	r2, #0
 800d11e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 800d120:	4b1e      	ldr	r3, [pc, #120]	; (800d19c <MX_FSMC_Init+0xf4>)
 800d122:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d126:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800d128:	4b1c      	ldr	r3, [pc, #112]	; (800d19c <MX_FSMC_Init+0xf4>)
 800d12a:	2200      	movs	r2, #0
 800d12c:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800d12e:	4b1b      	ldr	r3, [pc, #108]	; (800d19c <MX_FSMC_Init+0xf4>)
 800d130:	2200      	movs	r2, #0
 800d132:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800d134:	4b19      	ldr	r3, [pc, #100]	; (800d19c <MX_FSMC_Init+0xf4>)
 800d136:	2200      	movs	r2, #0
 800d138:	645a      	str	r2, [r3, #68]	; 0x44
  hsram1.Init.ContinuousClock =FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC;
 800d13a:	4b18      	ldr	r3, [pc, #96]	; (800d19c <MX_FSMC_Init+0xf4>)
 800d13c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d140:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Timing */
  Timing.AddressSetupTime = 15;
 800d142:	230f      	movs	r3, #15
 800d144:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800d146:	230f      	movs	r3, #15
 800d148:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 255;
 800d14a:	23ff      	movs	r3, #255	; 0xff
 800d14c:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 800d14e:	230f      	movs	r3, #15
 800d150:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 800d152:	2310      	movs	r3, #16
 800d154:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 800d156:	2311      	movs	r3, #17
 800d158:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800d15a:	2300      	movs	r3, #0
 800d15c:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 15;
 800d15e:	230f      	movs	r3, #15
 800d160:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 800d162:	230f      	movs	r3, #15
 800d164:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 255;
 800d166:	23ff      	movs	r3, #255	; 0xff
 800d168:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 15;
 800d16a:	230f      	movs	r3, #15
 800d16c:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800d16e:	2310      	movs	r3, #16
 800d170:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 800d172:	2311      	movs	r3, #17
 800d174:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800d176:	2300      	movs	r3, #0
 800d178:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800d17a:	463a      	mov	r2, r7
 800d17c:	f107 031c 	add.w	r3, r7, #28
 800d180:	4619      	mov	r1, r3
 800d182:	4806      	ldr	r0, [pc, #24]	; (800d19c <MX_FSMC_Init+0xf4>)
 800d184:	f7f6 ff0f 	bl	8003fa6 <HAL_SRAM_Init>
 800d188:	4603      	mov	r3, r0
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d001      	beq.n	800d192 <MX_FSMC_Init+0xea>
  {
    Error_Handler( );
 800d18e:	f000 fe33 	bl	800ddf8 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800d192:	bf00      	nop
 800d194:	3738      	adds	r7, #56	; 0x38
 800d196:	46bd      	mov	sp, r7
 800d198:	bd80      	pop	{r7, pc}
 800d19a:	bf00      	nop
 800d19c:	20006c40 	.word	0x20006c40
 800d1a0:	a0000104 	.word	0xa0000104

0800d1a4 <checkSelf>:

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

void checkSelf(void){
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	af00      	add	r7, sp, #0
	allLedOn();
 800d1a8:	f7ff fb5e 	bl	800c868 <allLedOn>
	buzzerOn();
 800d1ac:	f7ff fb7a 	bl	800c8a4 <buzzerOn>
	lcdClean(RED);
 800d1b0:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800d1b4:	f003 ffde 	bl	8011174 <lcdClean>
	osDelay(200);
 800d1b8:	20c8      	movs	r0, #200	; 0xc8
 800d1ba:	f7fb fd85 	bl	8008cc8 <osDelay>
	lcdClean(GREEN);
 800d1be:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 800d1c2:	f003 ffd7 	bl	8011174 <lcdClean>
	osDelay(200);
 800d1c6:	20c8      	movs	r0, #200	; 0xc8
 800d1c8:	f7fb fd7e 	bl	8008cc8 <osDelay>
	lcdClean(BLUE);
 800d1cc:	201f      	movs	r0, #31
 800d1ce:	f003 ffd1 	bl	8011174 <lcdClean>
	osDelay(200);
 800d1d2:	20c8      	movs	r0, #200	; 0xc8
 800d1d4:	f7fb fd78 	bl	8008cc8 <osDelay>
	lcdClean(WHITE);
 800d1d8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800d1dc:	f003 ffca 	bl	8011174 <lcdClean>
	osDelay(200);
 800d1e0:	20c8      	movs	r0, #200	; 0xc8
 800d1e2:	f7fb fd71 	bl	8008cc8 <osDelay>
	lcdClean(BLACK);
 800d1e6:	2000      	movs	r0, #0
 800d1e8:	f003 ffc4 	bl	8011174 <lcdClean>
	osDelay(200);
 800d1ec:	20c8      	movs	r0, #200	; 0xc8
 800d1ee:	f7fb fd6b 	bl	8008cc8 <osDelay>
	allLedOff();
 800d1f2:	f7ff fb7b 	bl	800c8ec <allLedOff>
	buzzerOff();
 800d1f6:	f7ff fb6d 	bl	800c8d4 <buzzerOff>
	operationRecord(selfTest, 0);
 800d1fa:	2100      	movs	r1, #0
 800d1fc:	2013      	movs	r0, #19
 800d1fe:	f004 f859 	bl	80112b4 <operationRecord>
}
 800d202:	bf00      	nop
 800d204:	bd80      	pop	{r7, pc}
	...

0800d208 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b084      	sub	sp, #16
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
  /* init code for FATFS */
  MX_FATFS_Init();
 800d210:	f7ff fa34 	bl	800c67c <MX_FATFS_Init>
  /* USER CODE BEGIN 5 */
  lcdInit();
 800d214:	f003 ff72 	bl	80110fc <lcdInit>
  ledGpioInit();
 800d218:	f7ff fa70 	bl	800c6fc <ledGpioInit>
  DS1302_ReadTime(&datatime);
 800d21c:	4846      	ldr	r0, [pc, #280]	; (800d338 <StartDefaultTask+0x130>)
 800d21e:	f7ff f90f 	bl	800c440 <DS1302_ReadTime>
  operationRecord(setResetRecordValue, 0);
 800d222:	2100      	movs	r1, #0
 800d224:	200b      	movs	r0, #11
 800d226:	f004 f845 	bl	80112b4 <operationRecord>
  checkSelf();
 800d22a:	f7ff ffbb 	bl	800d1a4 <checkSelf>
  int curPage;
  /* Infinite loop */
  for(;;)
  {
	xSemaphoreTake(disSignal, portMAX_DELAY);
 800d22e:	4b43      	ldr	r3, [pc, #268]	; (800d33c <StartDefaultTask+0x134>)
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	f04f 31ff 	mov.w	r1, #4294967295
 800d236:	4618      	mov	r0, r3
 800d238:	f7fc fbe0 	bl	80099fc <xQueueSemaphoreTake>
	for(int i = 0; i < pageNum; i++){
 800d23c:	2300      	movs	r3, #0
 800d23e:	60bb      	str	r3, [r7, #8]
 800d240:	e014      	b.n	800d26c <StartDefaultTask+0x64>
		if(pageInfoList[i].isDis){
 800d242:	4a3f      	ldr	r2, [pc, #252]	; (800d340 <StartDefaultTask+0x138>)
 800d244:	68bb      	ldr	r3, [r7, #8]
 800d246:	019b      	lsls	r3, r3, #6
 800d248:	4413      	add	r3, r2
 800d24a:	781b      	ldrb	r3, [r3, #0]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d00a      	beq.n	800d266 <StartDefaultTask+0x5e>
			if(curPage != i){
 800d250:	68fa      	ldr	r2, [r7, #12]
 800d252:	68bb      	ldr	r3, [r7, #8]
 800d254:	429a      	cmp	r2, r3
 800d256:	d00f      	beq.n	800d278 <StartDefaultTask+0x70>
				curPage = i;
 800d258:	68bb      	ldr	r3, [r7, #8]
 800d25a:	60fb      	str	r3, [r7, #12]
				lcdClean(0x2945);
 800d25c:	f642 1045 	movw	r0, #10565	; 0x2945
 800d260:	f003 ff88 	bl	8011174 <lcdClean>
			}
			break;
 800d264:	e008      	b.n	800d278 <StartDefaultTask+0x70>
	for(int i = 0; i < pageNum; i++){
 800d266:	68bb      	ldr	r3, [r7, #8]
 800d268:	3301      	adds	r3, #1
 800d26a:	60bb      	str	r3, [r7, #8]
 800d26c:	4b35      	ldr	r3, [pc, #212]	; (800d344 <StartDefaultTask+0x13c>)
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	68ba      	ldr	r2, [r7, #8]
 800d272:	429a      	cmp	r2, r3
 800d274:	dbe5      	blt.n	800d242 <StartDefaultTask+0x3a>
 800d276:	e000      	b.n	800d27a <StartDefaultTask+0x72>
			break;
 800d278:	bf00      	nop
		}
	}
	pageInfoList[curPage].baseDis(&pageInfoList[curPage].baseInfo);
 800d27a:	4a31      	ldr	r2, [pc, #196]	; (800d340 <StartDefaultTask+0x138>)
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	019b      	lsls	r3, r3, #6
 800d280:	4413      	add	r3, r2
 800d282:	3334      	adds	r3, #52	; 0x34
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	68fa      	ldr	r2, [r7, #12]
 800d288:	0192      	lsls	r2, r2, #6
 800d28a:	3230      	adds	r2, #48	; 0x30
 800d28c:	492c      	ldr	r1, [pc, #176]	; (800d340 <StartDefaultTask+0x138>)
 800d28e:	440a      	add	r2, r1
 800d290:	4610      	mov	r0, r2
 800d292:	4798      	blx	r3
	pageInfoList[curPage].circleInfoFunc(&pageInfoList[curPage].circleInfo);
 800d294:	4a2a      	ldr	r2, [pc, #168]	; (800d340 <StartDefaultTask+0x138>)
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	019b      	lsls	r3, r3, #6
 800d29a:	4413      	add	r3, r2
 800d29c:	330c      	adds	r3, #12
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	68fa      	ldr	r2, [r7, #12]
 800d2a2:	0192      	lsls	r2, r2, #6
 800d2a4:	3208      	adds	r2, #8
 800d2a6:	4926      	ldr	r1, [pc, #152]	; (800d340 <StartDefaultTask+0x138>)
 800d2a8:	440a      	add	r2, r1
 800d2aa:	4610      	mov	r0, r2
 800d2ac:	4798      	blx	r3
	pageInfoList[curPage].dateInfoFunc(pageInfoList[curPage].dateInfo);
 800d2ae:	4a24      	ldr	r2, [pc, #144]	; (800d340 <StartDefaultTask+0x138>)
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	019b      	lsls	r3, r3, #6
 800d2b4:	4413      	add	r3, r2
 800d2b6:	3314      	adds	r3, #20
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	4921      	ldr	r1, [pc, #132]	; (800d340 <StartDefaultTask+0x138>)
 800d2bc:	68fa      	ldr	r2, [r7, #12]
 800d2be:	0192      	lsls	r2, r2, #6
 800d2c0:	440a      	add	r2, r1
 800d2c2:	3210      	adds	r2, #16
 800d2c4:	6812      	ldr	r2, [r2, #0]
 800d2c6:	4610      	mov	r0, r2
 800d2c8:	4798      	blx	r3
	pageInfoList[curPage].deviceNameInfoFunc(pageInfoList[curPage].deviceNameInfo);
 800d2ca:	4a1d      	ldr	r2, [pc, #116]	; (800d340 <StartDefaultTask+0x138>)
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	019b      	lsls	r3, r3, #6
 800d2d0:	4413      	add	r3, r2
 800d2d2:	3324      	adds	r3, #36	; 0x24
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	491a      	ldr	r1, [pc, #104]	; (800d340 <StartDefaultTask+0x138>)
 800d2d8:	68fa      	ldr	r2, [r7, #12]
 800d2da:	0192      	lsls	r2, r2, #6
 800d2dc:	440a      	add	r2, r1
 800d2de:	3220      	adds	r2, #32
 800d2e0:	6812      	ldr	r2, [r2, #0]
 800d2e2:	4610      	mov	r0, r2
 800d2e4:	4798      	blx	r3
	pageInfoList[curPage].unitInfoFunc(&pageInfoList[curPage].unitInfo);
 800d2e6:	4a16      	ldr	r2, [pc, #88]	; (800d340 <StartDefaultTask+0x138>)
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	019b      	lsls	r3, r3, #6
 800d2ec:	4413      	add	r3, r2
 800d2ee:	331c      	adds	r3, #28
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	68fa      	ldr	r2, [r7, #12]
 800d2f4:	0192      	lsls	r2, r2, #6
 800d2f6:	3218      	adds	r2, #24
 800d2f8:	4911      	ldr	r1, [pc, #68]	; (800d340 <StartDefaultTask+0x138>)
 800d2fa:	440a      	add	r2, r1
 800d2fc:	4610      	mov	r0, r2
 800d2fe:	4798      	blx	r3
	pageInfoList[curPage].detectValueInfoFunc(&pageInfoList[curPage].detectValueInfo);
 800d300:	4a0f      	ldr	r2, [pc, #60]	; (800d340 <StartDefaultTask+0x138>)
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	019b      	lsls	r3, r3, #6
 800d306:	4413      	add	r3, r2
 800d308:	332c      	adds	r3, #44	; 0x2c
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	68fa      	ldr	r2, [r7, #12]
 800d30e:	0192      	lsls	r2, r2, #6
 800d310:	3228      	adds	r2, #40	; 0x28
 800d312:	490b      	ldr	r1, [pc, #44]	; (800d340 <StartDefaultTask+0x138>)
 800d314:	440a      	add	r2, r1
 800d316:	4610      	mov	r0, r2
 800d318:	4798      	blx	r3
	pageInfoList[curPage].arrowInfoFunc(&pageInfoList[curPage].arrowInfo);
 800d31a:	4a09      	ldr	r2, [pc, #36]	; (800d340 <StartDefaultTask+0x138>)
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	019b      	lsls	r3, r3, #6
 800d320:	4413      	add	r3, r2
 800d322:	3304      	adds	r3, #4
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	68fa      	ldr	r2, [r7, #12]
 800d328:	0192      	lsls	r2, r2, #6
 800d32a:	4905      	ldr	r1, [pc, #20]	; (800d340 <StartDefaultTask+0x138>)
 800d32c:	440a      	add	r2, r1
 800d32e:	3201      	adds	r2, #1
 800d330:	4610      	mov	r0, r2
 800d332:	4798      	blx	r3
	xSemaphoreTake(disSignal, portMAX_DELAY);
 800d334:	e77b      	b.n	800d22e <StartDefaultTask+0x26>
 800d336:	bf00      	nop
 800d338:	20006bd4 	.word	0x20006bd4
 800d33c:	20006cd0 	.word	0x20006cd0
 800d340:	20000200 	.word	0x20000200
 800d344:	20000624 	.word	0x20000624

0800d348 <scanButtonTask>:
  /* USER CODE END 5 */ 
}


void scanButtonTask(void const * argument)
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b088      	sub	sp, #32
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
	char data[8];
	int refresh;
	extern struct deviceInfo otherDeviceList[];
	for(int i = 0; i < 65; i++)
 800d350:	2300      	movs	r3, #0
 800d352:	61bb      	str	r3, [r7, #24]
 800d354:	e009      	b.n	800d36a <scanButtonTask+0x22>
		otherDeviceList[i].addr = i;
 800d356:	4a59      	ldr	r2, [pc, #356]	; (800d4bc <scanButtonTask+0x174>)
 800d358:	69bb      	ldr	r3, [r7, #24]
 800d35a:	01db      	lsls	r3, r3, #7
 800d35c:	4413      	add	r3, r2
 800d35e:	3340      	adds	r3, #64	; 0x40
 800d360:	69ba      	ldr	r2, [r7, #24]
 800d362:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 65; i++)
 800d364:	69bb      	ldr	r3, [r7, #24]
 800d366:	3301      	adds	r3, #1
 800d368:	61bb      	str	r3, [r7, #24]
 800d36a:	69bb      	ldr	r3, [r7, #24]
 800d36c:	2b40      	cmp	r3, #64	; 0x40
 800d36e:	ddf2      	ble.n	800d356 <scanButtonTask+0xe>
	for(;;){
		//扫描按键
		refresh = 0;
 800d370:	2300      	movs	r3, #0
 800d372:	61fb      	str	r3, [r7, #28]
		for(int i = 0; i < 7; i++)
 800d374:	2300      	movs	r3, #0
 800d376:	617b      	str	r3, [r7, #20]
 800d378:	e021      	b.n	800d3be <scanButtonTask+0x76>
			refresh |= (data[i] = (!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3<<i)));
 800d37a:	2208      	movs	r2, #8
 800d37c:	697b      	ldr	r3, [r7, #20]
 800d37e:	fa02 f303 	lsl.w	r3, r2, r3
 800d382:	b29b      	uxth	r3, r3
 800d384:	4619      	mov	r1, r3
 800d386:	484e      	ldr	r0, [pc, #312]	; (800d4c0 <scanButtonTask+0x178>)
 800d388:	f7f4 feb4 	bl	80020f4 <HAL_GPIO_ReadPin>
 800d38c:	4603      	mov	r3, r0
 800d38e:	2b00      	cmp	r3, #0
 800d390:	bf0c      	ite	eq
 800d392:	2301      	moveq	r3, #1
 800d394:	2300      	movne	r3, #0
 800d396:	b2db      	uxtb	r3, r3
 800d398:	4619      	mov	r1, r3
 800d39a:	f107 0208 	add.w	r2, r7, #8
 800d39e:	697b      	ldr	r3, [r7, #20]
 800d3a0:	4413      	add	r3, r2
 800d3a2:	460a      	mov	r2, r1
 800d3a4:	701a      	strb	r2, [r3, #0]
 800d3a6:	f107 0208 	add.w	r2, r7, #8
 800d3aa:	697b      	ldr	r3, [r7, #20]
 800d3ac:	4413      	add	r3, r2
 800d3ae:	781b      	ldrb	r3, [r3, #0]
 800d3b0:	461a      	mov	r2, r3
 800d3b2:	69fb      	ldr	r3, [r7, #28]
 800d3b4:	4313      	orrs	r3, r2
 800d3b6:	61fb      	str	r3, [r7, #28]
		for(int i = 0; i < 7; i++)
 800d3b8:	697b      	ldr	r3, [r7, #20]
 800d3ba:	3301      	adds	r3, #1
 800d3bc:	617b      	str	r3, [r7, #20]
 800d3be:	697b      	ldr	r3, [r7, #20]
 800d3c0:	2b06      	cmp	r3, #6
 800d3c2:	ddda      	ble.n	800d37a <scanButtonTask+0x32>
		refresh |= (data[SURE] = (!HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_6)));
 800d3c4:	2140      	movs	r1, #64	; 0x40
 800d3c6:	483f      	ldr	r0, [pc, #252]	; (800d4c4 <scanButtonTask+0x17c>)
 800d3c8:	f7f4 fe94 	bl	80020f4 <HAL_GPIO_ReadPin>
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	bf0c      	ite	eq
 800d3d2:	2301      	moveq	r3, #1
 800d3d4:	2300      	movne	r3, #0
 800d3d6:	b2db      	uxtb	r3, r3
 800d3d8:	73fb      	strb	r3, [r7, #15]
 800d3da:	7bfb      	ldrb	r3, [r7, #15]
 800d3dc:	461a      	mov	r2, r3
 800d3de:	69fb      	ldr	r3, [r7, #28]
 800d3e0:	4313      	orrs	r3, r2
 800d3e2:	61fb      	str	r3, [r7, #28]
		//处理按键
		if(refresh){
 800d3e4:	69fb      	ldr	r3, [r7, #28]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d063      	beq.n	800d4b2 <scanButtonTask+0x16a>
			for(int i = 0; i < buttonNum; i++){
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	613b      	str	r3, [r7, #16]
 800d3ee:	e051      	b.n	800d494 <scanButtonTask+0x14c>
				if(pageInfoList[i].isDis){
 800d3f0:	4a35      	ldr	r2, [pc, #212]	; (800d4c8 <scanButtonTask+0x180>)
 800d3f2:	693b      	ldr	r3, [r7, #16]
 800d3f4:	019b      	lsls	r3, r3, #6
 800d3f6:	4413      	add	r3, r2
 800d3f8:	781b      	ldrb	r3, [r3, #0]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d047      	beq.n	800d48e <scanButtonTask+0x146>
					buttonList[i].backFunc(data[BACK]);
 800d3fe:	4a33      	ldr	r2, [pc, #204]	; (800d4cc <scanButtonTask+0x184>)
 800d400:	693b      	ldr	r3, [r7, #16]
 800d402:	015b      	lsls	r3, r3, #5
 800d404:	4413      	add	r3, r2
 800d406:	330c      	adds	r3, #12
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	7aba      	ldrb	r2, [r7, #10]
 800d40c:	4610      	mov	r0, r2
 800d40e:	4798      	blx	r3
					buttonList[i].biFunc(data[BI]);
 800d410:	4a2e      	ldr	r2, [pc, #184]	; (800d4cc <scanButtonTask+0x184>)
 800d412:	693b      	ldr	r3, [r7, #16]
 800d414:	015b      	lsls	r3, r3, #5
 800d416:	4413      	add	r3, r2
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	7a3a      	ldrb	r2, [r7, #8]
 800d41c:	4610      	mov	r0, r2
 800d41e:	4798      	blx	r3
					buttonList[i].sureFunc(data[SURE]);
 800d420:	4a2a      	ldr	r2, [pc, #168]	; (800d4cc <scanButtonTask+0x184>)
 800d422:	693b      	ldr	r3, [r7, #16]
 800d424:	015b      	lsls	r3, r3, #5
 800d426:	4413      	add	r3, r2
 800d428:	3308      	adds	r3, #8
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	7bfa      	ldrb	r2, [r7, #15]
 800d42e:	4610      	mov	r0, r2
 800d430:	4798      	blx	r3
					buttonList[i].leftFunc(data[LEFT]);
 800d432:	4a26      	ldr	r2, [pc, #152]	; (800d4cc <scanButtonTask+0x184>)
 800d434:	693b      	ldr	r3, [r7, #16]
 800d436:	015b      	lsls	r3, r3, #5
 800d438:	4413      	add	r3, r2
 800d43a:	3318      	adds	r3, #24
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	7b7a      	ldrb	r2, [r7, #13]
 800d440:	4610      	mov	r0, r2
 800d442:	4798      	blx	r3
					buttonList[i].bottomFunc(data[BOTTOM]);
 800d444:	4a21      	ldr	r2, [pc, #132]	; (800d4cc <scanButtonTask+0x184>)
 800d446:	693b      	ldr	r3, [r7, #16]
 800d448:	015b      	lsls	r3, r3, #5
 800d44a:	4413      	add	r3, r2
 800d44c:	3314      	adds	r3, #20
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	7b3a      	ldrb	r2, [r7, #12]
 800d452:	4610      	mov	r0, r2
 800d454:	4798      	blx	r3
					buttonList[i].rightFunc(data[RIGHT]);
 800d456:	4a1d      	ldr	r2, [pc, #116]	; (800d4cc <scanButtonTask+0x184>)
 800d458:	693b      	ldr	r3, [r7, #16]
 800d45a:	015b      	lsls	r3, r3, #5
 800d45c:	4413      	add	r3, r2
 800d45e:	331c      	adds	r3, #28
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	7bba      	ldrb	r2, [r7, #14]
 800d464:	4610      	mov	r0, r2
 800d466:	4798      	blx	r3
					buttonList[i].setFunc(data[SETCONFIG]);
 800d468:	4a18      	ldr	r2, [pc, #96]	; (800d4cc <scanButtonTask+0x184>)
 800d46a:	693b      	ldr	r3, [r7, #16]
 800d46c:	015b      	lsls	r3, r3, #5
 800d46e:	4413      	add	r3, r2
 800d470:	3304      	adds	r3, #4
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	7a7a      	ldrb	r2, [r7, #9]
 800d476:	4610      	mov	r0, r2
 800d478:	4798      	blx	r3
					buttonList[i].topFunc(data[TOP]);
 800d47a:	4a14      	ldr	r2, [pc, #80]	; (800d4cc <scanButtonTask+0x184>)
 800d47c:	693b      	ldr	r3, [r7, #16]
 800d47e:	015b      	lsls	r3, r3, #5
 800d480:	4413      	add	r3, r2
 800d482:	3310      	adds	r3, #16
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	7afa      	ldrb	r2, [r7, #11]
 800d488:	4610      	mov	r0, r2
 800d48a:	4798      	blx	r3
					break;
 800d48c:	e007      	b.n	800d49e <scanButtonTask+0x156>
			for(int i = 0; i < buttonNum; i++){
 800d48e:	693b      	ldr	r3, [r7, #16]
 800d490:	3301      	adds	r3, #1
 800d492:	613b      	str	r3, [r7, #16]
 800d494:	4b0e      	ldr	r3, [pc, #56]	; (800d4d0 <scanButtonTask+0x188>)
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	693a      	ldr	r2, [r7, #16]
 800d49a:	429a      	cmp	r2, r3
 800d49c:	dba8      	blt.n	800d3f0 <scanButtonTask+0xa8>
				}
			}
			xSemaphoreGive(disSignal);
 800d49e:	4b0d      	ldr	r3, [pc, #52]	; (800d4d4 <scanButtonTask+0x18c>)
 800d4a0:	6818      	ldr	r0, [r3, #0]
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	2100      	movs	r1, #0
 800d4a8:	f7fb ffb4 	bl	8009414 <xQueueGenericSend>
			osDelay(10);
 800d4ac:	200a      	movs	r0, #10
 800d4ae:	f7fb fc0b 	bl	8008cc8 <osDelay>
		}
		osDelay(100);
 800d4b2:	2064      	movs	r0, #100	; 0x64
 800d4b4:	f7fb fc08 	bl	8008cc8 <osDelay>
		refresh = 0;
 800d4b8:	e75a      	b.n	800d370 <scanButtonTask+0x28>
 800d4ba:	bf00      	nop
 800d4bc:	20007320 	.word	0x20007320
 800d4c0:	40020400 	.word	0x40020400
 800d4c4:	40020c00 	.word	0x40020c00
 800d4c8:	20000200 	.word	0x20000200
 800d4cc:	200004c4 	.word	0x200004c4
 800d4d0:	20000628 	.word	0x20000628
 800d4d4:	20006cd0 	.word	0x20006cd0

0800d4d8 <faultThing>:
	}
}


void faultThing(int count){
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b082      	sub	sp, #8
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
	static int x;
	if(deviceOwnInfo.uint == 1){
 800d4e0:	4b68      	ldr	r3, [pc, #416]	; (800d684 <faultThing+0x1ac>)
 800d4e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4e4:	2b01      	cmp	r3, #1
 800d4e6:	d10e      	bne.n	800d506 <faultThing+0x2e>
		deviceOwnInfo.currentHighLimit = deviceOwnInfo.highPercent * 100;
 800d4e8:	4b66      	ldr	r3, [pc, #408]	; (800d684 <faultThing+0x1ac>)
 800d4ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4ec:	2264      	movs	r2, #100	; 0x64
 800d4ee:	fb02 f303 	mul.w	r3, r2, r3
 800d4f2:	4a64      	ldr	r2, [pc, #400]	; (800d684 <faultThing+0x1ac>)
 800d4f4:	6353      	str	r3, [r2, #52]	; 0x34
		deviceOwnInfo.currentLowLimit = deviceOwnInfo.lowPercent * 100;
 800d4f6:	4b63      	ldr	r3, [pc, #396]	; (800d684 <faultThing+0x1ac>)
 800d4f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4fa:	2264      	movs	r2, #100	; 0x64
 800d4fc:	fb02 f303 	mul.w	r3, r2, r3
 800d500:	4a60      	ldr	r2, [pc, #384]	; (800d684 <faultThing+0x1ac>)
 800d502:	6393      	str	r3, [r2, #56]	; 0x38
 800d504:	e00d      	b.n	800d522 <faultThing+0x4a>
	}
	else{
		deviceOwnInfo.currentHighLimit = deviceOwnInfo.highPercent * 5;
 800d506:	4b5f      	ldr	r3, [pc, #380]	; (800d684 <faultThing+0x1ac>)
 800d508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d50a:	4613      	mov	r3, r2
 800d50c:	009b      	lsls	r3, r3, #2
 800d50e:	4413      	add	r3, r2
 800d510:	4a5c      	ldr	r2, [pc, #368]	; (800d684 <faultThing+0x1ac>)
 800d512:	6353      	str	r3, [r2, #52]	; 0x34
		deviceOwnInfo.currentLowLimit = deviceOwnInfo.lowPercent * 5;
 800d514:	4b5b      	ldr	r3, [pc, #364]	; (800d684 <faultThing+0x1ac>)
 800d516:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d518:	4613      	mov	r3, r2
 800d51a:	009b      	lsls	r3, r3, #2
 800d51c:	4413      	add	r3, r2
 800d51e:	4a59      	ldr	r2, [pc, #356]	; (800d684 <faultThing+0x1ac>)
 800d520:	6393      	str	r3, [r2, #56]	; 0x38
	}
	if((deviceOwnInfo.sensorFault||(deviceOwnInfo.noDemarcate)||(deviceOwnInfo.noConnect))){
 800d522:	4b58      	ldr	r3, [pc, #352]	; (800d684 <faultThing+0x1ac>)
 800d524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d526:	2b00      	cmp	r3, #0
 800d528:	d107      	bne.n	800d53a <faultThing+0x62>
 800d52a:	4b56      	ldr	r3, [pc, #344]	; (800d684 <faultThing+0x1ac>)
 800d52c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d103      	bne.n	800d53a <faultThing+0x62>
 800d532:	4b54      	ldr	r3, [pc, #336]	; (800d684 <faultThing+0x1ac>)
 800d534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d536:	2b00      	cmp	r3, #0
 800d538:	d02f      	beq.n	800d59a <faultThing+0xc2>
		if(x != 1){
 800d53a:	4b53      	ldr	r3, [pc, #332]	; (800d688 <faultThing+0x1b0>)
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	2b01      	cmp	r3, #1
 800d540:	d01a      	beq.n	800d578 <faultThing+0xa0>
			x = 1;
 800d542:	4b51      	ldr	r3, [pc, #324]	; (800d688 <faultThing+0x1b0>)
 800d544:	2201      	movs	r2, #1
 800d546:	601a      	str	r2, [r3, #0]
			if(deviceOwnInfo.noDemarcate)
 800d548:	4b4e      	ldr	r3, [pc, #312]	; (800d684 <faultThing+0x1ac>)
 800d54a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d003      	beq.n	800d558 <faultThing+0x80>
				faultRecord(noDemarcateRecordValue, 0);
 800d550:	2100      	movs	r1, #0
 800d552:	2006      	movs	r0, #6
 800d554:	f003 ff6a 	bl	801142c <faultRecord>
			if(deviceOwnInfo.noDemarcate)
 800d558:	4b4a      	ldr	r3, [pc, #296]	; (800d684 <faultThing+0x1ac>)
 800d55a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d003      	beq.n	800d568 <faultThing+0x90>
				faultRecord(disconnectRecordValue, 0);
 800d560:	2100      	movs	r1, #0
 800d562:	2005      	movs	r0, #5
 800d564:	f003 ff62 	bl	801142c <faultRecord>
			if(deviceOwnInfo.sensorFault)
 800d568:	4b46      	ldr	r3, [pc, #280]	; (800d684 <faultThing+0x1ac>)
 800d56a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d003      	beq.n	800d578 <faultThing+0xa0>
				faultRecord(sensorFaultValue, 0);
 800d570:	2100      	movs	r1, #0
 800d572:	2004      	movs	r0, #4
 800d574:	f003 ff5a 	bl	801142c <faultRecord>
		}
		if(!(count%20)){
 800d578:	6879      	ldr	r1, [r7, #4]
 800d57a:	4b44      	ldr	r3, [pc, #272]	; (800d68c <faultThing+0x1b4>)
 800d57c:	fb83 2301 	smull	r2, r3, r3, r1
 800d580:	10da      	asrs	r2, r3, #3
 800d582:	17cb      	asrs	r3, r1, #31
 800d584:	1ad2      	subs	r2, r2, r3
 800d586:	4613      	mov	r3, r2
 800d588:	009b      	lsls	r3, r3, #2
 800d58a:	4413      	add	r3, r2
 800d58c:	009b      	lsls	r3, r3, #2
 800d58e:	1aca      	subs	r2, r1, r3
 800d590:	2a00      	cmp	r2, #0
 800d592:	d158      	bne.n	800d646 <faultThing+0x16e>
			hardWareFault();
 800d594:	f7ff fa28 	bl	800c9e8 <hardWareFault>
		if(!(count%20)){
 800d598:	e055      	b.n	800d646 <faultThing+0x16e>
		}
	}
	else if((deviceOwnInfo.sensorValue > deviceOwnInfo.currentHighLimit)){
 800d59a:	4b3a      	ldr	r3, [pc, #232]	; (800d684 <faultThing+0x1ac>)
 800d59c:	6a1a      	ldr	r2, [r3, #32]
 800d59e:	4b39      	ldr	r3, [pc, #228]	; (800d684 <faultThing+0x1ac>)
 800d5a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5a2:	429a      	cmp	r2, r3
 800d5a4:	dd1c      	ble.n	800d5e0 <faultThing+0x108>
		if(x != 3){
 800d5a6:	4b38      	ldr	r3, [pc, #224]	; (800d688 <faultThing+0x1b0>)
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	2b03      	cmp	r3, #3
 800d5ac:	d008      	beq.n	800d5c0 <faultThing+0xe8>
			x = 3;
 800d5ae:	4b36      	ldr	r3, [pc, #216]	; (800d688 <faultThing+0x1b0>)
 800d5b0:	2203      	movs	r2, #3
 800d5b2:	601a      	str	r2, [r3, #0]
			warnRecord(highWarnRecordValue, deviceOwnInfo.sensorValue);
 800d5b4:	4b33      	ldr	r3, [pc, #204]	; (800d684 <faultThing+0x1ac>)
 800d5b6:	6a1b      	ldr	r3, [r3, #32]
 800d5b8:	4619      	mov	r1, r3
 800d5ba:	2000      	movs	r0, #0
 800d5bc:	f003 fed8 	bl	8011370 <warnRecord>
		}
		if(!(count%5)){
 800d5c0:	6879      	ldr	r1, [r7, #4]
 800d5c2:	4b32      	ldr	r3, [pc, #200]	; (800d68c <faultThing+0x1b4>)
 800d5c4:	fb83 2301 	smull	r2, r3, r3, r1
 800d5c8:	105a      	asrs	r2, r3, #1
 800d5ca:	17cb      	asrs	r3, r1, #31
 800d5cc:	1ad2      	subs	r2, r2, r3
 800d5ce:	4613      	mov	r3, r2
 800d5d0:	009b      	lsls	r3, r3, #2
 800d5d2:	4413      	add	r3, r2
 800d5d4:	1aca      	subs	r2, r1, r3
 800d5d6:	2a00      	cmp	r2, #0
 800d5d8:	d135      	bne.n	800d646 <faultThing+0x16e>
			HALARM();
 800d5da:	f7ff f9bf 	bl	800c95c <HALARM>
 800d5de:	e032      	b.n	800d646 <faultThing+0x16e>
		}
	}
	else if((deviceOwnInfo.sensorValue > deviceOwnInfo.currentLowLimit)){
 800d5e0:	4b28      	ldr	r3, [pc, #160]	; (800d684 <faultThing+0x1ac>)
 800d5e2:	6a1a      	ldr	r2, [r3, #32]
 800d5e4:	4b27      	ldr	r3, [pc, #156]	; (800d684 <faultThing+0x1ac>)
 800d5e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5e8:	429a      	cmp	r2, r3
 800d5ea:	dd1d      	ble.n	800d628 <faultThing+0x150>
		if(x != 2){
 800d5ec:	4b26      	ldr	r3, [pc, #152]	; (800d688 <faultThing+0x1b0>)
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	2b02      	cmp	r3, #2
 800d5f2:	d008      	beq.n	800d606 <faultThing+0x12e>
			x = 2;
 800d5f4:	4b24      	ldr	r3, [pc, #144]	; (800d688 <faultThing+0x1b0>)
 800d5f6:	2202      	movs	r2, #2
 800d5f8:	601a      	str	r2, [r3, #0]
			warnRecord(lowWarnRecordValue, deviceOwnInfo.sensorValue);
 800d5fa:	4b22      	ldr	r3, [pc, #136]	; (800d684 <faultThing+0x1ac>)
 800d5fc:	6a1b      	ldr	r3, [r3, #32]
 800d5fe:	4619      	mov	r1, r3
 800d600:	2001      	movs	r0, #1
 800d602:	f003 feb5 	bl	8011370 <warnRecord>
		}
		if(!(count%10)){
 800d606:	6879      	ldr	r1, [r7, #4]
 800d608:	4b20      	ldr	r3, [pc, #128]	; (800d68c <faultThing+0x1b4>)
 800d60a:	fb83 2301 	smull	r2, r3, r3, r1
 800d60e:	109a      	asrs	r2, r3, #2
 800d610:	17cb      	asrs	r3, r1, #31
 800d612:	1ad2      	subs	r2, r2, r3
 800d614:	4613      	mov	r3, r2
 800d616:	009b      	lsls	r3, r3, #2
 800d618:	4413      	add	r3, r2
 800d61a:	005b      	lsls	r3, r3, #1
 800d61c:	1aca      	subs	r2, r1, r3
 800d61e:	2a00      	cmp	r2, #0
 800d620:	d111      	bne.n	800d646 <faultThing+0x16e>
			LALARM();
 800d622:	f7ff f9bd 	bl	800c9a0 <LALARM>
 800d626:	e00e      	b.n	800d646 <faultThing+0x16e>
		}
	}
	else if(!deviceOwnInfo.noConnect){
 800d628:	4b16      	ldr	r3, [pc, #88]	; (800d684 <faultThing+0x1ac>)
 800d62a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d10a      	bne.n	800d646 <faultThing+0x16e>
		if(x != 4){
 800d630:	4b15      	ldr	r3, [pc, #84]	; (800d688 <faultThing+0x1b0>)
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	2b04      	cmp	r3, #4
 800d636:	d002      	beq.n	800d63e <faultThing+0x166>
			x = 4;
 800d638:	4b13      	ldr	r3, [pc, #76]	; (800d688 <faultThing+0x1b0>)
 800d63a:	2204      	movs	r2, #4
 800d63c:	601a      	str	r2, [r3, #0]
		}
		normal();
 800d63e:	f7ff f973 	bl	800c928 <normal>
		buzzerOff();
 800d642:	f7ff f947 	bl	800c8d4 <buzzerOff>
	}
	if(deviceOwnInfo.mainPowerFault||deviceOwnInfo.bakPowerFault){
 800d646:	4b0f      	ldr	r3, [pc, #60]	; (800d684 <faultThing+0x1ac>)
 800d648:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d103      	bne.n	800d656 <faultThing+0x17e>
 800d64e:	4b0d      	ldr	r3, [pc, #52]	; (800d684 <faultThing+0x1ac>)
 800d650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d652:	2b00      	cmp	r3, #0
 800d654:	d010      	beq.n	800d678 <faultThing+0x1a0>
		if(!(count%10)){
 800d656:	6879      	ldr	r1, [r7, #4]
 800d658:	4b0c      	ldr	r3, [pc, #48]	; (800d68c <faultThing+0x1b4>)
 800d65a:	fb83 2301 	smull	r2, r3, r3, r1
 800d65e:	109a      	asrs	r2, r3, #2
 800d660:	17cb      	asrs	r3, r1, #31
 800d662:	1ad2      	subs	r2, r2, r3
 800d664:	4613      	mov	r3, r2
 800d666:	009b      	lsls	r3, r3, #2
 800d668:	4413      	add	r3, r2
 800d66a:	005b      	lsls	r3, r3, #1
 800d66c:	1aca      	subs	r2, r1, r3
 800d66e:	2a00      	cmp	r2, #0
 800d670:	d104      	bne.n	800d67c <faultThing+0x1a4>
			powerFault();
 800d672:	f7ff f9f9 	bl	800ca68 <powerFault>
		if(!(count%10)){
 800d676:	e001      	b.n	800d67c <faultThing+0x1a4>
		}
	}
	else{
		powerLedOn();
 800d678:	f7ff f9de 	bl	800ca38 <powerLedOn>
	}
}
 800d67c:	bf00      	nop
 800d67e:	3708      	adds	r7, #8
 800d680:	46bd      	mov	sp, r7
 800d682:	bd80      	pop	{r7, pc}
 800d684:	2000017c 	.word	0x2000017c
 800d688:	20005894 	.word	0x20005894
 800d68c:	66666667 	.word	0x66666667

0800d690 <CANx_SendNormalData>:

CAN_TxHeaderTypeDef     TxMeg;
CAN_RxHeaderTypeDef     RxMeg;

uint8_t CANx_SendNormalData(CAN_HandleTypeDef* hcan,uint16_t ID,uint8_t *pData,uint16_t Len)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b086      	sub	sp, #24
 800d694:	af00      	add	r7, sp, #0
 800d696:	60f8      	str	r0, [r7, #12]
 800d698:	607a      	str	r2, [r7, #4]
 800d69a:	461a      	mov	r2, r3
 800d69c:	460b      	mov	r3, r1
 800d69e:	817b      	strh	r3, [r7, #10]
 800d6a0:	4613      	mov	r3, r2
 800d6a2:	813b      	strh	r3, [r7, #8]
	HAL_StatusTypeDef	HAL_RetVal;
    uint16_t SendTimes,SendCNT=0;
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	82bb      	strh	r3, [r7, #20]
	uint8_t  FreeTxNum=0;
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	74fb      	strb	r3, [r7, #19]
	TxMeg.StdId=ID;
 800d6ac:	897b      	ldrh	r3, [r7, #10]
 800d6ae:	4a2b      	ldr	r2, [pc, #172]	; (800d75c <CANx_SendNormalData+0xcc>)
 800d6b0:	6013      	str	r3, [r2, #0]
	if(!hcan || ! pData ||!Len)  return 1;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d005      	beq.n	800d6c4 <CANx_SendNormalData+0x34>
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d002      	beq.n	800d6c4 <CANx_SendNormalData+0x34>
 800d6be:	893b      	ldrh	r3, [r7, #8]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d101      	bne.n	800d6c8 <CANx_SendNormalData+0x38>
 800d6c4:	2301      	movs	r3, #1
 800d6c6:	e045      	b.n	800d754 <CANx_SendNormalData+0xc4>
	SendTimes=Len/8+(Len%8?1:0);
 800d6c8:	893b      	ldrh	r3, [r7, #8]
 800d6ca:	08db      	lsrs	r3, r3, #3
 800d6cc:	b29a      	uxth	r2, r3
 800d6ce:	893b      	ldrh	r3, [r7, #8]
 800d6d0:	f003 0307 	and.w	r3, r3, #7
 800d6d4:	b29b      	uxth	r3, r3
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	bf14      	ite	ne
 800d6da:	2301      	movne	r3, #1
 800d6dc:	2300      	moveq	r3, #0
 800d6de:	b2db      	uxtb	r3, r3
 800d6e0:	b29b      	uxth	r3, r3
 800d6e2:	4413      	add	r3, r2
 800d6e4:	82fb      	strh	r3, [r7, #22]

	TxMeg.DLC=8;
 800d6e6:	4b1d      	ldr	r3, [pc, #116]	; (800d75c <CANx_SendNormalData+0xcc>)
 800d6e8:	2208      	movs	r2, #8
 800d6ea:	611a      	str	r2, [r3, #16]
	while(SendTimes--){
 800d6ec:	e02c      	b.n	800d748 <CANx_SendNormalData+0xb8>
		if(0==SendTimes){
 800d6ee:	8afb      	ldrh	r3, [r7, #22]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d10a      	bne.n	800d70a <CANx_SendNormalData+0x7a>
			if(Len%8)
 800d6f4:	893b      	ldrh	r3, [r7, #8]
 800d6f6:	f003 0307 	and.w	r3, r3, #7
 800d6fa:	b29b      	uxth	r3, r3
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d004      	beq.n	800d70a <CANx_SendNormalData+0x7a>
				TxMeg.DLC=Len%8;
 800d700:	893b      	ldrh	r3, [r7, #8]
 800d702:	f003 0307 	and.w	r3, r3, #7
 800d706:	4a15      	ldr	r2, [pc, #84]	; (800d75c <CANx_SendNormalData+0xcc>)
 800d708:	6113      	str	r3, [r2, #16]
		}
		FreeTxNum=HAL_CAN_GetTxMailboxesFreeLevel(&hcan1);
 800d70a:	4815      	ldr	r0, [pc, #84]	; (800d760 <CANx_SendNormalData+0xd0>)
 800d70c:	f7f3 fb09 	bl	8000d22 <HAL_CAN_GetTxMailboxesFreeLevel>
 800d710:	4603      	mov	r3, r0
 800d712:	74fb      	strb	r3, [r7, #19]
		if(0==FreeTxNum){
 800d714:	7cfb      	ldrb	r3, [r7, #19]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d101      	bne.n	800d71e <CANx_SendNormalData+0x8e>
			return 0;
 800d71a:	2300      	movs	r3, #0
 800d71c:	e01a      	b.n	800d754 <CANx_SendNormalData+0xc4>
		}
		osDelay(10);   //没有延时很有可能会发送失败
 800d71e:	200a      	movs	r0, #10
 800d720:	f7fb fad2 	bl	8008cc8 <osDelay>
		HAL_RetVal=HAL_CAN_AddTxMessage(&hcan1,&TxMeg,pData+SendCNT,(uint32_t*)CAN_TX_MAILBOX0);
 800d724:	8abb      	ldrh	r3, [r7, #20]
 800d726:	687a      	ldr	r2, [r7, #4]
 800d728:	441a      	add	r2, r3
 800d72a:	2301      	movs	r3, #1
 800d72c:	490b      	ldr	r1, [pc, #44]	; (800d75c <CANx_SendNormalData+0xcc>)
 800d72e:	480c      	ldr	r0, [pc, #48]	; (800d760 <CANx_SendNormalData+0xd0>)
 800d730:	f7f3 fa1c 	bl	8000b6c <HAL_CAN_AddTxMessage>
 800d734:	4603      	mov	r3, r0
 800d736:	74bb      	strb	r3, [r7, #18]
		if(HAL_RetVal!=HAL_OK)
 800d738:	7cbb      	ldrb	r3, [r7, #18]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d001      	beq.n	800d742 <CANx_SendNormalData+0xb2>
		{
			return 2;
 800d73e:	2302      	movs	r3, #2
 800d740:	e008      	b.n	800d754 <CANx_SendNormalData+0xc4>
		}
		SendCNT+=8;
 800d742:	8abb      	ldrh	r3, [r7, #20]
 800d744:	3308      	adds	r3, #8
 800d746:	82bb      	strh	r3, [r7, #20]
	while(SendTimes--){
 800d748:	8afb      	ldrh	r3, [r7, #22]
 800d74a:	1e5a      	subs	r2, r3, #1
 800d74c:	82fa      	strh	r2, [r7, #22]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d1cd      	bne.n	800d6ee <CANx_SendNormalData+0x5e>
	}

  return 0;
 800d752:	2300      	movs	r3, #0
}
 800d754:	4618      	mov	r0, r3
 800d756:	3718      	adds	r7, #24
 800d758:	46bd      	mov	sp, r7
 800d75a:	bd80      	pop	{r7, pc}
 800d75c:	20007070 	.word	0x20007070
 800d760:	20007008 	.word	0x20007008

0800d764 <HAL_CAN_RxFifo0MsgPendingCallback>:
};

uint8_t  Data[8];
extern struct deviceInfo otherDeviceList[64];
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)  //接收回调函数
{
 800d764:	b580      	push	{r7, lr}
 800d766:	b084      	sub	sp, #16
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef	HAL_RetVal;
	if(hcan ==&hcan1){
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	4a6e      	ldr	r2, [pc, #440]	; (800d928 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 800d770:	4293      	cmp	r3, r2
 800d772:	f040 80d4 	bne.w	800d91e <HAL_CAN_RxFifo0MsgPendingCallback+0x1ba>
	  HAL_RetVal=HAL_CAN_GetRxMessage(&hcan1,  CAN1FIFO, &RxMeg,  Data);
 800d776:	4b6d      	ldr	r3, [pc, #436]	; (800d92c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 800d778:	4a6d      	ldr	r2, [pc, #436]	; (800d930 <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>)
 800d77a:	2100      	movs	r1, #0
 800d77c:	486a      	ldr	r0, [pc, #424]	; (800d928 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 800d77e:	f7f3 fb05 	bl	8000d8c <HAL_CAN_GetRxMessage>
 800d782:	4603      	mov	r3, r0
 800d784:	73fb      	strb	r3, [r7, #15]
	  int addr = Data[5]>>8;
 800d786:	4b69      	ldr	r3, [pc, #420]	; (800d92c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 800d788:	795b      	ldrb	r3, [r3, #5]
 800d78a:	121b      	asrs	r3, r3, #8
 800d78c:	60bb      	str	r3, [r7, #8]
	  if ( HAL_OK==HAL_RetVal){
 800d78e:	7bfb      	ldrb	r3, [r7, #15]
 800d790:	2b00      	cmp	r3, #0
 800d792:	f040 80c4 	bne.w	800d91e <HAL_CAN_RxFifo0MsgPendingCallback+0x1ba>
		  otherDeviceList[addr].use = 50;
 800d796:	4a67      	ldr	r2, [pc, #412]	; (800d934 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 800d798:	68bb      	ldr	r3, [r7, #8]
 800d79a:	01db      	lsls	r3, r3, #7
 800d79c:	4413      	add	r3, r2
 800d79e:	331c      	adds	r3, #28
 800d7a0:	2232      	movs	r2, #50	; 0x32
 800d7a2:	601a      	str	r2, [r3, #0]
		  switch(RxMeg.StdId & 0x00ff){
 800d7a4:	4b62      	ldr	r3, [pc, #392]	; (800d930 <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>)
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	b2db      	uxtb	r3, r3
 800d7aa:	2b03      	cmp	r3, #3
 800d7ac:	f200 80b7 	bhi.w	800d91e <HAL_CAN_RxFifo0MsgPendingCallback+0x1ba>
 800d7b0:	a201      	add	r2, pc, #4	; (adr r2, 800d7b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 800d7b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7b6:	bf00      	nop
 800d7b8:	0800d7c9 	.word	0x0800d7c9
 800d7bc:	0800d8cb 	.word	0x0800d8cb
 800d7c0:	0800d8f1 	.word	0x0800d8f1
 800d7c4:	0800d907 	.word	0x0800d907
		  case 0:
			  otherDeviceList[addr].sensorValue = Data[0]*256+Data[1];
 800d7c8:	4b58      	ldr	r3, [pc, #352]	; (800d92c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 800d7ca:	781b      	ldrb	r3, [r3, #0]
 800d7cc:	021b      	lsls	r3, r3, #8
 800d7ce:	4a57      	ldr	r2, [pc, #348]	; (800d92c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 800d7d0:	7852      	ldrb	r2, [r2, #1]
 800d7d2:	441a      	add	r2, r3
 800d7d4:	4957      	ldr	r1, [pc, #348]	; (800d934 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 800d7d6:	68bb      	ldr	r3, [r7, #8]
 800d7d8:	01db      	lsls	r3, r3, #7
 800d7da:	440b      	add	r3, r1
 800d7dc:	3320      	adds	r3, #32
 800d7de:	601a      	str	r2, [r3, #0]
			  otherDeviceList[addr].erorrValue = Data[2];
 800d7e0:	4b52      	ldr	r3, [pc, #328]	; (800d92c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 800d7e2:	789b      	ldrb	r3, [r3, #2]
 800d7e4:	4619      	mov	r1, r3
 800d7e6:	4a53      	ldr	r2, [pc, #332]	; (800d934 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 800d7e8:	68bb      	ldr	r3, [r7, #8]
 800d7ea:	01db      	lsls	r3, r3, #7
 800d7ec:	4413      	add	r3, r2
 800d7ee:	3324      	adds	r3, #36	; 0x24
 800d7f0:	6019      	str	r1, [r3, #0]
			  switch(otherDeviceList[(RxMeg.StdId&0xff00)>>8].erorrValue){
 800d7f2:	4b4f      	ldr	r3, [pc, #316]	; (800d930 <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>)
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	0a1b      	lsrs	r3, r3, #8
 800d7f8:	b2db      	uxtb	r3, r3
 800d7fa:	4a4e      	ldr	r2, [pc, #312]	; (800d934 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 800d7fc:	01db      	lsls	r3, r3, #7
 800d7fe:	4413      	add	r3, r2
 800d800:	3324      	adds	r3, #36	; 0x24
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	2b02      	cmp	r3, #2
 800d806:	d004      	beq.n	800d812 <HAL_CAN_RxFifo0MsgPendingCallback+0xae>
 800d808:	2b03      	cmp	r3, #3
 800d80a:	d00a      	beq.n	800d822 <HAL_CAN_RxFifo0MsgPendingCallback+0xbe>
 800d80c:	2b01      	cmp	r3, #1
 800d80e:	d010      	beq.n	800d832 <HAL_CAN_RxFifo0MsgPendingCallback+0xce>
 800d810:	e017      	b.n	800d842 <HAL_CAN_RxFifo0MsgPendingCallback+0xde>
				  case canDataNoDemarcate: otherDeviceList[addr].noDemarcate = 1; break;
 800d812:	4a48      	ldr	r2, [pc, #288]	; (800d934 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 800d814:	68bb      	ldr	r3, [r7, #8]
 800d816:	01db      	lsls	r3, r3, #7
 800d818:	4413      	add	r3, r2
 800d81a:	3358      	adds	r3, #88	; 0x58
 800d81c:	2201      	movs	r2, #1
 800d81e:	601a      	str	r2, [r3, #0]
 800d820:	e025      	b.n	800d86e <HAL_CAN_RxFifo0MsgPendingCallback+0x10a>
				  case canDatafault:	   otherDeviceList[addr].sensorFault = 1; break;
 800d822:	4a44      	ldr	r2, [pc, #272]	; (800d934 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 800d824:	68bb      	ldr	r3, [r7, #8]
 800d826:	01db      	lsls	r3, r3, #7
 800d828:	4413      	add	r3, r2
 800d82a:	3354      	adds	r3, #84	; 0x54
 800d82c:	2201      	movs	r2, #1
 800d82e:	601a      	str	r2, [r3, #0]
 800d830:	e01d      	b.n	800d86e <HAL_CAN_RxFifo0MsgPendingCallback+0x10a>
				  case canDataDisConnect:  otherDeviceList[addr].noConnect = 1; break;
 800d832:	4a40      	ldr	r2, [pc, #256]	; (800d934 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 800d834:	68bb      	ldr	r3, [r7, #8]
 800d836:	01db      	lsls	r3, r3, #7
 800d838:	4413      	add	r3, r2
 800d83a:	3350      	adds	r3, #80	; 0x50
 800d83c:	2201      	movs	r2, #1
 800d83e:	601a      	str	r2, [r3, #0]
 800d840:	e015      	b.n	800d86e <HAL_CAN_RxFifo0MsgPendingCallback+0x10a>
				  default:
					  otherDeviceList[addr].noDemarcate = 0;
 800d842:	4a3c      	ldr	r2, [pc, #240]	; (800d934 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 800d844:	68bb      	ldr	r3, [r7, #8]
 800d846:	01db      	lsls	r3, r3, #7
 800d848:	4413      	add	r3, r2
 800d84a:	3358      	adds	r3, #88	; 0x58
 800d84c:	2200      	movs	r2, #0
 800d84e:	601a      	str	r2, [r3, #0]
					  otherDeviceList[addr].sensorFault = 0;
 800d850:	4a38      	ldr	r2, [pc, #224]	; (800d934 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 800d852:	68bb      	ldr	r3, [r7, #8]
 800d854:	01db      	lsls	r3, r3, #7
 800d856:	4413      	add	r3, r2
 800d858:	3354      	adds	r3, #84	; 0x54
 800d85a:	2200      	movs	r2, #0
 800d85c:	601a      	str	r2, [r3, #0]
					  otherDeviceList[addr].noConnect = 0;
 800d85e:	4a35      	ldr	r2, [pc, #212]	; (800d934 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 800d860:	68bb      	ldr	r3, [r7, #8]
 800d862:	01db      	lsls	r3, r3, #7
 800d864:	4413      	add	r3, r2
 800d866:	3350      	adds	r3, #80	; 0x50
 800d868:	2200      	movs	r2, #0
 800d86a:	601a      	str	r2, [r3, #0]
					  break;
 800d86c:	bf00      	nop
			  };
			  otherDeviceList[addr].locInfoLenth = Data[3];
 800d86e:	4b2f      	ldr	r3, [pc, #188]	; (800d92c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 800d870:	78db      	ldrb	r3, [r3, #3]
 800d872:	4619      	mov	r1, r3
 800d874:	4a2f      	ldr	r2, [pc, #188]	; (800d934 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 800d876:	68bb      	ldr	r3, [r7, #8]
 800d878:	01db      	lsls	r3, r3, #7
 800d87a:	4413      	add	r3, r2
 800d87c:	3318      	adds	r3, #24
 800d87e:	6019      	str	r1, [r3, #0]
			  otherDeviceList[addr].uint = Data[4];
 800d880:	4b2a      	ldr	r3, [pc, #168]	; (800d92c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 800d882:	791b      	ldrb	r3, [r3, #4]
 800d884:	4619      	mov	r1, r3
 800d886:	4a2b      	ldr	r2, [pc, #172]	; (800d934 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 800d888:	68bb      	ldr	r3, [r7, #8]
 800d88a:	01db      	lsls	r3, r3, #7
 800d88c:	4413      	add	r3, r2
 800d88e:	3328      	adds	r3, #40	; 0x28
 800d890:	6019      	str	r1, [r3, #0]
			  otherDeviceList[addr].addr = Data[5];
 800d892:	4b26      	ldr	r3, [pc, #152]	; (800d92c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 800d894:	795b      	ldrb	r3, [r3, #5]
 800d896:	4619      	mov	r1, r3
 800d898:	4a26      	ldr	r2, [pc, #152]	; (800d934 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 800d89a:	68bb      	ldr	r3, [r7, #8]
 800d89c:	01db      	lsls	r3, r3, #7
 800d89e:	4413      	add	r3, r2
 800d8a0:	3340      	adds	r3, #64	; 0x40
 800d8a2:	6019      	str	r1, [r3, #0]
			  otherDeviceList[addr].highPercent = Data[6];
 800d8a4:	4b21      	ldr	r3, [pc, #132]	; (800d92c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 800d8a6:	799b      	ldrb	r3, [r3, #6]
 800d8a8:	4619      	mov	r1, r3
 800d8aa:	4a22      	ldr	r2, [pc, #136]	; (800d934 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 800d8ac:	68bb      	ldr	r3, [r7, #8]
 800d8ae:	01db      	lsls	r3, r3, #7
 800d8b0:	4413      	add	r3, r2
 800d8b2:	332c      	adds	r3, #44	; 0x2c
 800d8b4:	6019      	str	r1, [r3, #0]
			  otherDeviceList[addr].lowPercent = Data[7];
 800d8b6:	4b1d      	ldr	r3, [pc, #116]	; (800d92c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 800d8b8:	79db      	ldrb	r3, [r3, #7]
 800d8ba:	4619      	mov	r1, r3
 800d8bc:	4a1d      	ldr	r2, [pc, #116]	; (800d934 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 800d8be:	68bb      	ldr	r3, [r7, #8]
 800d8c0:	01db      	lsls	r3, r3, #7
 800d8c2:	4413      	add	r3, r2
 800d8c4:	3330      	adds	r3, #48	; 0x30
 800d8c6:	6019      	str	r1, [r3, #0]
			  break;
 800d8c8:	e029      	b.n	800d91e <HAL_CAN_RxFifo0MsgPendingCallback+0x1ba>
		  case 1:
			  otherDeviceList[addr].mainPowerFault = Data[0];
 800d8ca:	4b18      	ldr	r3, [pc, #96]	; (800d92c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 800d8cc:	781b      	ldrb	r3, [r3, #0]
 800d8ce:	4619      	mov	r1, r3
 800d8d0:	4a18      	ldr	r2, [pc, #96]	; (800d934 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 800d8d2:	68bb      	ldr	r3, [r7, #8]
 800d8d4:	01db      	lsls	r3, r3, #7
 800d8d6:	4413      	add	r3, r2
 800d8d8:	336c      	adds	r3, #108	; 0x6c
 800d8da:	6019      	str	r1, [r3, #0]
			  otherDeviceList[addr].bakPowerFault = Data[1];
 800d8dc:	4b13      	ldr	r3, [pc, #76]	; (800d92c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 800d8de:	785b      	ldrb	r3, [r3, #1]
 800d8e0:	4619      	mov	r1, r3
 800d8e2:	4a14      	ldr	r2, [pc, #80]	; (800d934 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 800d8e4:	68bb      	ldr	r3, [r7, #8]
 800d8e6:	01db      	lsls	r3, r3, #7
 800d8e8:	4413      	add	r3, r2
 800d8ea:	3374      	adds	r3, #116	; 0x74
 800d8ec:	6019      	str	r1, [r3, #0]
			  break;
 800d8ee:	e016      	b.n	800d91e <HAL_CAN_RxFifo0MsgPendingCallback+0x1ba>
		  case 2:
			  memcpy(otherDeviceList[addr].loc, Data, 8);
 800d8f0:	68bb      	ldr	r3, [r7, #8]
 800d8f2:	01db      	lsls	r3, r3, #7
 800d8f4:	4a0f      	ldr	r2, [pc, #60]	; (800d934 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 800d8f6:	4413      	add	r3, r2
 800d8f8:	3304      	adds	r3, #4
 800d8fa:	4a0c      	ldr	r2, [pc, #48]	; (800d92c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 800d8fc:	6811      	ldr	r1, [r2, #0]
 800d8fe:	6852      	ldr	r2, [r2, #4]
 800d900:	6019      	str	r1, [r3, #0]
 800d902:	605a      	str	r2, [r3, #4]
			  break;
 800d904:	e00b      	b.n	800d91e <HAL_CAN_RxFifo0MsgPendingCallback+0x1ba>
		  case 3:
			  memcpy(otherDeviceList[addr].loc+8, Data, 8);
 800d906:	68bb      	ldr	r3, [r7, #8]
 800d908:	01db      	lsls	r3, r3, #7
 800d90a:	4a0a      	ldr	r2, [pc, #40]	; (800d934 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 800d90c:	4413      	add	r3, r2
 800d90e:	3304      	adds	r3, #4
 800d910:	3308      	adds	r3, #8
 800d912:	4a06      	ldr	r2, [pc, #24]	; (800d92c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 800d914:	6811      	ldr	r1, [r2, #0]
 800d916:	6852      	ldr	r2, [r2, #4]
 800d918:	6019      	str	r1, [r3, #0]
 800d91a:	605a      	str	r2, [r3, #4]
			  break;
 800d91c:	bf00      	nop
		  }
	  }
	}
}
 800d91e:	bf00      	nop
 800d920:	3710      	adds	r7, #16
 800d922:	46bd      	mov	sp, r7
 800d924:	bd80      	pop	{r7, pc}
 800d926:	bf00      	nop
 800d928:	20007008 	.word	0x20007008
 800d92c:	20006cd4 	.word	0x20006cd4
 800d930:	20006f54 	.word	0x20006f54
 800d934:	20007320 	.word	0x20007320

0800d938 <sendCanInfo>:



extern struct otherSetStruct otherSetValue;
void sendCanInfo(void){
 800d938:	b580      	push	{r7, lr}
 800d93a:	b084      	sub	sp, #16
 800d93c:	af00      	add	r7, sp, #0
	uint8_t info[8];
	memset(info, 0, 8);
 800d93e:	1d3b      	adds	r3, r7, #4
 800d940:	2208      	movs	r2, #8
 800d942:	2100      	movs	r1, #0
 800d944:	4618      	mov	r0, r3
 800d946:	f004 fe71 	bl	801262c <memset>
	if(deviceOwnInfo.addr == 64||deviceOwnInfo.isSetting == 1)
 800d94a:	4b3d      	ldr	r3, [pc, #244]	; (800da40 <sendCanInfo+0x108>)
 800d94c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d94e:	2b40      	cmp	r3, #64	; 0x40
 800d950:	d072      	beq.n	800da38 <sendCanInfo+0x100>
 800d952:	4b3b      	ldr	r3, [pc, #236]	; (800da40 <sendCanInfo+0x108>)
 800d954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d956:	2b01      	cmp	r3, #1
 800d958:	d06e      	beq.n	800da38 <sendCanInfo+0x100>
		return;
	int deviceAddr = (deviceOwnInfo.addr<<8)+0;
 800d95a:	4b39      	ldr	r3, [pc, #228]	; (800da40 <sendCanInfo+0x108>)
 800d95c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d95e:	021b      	lsls	r3, r3, #8
 800d960:	60fb      	str	r3, [r7, #12]
	info[0] = (deviceOwnInfo.sensorValue&0xff00)>>8;
 800d962:	4b37      	ldr	r3, [pc, #220]	; (800da40 <sendCanInfo+0x108>)
 800d964:	6a1b      	ldr	r3, [r3, #32]
 800d966:	121b      	asrs	r3, r3, #8
 800d968:	b2db      	uxtb	r3, r3
 800d96a:	713b      	strb	r3, [r7, #4]
	info[1] = deviceOwnInfo.sensorValue&0xff;
 800d96c:	4b34      	ldr	r3, [pc, #208]	; (800da40 <sendCanInfo+0x108>)
 800d96e:	6a1b      	ldr	r3, [r3, #32]
 800d970:	b2db      	uxtb	r3, r3
 800d972:	717b      	strb	r3, [r7, #5]
	if(!deviceOwnInfo.noConnect){
 800d974:	4b32      	ldr	r3, [pc, #200]	; (800da40 <sendCanInfo+0x108>)
 800d976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d110      	bne.n	800d99e <sendCanInfo+0x66>
		if(deviceOwnInfo.noDemarcate){
 800d97c:	4b30      	ldr	r3, [pc, #192]	; (800da40 <sendCanInfo+0x108>)
 800d97e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d980:	2b00      	cmp	r3, #0
 800d982:	d002      	beq.n	800d98a <sendCanInfo+0x52>
			info[2] = canDataNoDemarcate;
 800d984:	2302      	movs	r3, #2
 800d986:	71bb      	strb	r3, [r7, #6]
 800d988:	e00b      	b.n	800d9a2 <sendCanInfo+0x6a>
		}
		else if(deviceOwnInfo.sensorFault){
 800d98a:	4b2d      	ldr	r3, [pc, #180]	; (800da40 <sendCanInfo+0x108>)
 800d98c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d002      	beq.n	800d998 <sendCanInfo+0x60>
			info[2] = canDatafault;
 800d992:	2303      	movs	r3, #3
 800d994:	71bb      	strb	r3, [r7, #6]
 800d996:	e004      	b.n	800d9a2 <sendCanInfo+0x6a>
		}
		else
			info[2] = canDataNormal;
 800d998:	2300      	movs	r3, #0
 800d99a:	71bb      	strb	r3, [r7, #6]
 800d99c:	e001      	b.n	800d9a2 <sendCanInfo+0x6a>
	}
	else{
		info[2] = canDataDisConnect;
 800d99e:	2301      	movs	r3, #1
 800d9a0:	71bb      	strb	r3, [r7, #6]
	}
	info[3] = deviceOwnInfo.locInfoLenth;
 800d9a2:	4b27      	ldr	r3, [pc, #156]	; (800da40 <sendCanInfo+0x108>)
 800d9a4:	699b      	ldr	r3, [r3, #24]
 800d9a6:	b2db      	uxtb	r3, r3
 800d9a8:	71fb      	strb	r3, [r7, #7]
	info[4] = deviceOwnInfo.uint;
 800d9aa:	4b25      	ldr	r3, [pc, #148]	; (800da40 <sendCanInfo+0x108>)
 800d9ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9ae:	b2db      	uxtb	r3, r3
 800d9b0:	723b      	strb	r3, [r7, #8]
	info[5] = deviceOwnInfo.addr;
 800d9b2:	4b23      	ldr	r3, [pc, #140]	; (800da40 <sendCanInfo+0x108>)
 800d9b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9b6:	b2db      	uxtb	r3, r3
 800d9b8:	727b      	strb	r3, [r7, #9]
	info[6] = deviceOwnInfo.highPercent;
 800d9ba:	4b21      	ldr	r3, [pc, #132]	; (800da40 <sendCanInfo+0x108>)
 800d9bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9be:	b2db      	uxtb	r3, r3
 800d9c0:	72bb      	strb	r3, [r7, #10]
	info[7] = deviceOwnInfo.lowPercent;
 800d9c2:	4b1f      	ldr	r3, [pc, #124]	; (800da40 <sendCanInfo+0x108>)
 800d9c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9c6:	b2db      	uxtb	r3, r3
 800d9c8:	72fb      	strb	r3, [r7, #11]
	CANx_SendNormalData(&hcan1, deviceAddr, info, 8);
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	b299      	uxth	r1, r3
 800d9ce:	1d3a      	adds	r2, r7, #4
 800d9d0:	2308      	movs	r3, #8
 800d9d2:	481c      	ldr	r0, [pc, #112]	; (800da44 <sendCanInfo+0x10c>)
 800d9d4:	f7ff fe5c 	bl	800d690 <CANx_SendNormalData>

	info[0] = deviceOwnInfo.mainPowerFault;
 800d9d8:	4b19      	ldr	r3, [pc, #100]	; (800da40 <sendCanInfo+0x108>)
 800d9da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9dc:	b2db      	uxtb	r3, r3
 800d9de:	713b      	strb	r3, [r7, #4]
	info[1] = deviceOwnInfo.bakPowerFault;
 800d9e0:	4b17      	ldr	r3, [pc, #92]	; (800da40 <sendCanInfo+0x108>)
 800d9e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d9e4:	b2db      	uxtb	r3, r3
 800d9e6:	717b      	strb	r3, [r7, #5]
	CANx_SendNormalData(&hcan1, deviceAddr+1, info, 8);
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	b29b      	uxth	r3, r3
 800d9ec:	3301      	adds	r3, #1
 800d9ee:	b299      	uxth	r1, r3
 800d9f0:	1d3a      	adds	r2, r7, #4
 800d9f2:	2308      	movs	r3, #8
 800d9f4:	4813      	ldr	r0, [pc, #76]	; (800da44 <sendCanInfo+0x10c>)
 800d9f6:	f7ff fe4b 	bl	800d690 <CANx_SendNormalData>


	memcpy(info, deviceOwnInfo.loc, 8);
 800d9fa:	4a11      	ldr	r2, [pc, #68]	; (800da40 <sendCanInfo+0x108>)
 800d9fc:	1d3b      	adds	r3, r7, #4
 800d9fe:	3204      	adds	r2, #4
 800da00:	e892 0003 	ldmia.w	r2, {r0, r1}
 800da04:	e883 0003 	stmia.w	r3, {r0, r1}
	CANx_SendNormalData(&hcan1, deviceAddr+2, info, 8);
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	b29b      	uxth	r3, r3
 800da0c:	3302      	adds	r3, #2
 800da0e:	b299      	uxth	r1, r3
 800da10:	1d3a      	adds	r2, r7, #4
 800da12:	2308      	movs	r3, #8
 800da14:	480b      	ldr	r0, [pc, #44]	; (800da44 <sendCanInfo+0x10c>)
 800da16:	f7ff fe3b 	bl	800d690 <CANx_SendNormalData>
	memcpy(info, deviceOwnInfo.loc+8, 8);
 800da1a:	4a0b      	ldr	r2, [pc, #44]	; (800da48 <sendCanInfo+0x110>)
 800da1c:	1d3b      	adds	r3, r7, #4
 800da1e:	6810      	ldr	r0, [r2, #0]
 800da20:	6851      	ldr	r1, [r2, #4]
 800da22:	c303      	stmia	r3!, {r0, r1}
	CANx_SendNormalData(&hcan1, deviceAddr+3, info, 8);
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	b29b      	uxth	r3, r3
 800da28:	3303      	adds	r3, #3
 800da2a:	b299      	uxth	r1, r3
 800da2c:	1d3a      	adds	r2, r7, #4
 800da2e:	2308      	movs	r3, #8
 800da30:	4804      	ldr	r0, [pc, #16]	; (800da44 <sendCanInfo+0x10c>)
 800da32:	f7ff fe2d 	bl	800d690 <CANx_SendNormalData>
 800da36:	e000      	b.n	800da3a <sendCanInfo+0x102>
		return;
 800da38:	bf00      	nop
}
 800da3a:	3710      	adds	r7, #16
 800da3c:	46bd      	mov	sp, r7
 800da3e:	bd80      	pop	{r7, pc}
 800da40:	2000017c 	.word	0x2000017c
 800da44:	20007008 	.word	0x20007008
 800da48:	20000188 	.word	0x20000188

0800da4c <detectPowerFault>:

void detectPowerFault(void){
 800da4c:	b580      	push	{r7, lr}
 800da4e:	af00      	add	r7, sp, #0
	if(!mainPowerNormal()&&deviceOwnInfo.mainPowerfix ==0){
 800da50:	f7ff f822 	bl	800ca98 <mainPowerNormal>
 800da54:	4603      	mov	r3, r0
 800da56:	2b00      	cmp	r3, #0
 800da58:	d10e      	bne.n	800da78 <detectPowerFault+0x2c>
 800da5a:	4b1d      	ldr	r3, [pc, #116]	; (800dad0 <detectPowerFault+0x84>)
 800da5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d10a      	bne.n	800da78 <detectPowerFault+0x2c>
		deviceOwnInfo.mainPowerFault = 1;
 800da62:	4b1b      	ldr	r3, [pc, #108]	; (800dad0 <detectPowerFault+0x84>)
 800da64:	2201      	movs	r2, #1
 800da66:	66da      	str	r2, [r3, #108]	; 0x6c
		deviceOwnInfo.mainPowerfix = 1;
 800da68:	4b19      	ldr	r3, [pc, #100]	; (800dad0 <detectPowerFault+0x84>)
 800da6a:	2201      	movs	r2, #1
 800da6c:	671a      	str	r2, [r3, #112]	; 0x70
		warnRecord(MainPowerlowRecordValue, 0);
 800da6e:	2100      	movs	r1, #0
 800da70:	2002      	movs	r0, #2
 800da72:	f003 fc7d 	bl	8011370 <warnRecord>
 800da76:	e00a      	b.n	800da8e <detectPowerFault+0x42>
	}
	else if(mainPowerNormal()){
 800da78:	f7ff f80e 	bl	800ca98 <mainPowerNormal>
 800da7c:	4603      	mov	r3, r0
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d005      	beq.n	800da8e <detectPowerFault+0x42>
		deviceOwnInfo.mainPowerfix = 0;
 800da82:	4b13      	ldr	r3, [pc, #76]	; (800dad0 <detectPowerFault+0x84>)
 800da84:	2200      	movs	r2, #0
 800da86:	671a      	str	r2, [r3, #112]	; 0x70
		deviceOwnInfo.mainPowerFault = 0;
 800da88:	4b11      	ldr	r3, [pc, #68]	; (800dad0 <detectPowerFault+0x84>)
 800da8a:	2200      	movs	r2, #0
 800da8c:	66da      	str	r2, [r3, #108]	; 0x6c
	}
	if(!bakPowerNormal()&&deviceOwnInfo.bakPowerFault ==0){
 800da8e:	f7ff f80f 	bl	800cab0 <bakPowerNormal>
 800da92:	4603      	mov	r3, r0
 800da94:	2b00      	cmp	r3, #0
 800da96:	d10e      	bne.n	800dab6 <detectPowerFault+0x6a>
 800da98:	4b0d      	ldr	r3, [pc, #52]	; (800dad0 <detectPowerFault+0x84>)
 800da9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d10a      	bne.n	800dab6 <detectPowerFault+0x6a>
		deviceOwnInfo.bakPowerFault = 1;
 800daa0:	4b0b      	ldr	r3, [pc, #44]	; (800dad0 <detectPowerFault+0x84>)
 800daa2:	2201      	movs	r2, #1
 800daa4:	675a      	str	r2, [r3, #116]	; 0x74
		deviceOwnInfo.bakPowerfix = 1;
 800daa6:	4b0a      	ldr	r3, [pc, #40]	; (800dad0 <detectPowerFault+0x84>)
 800daa8:	2201      	movs	r2, #1
 800daaa:	679a      	str	r2, [r3, #120]	; 0x78
		warnRecord(MainPowerlowRecordValue, 0);
 800daac:	2100      	movs	r1, #0
 800daae:	2002      	movs	r0, #2
 800dab0:	f003 fc5e 	bl	8011370 <warnRecord>
	}
	else if(bakPowerNormal()){
		deviceOwnInfo.bakPowerfix = 0;
		deviceOwnInfo.bakPowerFault = 0;
	}
}
 800dab4:	e00a      	b.n	800dacc <detectPowerFault+0x80>
	else if(bakPowerNormal()){
 800dab6:	f7fe fffb 	bl	800cab0 <bakPowerNormal>
 800daba:	4603      	mov	r3, r0
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d005      	beq.n	800dacc <detectPowerFault+0x80>
		deviceOwnInfo.bakPowerfix = 0;
 800dac0:	4b03      	ldr	r3, [pc, #12]	; (800dad0 <detectPowerFault+0x84>)
 800dac2:	2200      	movs	r2, #0
 800dac4:	679a      	str	r2, [r3, #120]	; 0x78
		deviceOwnInfo.bakPowerFault = 0;
 800dac6:	4b02      	ldr	r3, [pc, #8]	; (800dad0 <detectPowerFault+0x84>)
 800dac8:	2200      	movs	r2, #0
 800daca:	675a      	str	r2, [r3, #116]	; 0x74
}
 800dacc:	bf00      	nop
 800dace:	bd80      	pop	{r7, pc}
 800dad0:	2000017c 	.word	0x2000017c

0800dad4 <addOwnToList>:

void addOwnToList(void){
 800dad4:	b580      	push	{r7, lr}
 800dad6:	af00      	add	r7, sp, #0
	deviceOwnInfo.use = 100;
 800dad8:	4b0a      	ldr	r3, [pc, #40]	; (800db04 <addOwnToList+0x30>)
 800dada:	2264      	movs	r2, #100	; 0x64
 800dadc:	61da      	str	r2, [r3, #28]
	if(deviceOwnInfo.isSetting == 0){
 800dade:	4b09      	ldr	r3, [pc, #36]	; (800db04 <addOwnToList+0x30>)
 800dae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d10b      	bne.n	800dafe <addOwnToList+0x2a>
		otherDeviceList[deviceOwnInfo.addr] = deviceOwnInfo;
 800dae6:	4b07      	ldr	r3, [pc, #28]	; (800db04 <addOwnToList+0x30>)
 800dae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800daea:	4a07      	ldr	r2, [pc, #28]	; (800db08 <addOwnToList+0x34>)
 800daec:	01db      	lsls	r3, r3, #7
 800daee:	4413      	add	r3, r2
 800daf0:	4a04      	ldr	r2, [pc, #16]	; (800db04 <addOwnToList+0x30>)
 800daf2:	4618      	mov	r0, r3
 800daf4:	4611      	mov	r1, r2
 800daf6:	2380      	movs	r3, #128	; 0x80
 800daf8:	461a      	mov	r2, r3
 800dafa:	f004 fd8c 	bl	8012616 <memcpy>
	}
}
 800dafe:	bf00      	nop
 800db00:	bd80      	pop	{r7, pc}
 800db02:	bf00      	nop
 800db04:	2000017c 	.word	0x2000017c
 800db08:	20007320 	.word	0x20007320

0800db0c <canTxAndKeepAlive>:

void canTxAndKeepAlive(int count){
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b084      	sub	sp, #16
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
	if(!(count%5)){
 800db14:	6879      	ldr	r1, [r7, #4]
 800db16:	4b18      	ldr	r3, [pc, #96]	; (800db78 <canTxAndKeepAlive+0x6c>)
 800db18:	fb83 2301 	smull	r2, r3, r3, r1
 800db1c:	105a      	asrs	r2, r3, #1
 800db1e:	17cb      	asrs	r3, r1, #31
 800db20:	1ad2      	subs	r2, r2, r3
 800db22:	4613      	mov	r3, r2
 800db24:	009b      	lsls	r3, r3, #2
 800db26:	4413      	add	r3, r2
 800db28:	1aca      	subs	r2, r1, r3
 800db2a:	2a00      	cmp	r2, #0
 800db2c:	d11f      	bne.n	800db6e <canTxAndKeepAlive+0x62>
		sendCanInfo();
 800db2e:	f7ff ff03 	bl	800d938 <sendCanInfo>
		for(int i = 0; i < 64; i++)
 800db32:	2300      	movs	r3, #0
 800db34:	60fb      	str	r3, [r7, #12]
 800db36:	e017      	b.n	800db68 <canTxAndKeepAlive+0x5c>
			if(otherDeviceList[i].use)
 800db38:	4a10      	ldr	r2, [pc, #64]	; (800db7c <canTxAndKeepAlive+0x70>)
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	01db      	lsls	r3, r3, #7
 800db3e:	4413      	add	r3, r2
 800db40:	331c      	adds	r3, #28
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d00c      	beq.n	800db62 <canTxAndKeepAlive+0x56>
				otherDeviceList[i].use--;
 800db48:	4a0c      	ldr	r2, [pc, #48]	; (800db7c <canTxAndKeepAlive+0x70>)
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	01db      	lsls	r3, r3, #7
 800db4e:	4413      	add	r3, r2
 800db50:	331c      	adds	r3, #28
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	1e5a      	subs	r2, r3, #1
 800db56:	4909      	ldr	r1, [pc, #36]	; (800db7c <canTxAndKeepAlive+0x70>)
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	01db      	lsls	r3, r3, #7
 800db5c:	440b      	add	r3, r1
 800db5e:	331c      	adds	r3, #28
 800db60:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < 64; i++)
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	3301      	adds	r3, #1
 800db66:	60fb      	str	r3, [r7, #12]
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	2b3f      	cmp	r3, #63	; 0x3f
 800db6c:	dde4      	ble.n	800db38 <canTxAndKeepAlive+0x2c>
	}
}
 800db6e:	bf00      	nop
 800db70:	3710      	adds	r7, #16
 800db72:	46bd      	mov	sp, r7
 800db74:	bd80      	pop	{r7, pc}
 800db76:	bf00      	nop
 800db78:	66666667 	.word	0x66666667
 800db7c:	20007320 	.word	0x20007320

0800db80 <rollDisplay>:
void rollDisplay(int count){
 800db80:	b480      	push	{r7}
 800db82:	b083      	sub	sp, #12
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]
	if(deviceOwnInfo.rollDisplay < 40)
 800db88:	4b3c      	ldr	r3, [pc, #240]	; (800dc7c <rollDisplay+0xfc>)
 800db8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db8c:	2b27      	cmp	r3, #39	; 0x27
 800db8e:	dc04      	bgt.n	800db9a <rollDisplay+0x1a>
		deviceOwnInfo.rollDisplay++;
 800db90:	4b3a      	ldr	r3, [pc, #232]	; (800dc7c <rollDisplay+0xfc>)
 800db92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db94:	3301      	adds	r3, #1
 800db96:	4a39      	ldr	r2, [pc, #228]	; (800dc7c <rollDisplay+0xfc>)
 800db98:	6693      	str	r3, [r2, #104]	; 0x68
	if(!(count%20)){
 800db9a:	6879      	ldr	r1, [r7, #4]
 800db9c:	4b38      	ldr	r3, [pc, #224]	; (800dc80 <rollDisplay+0x100>)
 800db9e:	fb83 2301 	smull	r2, r3, r3, r1
 800dba2:	10da      	asrs	r2, r3, #3
 800dba4:	17cb      	asrs	r3, r1, #31
 800dba6:	1ad2      	subs	r2, r2, r3
 800dba8:	4613      	mov	r3, r2
 800dbaa:	009b      	lsls	r3, r3, #2
 800dbac:	4413      	add	r3, r2
 800dbae:	009b      	lsls	r3, r3, #2
 800dbb0:	1aca      	subs	r2, r1, r3
 800dbb2:	2a00      	cmp	r2, #0
 800dbb4:	d15b      	bne.n	800dc6e <rollDisplay+0xee>
		if(deviceOwnInfo.mannerge && (deviceOwnInfo.rollDisplay == 40)){
 800dbb6:	4b31      	ldr	r3, [pc, #196]	; (800dc7c <rollDisplay+0xfc>)
 800dbb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d057      	beq.n	800dc6e <rollDisplay+0xee>
 800dbbe:	4b2f      	ldr	r3, [pc, #188]	; (800dc7c <rollDisplay+0xfc>)
 800dbc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dbc2:	2b28      	cmp	r3, #40	; 0x28
 800dbc4:	d153      	bne.n	800dc6e <rollDisplay+0xee>
			static int y=-1;
			static int i;
			for(; i < 64; i++){
 800dbc6:	e043      	b.n	800dc50 <rollDisplay+0xd0>
				if((otherDeviceList[i].noConnect||  otherDeviceList[i].noDemarcate|| \
 800dbc8:	4b2e      	ldr	r3, [pc, #184]	; (800dc84 <rollDisplay+0x104>)
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	4a2e      	ldr	r2, [pc, #184]	; (800dc88 <rollDisplay+0x108>)
 800dbce:	01db      	lsls	r3, r3, #7
 800dbd0:	4413      	add	r3, r2
 800dbd2:	3350      	adds	r3, #80	; 0x50
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d123      	bne.n	800dc22 <rollDisplay+0xa2>
 800dbda:	4b2a      	ldr	r3, [pc, #168]	; (800dc84 <rollDisplay+0x104>)
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	4a2a      	ldr	r2, [pc, #168]	; (800dc88 <rollDisplay+0x108>)
 800dbe0:	01db      	lsls	r3, r3, #7
 800dbe2:	4413      	add	r3, r2
 800dbe4:	3358      	adds	r3, #88	; 0x58
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d11a      	bne.n	800dc22 <rollDisplay+0xa2>
						otherDeviceList[i].mainPowerFault|| otherDeviceList[i].bakPowerFault ||\
 800dbec:	4b25      	ldr	r3, [pc, #148]	; (800dc84 <rollDisplay+0x104>)
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	4a25      	ldr	r2, [pc, #148]	; (800dc88 <rollDisplay+0x108>)
 800dbf2:	01db      	lsls	r3, r3, #7
 800dbf4:	4413      	add	r3, r2
 800dbf6:	336c      	adds	r3, #108	; 0x6c
 800dbf8:	681b      	ldr	r3, [r3, #0]
				if((otherDeviceList[i].noConnect||  otherDeviceList[i].noDemarcate|| \
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d111      	bne.n	800dc22 <rollDisplay+0xa2>
						otherDeviceList[i].mainPowerFault|| otherDeviceList[i].bakPowerFault ||\
 800dbfe:	4b21      	ldr	r3, [pc, #132]	; (800dc84 <rollDisplay+0x104>)
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	4a21      	ldr	r2, [pc, #132]	; (800dc88 <rollDisplay+0x108>)
 800dc04:	01db      	lsls	r3, r3, #7
 800dc06:	4413      	add	r3, r2
 800dc08:	3374      	adds	r3, #116	; 0x74
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d108      	bne.n	800dc22 <rollDisplay+0xa2>
						otherDeviceList[i].sensorFault )&& i > y){
 800dc10:	4b1c      	ldr	r3, [pc, #112]	; (800dc84 <rollDisplay+0x104>)
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	4a1c      	ldr	r2, [pc, #112]	; (800dc88 <rollDisplay+0x108>)
 800dc16:	01db      	lsls	r3, r3, #7
 800dc18:	4413      	add	r3, r2
 800dc1a:	3354      	adds	r3, #84	; 0x54
 800dc1c:	681b      	ldr	r3, [r3, #0]
						otherDeviceList[i].mainPowerFault|| otherDeviceList[i].bakPowerFault ||\
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d011      	beq.n	800dc46 <rollDisplay+0xc6>
						otherDeviceList[i].sensorFault )&& i > y){
 800dc22:	4b18      	ldr	r3, [pc, #96]	; (800dc84 <rollDisplay+0x104>)
 800dc24:	681a      	ldr	r2, [r3, #0]
 800dc26:	4b19      	ldr	r3, [pc, #100]	; (800dc8c <rollDisplay+0x10c>)
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	429a      	cmp	r2, r3
 800dc2c:	dd0b      	ble.n	800dc46 <rollDisplay+0xc6>
					deviceInfoP = &otherDeviceList[i];
 800dc2e:	4b15      	ldr	r3, [pc, #84]	; (800dc84 <rollDisplay+0x104>)
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	01db      	lsls	r3, r3, #7
 800dc34:	4a14      	ldr	r2, [pc, #80]	; (800dc88 <rollDisplay+0x108>)
 800dc36:	4413      	add	r3, r2
 800dc38:	4a15      	ldr	r2, [pc, #84]	; (800dc90 <rollDisplay+0x110>)
 800dc3a:	6013      	str	r3, [r2, #0]
					y = i;
 800dc3c:	4b11      	ldr	r3, [pc, #68]	; (800dc84 <rollDisplay+0x104>)
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	4a12      	ldr	r2, [pc, #72]	; (800dc8c <rollDisplay+0x10c>)
 800dc42:	6013      	str	r3, [r2, #0]
					break;
 800dc44:	e008      	b.n	800dc58 <rollDisplay+0xd8>
			for(; i < 64; i++){
 800dc46:	4b0f      	ldr	r3, [pc, #60]	; (800dc84 <rollDisplay+0x104>)
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	3301      	adds	r3, #1
 800dc4c:	4a0d      	ldr	r2, [pc, #52]	; (800dc84 <rollDisplay+0x104>)
 800dc4e:	6013      	str	r3, [r2, #0]
 800dc50:	4b0c      	ldr	r3, [pc, #48]	; (800dc84 <rollDisplay+0x104>)
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	2b3f      	cmp	r3, #63	; 0x3f
 800dc56:	ddb7      	ble.n	800dbc8 <rollDisplay+0x48>
				}
			}
			if(i == 64){
 800dc58:	4b0a      	ldr	r3, [pc, #40]	; (800dc84 <rollDisplay+0x104>)
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	2b40      	cmp	r3, #64	; 0x40
 800dc5e:	d106      	bne.n	800dc6e <rollDisplay+0xee>
				i = 0;
 800dc60:	4b08      	ldr	r3, [pc, #32]	; (800dc84 <rollDisplay+0x104>)
 800dc62:	2200      	movs	r2, #0
 800dc64:	601a      	str	r2, [r3, #0]
				y = -1;
 800dc66:	4b09      	ldr	r3, [pc, #36]	; (800dc8c <rollDisplay+0x10c>)
 800dc68:	f04f 32ff 	mov.w	r2, #4294967295
 800dc6c:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 800dc6e:	bf00      	nop
 800dc70:	370c      	adds	r7, #12
 800dc72:	46bd      	mov	sp, r7
 800dc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc78:	4770      	bx	lr
 800dc7a:	bf00      	nop
 800dc7c:	2000017c 	.word	0x2000017c
 800dc80:	66666667 	.word	0x66666667
 800dc84:	20005898 	.word	0x20005898
 800dc88:	20007320 	.word	0x20007320
 800dc8c:	20000094 	.word	0x20000094
 800dc90:	200001fc 	.word	0x200001fc

0800dc94 <uartDataSolveAndKeepAlive>:

void uartDataSolveAndKeepAlive(int count){
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b082      	sub	sp, #8
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
	static int fault;
	static int recNumBak;
	if(uart2RecLoc > 3){
 800dc9c:	4b1b      	ldr	r3, [pc, #108]	; (800dd0c <uartDataSolveAndKeepAlive+0x78>)
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	2b03      	cmp	r3, #3
 800dca2:	dd04      	ble.n	800dcae <uartDataSolveAndKeepAlive+0x1a>
		osDelay(50);
 800dca4:	2032      	movs	r0, #50	; 0x32
 800dca6:	f7fb f80f 	bl	8008cc8 <osDelay>
		uartDataGet();
 800dcaa:	f7fe f909 	bl	800bec0 <uartDataGet>
	}
	if(!(count%2)){
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	f003 0301 	and.w	r3, r3, #1
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d105      	bne.n	800dcc4 <uartDataSolveAndKeepAlive+0x30>
		sendDIsEnable();
 800dcb8:	f7fd fe06 	bl	800b8c8 <sendDIsEnable>
		uartDataSend();
 800dcbc:	f7fd fe58 	bl	800b970 <uartDataSend>
		sendDIsEnable();
 800dcc0:	f7fd fe02 	bl	800b8c8 <sendDIsEnable>
	}
	if(recNumBak != uartSendInfo.recNum){
 800dcc4:	4b12      	ldr	r3, [pc, #72]	; (800dd10 <uartDataSolveAndKeepAlive+0x7c>)
 800dcc6:	681a      	ldr	r2, [r3, #0]
 800dcc8:	4b12      	ldr	r3, [pc, #72]	; (800dd14 <uartDataSolveAndKeepAlive+0x80>)
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	429a      	cmp	r2, r3
 800dcce:	d00a      	beq.n	800dce6 <uartDataSolveAndKeepAlive+0x52>
		recNumBak = uartSendInfo.recNum;
 800dcd0:	4b0f      	ldr	r3, [pc, #60]	; (800dd10 <uartDataSolveAndKeepAlive+0x7c>)
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	4a0f      	ldr	r2, [pc, #60]	; (800dd14 <uartDataSolveAndKeepAlive+0x80>)
 800dcd6:	6013      	str	r3, [r2, #0]
		deviceOwnInfo.noConnect = 0;
 800dcd8:	4b0f      	ldr	r3, [pc, #60]	; (800dd18 <uartDataSolveAndKeepAlive+0x84>)
 800dcda:	2200      	movs	r2, #0
 800dcdc:	651a      	str	r2, [r3, #80]	; 0x50
		fault = 0;
 800dcde:	4b0f      	ldr	r3, [pc, #60]	; (800dd1c <uartDataSolveAndKeepAlive+0x88>)
 800dce0:	2200      	movs	r2, #0
 800dce2:	601a      	str	r2, [r3, #0]
		if(fault > 90){
			fault = 90;
			deviceOwnInfo.noConnect = 1;
		}
	}
}
 800dce4:	e00e      	b.n	800dd04 <uartDataSolveAndKeepAlive+0x70>
		fault++;
 800dce6:	4b0d      	ldr	r3, [pc, #52]	; (800dd1c <uartDataSolveAndKeepAlive+0x88>)
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	3301      	adds	r3, #1
 800dcec:	4a0b      	ldr	r2, [pc, #44]	; (800dd1c <uartDataSolveAndKeepAlive+0x88>)
 800dcee:	6013      	str	r3, [r2, #0]
		if(fault > 90){
 800dcf0:	4b0a      	ldr	r3, [pc, #40]	; (800dd1c <uartDataSolveAndKeepAlive+0x88>)
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	2b5a      	cmp	r3, #90	; 0x5a
 800dcf6:	dd05      	ble.n	800dd04 <uartDataSolveAndKeepAlive+0x70>
			fault = 90;
 800dcf8:	4b08      	ldr	r3, [pc, #32]	; (800dd1c <uartDataSolveAndKeepAlive+0x88>)
 800dcfa:	225a      	movs	r2, #90	; 0x5a
 800dcfc:	601a      	str	r2, [r3, #0]
			deviceOwnInfo.noConnect = 1;
 800dcfe:	4b06      	ldr	r3, [pc, #24]	; (800dd18 <uartDataSolveAndKeepAlive+0x84>)
 800dd00:	2201      	movs	r2, #1
 800dd02:	651a      	str	r2, [r3, #80]	; 0x50
}
 800dd04:	bf00      	nop
 800dd06:	3708      	adds	r7, #8
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	bd80      	pop	{r7, pc}
 800dd0c:	20006bd0 	.word	0x20006bd0
 800dd10:	2000000c 	.word	0x2000000c
 800dd14:	2000589c 	.word	0x2000589c
 800dd18:	2000017c 	.word	0x2000017c
 800dd1c:	200058a0 	.word	0x200058a0

0800dd20 <timeDisplayRefresh>:

void timeDisplayRefresh(int count){
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b082      	sub	sp, #8
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	6078      	str	r0, [r7, #4]

	if(!(count%10)){
 800dd28:	6879      	ldr	r1, [r7, #4]
 800dd2a:	4b0f      	ldr	r3, [pc, #60]	; (800dd68 <timeDisplayRefresh+0x48>)
 800dd2c:	fb83 2301 	smull	r2, r3, r3, r1
 800dd30:	109a      	asrs	r2, r3, #2
 800dd32:	17cb      	asrs	r3, r1, #31
 800dd34:	1ad2      	subs	r2, r2, r3
 800dd36:	4613      	mov	r3, r2
 800dd38:	009b      	lsls	r3, r3, #2
 800dd3a:	4413      	add	r3, r2
 800dd3c:	005b      	lsls	r3, r3, #1
 800dd3e:	1aca      	subs	r2, r1, r3
 800dd40:	2a00      	cmp	r2, #0
 800dd42:	d10d      	bne.n	800dd60 <timeDisplayRefresh+0x40>
		DS1302_ReadTime(&datatime);
 800dd44:	4809      	ldr	r0, [pc, #36]	; (800dd6c <timeDisplayRefresh+0x4c>)
 800dd46:	f7fe fb7b 	bl	800c440 <DS1302_ReadTime>
		if(pageInfoList[0].isDis)
 800dd4a:	4b09      	ldr	r3, [pc, #36]	; (800dd70 <timeDisplayRefresh+0x50>)
 800dd4c:	781b      	ldrb	r3, [r3, #0]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d006      	beq.n	800dd60 <timeDisplayRefresh+0x40>
			xSemaphoreGive(disSignal);
 800dd52:	4b08      	ldr	r3, [pc, #32]	; (800dd74 <timeDisplayRefresh+0x54>)
 800dd54:	6818      	ldr	r0, [r3, #0]
 800dd56:	2300      	movs	r3, #0
 800dd58:	2200      	movs	r2, #0
 800dd5a:	2100      	movs	r1, #0
 800dd5c:	f7fb fb5a 	bl	8009414 <xQueueGenericSend>
	}
}
 800dd60:	bf00      	nop
 800dd62:	3708      	adds	r7, #8
 800dd64:	46bd      	mov	sp, r7
 800dd66:	bd80      	pop	{r7, pc}
 800dd68:	66666667 	.word	0x66666667
 800dd6c:	20006bd4 	.word	0x20006bd4
 800dd70:	20000200 	.word	0x20000200
 800dd74:	20006cd0 	.word	0x20006cd0

0800dd78 <dataGetTask>:
extern uint8_t temporayValue;
void dataGetTask(void const * argument)
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b084      	sub	sp, #16
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
	int count = 0;
 800dd80:	2300      	movs	r3, #0
 800dd82:	60fb      	str	r3, [r7, #12]
	gpioInit();
 800dd84:	f7fd fd62 	bl	800b84c <gpioInit>
	Ds1302_Gpio_Init();
 800dd88:	f7fe f990 	bl	800c0ac <Ds1302_Gpio_Init>
	HAL_UART_Receive_IT(&huart2, &temporayValue, 1);
 800dd8c:	2201      	movs	r2, #1
 800dd8e:	4917      	ldr	r1, [pc, #92]	; (800ddec <dataGetTask+0x74>)
 800dd90:	4817      	ldr	r0, [pc, #92]	; (800ddf0 <dataGetTask+0x78>)
 800dd92:	f7f6 fa3b 	bl	800420c <HAL_UART_Receive_IT>
	osDelay(1000);
 800dd96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800dd9a:	f7fa ff95 	bl	8008cc8 <osDelay>
	for(;;){
		osDelay(100);
 800dd9e:	2064      	movs	r0, #100	; 0x64
 800dda0:	f7fa ff92 	bl	8008cc8 <osDelay>
		count++;
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	3301      	adds	r3, #1
 800dda8:	60fb      	str	r3, [r7, #12]
		timeDisplayRefresh(count);
 800ddaa:	68f8      	ldr	r0, [r7, #12]
 800ddac:	f7ff ffb8 	bl	800dd20 <timeDisplayRefresh>
		faultThing(count);
 800ddb0:	68f8      	ldr	r0, [r7, #12]
 800ddb2:	f7ff fb91 	bl	800d4d8 <faultThing>
		detectPowerFault();
 800ddb6:	f7ff fe49 	bl	800da4c <detectPowerFault>
		addOwnToList();
 800ddba:	f7ff fe8b 	bl	800dad4 <addOwnToList>
		uartDataSolveAndKeepAlive(count);
 800ddbe:	68f8      	ldr	r0, [r7, #12]
 800ddc0:	f7ff ff68 	bl	800dc94 <uartDataSolveAndKeepAlive>
		canTxAndKeepAlive(count);
 800ddc4:	68f8      	ldr	r0, [r7, #12]
 800ddc6:	f7ff fea1 	bl	800db0c <canTxAndKeepAlive>
		rollDisplay(count);
 800ddca:	68f8      	ldr	r0, [r7, #12]
 800ddcc:	f7ff fed8 	bl	800db80 <rollDisplay>
		count %= 40;
 800ddd0:	68fa      	ldr	r2, [r7, #12]
 800ddd2:	4b08      	ldr	r3, [pc, #32]	; (800ddf4 <dataGetTask+0x7c>)
 800ddd4:	fb83 1302 	smull	r1, r3, r3, r2
 800ddd8:	1119      	asrs	r1, r3, #4
 800ddda:	17d3      	asrs	r3, r2, #31
 800dddc:	1ac9      	subs	r1, r1, r3
 800ddde:	460b      	mov	r3, r1
 800dde0:	009b      	lsls	r3, r3, #2
 800dde2:	440b      	add	r3, r1
 800dde4:	00db      	lsls	r3, r3, #3
 800dde6:	1ad3      	subs	r3, r2, r3
 800dde8:	60fb      	str	r3, [r7, #12]
		osDelay(100);
 800ddea:	e7d8      	b.n	800dd9e <dataGetTask+0x26>
 800ddec:	20006b48 	.word	0x20006b48
 800ddf0:	20006fc8 	.word	0x20006fc8
 800ddf4:	66666667 	.word	0x66666667

0800ddf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800ddf8:	b480      	push	{r7}
 800ddfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800ddfc:	bf00      	nop
 800ddfe:	46bd      	mov	sp, r7
 800de00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de04:	4770      	bx	lr

0800de06 <EXTI3_IRQHandler>:
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
}


void EXTI3_IRQHandler(void)
{
 800de06:	b580      	push	{r7, lr}
 800de08:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);//调用中断处理公用函数
 800de0a:	2008      	movs	r0, #8
 800de0c:	f7f4 f9a4 	bl	8002158 <HAL_GPIO_EXTI_IRQHandler>
}
 800de10:	bf00      	nop
 800de12:	bd80      	pop	{r7, pc}

0800de14 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 800de14:	b580      	push	{r7, lr}
 800de16:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);//调用中断处理公用函数
 800de18:	2010      	movs	r0, #16
 800de1a:	f7f4 f99d 	bl	8002158 <HAL_GPIO_EXTI_IRQHandler>
}
 800de1e:	bf00      	nop
 800de20:	bd80      	pop	{r7, pc}

0800de22 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 800de22:	b580      	push	{r7, lr}
 800de24:	b082      	sub	sp, #8
 800de26:	af00      	add	r7, sp, #0
	for(int i = 0; i < 5; i++)
 800de28:	2300      	movs	r3, #0
 800de2a:	607b      	str	r3, [r7, #4]
 800de2c:	e00a      	b.n	800de44 <EXTI9_5_IRQHandler+0x22>
		HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5 << i);//调用中断处理公用函数
 800de2e:	2220      	movs	r2, #32
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	fa02 f303 	lsl.w	r3, r2, r3
 800de36:	b29b      	uxth	r3, r3
 800de38:	4618      	mov	r0, r3
 800de3a:	f7f4 f98d 	bl	8002158 <HAL_GPIO_EXTI_IRQHandler>
	for(int i = 0; i < 5; i++)
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	3301      	adds	r3, #1
 800de42:	607b      	str	r3, [r7, #4]
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	2b04      	cmp	r3, #4
 800de48:	ddf1      	ble.n	800de2e <EXTI9_5_IRQHandler+0xc>
}
 800de4a:	bf00      	nop
 800de4c:	3708      	adds	r7, #8
 800de4e:	46bd      	mov	sp, r7
 800de50:	bd80      	pop	{r7, pc}

0800de52 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800de52:	b480      	push	{r7}
 800de54:	b083      	sub	sp, #12
 800de56:	af00      	add	r7, sp, #0
 800de58:	4603      	mov	r3, r0
 800de5a:	80fb      	strh	r3, [r7, #6]

}
 800de5c:	bf00      	nop
 800de5e:	370c      	adds	r7, #12
 800de60:	46bd      	mov	sp, r7
 800de62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de66:	4770      	bx	lr

0800de68 <myPop>:
	int otherSet;
};
struct pageCourse pageCourseInfo;
struct stack myStack;

char myPop(void){
 800de68:	b480      	push	{r7}
 800de6a:	b083      	sub	sp, #12
 800de6c:	af00      	add	r7, sp, #0
	char x;
	if(myStack.curLoc >0)
 800de6e:	4b0c      	ldr	r3, [pc, #48]	; (800dea0 <myPop+0x38>)
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	2b00      	cmp	r3, #0
 800de74:	dd0b      	ble.n	800de8e <myPop+0x26>
	{
		myStack.curLoc--;
 800de76:	4b0a      	ldr	r3, [pc, #40]	; (800dea0 <myPop+0x38>)
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	3b01      	subs	r3, #1
 800de7c:	4a08      	ldr	r2, [pc, #32]	; (800dea0 <myPop+0x38>)
 800de7e:	6013      	str	r3, [r2, #0]
		x = myStack.deep[myStack.curLoc];
 800de80:	4b07      	ldr	r3, [pc, #28]	; (800dea0 <myPop+0x38>)
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	4a06      	ldr	r2, [pc, #24]	; (800dea0 <myPop+0x38>)
 800de86:	4413      	add	r3, r2
 800de88:	791b      	ldrb	r3, [r3, #4]
 800de8a:	71fb      	strb	r3, [r7, #7]
 800de8c:	e001      	b.n	800de92 <myPop+0x2a>
	}
	else
		x = -1;
 800de8e:	23ff      	movs	r3, #255	; 0xff
 800de90:	71fb      	strb	r3, [r7, #7]
	return x;
 800de92:	79fb      	ldrb	r3, [r7, #7]
}
 800de94:	4618      	mov	r0, r3
 800de96:	370c      	adds	r7, #12
 800de98:	46bd      	mov	sp, r7
 800de9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de9e:	4770      	bx	lr
 800dea0:	200072c4 	.word	0x200072c4

0800dea4 <myPush>:
void myPush(char x){
 800dea4:	b480      	push	{r7}
 800dea6:	b083      	sub	sp, #12
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	4603      	mov	r3, r0
 800deac:	71fb      	strb	r3, [r7, #7]
	if(myStack.curLoc == 4)
 800deae:	4b0b      	ldr	r3, [pc, #44]	; (800dedc <myPush+0x38>)
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	2b04      	cmp	r3, #4
 800deb4:	d00b      	beq.n	800dece <myPush+0x2a>
		return;
	myStack.deep[myStack.curLoc] = x;
 800deb6:	4b09      	ldr	r3, [pc, #36]	; (800dedc <myPush+0x38>)
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	4a08      	ldr	r2, [pc, #32]	; (800dedc <myPush+0x38>)
 800debc:	4413      	add	r3, r2
 800debe:	79fa      	ldrb	r2, [r7, #7]
 800dec0:	711a      	strb	r2, [r3, #4]
	myStack.curLoc++;
 800dec2:	4b06      	ldr	r3, [pc, #24]	; (800dedc <myPush+0x38>)
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	3301      	adds	r3, #1
 800dec8:	4a04      	ldr	r2, [pc, #16]	; (800dedc <myPush+0x38>)
 800deca:	6013      	str	r3, [r2, #0]
 800decc:	e000      	b.n	800ded0 <myPush+0x2c>
		return;
 800dece:	bf00      	nop
}
 800ded0:	370c      	adds	r7, #12
 800ded2:	46bd      	mov	sp, r7
 800ded4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded8:	4770      	bx	lr
 800deda:	bf00      	nop
 800dedc:	200072c4 	.word	0x200072c4

0800dee0 <cleanStack>:

void cleanStack(void){
 800dee0:	b480      	push	{r7}
 800dee2:	af00      	add	r7, sp, #0
	myStack.curLoc = 0;
 800dee4:	4b03      	ldr	r3, [pc, #12]	; (800def4 <cleanStack+0x14>)
 800dee6:	2200      	movs	r2, #0
 800dee8:	601a      	str	r2, [r3, #0]
}
 800deea:	bf00      	nop
 800deec:	46bd      	mov	sp, r7
 800deee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def2:	4770      	bx	lr
 800def4:	200072c4 	.word	0x200072c4

0800def8 <arrowInfoDisFunc>:

void arrowInfoDisFunc(void * p){
 800def8:	b580      	push	{r7, lr}
 800defa:	b084      	sub	sp, #16
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
	char value = *(char*)p;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	781b      	ldrb	r3, [r3, #0]
 800df04:	72fb      	strb	r3, [r7, #11]
	if(value == 0)
 800df06:	7afb      	ldrb	r3, [r7, #11]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d120      	bne.n	800df4e <arrowInfoDisFunc+0x56>
	{
		if(deviceOwnInfo.mannerge){
 800df0c:	4b35      	ldr	r3, [pc, #212]	; (800dfe4 <arrowInfoDisFunc+0xec>)
 800df0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800df10:	2b00      	cmp	r3, #0
 800df12:	d062      	beq.n	800dfda <arrowInfoDisFunc+0xe2>
			tftSetWin(198, 6, 13, 11);
 800df14:	230b      	movs	r3, #11
 800df16:	220d      	movs	r2, #13
 800df18:	2106      	movs	r1, #6
 800df1a:	20c6      	movs	r0, #198	; 0xc6
 800df1c:	f003 f894 	bl	8011048 <tftSetWin>
			tftRamWrite(arraowList[0].p, arraowList[0].length);
 800df20:	4b31      	ldr	r3, [pc, #196]	; (800dfe8 <arrowInfoDisFunc+0xf0>)
 800df22:	685a      	ldr	r2, [r3, #4]
 800df24:	4b30      	ldr	r3, [pc, #192]	; (800dfe8 <arrowInfoDisFunc+0xf0>)
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	4619      	mov	r1, r3
 800df2a:	4610      	mov	r0, r2
 800df2c:	f002 fff3 	bl	8010f16 <tftRamWrite>
			tftSetWin(198, 159, 13, 11);
 800df30:	230b      	movs	r3, #11
 800df32:	220d      	movs	r2, #13
 800df34:	219f      	movs	r1, #159	; 0x9f
 800df36:	20c6      	movs	r0, #198	; 0xc6
 800df38:	f003 f886 	bl	8011048 <tftSetWin>
			tftRamWrite(arraowList[1].p, arraowList[1].length);
 800df3c:	4b2a      	ldr	r3, [pc, #168]	; (800dfe8 <arrowInfoDisFunc+0xf0>)
 800df3e:	68da      	ldr	r2, [r3, #12]
 800df40:	4b29      	ldr	r3, [pc, #164]	; (800dfe8 <arrowInfoDisFunc+0xf0>)
 800df42:	689b      	ldr	r3, [r3, #8]
 800df44:	4619      	mov	r1, r3
 800df46:	4610      	mov	r0, r2
 800df48:	f002 ffe5 	bl	8010f16 <tftRamWrite>
			tftRamColorFill(0x2945, arraowList[1].length);
		}
		tftSetWin(178-50*(value-1), 10, 13, 11);
		tftRamWrite(arraowList[1].p, arraowList[1].length);
	}
}
 800df4c:	e045      	b.n	800dfda <arrowInfoDisFunc+0xe2>
	else if(value>0 && value<5)
 800df4e:	7afb      	ldrb	r3, [r7, #11]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d042      	beq.n	800dfda <arrowInfoDisFunc+0xe2>
 800df54:	7afb      	ldrb	r3, [r7, #11]
 800df56:	2b04      	cmp	r3, #4
 800df58:	d83f      	bhi.n	800dfda <arrowInfoDisFunc+0xe2>
		for(int i = 1; i<5; i++){
 800df5a:	2301      	movs	r3, #1
 800df5c:	60fb      	str	r3, [r7, #12]
 800df5e:	e01d      	b.n	800df9c <arrowInfoDisFunc+0xa4>
			tftSetWin(178-50*(i-1), 10, 13, 11);
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	3b01      	subs	r3, #1
 800df64:	b2db      	uxtb	r3, r3
 800df66:	461a      	mov	r2, r3
 800df68:	00d2      	lsls	r2, r2, #3
 800df6a:	1ad3      	subs	r3, r2, r3
 800df6c:	461a      	mov	r2, r3
 800df6e:	0151      	lsls	r1, r2, #5
 800df70:	461a      	mov	r2, r3
 800df72:	460b      	mov	r3, r1
 800df74:	4413      	add	r3, r2
 800df76:	005b      	lsls	r3, r3, #1
 800df78:	b2db      	uxtb	r3, r3
 800df7a:	3b4e      	subs	r3, #78	; 0x4e
 800df7c:	b2d8      	uxtb	r0, r3
 800df7e:	230b      	movs	r3, #11
 800df80:	220d      	movs	r2, #13
 800df82:	210a      	movs	r1, #10
 800df84:	f003 f860 	bl	8011048 <tftSetWin>
			tftRamColorFill(0x2945, arraowList[1].length);
 800df88:	4b17      	ldr	r3, [pc, #92]	; (800dfe8 <arrowInfoDisFunc+0xf0>)
 800df8a:	689b      	ldr	r3, [r3, #8]
 800df8c:	4619      	mov	r1, r3
 800df8e:	f642 1045 	movw	r0, #10565	; 0x2945
 800df92:	f002 ffa5 	bl	8010ee0 <tftRamColorFill>
		for(int i = 1; i<5; i++){
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	3301      	adds	r3, #1
 800df9a:	60fb      	str	r3, [r7, #12]
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	2b04      	cmp	r3, #4
 800dfa0:	ddde      	ble.n	800df60 <arrowInfoDisFunc+0x68>
		tftSetWin(178-50*(value-1), 10, 13, 11);
 800dfa2:	7afb      	ldrb	r3, [r7, #11]
 800dfa4:	3b01      	subs	r3, #1
 800dfa6:	b2db      	uxtb	r3, r3
 800dfa8:	461a      	mov	r2, r3
 800dfaa:	00d2      	lsls	r2, r2, #3
 800dfac:	1ad3      	subs	r3, r2, r3
 800dfae:	461a      	mov	r2, r3
 800dfb0:	0151      	lsls	r1, r2, #5
 800dfb2:	461a      	mov	r2, r3
 800dfb4:	460b      	mov	r3, r1
 800dfb6:	4413      	add	r3, r2
 800dfb8:	005b      	lsls	r3, r3, #1
 800dfba:	b2db      	uxtb	r3, r3
 800dfbc:	3b4e      	subs	r3, #78	; 0x4e
 800dfbe:	b2d8      	uxtb	r0, r3
 800dfc0:	230b      	movs	r3, #11
 800dfc2:	220d      	movs	r2, #13
 800dfc4:	210a      	movs	r1, #10
 800dfc6:	f003 f83f 	bl	8011048 <tftSetWin>
		tftRamWrite(arraowList[1].p, arraowList[1].length);
 800dfca:	4b07      	ldr	r3, [pc, #28]	; (800dfe8 <arrowInfoDisFunc+0xf0>)
 800dfcc:	68da      	ldr	r2, [r3, #12]
 800dfce:	4b06      	ldr	r3, [pc, #24]	; (800dfe8 <arrowInfoDisFunc+0xf0>)
 800dfd0:	689b      	ldr	r3, [r3, #8]
 800dfd2:	4619      	mov	r1, r3
 800dfd4:	4610      	mov	r0, r2
 800dfd6:	f002 ff9e 	bl	8010f16 <tftRamWrite>
}
 800dfda:	bf00      	nop
 800dfdc:	3710      	adds	r7, #16
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	bd80      	pop	{r7, pc}
 800dfe2:	bf00      	nop
 800dfe4:	2000017c 	.word	0x2000017c
 800dfe8:	0801d820 	.word	0x0801d820

0800dfec <circleInfoDisFunc>:

void circleInfoDisFunc(void * p){
 800dfec:	b5b0      	push	{r4, r5, r7, lr}
 800dfee:	b090      	sub	sp, #64	; 0x40
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
	int color;
	int percentage;
	const char loc[] = {
 800dff4:	4b5c      	ldr	r3, [pc, #368]	; (800e168 <circleInfoDisFunc+0x17c>)
 800dff6:	f107 0408 	add.w	r4, r7, #8
 800dffa:	461d      	mov	r5, r3
 800dffc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dffe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e000:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e002:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e004:	682b      	ldr	r3, [r5, #0]
 800e006:	6023      	str	r3, [r4, #0]
	};



	//确认上下限
	if(deviceInfoP->uint == 2){
 800e008:	4b58      	ldr	r3, [pc, #352]	; (800e16c <circleInfoDisFunc+0x180>)
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e00e:	2b02      	cmp	r3, #2
 800e010:	d10a      	bne.n	800e028 <circleInfoDisFunc+0x3c>
		percentage = deviceInfoP->sensorValue / 5;
 800e012:	4b56      	ldr	r3, [pc, #344]	; (800e16c <circleInfoDisFunc+0x180>)
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	6a1b      	ldr	r3, [r3, #32]
 800e018:	4a55      	ldr	r2, [pc, #340]	; (800e170 <circleInfoDisFunc+0x184>)
 800e01a:	fb82 1203 	smull	r1, r2, r2, r3
 800e01e:	1052      	asrs	r2, r2, #1
 800e020:	17db      	asrs	r3, r3, #31
 800e022:	1ad3      	subs	r3, r2, r3
 800e024:	63bb      	str	r3, [r7, #56]	; 0x38
 800e026:	e009      	b.n	800e03c <circleInfoDisFunc+0x50>
	}
	else{
		percentage = deviceInfoP->sensorValue / 100;
 800e028:	4b50      	ldr	r3, [pc, #320]	; (800e16c <circleInfoDisFunc+0x180>)
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	6a1b      	ldr	r3, [r3, #32]
 800e02e:	4a51      	ldr	r2, [pc, #324]	; (800e174 <circleInfoDisFunc+0x188>)
 800e030:	fb82 1203 	smull	r1, r2, r2, r3
 800e034:	1152      	asrs	r2, r2, #5
 800e036:	17db      	asrs	r3, r3, #31
 800e038:	1ad3      	subs	r3, r2, r3
 800e03a:	63bb      	str	r3, [r7, #56]	; 0x38
	}
	//确认颜色
	if((!deviceInfoP->sensorFault) && (!deviceInfoP->noDemarcate)){
 800e03c:	4b4b      	ldr	r3, [pc, #300]	; (800e16c <circleInfoDisFunc+0x180>)
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e042:	2b00      	cmp	r3, #0
 800e044:	d137      	bne.n	800e0b6 <circleInfoDisFunc+0xca>
 800e046:	4b49      	ldr	r3, [pc, #292]	; (800e16c <circleInfoDisFunc+0x180>)
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d132      	bne.n	800e0b6 <circleInfoDisFunc+0xca>
		color = 0X7D7C;
 800e050:	f647 537c 	movw	r3, #32124	; 0x7d7c
 800e054:	63fb      	str	r3, [r7, #60]	; 0x3c
		deviceInfoP->sensorAlarm = 0;
 800e056:	4b45      	ldr	r3, [pc, #276]	; (800e16c <circleInfoDisFunc+0x180>)
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	2200      	movs	r2, #0
 800e05c:	67da      	str	r2, [r3, #124]	; 0x7c
		int num;
		if(deviceInfoP->uint == 1){
 800e05e:	4b43      	ldr	r3, [pc, #268]	; (800e16c <circleInfoDisFunc+0x180>)
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e064:	2b01      	cmp	r3, #1
 800e066:	d102      	bne.n	800e06e <circleInfoDisFunc+0x82>
			num = 100;
 800e068:	2364      	movs	r3, #100	; 0x64
 800e06a:	637b      	str	r3, [r7, #52]	; 0x34
 800e06c:	e001      	b.n	800e072 <circleInfoDisFunc+0x86>
		}
		else{
			num = 5;
 800e06e:	2305      	movs	r3, #5
 800e070:	637b      	str	r3, [r7, #52]	; 0x34
		}
		if(deviceInfoP->sensorValue > deviceOwnInfo.lowPercent*num){
 800e072:	4b3e      	ldr	r3, [pc, #248]	; (800e16c <circleInfoDisFunc+0x180>)
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	6a1a      	ldr	r2, [r3, #32]
 800e078:	4b3f      	ldr	r3, [pc, #252]	; (800e178 <circleInfoDisFunc+0x18c>)
 800e07a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e07c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e07e:	fb01 f303 	mul.w	r3, r1, r3
 800e082:	429a      	cmp	r2, r3
 800e084:	dd06      	ble.n	800e094 <circleInfoDisFunc+0xa8>
			color = 0XFC07;
 800e086:	f64f 4307 	movw	r3, #64519	; 0xfc07
 800e08a:	63fb      	str	r3, [r7, #60]	; 0x3c
			deviceInfoP->sensorAlarm = 1;
 800e08c:	4b37      	ldr	r3, [pc, #220]	; (800e16c <circleInfoDisFunc+0x180>)
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	2201      	movs	r2, #1
 800e092:	67da      	str	r2, [r3, #124]	; 0x7c
		}
		if(deviceInfoP->sensorValue > deviceOwnInfo.highPercent*num){
 800e094:	4b35      	ldr	r3, [pc, #212]	; (800e16c <circleInfoDisFunc+0x180>)
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	6a1a      	ldr	r2, [r3, #32]
 800e09a:	4b37      	ldr	r3, [pc, #220]	; (800e178 <circleInfoDisFunc+0x18c>)
 800e09c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e09e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e0a0:	fb01 f303 	mul.w	r3, r1, r3
 800e0a4:	429a      	cmp	r2, r3
 800e0a6:	dd06      	ble.n	800e0b6 <circleInfoDisFunc+0xca>
			color = 0xF800;
 800e0a8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800e0ac:	63fb      	str	r3, [r7, #60]	; 0x3c
			deviceInfoP->sensorAlarm = 1;
 800e0ae:	4b2f      	ldr	r3, [pc, #188]	; (800e16c <circleInfoDisFunc+0x180>)
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	2201      	movs	r2, #1
 800e0b4:	67da      	str	r2, [r3, #124]	; 0x7c
		}
	}
	//显示个数
	int circleDisNum = percentage * 9 /100+1;
 800e0b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e0b8:	4613      	mov	r3, r2
 800e0ba:	00db      	lsls	r3, r3, #3
 800e0bc:	4413      	add	r3, r2
 800e0be:	4a2d      	ldr	r2, [pc, #180]	; (800e174 <circleInfoDisFunc+0x188>)
 800e0c0:	fb82 1203 	smull	r1, r2, r2, r3
 800e0c4:	1152      	asrs	r2, r2, #5
 800e0c6:	17db      	asrs	r3, r3, #31
 800e0c8:	1ad3      	subs	r3, r2, r3
 800e0ca:	3301      	adds	r3, #1
 800e0cc:	62fb      	str	r3, [r7, #44]	; 0x2c

	for(int i = 0; i < 9; i++){
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	633b      	str	r3, [r7, #48]	; 0x30
 800e0d2:	e042      	b.n	800e15a <circleInfoDisFunc+0x16e>
		tftSetWin(loc[i*4+0],loc[i*4+1],loc[i*4+2],loc[i*4+3]);
 800e0d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0d6:	009b      	lsls	r3, r3, #2
 800e0d8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800e0dc:	4413      	add	r3, r2
 800e0de:	f813 0c38 	ldrb.w	r0, [r3, #-56]
 800e0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0e4:	009b      	lsls	r3, r3, #2
 800e0e6:	3301      	adds	r3, #1
 800e0e8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800e0ec:	4413      	add	r3, r2
 800e0ee:	f813 1c38 	ldrb.w	r1, [r3, #-56]
 800e0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0f4:	009b      	lsls	r3, r3, #2
 800e0f6:	3302      	adds	r3, #2
 800e0f8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800e0fc:	4413      	add	r3, r2
 800e0fe:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 800e102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e104:	009b      	lsls	r3, r3, #2
 800e106:	3303      	adds	r3, #3
 800e108:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800e10c:	4423      	add	r3, r4
 800e10e:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 800e112:	f002 ff99 	bl	8011048 <tftSetWin>
		if(circleDisNum > i)
 800e116:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e11a:	429a      	cmp	r2, r3
 800e11c:	dd0e      	ble.n	800e13c <circleInfoDisFunc+0x150>
			tftRamWriteColorChange(circleList[i].p, circleList[i].length,0xffff,color);
 800e11e:	4a17      	ldr	r2, [pc, #92]	; (800e17c <circleInfoDisFunc+0x190>)
 800e120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e122:	00db      	lsls	r3, r3, #3
 800e124:	4413      	add	r3, r2
 800e126:	6858      	ldr	r0, [r3, #4]
 800e128:	4a14      	ldr	r2, [pc, #80]	; (800e17c <circleInfoDisFunc+0x190>)
 800e12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e12c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800e130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e132:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e136:	f002 ff34 	bl	8010fa2 <tftRamWriteColorChange>
 800e13a:	e00b      	b.n	800e154 <circleInfoDisFunc+0x168>
		else
			tftRamWrite(circleList[i].p, circleList[i].length);
 800e13c:	4a0f      	ldr	r2, [pc, #60]	; (800e17c <circleInfoDisFunc+0x190>)
 800e13e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e140:	00db      	lsls	r3, r3, #3
 800e142:	4413      	add	r3, r2
 800e144:	6858      	ldr	r0, [r3, #4]
 800e146:	4a0d      	ldr	r2, [pc, #52]	; (800e17c <circleInfoDisFunc+0x190>)
 800e148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e14a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e14e:	4619      	mov	r1, r3
 800e150:	f002 fee1 	bl	8010f16 <tftRamWrite>
	for(int i = 0; i < 9; i++){
 800e154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e156:	3301      	adds	r3, #1
 800e158:	633b      	str	r3, [r7, #48]	; 0x30
 800e15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e15c:	2b08      	cmp	r3, #8
 800e15e:	ddb9      	ble.n	800e0d4 <circleInfoDisFunc+0xe8>
	}
}
 800e160:	bf00      	nop
 800e162:	3740      	adds	r7, #64	; 0x40
 800e164:	46bd      	mov	sp, r7
 800e166:	bdb0      	pop	{r4, r5, r7, pc}
 800e168:	08012f78 	.word	0x08012f78
 800e16c:	200001fc 	.word	0x200001fc
 800e170:	66666667 	.word	0x66666667
 800e174:	51eb851f 	.word	0x51eb851f
 800e178:	2000017c 	.word	0x2000017c
 800e17c:	0801d598 	.word	0x0801d598

0800e180 <dateInfoDisFunc>:

void dateInfoDisFunc(void * p){
 800e180:	b580      	push	{r7, lr}
 800e182:	b08a      	sub	sp, #40	; 0x28
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
	int * x = (int *)p;
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	61fb      	str	r3, [r7, #28]
	uint8_t temporaryFirestLine[10];
	uint8_t temporarySecLine[8];
	temporaryFirestLine[0] = x[0]/1000;
 800e18c:	69fb      	ldr	r3, [r7, #28]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	4a8d      	ldr	r2, [pc, #564]	; (800e3c8 <dateInfoDisFunc+0x248>)
 800e192:	fb82 1203 	smull	r1, r2, r2, r3
 800e196:	1192      	asrs	r2, r2, #6
 800e198:	17db      	asrs	r3, r3, #31
 800e19a:	1ad3      	subs	r3, r2, r3
 800e19c:	b2db      	uxtb	r3, r3
 800e19e:	743b      	strb	r3, [r7, #16]
	temporaryFirestLine[1] = x[0]/100%10;
 800e1a0:	69fb      	ldr	r3, [r7, #28]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	4a89      	ldr	r2, [pc, #548]	; (800e3cc <dateInfoDisFunc+0x24c>)
 800e1a6:	fb82 1203 	smull	r1, r2, r2, r3
 800e1aa:	1152      	asrs	r2, r2, #5
 800e1ac:	17db      	asrs	r3, r3, #31
 800e1ae:	1ad2      	subs	r2, r2, r3
 800e1b0:	4b87      	ldr	r3, [pc, #540]	; (800e3d0 <dateInfoDisFunc+0x250>)
 800e1b2:	fb83 1302 	smull	r1, r3, r3, r2
 800e1b6:	1099      	asrs	r1, r3, #2
 800e1b8:	17d3      	asrs	r3, r2, #31
 800e1ba:	1ac9      	subs	r1, r1, r3
 800e1bc:	460b      	mov	r3, r1
 800e1be:	009b      	lsls	r3, r3, #2
 800e1c0:	440b      	add	r3, r1
 800e1c2:	005b      	lsls	r3, r3, #1
 800e1c4:	1ad1      	subs	r1, r2, r3
 800e1c6:	b2cb      	uxtb	r3, r1
 800e1c8:	747b      	strb	r3, [r7, #17]
	temporaryFirestLine[2] = x[0]/10%10;
 800e1ca:	69fb      	ldr	r3, [r7, #28]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	4a80      	ldr	r2, [pc, #512]	; (800e3d0 <dateInfoDisFunc+0x250>)
 800e1d0:	fb82 1203 	smull	r1, r2, r2, r3
 800e1d4:	1092      	asrs	r2, r2, #2
 800e1d6:	17db      	asrs	r3, r3, #31
 800e1d8:	1ad2      	subs	r2, r2, r3
 800e1da:	4b7d      	ldr	r3, [pc, #500]	; (800e3d0 <dateInfoDisFunc+0x250>)
 800e1dc:	fb83 1302 	smull	r1, r3, r3, r2
 800e1e0:	1099      	asrs	r1, r3, #2
 800e1e2:	17d3      	asrs	r3, r2, #31
 800e1e4:	1ac9      	subs	r1, r1, r3
 800e1e6:	460b      	mov	r3, r1
 800e1e8:	009b      	lsls	r3, r3, #2
 800e1ea:	440b      	add	r3, r1
 800e1ec:	005b      	lsls	r3, r3, #1
 800e1ee:	1ad1      	subs	r1, r2, r3
 800e1f0:	b2cb      	uxtb	r3, r1
 800e1f2:	74bb      	strb	r3, [r7, #18]
	temporaryFirestLine[3] = x[0]%10;
 800e1f4:	69fb      	ldr	r3, [r7, #28]
 800e1f6:	681a      	ldr	r2, [r3, #0]
 800e1f8:	4b75      	ldr	r3, [pc, #468]	; (800e3d0 <dateInfoDisFunc+0x250>)
 800e1fa:	fb83 1302 	smull	r1, r3, r3, r2
 800e1fe:	1099      	asrs	r1, r3, #2
 800e200:	17d3      	asrs	r3, r2, #31
 800e202:	1ac9      	subs	r1, r1, r3
 800e204:	460b      	mov	r3, r1
 800e206:	009b      	lsls	r3, r3, #2
 800e208:	440b      	add	r3, r1
 800e20a:	005b      	lsls	r3, r3, #1
 800e20c:	1ad1      	subs	r1, r2, r3
 800e20e:	b2cb      	uxtb	r3, r1
 800e210:	74fb      	strb	r3, [r7, #19]
	temporaryFirestLine[4] = 10;
 800e212:	230a      	movs	r3, #10
 800e214:	753b      	strb	r3, [r7, #20]
	temporaryFirestLine[5] = x[1]/10;
 800e216:	69fb      	ldr	r3, [r7, #28]
 800e218:	3304      	adds	r3, #4
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	4a6c      	ldr	r2, [pc, #432]	; (800e3d0 <dateInfoDisFunc+0x250>)
 800e21e:	fb82 1203 	smull	r1, r2, r2, r3
 800e222:	1092      	asrs	r2, r2, #2
 800e224:	17db      	asrs	r3, r3, #31
 800e226:	1ad3      	subs	r3, r2, r3
 800e228:	b2db      	uxtb	r3, r3
 800e22a:	757b      	strb	r3, [r7, #21]
	temporaryFirestLine[6] = x[1]%10;
 800e22c:	69fb      	ldr	r3, [r7, #28]
 800e22e:	3304      	adds	r3, #4
 800e230:	681a      	ldr	r2, [r3, #0]
 800e232:	4b67      	ldr	r3, [pc, #412]	; (800e3d0 <dateInfoDisFunc+0x250>)
 800e234:	fb83 1302 	smull	r1, r3, r3, r2
 800e238:	1099      	asrs	r1, r3, #2
 800e23a:	17d3      	asrs	r3, r2, #31
 800e23c:	1ac9      	subs	r1, r1, r3
 800e23e:	460b      	mov	r3, r1
 800e240:	009b      	lsls	r3, r3, #2
 800e242:	440b      	add	r3, r1
 800e244:	005b      	lsls	r3, r3, #1
 800e246:	1ad1      	subs	r1, r2, r3
 800e248:	b2cb      	uxtb	r3, r1
 800e24a:	75bb      	strb	r3, [r7, #22]
	temporaryFirestLine[7] = 10;
 800e24c:	230a      	movs	r3, #10
 800e24e:	75fb      	strb	r3, [r7, #23]
	temporaryFirestLine[8] = x[2]/10;
 800e250:	69fb      	ldr	r3, [r7, #28]
 800e252:	3308      	adds	r3, #8
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	4a5e      	ldr	r2, [pc, #376]	; (800e3d0 <dateInfoDisFunc+0x250>)
 800e258:	fb82 1203 	smull	r1, r2, r2, r3
 800e25c:	1092      	asrs	r2, r2, #2
 800e25e:	17db      	asrs	r3, r3, #31
 800e260:	1ad3      	subs	r3, r2, r3
 800e262:	b2db      	uxtb	r3, r3
 800e264:	763b      	strb	r3, [r7, #24]
	temporaryFirestLine[9] = x[2]%10;
 800e266:	69fb      	ldr	r3, [r7, #28]
 800e268:	3308      	adds	r3, #8
 800e26a:	681a      	ldr	r2, [r3, #0]
 800e26c:	4b58      	ldr	r3, [pc, #352]	; (800e3d0 <dateInfoDisFunc+0x250>)
 800e26e:	fb83 1302 	smull	r1, r3, r3, r2
 800e272:	1099      	asrs	r1, r3, #2
 800e274:	17d3      	asrs	r3, r2, #31
 800e276:	1ac9      	subs	r1, r1, r3
 800e278:	460b      	mov	r3, r1
 800e27a:	009b      	lsls	r3, r3, #2
 800e27c:	440b      	add	r3, r1
 800e27e:	005b      	lsls	r3, r3, #1
 800e280:	1ad1      	subs	r1, r2, r3
 800e282:	b2cb      	uxtb	r3, r1
 800e284:	767b      	strb	r3, [r7, #25]
	temporarySecLine[0] = x[3]/10;
 800e286:	69fb      	ldr	r3, [r7, #28]
 800e288:	330c      	adds	r3, #12
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	4a50      	ldr	r2, [pc, #320]	; (800e3d0 <dateInfoDisFunc+0x250>)
 800e28e:	fb82 1203 	smull	r1, r2, r2, r3
 800e292:	1092      	asrs	r2, r2, #2
 800e294:	17db      	asrs	r3, r3, #31
 800e296:	1ad3      	subs	r3, r2, r3
 800e298:	b2db      	uxtb	r3, r3
 800e29a:	723b      	strb	r3, [r7, #8]
	temporarySecLine[1] = x[3]%10;
 800e29c:	69fb      	ldr	r3, [r7, #28]
 800e29e:	330c      	adds	r3, #12
 800e2a0:	681a      	ldr	r2, [r3, #0]
 800e2a2:	4b4b      	ldr	r3, [pc, #300]	; (800e3d0 <dateInfoDisFunc+0x250>)
 800e2a4:	fb83 1302 	smull	r1, r3, r3, r2
 800e2a8:	1099      	asrs	r1, r3, #2
 800e2aa:	17d3      	asrs	r3, r2, #31
 800e2ac:	1ac9      	subs	r1, r1, r3
 800e2ae:	460b      	mov	r3, r1
 800e2b0:	009b      	lsls	r3, r3, #2
 800e2b2:	440b      	add	r3, r1
 800e2b4:	005b      	lsls	r3, r3, #1
 800e2b6:	1ad1      	subs	r1, r2, r3
 800e2b8:	b2cb      	uxtb	r3, r1
 800e2ba:	727b      	strb	r3, [r7, #9]
	temporarySecLine[2] = 11;
 800e2bc:	230b      	movs	r3, #11
 800e2be:	72bb      	strb	r3, [r7, #10]
	temporarySecLine[3] = x[4]/10;
 800e2c0:	69fb      	ldr	r3, [r7, #28]
 800e2c2:	3310      	adds	r3, #16
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	4a42      	ldr	r2, [pc, #264]	; (800e3d0 <dateInfoDisFunc+0x250>)
 800e2c8:	fb82 1203 	smull	r1, r2, r2, r3
 800e2cc:	1092      	asrs	r2, r2, #2
 800e2ce:	17db      	asrs	r3, r3, #31
 800e2d0:	1ad3      	subs	r3, r2, r3
 800e2d2:	b2db      	uxtb	r3, r3
 800e2d4:	72fb      	strb	r3, [r7, #11]
	temporarySecLine[4] = x[4]%10;
 800e2d6:	69fb      	ldr	r3, [r7, #28]
 800e2d8:	3310      	adds	r3, #16
 800e2da:	681a      	ldr	r2, [r3, #0]
 800e2dc:	4b3c      	ldr	r3, [pc, #240]	; (800e3d0 <dateInfoDisFunc+0x250>)
 800e2de:	fb83 1302 	smull	r1, r3, r3, r2
 800e2e2:	1099      	asrs	r1, r3, #2
 800e2e4:	17d3      	asrs	r3, r2, #31
 800e2e6:	1ac9      	subs	r1, r1, r3
 800e2e8:	460b      	mov	r3, r1
 800e2ea:	009b      	lsls	r3, r3, #2
 800e2ec:	440b      	add	r3, r1
 800e2ee:	005b      	lsls	r3, r3, #1
 800e2f0:	1ad1      	subs	r1, r2, r3
 800e2f2:	b2cb      	uxtb	r3, r1
 800e2f4:	733b      	strb	r3, [r7, #12]
	temporarySecLine[5] = 11;
 800e2f6:	230b      	movs	r3, #11
 800e2f8:	737b      	strb	r3, [r7, #13]
	temporarySecLine[6] = x[5]/10;
 800e2fa:	69fb      	ldr	r3, [r7, #28]
 800e2fc:	3314      	adds	r3, #20
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	4a33      	ldr	r2, [pc, #204]	; (800e3d0 <dateInfoDisFunc+0x250>)
 800e302:	fb82 1203 	smull	r1, r2, r2, r3
 800e306:	1092      	asrs	r2, r2, #2
 800e308:	17db      	asrs	r3, r3, #31
 800e30a:	1ad3      	subs	r3, r2, r3
 800e30c:	b2db      	uxtb	r3, r3
 800e30e:	73bb      	strb	r3, [r7, #14]
	temporarySecLine[7] = x[5]%10;
 800e310:	69fb      	ldr	r3, [r7, #28]
 800e312:	3314      	adds	r3, #20
 800e314:	681a      	ldr	r2, [r3, #0]
 800e316:	4b2e      	ldr	r3, [pc, #184]	; (800e3d0 <dateInfoDisFunc+0x250>)
 800e318:	fb83 1302 	smull	r1, r3, r3, r2
 800e31c:	1099      	asrs	r1, r3, #2
 800e31e:	17d3      	asrs	r3, r2, #31
 800e320:	1ac9      	subs	r1, r1, r3
 800e322:	460b      	mov	r3, r1
 800e324:	009b      	lsls	r3, r3, #2
 800e326:	440b      	add	r3, r1
 800e328:	005b      	lsls	r3, r3, #1
 800e32a:	1ad1      	subs	r1, r2, r3
 800e32c:	b2cb      	uxtb	r3, r1
 800e32e:	73fb      	strb	r3, [r7, #15]
	tftSetWin(60, 50, 11, 8*10);
 800e330:	2350      	movs	r3, #80	; 0x50
 800e332:	220b      	movs	r2, #11
 800e334:	2132      	movs	r1, #50	; 0x32
 800e336:	203c      	movs	r0, #60	; 0x3c
 800e338:	f002 fe86 	bl	8011048 <tftSetWin>
	for(int i = 0; i < 10; i++)
 800e33c:	2300      	movs	r3, #0
 800e33e:	627b      	str	r3, [r7, #36]	; 0x24
 800e340:	e017      	b.n	800e372 <dateInfoDisFunc+0x1f2>
		tftRamWrite(smallNumList[temporaryFirestLine[i]].p, smallNumList[temporaryFirestLine[i]].length);
 800e342:	f107 0210 	add.w	r2, r7, #16
 800e346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e348:	4413      	add	r3, r2
 800e34a:	781b      	ldrb	r3, [r3, #0]
 800e34c:	4a21      	ldr	r2, [pc, #132]	; (800e3d4 <dateInfoDisFunc+0x254>)
 800e34e:	00db      	lsls	r3, r3, #3
 800e350:	4413      	add	r3, r2
 800e352:	6858      	ldr	r0, [r3, #4]
 800e354:	f107 0210 	add.w	r2, r7, #16
 800e358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e35a:	4413      	add	r3, r2
 800e35c:	781b      	ldrb	r3, [r3, #0]
 800e35e:	461a      	mov	r2, r3
 800e360:	4b1c      	ldr	r3, [pc, #112]	; (800e3d4 <dateInfoDisFunc+0x254>)
 800e362:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800e366:	4619      	mov	r1, r3
 800e368:	f002 fdd5 	bl	8010f16 <tftRamWrite>
	for(int i = 0; i < 10; i++)
 800e36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e36e:	3301      	adds	r3, #1
 800e370:	627b      	str	r3, [r7, #36]	; 0x24
 800e372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e374:	2b09      	cmp	r3, #9
 800e376:	dde4      	ble.n	800e342 <dateInfoDisFunc+0x1c2>
	tftSetWin(43, 59, 11, 8*8);
 800e378:	2340      	movs	r3, #64	; 0x40
 800e37a:	220b      	movs	r2, #11
 800e37c:	213b      	movs	r1, #59	; 0x3b
 800e37e:	202b      	movs	r0, #43	; 0x2b
 800e380:	f002 fe62 	bl	8011048 <tftSetWin>
	for(int i = 0; i < 8; i++)
 800e384:	2300      	movs	r3, #0
 800e386:	623b      	str	r3, [r7, #32]
 800e388:	e017      	b.n	800e3ba <dateInfoDisFunc+0x23a>
		tftRamWrite(smallNumList[temporarySecLine[i]].p, smallNumList[temporarySecLine[i]].length);
 800e38a:	f107 0208 	add.w	r2, r7, #8
 800e38e:	6a3b      	ldr	r3, [r7, #32]
 800e390:	4413      	add	r3, r2
 800e392:	781b      	ldrb	r3, [r3, #0]
 800e394:	4a0f      	ldr	r2, [pc, #60]	; (800e3d4 <dateInfoDisFunc+0x254>)
 800e396:	00db      	lsls	r3, r3, #3
 800e398:	4413      	add	r3, r2
 800e39a:	6858      	ldr	r0, [r3, #4]
 800e39c:	f107 0208 	add.w	r2, r7, #8
 800e3a0:	6a3b      	ldr	r3, [r7, #32]
 800e3a2:	4413      	add	r3, r2
 800e3a4:	781b      	ldrb	r3, [r3, #0]
 800e3a6:	461a      	mov	r2, r3
 800e3a8:	4b0a      	ldr	r3, [pc, #40]	; (800e3d4 <dateInfoDisFunc+0x254>)
 800e3aa:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800e3ae:	4619      	mov	r1, r3
 800e3b0:	f002 fdb1 	bl	8010f16 <tftRamWrite>
	for(int i = 0; i < 8; i++)
 800e3b4:	6a3b      	ldr	r3, [r7, #32]
 800e3b6:	3301      	adds	r3, #1
 800e3b8:	623b      	str	r3, [r7, #32]
 800e3ba:	6a3b      	ldr	r3, [r7, #32]
 800e3bc:	2b07      	cmp	r3, #7
 800e3be:	dde4      	ble.n	800e38a <dateInfoDisFunc+0x20a>
}
 800e3c0:	bf00      	nop
 800e3c2:	3728      	adds	r7, #40	; 0x28
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	bd80      	pop	{r7, pc}
 800e3c8:	10624dd3 	.word	0x10624dd3
 800e3cc:	51eb851f 	.word	0x51eb851f
 800e3d0:	66666667 	.word	0x66666667
 800e3d4:	08018dc0 	.word	0x08018dc0

0800e3d8 <deviceNameInfoDisFunc>:
extern int otherPageNum;
uint8_t name[12];
void deviceNameInfoDisFunc(void * p){
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b092      	sub	sp, #72	; 0x48
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	6078      	str	r0, [r7, #4]
	uint8_t addr[] = {0xc9, 0xe8, 0xb1, 0xb8, 0xA3, 0xB0, 0xA3, 0xB0};
 800e3e0:	4aa2      	ldr	r2, [pc, #648]	; (800e66c <deviceNameInfoDisFunc+0x294>)
 800e3e2:	f107 0318 	add.w	r3, r7, #24
 800e3e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e3ea:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t noUse[] = {0xA3, 0xB0, 0xA3, 0xB0, 0xC0, 0xEB, 0xCF, 0xDF};
 800e3ee:	4aa0      	ldr	r2, [pc, #640]	; (800e670 <deviceNameInfoDisFunc+0x298>)
 800e3f0:	f107 0310 	add.w	r3, r7, #16
 800e3f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e3f8:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t owner[] = {0xB1, 0xBE, 0xBB, 0xFA};
 800e3fc:	4b9d      	ldr	r3, [pc, #628]	; (800e674 <deviceNameInfoDisFunc+0x29c>)
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	60fb      	str	r3, [r7, #12]

	static int addrbak = 1000;
	static int backMainPageBak;


	if(memcmp(name, deviceInfoP->loc, 12) ){
 800e402:	4b9d      	ldr	r3, [pc, #628]	; (800e678 <deviceNameInfoDisFunc+0x2a0>)
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	3304      	adds	r3, #4
 800e408:	220c      	movs	r2, #12
 800e40a:	4619      	mov	r1, r3
 800e40c:	489b      	ldr	r0, [pc, #620]	; (800e67c <deviceNameInfoDisFunc+0x2a4>)
 800e40e:	f004 f8f3 	bl	80125f8 <memcmp>
 800e412:	4603      	mov	r3, r0
 800e414:	2b00      	cmp	r3, #0
 800e416:	d04c      	beq.n	800e4b2 <deviceNameInfoDisFunc+0xda>
		memcpy(name, deviceInfoP->loc, 12);
 800e418:	4b97      	ldr	r3, [pc, #604]	; (800e678 <deviceNameInfoDisFunc+0x2a0>)
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	1d1a      	adds	r2, r3, #4
 800e41e:	4b97      	ldr	r3, [pc, #604]	; (800e67c <deviceNameInfoDisFunc+0x2a4>)
 800e420:	6810      	ldr	r0, [r2, #0]
 800e422:	6851      	ldr	r1, [r2, #4]
 800e424:	6892      	ldr	r2, [r2, #8]
 800e426:	6018      	str	r0, [r3, #0]
 800e428:	6059      	str	r1, [r3, #4]
 800e42a:	609a      	str	r2, [r3, #8]
		tftSetWin(0, 176-24*6, 24, 24*6);
 800e42c:	2390      	movs	r3, #144	; 0x90
 800e42e:	2218      	movs	r2, #24
 800e430:	2120      	movs	r1, #32
 800e432:	2000      	movs	r0, #0
 800e434:	f002 fe08 	bl	8011048 <tftSetWin>
		tftRamColorFill(0x2945, 24*24*6);
 800e438:	f44f 6158 	mov.w	r1, #3456	; 0xd80
 800e43c:	f642 1045 	movw	r0, #10565	; 0x2945
 800e440:	f002 fd4e 	bl	8010ee0 <tftRamColorFill>
		for(int i = 0; i < deviceInfoP->locInfoLenth; i++){
 800e444:	2300      	movs	r3, #0
 800e446:	647b      	str	r3, [r7, #68]	; 0x44
 800e448:	e02c      	b.n	800e4a4 <deviceNameInfoDisFunc+0xcc>
			uint16_t * word = (uint16_t *)getGB2312Word(1,1,&deviceInfoP->loc[i*2], 24);
 800e44a:	4b8b      	ldr	r3, [pc, #556]	; (800e678 <deviceNameInfoDisFunc+0x2a0>)
 800e44c:	681a      	ldr	r2, [r3, #0]
 800e44e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e450:	005b      	lsls	r3, r3, #1
 800e452:	4413      	add	r3, r2
 800e454:	1d1a      	adds	r2, r3, #4
 800e456:	2318      	movs	r3, #24
 800e458:	2101      	movs	r1, #1
 800e45a:	2001      	movs	r0, #1
 800e45c:	f003 ff4a 	bl	80122f4 <getGB2312Word>
 800e460:	62f8      	str	r0, [r7, #44]	; 0x2c
			tftSetWin(0, 176-deviceInfoP->locInfoLenth*24+24*i, 24, 24);
 800e462:	4b85      	ldr	r3, [pc, #532]	; (800e678 <deviceNameInfoDisFunc+0x2a0>)
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	699b      	ldr	r3, [r3, #24]
 800e468:	b2db      	uxtb	r3, r3
 800e46a:	461a      	mov	r2, r3
 800e46c:	009b      	lsls	r3, r3, #2
 800e46e:	1ad3      	subs	r3, r2, r3
 800e470:	00db      	lsls	r3, r3, #3
 800e472:	b2da      	uxtb	r2, r3
 800e474:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e476:	b2db      	uxtb	r3, r3
 800e478:	4619      	mov	r1, r3
 800e47a:	0049      	lsls	r1, r1, #1
 800e47c:	440b      	add	r3, r1
 800e47e:	00db      	lsls	r3, r3, #3
 800e480:	b2db      	uxtb	r3, r3
 800e482:	4413      	add	r3, r2
 800e484:	b2db      	uxtb	r3, r3
 800e486:	3b50      	subs	r3, #80	; 0x50
 800e488:	b2d9      	uxtb	r1, r3
 800e48a:	2318      	movs	r3, #24
 800e48c:	2218      	movs	r2, #24
 800e48e:	2000      	movs	r0, #0
 800e490:	f002 fdda 	bl	8011048 <tftSetWin>
			tftRamWriteWord(word, 24*24);
 800e494:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e498:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e49a:	f002 fd64 	bl	8010f66 <tftRamWriteWord>
		for(int i = 0; i < deviceInfoP->locInfoLenth; i++){
 800e49e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e4a0:	3301      	adds	r3, #1
 800e4a2:	647b      	str	r3, [r7, #68]	; 0x44
 800e4a4:	4b74      	ldr	r3, [pc, #464]	; (800e678 <deviceNameInfoDisFunc+0x2a0>)
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	699b      	ldr	r3, [r3, #24]
 800e4aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e4ac:	429a      	cmp	r2, r3
 800e4ae:	dbcc      	blt.n	800e44a <deviceNameInfoDisFunc+0x72>
 800e4b0:	e035      	b.n	800e51e <deviceNameInfoDisFunc+0x146>
		}
	}
	else{
		for(int i = 0; i < deviceInfoP->locInfoLenth; i++){
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	643b      	str	r3, [r7, #64]	; 0x40
 800e4b6:	e02c      	b.n	800e512 <deviceNameInfoDisFunc+0x13a>
			uint16_t * word = (uint16_t *)getGB2312Word(1,1,&deviceInfoP->loc[i*2], 24);
 800e4b8:	4b6f      	ldr	r3, [pc, #444]	; (800e678 <deviceNameInfoDisFunc+0x2a0>)
 800e4ba:	681a      	ldr	r2, [r3, #0]
 800e4bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e4be:	005b      	lsls	r3, r3, #1
 800e4c0:	4413      	add	r3, r2
 800e4c2:	1d1a      	adds	r2, r3, #4
 800e4c4:	2318      	movs	r3, #24
 800e4c6:	2101      	movs	r1, #1
 800e4c8:	2001      	movs	r0, #1
 800e4ca:	f003 ff13 	bl	80122f4 <getGB2312Word>
 800e4ce:	6338      	str	r0, [r7, #48]	; 0x30
			tftSetWin(0, 176-deviceInfoP->locInfoLenth*24+24*i, 24, 24);
 800e4d0:	4b69      	ldr	r3, [pc, #420]	; (800e678 <deviceNameInfoDisFunc+0x2a0>)
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	699b      	ldr	r3, [r3, #24]
 800e4d6:	b2db      	uxtb	r3, r3
 800e4d8:	461a      	mov	r2, r3
 800e4da:	009b      	lsls	r3, r3, #2
 800e4dc:	1ad3      	subs	r3, r2, r3
 800e4de:	00db      	lsls	r3, r3, #3
 800e4e0:	b2da      	uxtb	r2, r3
 800e4e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e4e4:	b2db      	uxtb	r3, r3
 800e4e6:	4619      	mov	r1, r3
 800e4e8:	0049      	lsls	r1, r1, #1
 800e4ea:	440b      	add	r3, r1
 800e4ec:	00db      	lsls	r3, r3, #3
 800e4ee:	b2db      	uxtb	r3, r3
 800e4f0:	4413      	add	r3, r2
 800e4f2:	b2db      	uxtb	r3, r3
 800e4f4:	3b50      	subs	r3, #80	; 0x50
 800e4f6:	b2d9      	uxtb	r1, r3
 800e4f8:	2318      	movs	r3, #24
 800e4fa:	2218      	movs	r2, #24
 800e4fc:	2000      	movs	r0, #0
 800e4fe:	f002 fda3 	bl	8011048 <tftSetWin>
			tftRamWriteWord(word, 24*24);
 800e502:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e506:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e508:	f002 fd2d 	bl	8010f66 <tftRamWriteWord>
		for(int i = 0; i < deviceInfoP->locInfoLenth; i++){
 800e50c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e50e:	3301      	adds	r3, #1
 800e510:	643b      	str	r3, [r7, #64]	; 0x40
 800e512:	4b59      	ldr	r3, [pc, #356]	; (800e678 <deviceNameInfoDisFunc+0x2a0>)
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	699b      	ldr	r3, [r3, #24]
 800e518:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e51a:	429a      	cmp	r2, r3
 800e51c:	dbcc      	blt.n	800e4b8 <deviceNameInfoDisFunc+0xe0>
		}
	}


	if((addrbak == deviceInfoP->addr) && (deviceOwnInfo.backMainPage == backMainPageBak)){
 800e51e:	4b56      	ldr	r3, [pc, #344]	; (800e678 <deviceNameInfoDisFunc+0x2a0>)
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e524:	4b56      	ldr	r3, [pc, #344]	; (800e680 <deviceNameInfoDisFunc+0x2a8>)
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	429a      	cmp	r2, r3
 800e52a:	d106      	bne.n	800e53a <deviceNameInfoDisFunc+0x162>
 800e52c:	4b55      	ldr	r3, [pc, #340]	; (800e684 <deviceNameInfoDisFunc+0x2ac>)
 800e52e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800e530:	4b55      	ldr	r3, [pc, #340]	; (800e688 <deviceNameInfoDisFunc+0x2b0>)
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	429a      	cmp	r2, r3
 800e536:	f000 80f4 	beq.w	800e722 <deviceNameInfoDisFunc+0x34a>
		return;
	}
	else
	{
		addrbak = deviceInfoP->addr;
 800e53a:	4b4f      	ldr	r3, [pc, #316]	; (800e678 <deviceNameInfoDisFunc+0x2a0>)
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e540:	4a4f      	ldr	r2, [pc, #316]	; (800e680 <deviceNameInfoDisFunc+0x2a8>)
 800e542:	6013      	str	r3, [r2, #0]
		backMainPageBak = deviceOwnInfo.backMainPage;
 800e544:	4b4f      	ldr	r3, [pc, #316]	; (800e684 <deviceNameInfoDisFunc+0x2ac>)
 800e546:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e548:	4a4f      	ldr	r2, [pc, #316]	; (800e688 <deviceNameInfoDisFunc+0x2b0>)
 800e54a:	6013      	str	r3, [r2, #0]
	}

	tftSetWin(220-24, (176/2)-48, 24, 24*6);
 800e54c:	2390      	movs	r3, #144	; 0x90
 800e54e:	2218      	movs	r2, #24
 800e550:	2128      	movs	r1, #40	; 0x28
 800e552:	20c4      	movs	r0, #196	; 0xc4
 800e554:	f002 fd78 	bl	8011048 <tftSetWin>
	tftRamColorFill(0x2945, 24*24*6);
 800e558:	f44f 6158 	mov.w	r1, #3456	; 0xd80
 800e55c:	f642 1045 	movw	r0, #10565	; 0x2945
 800e560:	f002 fcbe 	bl	8010ee0 <tftRamColorFill>


	getGB2312Word(1,1,&owner[0], 24);
 800e564:	f107 020c 	add.w	r2, r7, #12
 800e568:	2318      	movs	r3, #24
 800e56a:	2101      	movs	r1, #1
 800e56c:	2001      	movs	r0, #1
 800e56e:	f003 fec1 	bl	80122f4 <getGB2312Word>
	if(deviceInfoP->addr == deviceOwnInfo.addr){
 800e572:	4b41      	ldr	r3, [pc, #260]	; (800e678 <deviceNameInfoDisFunc+0x2a0>)
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e578:	4b42      	ldr	r3, [pc, #264]	; (800e684 <deviceNameInfoDisFunc+0x2ac>)
 800e57a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e57c:	429a      	cmp	r2, r3
 800e57e:	d127      	bne.n	800e5d0 <deviceNameInfoDisFunc+0x1f8>
		for(int i = 0; i < 2; i++){
 800e580:	2300      	movs	r3, #0
 800e582:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e584:	e020      	b.n	800e5c8 <deviceNameInfoDisFunc+0x1f0>
			uint16_t * word = (uint16_t *)getGB2312Word(1,1,&owner[i*2], 24);
 800e586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e588:	005b      	lsls	r3, r3, #1
 800e58a:	f107 020c 	add.w	r2, r7, #12
 800e58e:	441a      	add	r2, r3
 800e590:	2318      	movs	r3, #24
 800e592:	2101      	movs	r1, #1
 800e594:	2001      	movs	r0, #1
 800e596:	f003 fead 	bl	80122f4 <getGB2312Word>
 800e59a:	6238      	str	r0, [r7, #32]
			tftSetWin(220-24, (176/2)-24+24*i, 24, 24);
 800e59c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e59e:	b2db      	uxtb	r3, r3
 800e5a0:	461a      	mov	r2, r3
 800e5a2:	0052      	lsls	r2, r2, #1
 800e5a4:	4413      	add	r3, r2
 800e5a6:	00db      	lsls	r3, r3, #3
 800e5a8:	b2db      	uxtb	r3, r3
 800e5aa:	3340      	adds	r3, #64	; 0x40
 800e5ac:	b2d9      	uxtb	r1, r3
 800e5ae:	2318      	movs	r3, #24
 800e5b0:	2218      	movs	r2, #24
 800e5b2:	20c4      	movs	r0, #196	; 0xc4
 800e5b4:	f002 fd48 	bl	8011048 <tftSetWin>
			tftRamWriteWord(word, 24*24);
 800e5b8:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e5bc:	6a38      	ldr	r0, [r7, #32]
 800e5be:	f002 fcd2 	bl	8010f66 <tftRamWriteWord>
		for(int i = 0; i < 2; i++){
 800e5c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5c4:	3301      	adds	r3, #1
 800e5c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e5c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5ca:	2b01      	cmp	r3, #1
 800e5cc:	dddb      	ble.n	800e586 <deviceNameInfoDisFunc+0x1ae>
 800e5ce:	e0a9      	b.n	800e724 <deviceNameInfoDisFunc+0x34c>
		}
	}
	else if(deviceInfoP->use){
 800e5d0:	4b29      	ldr	r3, [pc, #164]	; (800e678 <deviceNameInfoDisFunc+0x2a0>)
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	69db      	ldr	r3, [r3, #28]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d05a      	beq.n	800e690 <deviceNameInfoDisFunc+0x2b8>
		addr[5] += deviceInfoP->addr/10;
 800e5da:	7f7a      	ldrb	r2, [r7, #29]
 800e5dc:	4b26      	ldr	r3, [pc, #152]	; (800e678 <deviceNameInfoDisFunc+0x2a0>)
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5e2:	492a      	ldr	r1, [pc, #168]	; (800e68c <deviceNameInfoDisFunc+0x2b4>)
 800e5e4:	fb81 0103 	smull	r0, r1, r1, r3
 800e5e8:	1089      	asrs	r1, r1, #2
 800e5ea:	17db      	asrs	r3, r3, #31
 800e5ec:	1acb      	subs	r3, r1, r3
 800e5ee:	b2db      	uxtb	r3, r3
 800e5f0:	4413      	add	r3, r2
 800e5f2:	b2db      	uxtb	r3, r3
 800e5f4:	777b      	strb	r3, [r7, #29]
		addr[7] += deviceInfoP->addr%10;
 800e5f6:	7ff8      	ldrb	r0, [r7, #31]
 800e5f8:	4b1f      	ldr	r3, [pc, #124]	; (800e678 <deviceNameInfoDisFunc+0x2a0>)
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e5fe:	4b23      	ldr	r3, [pc, #140]	; (800e68c <deviceNameInfoDisFunc+0x2b4>)
 800e600:	fb83 1302 	smull	r1, r3, r3, r2
 800e604:	1099      	asrs	r1, r3, #2
 800e606:	17d3      	asrs	r3, r2, #31
 800e608:	1ac9      	subs	r1, r1, r3
 800e60a:	460b      	mov	r3, r1
 800e60c:	009b      	lsls	r3, r3, #2
 800e60e:	440b      	add	r3, r1
 800e610:	005b      	lsls	r3, r3, #1
 800e612:	1ad1      	subs	r1, r2, r3
 800e614:	b2cb      	uxtb	r3, r1
 800e616:	4403      	add	r3, r0
 800e618:	b2db      	uxtb	r3, r3
 800e61a:	77fb      	strb	r3, [r7, #31]
		for(int i = 0; i < sizeof(addr)/2; i++){
 800e61c:	2300      	movs	r3, #0
 800e61e:	63bb      	str	r3, [r7, #56]	; 0x38
 800e620:	e020      	b.n	800e664 <deviceNameInfoDisFunc+0x28c>
			uint16_t * word = (uint16_t *)getGB2312Word(1,1,&addr[i*2], 24);
 800e622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e624:	005b      	lsls	r3, r3, #1
 800e626:	f107 0218 	add.w	r2, r7, #24
 800e62a:	441a      	add	r2, r3
 800e62c:	2318      	movs	r3, #24
 800e62e:	2101      	movs	r1, #1
 800e630:	2001      	movs	r0, #1
 800e632:	f003 fe5f 	bl	80122f4 <getGB2312Word>
 800e636:	6278      	str	r0, [r7, #36]	; 0x24
			tftSetWin(220-24, (176/2)-24*2+24*i, 24, 24);
 800e638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e63a:	b2db      	uxtb	r3, r3
 800e63c:	461a      	mov	r2, r3
 800e63e:	0052      	lsls	r2, r2, #1
 800e640:	4413      	add	r3, r2
 800e642:	00db      	lsls	r3, r3, #3
 800e644:	b2db      	uxtb	r3, r3
 800e646:	3328      	adds	r3, #40	; 0x28
 800e648:	b2d9      	uxtb	r1, r3
 800e64a:	2318      	movs	r3, #24
 800e64c:	2218      	movs	r2, #24
 800e64e:	20c4      	movs	r0, #196	; 0xc4
 800e650:	f002 fcfa 	bl	8011048 <tftSetWin>
			tftRamWriteWord(word, 24*24);
 800e654:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e658:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e65a:	f002 fc84 	bl	8010f66 <tftRamWriteWord>
		for(int i = 0; i < sizeof(addr)/2; i++){
 800e65e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e660:	3301      	adds	r3, #1
 800e662:	63bb      	str	r3, [r7, #56]	; 0x38
 800e664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e666:	2b03      	cmp	r3, #3
 800e668:	d9db      	bls.n	800e622 <deviceNameInfoDisFunc+0x24a>
 800e66a:	e05b      	b.n	800e724 <deviceNameInfoDisFunc+0x34c>
 800e66c:	08012f9c 	.word	0x08012f9c
 800e670:	08012fa4 	.word	0x08012fa4
 800e674:	08012fac 	.word	0x08012fac
 800e678:	200001fc 	.word	0x200001fc
 800e67c:	200093a0 	.word	0x200093a0
 800e680:	2000062c 	.word	0x2000062c
 800e684:	2000017c 	.word	0x2000017c
 800e688:	200058a4 	.word	0x200058a4
 800e68c:	66666667 	.word	0x66666667
		}
	}
	else{
		noUse[1] += deviceInfoP->addr/10;
 800e690:	7c7a      	ldrb	r2, [r7, #17]
 800e692:	4b26      	ldr	r3, [pc, #152]	; (800e72c <deviceNameInfoDisFunc+0x354>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e698:	4925      	ldr	r1, [pc, #148]	; (800e730 <deviceNameInfoDisFunc+0x358>)
 800e69a:	fb81 0103 	smull	r0, r1, r1, r3
 800e69e:	1089      	asrs	r1, r1, #2
 800e6a0:	17db      	asrs	r3, r3, #31
 800e6a2:	1acb      	subs	r3, r1, r3
 800e6a4:	b2db      	uxtb	r3, r3
 800e6a6:	4413      	add	r3, r2
 800e6a8:	b2db      	uxtb	r3, r3
 800e6aa:	747b      	strb	r3, [r7, #17]
		noUse[3] += deviceInfoP->addr%10;
 800e6ac:	7cf8      	ldrb	r0, [r7, #19]
 800e6ae:	4b1f      	ldr	r3, [pc, #124]	; (800e72c <deviceNameInfoDisFunc+0x354>)
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e6b4:	4b1e      	ldr	r3, [pc, #120]	; (800e730 <deviceNameInfoDisFunc+0x358>)
 800e6b6:	fb83 1302 	smull	r1, r3, r3, r2
 800e6ba:	1099      	asrs	r1, r3, #2
 800e6bc:	17d3      	asrs	r3, r2, #31
 800e6be:	1ac9      	subs	r1, r1, r3
 800e6c0:	460b      	mov	r3, r1
 800e6c2:	009b      	lsls	r3, r3, #2
 800e6c4:	440b      	add	r3, r1
 800e6c6:	005b      	lsls	r3, r3, #1
 800e6c8:	1ad1      	subs	r1, r2, r3
 800e6ca:	b2cb      	uxtb	r3, r1
 800e6cc:	4403      	add	r3, r0
 800e6ce:	b2db      	uxtb	r3, r3
 800e6d0:	74fb      	strb	r3, [r7, #19]
		for(int i = 0; i < sizeof(noUse)/2; i++){
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	637b      	str	r3, [r7, #52]	; 0x34
 800e6d6:	e020      	b.n	800e71a <deviceNameInfoDisFunc+0x342>
			uint16_t * word = (uint16_t *)getGB2312Word(1,1,&noUse[i*2], 24);
 800e6d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6da:	005b      	lsls	r3, r3, #1
 800e6dc:	f107 0210 	add.w	r2, r7, #16
 800e6e0:	441a      	add	r2, r3
 800e6e2:	2318      	movs	r3, #24
 800e6e4:	2101      	movs	r1, #1
 800e6e6:	2001      	movs	r0, #1
 800e6e8:	f003 fe04 	bl	80122f4 <getGB2312Word>
 800e6ec:	62b8      	str	r0, [r7, #40]	; 0x28
			tftSetWin(220-24, (176/2)-24*2+24*i, 24, 24);
 800e6ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6f0:	b2db      	uxtb	r3, r3
 800e6f2:	461a      	mov	r2, r3
 800e6f4:	0052      	lsls	r2, r2, #1
 800e6f6:	4413      	add	r3, r2
 800e6f8:	00db      	lsls	r3, r3, #3
 800e6fa:	b2db      	uxtb	r3, r3
 800e6fc:	3328      	adds	r3, #40	; 0x28
 800e6fe:	b2d9      	uxtb	r1, r3
 800e700:	2318      	movs	r3, #24
 800e702:	2218      	movs	r2, #24
 800e704:	20c4      	movs	r0, #196	; 0xc4
 800e706:	f002 fc9f 	bl	8011048 <tftSetWin>
			tftRamWriteWord(word, 24*24);
 800e70a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e70e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e710:	f002 fc29 	bl	8010f66 <tftRamWriteWord>
		for(int i = 0; i < sizeof(noUse)/2; i++){
 800e714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e716:	3301      	adds	r3, #1
 800e718:	637b      	str	r3, [r7, #52]	; 0x34
 800e71a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e71c:	2b03      	cmp	r3, #3
 800e71e:	d9db      	bls.n	800e6d8 <deviceNameInfoDisFunc+0x300>
 800e720:	e000      	b.n	800e724 <deviceNameInfoDisFunc+0x34c>
		return;
 800e722:	bf00      	nop
		}
	}


}
 800e724:	3748      	adds	r7, #72	; 0x48
 800e726:	46bd      	mov	sp, r7
 800e728:	bd80      	pop	{r7, pc}
 800e72a:	bf00      	nop
 800e72c:	200001fc 	.word	0x200001fc
 800e730:	66666667 	.word	0x66666667

0800e734 <unitInfoFuncDisFunc>:

void unitInfoFuncDisFunc(void * p){
 800e734:	b580      	push	{r7, lr}
 800e736:	b084      	sub	sp, #16
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
	//0 vol
	int x = deviceInfoP->uint;
 800e73c:	4b10      	ldr	r3, [pc, #64]	; (800e780 <unitInfoFuncDisFunc+0x4c>)
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e742:	60fb      	str	r3, [r7, #12]
	tftSetWin(144, 62, 15, 52);
 800e744:	2334      	movs	r3, #52	; 0x34
 800e746:	220f      	movs	r2, #15
 800e748:	213e      	movs	r1, #62	; 0x3e
 800e74a:	2090      	movs	r0, #144	; 0x90
 800e74c:	f002 fc7c 	bl	8011048 <tftSetWin>
	if(x == 2)
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	2b02      	cmp	r3, #2
 800e754:	d108      	bne.n	800e768 <unitInfoFuncDisFunc+0x34>
		tftRamWrite(unit[0].p, unit[0].length);
 800e756:	4b0b      	ldr	r3, [pc, #44]	; (800e784 <unitInfoFuncDisFunc+0x50>)
 800e758:	685a      	ldr	r2, [r3, #4]
 800e75a:	4b0a      	ldr	r3, [pc, #40]	; (800e784 <unitInfoFuncDisFunc+0x50>)
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	4619      	mov	r1, r3
 800e760:	4610      	mov	r0, r2
 800e762:	f002 fbd8 	bl	8010f16 <tftRamWrite>
	else
		tftRamWrite(unit[1].p, unit[1].length);
}
 800e766:	e007      	b.n	800e778 <unitInfoFuncDisFunc+0x44>
		tftRamWrite(unit[1].p, unit[1].length);
 800e768:	4b06      	ldr	r3, [pc, #24]	; (800e784 <unitInfoFuncDisFunc+0x50>)
 800e76a:	68da      	ldr	r2, [r3, #12]
 800e76c:	4b05      	ldr	r3, [pc, #20]	; (800e784 <unitInfoFuncDisFunc+0x50>)
 800e76e:	689b      	ldr	r3, [r3, #8]
 800e770:	4619      	mov	r1, r3
 800e772:	4610      	mov	r0, r2
 800e774:	f002 fbcf 	bl	8010f16 <tftRamWrite>
}
 800e778:	bf00      	nop
 800e77a:	3710      	adds	r7, #16
 800e77c:	46bd      	mov	sp, r7
 800e77e:	bd80      	pop	{r7, pc}
 800e780:	200001fc 	.word	0x200001fc
 800e784:	08019a50 	.word	0x08019a50

0800e788 <detectUnitSetPageDisFunc>:

void detectUnitSetPageDisFunc(void * p){
 800e788:	b580      	push	{r7, lr}
 800e78a:	b084      	sub	sp, #16
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
	int x = deviceInfoP->uint;
 800e790:	4b10      	ldr	r3, [pc, #64]	; (800e7d4 <detectUnitSetPageDisFunc+0x4c>)
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e796:	60fb      	str	r3, [r7, #12]
	tftSetWin(179, 124, 15, 52);
 800e798:	2334      	movs	r3, #52	; 0x34
 800e79a:	220f      	movs	r2, #15
 800e79c:	217c      	movs	r1, #124	; 0x7c
 800e79e:	20b3      	movs	r0, #179	; 0xb3
 800e7a0:	f002 fc52 	bl	8011048 <tftSetWin>
	if(x == 2)
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	2b02      	cmp	r3, #2
 800e7a8:	d108      	bne.n	800e7bc <detectUnitSetPageDisFunc+0x34>
		tftRamWrite(unit[0].p, unit[0].length);
 800e7aa:	4b0b      	ldr	r3, [pc, #44]	; (800e7d8 <detectUnitSetPageDisFunc+0x50>)
 800e7ac:	685a      	ldr	r2, [r3, #4]
 800e7ae:	4b0a      	ldr	r3, [pc, #40]	; (800e7d8 <detectUnitSetPageDisFunc+0x50>)
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	4619      	mov	r1, r3
 800e7b4:	4610      	mov	r0, r2
 800e7b6:	f002 fbae 	bl	8010f16 <tftRamWrite>
	else
		tftRamWrite(unit[1].p, unit[1].length);
}
 800e7ba:	e007      	b.n	800e7cc <detectUnitSetPageDisFunc+0x44>
		tftRamWrite(unit[1].p, unit[1].length);
 800e7bc:	4b06      	ldr	r3, [pc, #24]	; (800e7d8 <detectUnitSetPageDisFunc+0x50>)
 800e7be:	68da      	ldr	r2, [r3, #12]
 800e7c0:	4b05      	ldr	r3, [pc, #20]	; (800e7d8 <detectUnitSetPageDisFunc+0x50>)
 800e7c2:	689b      	ldr	r3, [r3, #8]
 800e7c4:	4619      	mov	r1, r3
 800e7c6:	4610      	mov	r0, r2
 800e7c8:	f002 fba5 	bl	8010f16 <tftRamWrite>
}
 800e7cc:	bf00      	nop
 800e7ce:	3710      	adds	r7, #16
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	bd80      	pop	{r7, pc}
 800e7d4:	200001fc 	.word	0x200001fc
 800e7d8:	08019a50 	.word	0x08019a50

0800e7dc <demarcateUnitPageDisFunc>:

void demarcateUnitPageDisFunc(void * p){
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b084      	sub	sp, #16
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
	int x = *(char*)p;
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	781b      	ldrb	r3, [r3, #0]
 800e7e8:	60fb      	str	r3, [r7, #12]
	tftSetWin(128, 124, 15, 52);
 800e7ea:	2334      	movs	r3, #52	; 0x34
 800e7ec:	220f      	movs	r2, #15
 800e7ee:	217c      	movs	r1, #124	; 0x7c
 800e7f0:	2080      	movs	r0, #128	; 0x80
 800e7f2:	f002 fc29 	bl	8011048 <tftSetWin>
	if(x == 2)
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	2b02      	cmp	r3, #2
 800e7fa:	d108      	bne.n	800e80e <demarcateUnitPageDisFunc+0x32>
		tftRamWrite(unit[0].p, unit[0].length);
 800e7fc:	4b0a      	ldr	r3, [pc, #40]	; (800e828 <demarcateUnitPageDisFunc+0x4c>)
 800e7fe:	685a      	ldr	r2, [r3, #4]
 800e800:	4b09      	ldr	r3, [pc, #36]	; (800e828 <demarcateUnitPageDisFunc+0x4c>)
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	4619      	mov	r1, r3
 800e806:	4610      	mov	r0, r2
 800e808:	f002 fb85 	bl	8010f16 <tftRamWrite>
	else
		tftRamWrite(unit[1].p, unit[1].length);
}
 800e80c:	e007      	b.n	800e81e <demarcateUnitPageDisFunc+0x42>
		tftRamWrite(unit[1].p, unit[1].length);
 800e80e:	4b06      	ldr	r3, [pc, #24]	; (800e828 <demarcateUnitPageDisFunc+0x4c>)
 800e810:	68da      	ldr	r2, [r3, #12]
 800e812:	4b05      	ldr	r3, [pc, #20]	; (800e828 <demarcateUnitPageDisFunc+0x4c>)
 800e814:	689b      	ldr	r3, [r3, #8]
 800e816:	4619      	mov	r1, r3
 800e818:	4610      	mov	r0, r2
 800e81a:	f002 fb7c 	bl	8010f16 <tftRamWrite>
}
 800e81e:	bf00      	nop
 800e820:	3710      	adds	r7, #16
 800e822:	46bd      	mov	sp, r7
 800e824:	bd80      	pop	{r7, pc}
 800e826:	bf00      	nop
 800e828:	08019a50 	.word	0x08019a50

0800e82c <detectValueAreaClean>:
uint8_t mainPowerFault[] = {0xD6, 0xF7, 0xB5, 0xE7, 0xD4, 0xB4, 0xB9, 0xCA, 0xD5, 0xCF};
uint8_t bakPowerFault[] = {0xB8, 0xB1, 0xB5, 0xE7, 0xD4, 0xB4, 0xB9, 0xCA, 0xD5, 0xCF };
void  detectValueAreaClean(void){
 800e82c:	b580      	push	{r7, lr}
 800e82e:	af00      	add	r7, sp, #0
	tftSetWin(80, 30, 60, 22*5+10);
 800e830:	2378      	movs	r3, #120	; 0x78
 800e832:	223c      	movs	r2, #60	; 0x3c
 800e834:	211e      	movs	r1, #30
 800e836:	2050      	movs	r0, #80	; 0x50
 800e838:	f002 fc06 	bl	8011048 <tftSetWin>
	tftRamColorFill(0x2945, 60*120);
 800e83c:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 800e840:	f642 1045 	movw	r0, #10565	; 0x2945
 800e844:	f002 fb4c 	bl	8010ee0 <tftRamColorFill>
	tftSetWin(80, 30, 24, 24*5+12);
 800e848:	2384      	movs	r3, #132	; 0x84
 800e84a:	2218      	movs	r2, #24
 800e84c:	211e      	movs	r1, #30
 800e84e:	2050      	movs	r0, #80	; 0x50
 800e850:	f002 fbfa 	bl	8011048 <tftSetWin>
	tftRamColorFill(0x2945, 132*24);
 800e854:	f44f 6146 	mov.w	r1, #3168	; 0xc60
 800e858:	f642 1045 	movw	r0, #10565	; 0x2945
 800e85c:	f002 fb40 	bl	8010ee0 <tftRamColorFill>
}
 800e860:	bf00      	nop
 800e862:	bd80      	pop	{r7, pc}

0800e864 <detectValueInfoDisFunc>:
void detectValueInfoDisFunc(void * p){
 800e864:	b580      	push	{r7, lr}
 800e866:	b08a      	sub	sp, #40	; 0x28
 800e868:	af00      	add	r7, sp, #0
 800e86a:	6078      	str	r0, [r7, #4]
	uint8_t x[5];
	static int bak;
	static int backMainPageBak;
	if(deviceOwnInfo.backMainPage != backMainPageBak)
 800e86c:	4bb0      	ldr	r3, [pc, #704]	; (800eb30 <detectValueInfoDisFunc+0x2cc>)
 800e86e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800e870:	4bb0      	ldr	r3, [pc, #704]	; (800eb34 <detectValueInfoDisFunc+0x2d0>)
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	429a      	cmp	r2, r3
 800e876:	d006      	beq.n	800e886 <detectValueInfoDisFunc+0x22>
	{
		backMainPageBak= deviceOwnInfo.backMainPage;
 800e878:	4bad      	ldr	r3, [pc, #692]	; (800eb30 <detectValueInfoDisFunc+0x2cc>)
 800e87a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e87c:	4aad      	ldr	r2, [pc, #692]	; (800eb34 <detectValueInfoDisFunc+0x2d0>)
 800e87e:	6013      	str	r3, [r2, #0]
		bak = 11;
 800e880:	4bad      	ldr	r3, [pc, #692]	; (800eb38 <detectValueInfoDisFunc+0x2d4>)
 800e882:	220b      	movs	r2, #11
 800e884:	601a      	str	r2, [r3, #0]
	}
	if(deviceInfoP->noConnect){
 800e886:	4bad      	ldr	r3, [pc, #692]	; (800eb3c <detectValueInfoDisFunc+0x2d8>)
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d018      	beq.n	800e8c2 <detectValueInfoDisFunc+0x5e>
		if(bak != 1){
 800e890:	4ba9      	ldr	r3, [pc, #676]	; (800eb38 <detectValueInfoDisFunc+0x2d4>)
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	2b01      	cmp	r3, #1
 800e896:	f000 817d 	beq.w	800eb94 <detectValueInfoDisFunc+0x330>
			bak = 1;
 800e89a:	4ba7      	ldr	r3, [pc, #668]	; (800eb38 <detectValueInfoDisFunc+0x2d4>)
 800e89c:	2201      	movs	r2, #1
 800e89e:	601a      	str	r2, [r3, #0]
			detectValueAreaClean();
 800e8a0:	f7ff ffc4 	bl	800e82c <detectValueAreaClean>
			tftSetWin(100, 65, 17, 44);
 800e8a4:	232c      	movs	r3, #44	; 0x2c
 800e8a6:	2211      	movs	r2, #17
 800e8a8:	2141      	movs	r1, #65	; 0x41
 800e8aa:	2064      	movs	r0, #100	; 0x64
 800e8ac:	f002 fbcc 	bl	8011048 <tftSetWin>
			tftRamWrite(gImageErrorList[1].p, gImageErrorList[1].length);
 800e8b0:	4ba3      	ldr	r3, [pc, #652]	; (800eb40 <detectValueInfoDisFunc+0x2dc>)
 800e8b2:	68da      	ldr	r2, [r3, #12]
 800e8b4:	4ba2      	ldr	r3, [pc, #648]	; (800eb40 <detectValueInfoDisFunc+0x2dc>)
 800e8b6:	689b      	ldr	r3, [r3, #8]
 800e8b8:	4619      	mov	r1, r3
 800e8ba:	4610      	mov	r0, r2
 800e8bc:	f002 fb2b 	bl	8010f16 <tftRamWrite>
		}
		return;
 800e8c0:	e168      	b.n	800eb94 <detectValueInfoDisFunc+0x330>
	}
	if(deviceInfoP->sensorFault){
 800e8c2:	4b9e      	ldr	r3, [pc, #632]	; (800eb3c <detectValueInfoDisFunc+0x2d8>)
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d018      	beq.n	800e8fe <detectValueInfoDisFunc+0x9a>
		if(bak != 2){
 800e8cc:	4b9a      	ldr	r3, [pc, #616]	; (800eb38 <detectValueInfoDisFunc+0x2d4>)
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	2b02      	cmp	r3, #2
 800e8d2:	f000 8161 	beq.w	800eb98 <detectValueInfoDisFunc+0x334>
			bak = 2;
 800e8d6:	4b98      	ldr	r3, [pc, #608]	; (800eb38 <detectValueInfoDisFunc+0x2d4>)
 800e8d8:	2202      	movs	r2, #2
 800e8da:	601a      	str	r2, [r3, #0]
			detectValueAreaClean();
 800e8dc:	f7ff ffa6 	bl	800e82c <detectValueAreaClean>
			tftSetWin(100, 65, 17, 44);
 800e8e0:	232c      	movs	r3, #44	; 0x2c
 800e8e2:	2211      	movs	r2, #17
 800e8e4:	2141      	movs	r1, #65	; 0x41
 800e8e6:	2064      	movs	r0, #100	; 0x64
 800e8e8:	f002 fbae 	bl	8011048 <tftSetWin>
			tftRamWrite(gImageErrorList[0].p, gImageErrorList[0].length);
 800e8ec:	4b94      	ldr	r3, [pc, #592]	; (800eb40 <detectValueInfoDisFunc+0x2dc>)
 800e8ee:	685a      	ldr	r2, [r3, #4]
 800e8f0:	4b93      	ldr	r3, [pc, #588]	; (800eb40 <detectValueInfoDisFunc+0x2dc>)
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	4619      	mov	r1, r3
 800e8f6:	4610      	mov	r0, r2
 800e8f8:	f002 fb0d 	bl	8010f16 <tftRamWrite>
		}
		return;
 800e8fc:	e14c      	b.n	800eb98 <detectValueInfoDisFunc+0x334>
	}
	if(deviceInfoP->noDemarcate){
 800e8fe:	4b8f      	ldr	r3, [pc, #572]	; (800eb3c <detectValueInfoDisFunc+0x2d8>)
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e904:	2b00      	cmp	r3, #0
 800e906:	d018      	beq.n	800e93a <detectValueInfoDisFunc+0xd6>
		if(bak != 3){
 800e908:	4b8b      	ldr	r3, [pc, #556]	; (800eb38 <detectValueInfoDisFunc+0x2d4>)
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	2b03      	cmp	r3, #3
 800e90e:	f000 8145 	beq.w	800eb9c <detectValueInfoDisFunc+0x338>
			bak = 3;
 800e912:	4b89      	ldr	r3, [pc, #548]	; (800eb38 <detectValueInfoDisFunc+0x2d4>)
 800e914:	2203      	movs	r2, #3
 800e916:	601a      	str	r2, [r3, #0]
			detectValueAreaClean();
 800e918:	f7ff ff88 	bl	800e82c <detectValueAreaClean>
			tftSetWin(100, 65, 17, 44);
 800e91c:	232c      	movs	r3, #44	; 0x2c
 800e91e:	2211      	movs	r2, #17
 800e920:	2141      	movs	r1, #65	; 0x41
 800e922:	2064      	movs	r0, #100	; 0x64
 800e924:	f002 fb90 	bl	8011048 <tftSetWin>
			tftRamWrite(gImageErrorList[2].p, gImageErrorList[2].length);
 800e928:	4b85      	ldr	r3, [pc, #532]	; (800eb40 <detectValueInfoDisFunc+0x2dc>)
 800e92a:	695a      	ldr	r2, [r3, #20]
 800e92c:	4b84      	ldr	r3, [pc, #528]	; (800eb40 <detectValueInfoDisFunc+0x2dc>)
 800e92e:	691b      	ldr	r3, [r3, #16]
 800e930:	4619      	mov	r1, r3
 800e932:	4610      	mov	r0, r2
 800e934:	f002 faef 	bl	8010f16 <tftRamWrite>
		}
		return;
 800e938:	e130      	b.n	800eb9c <detectValueInfoDisFunc+0x338>
	}
	if(deviceInfoP->sensorAlarm == 0){
 800e93a:	4b80      	ldr	r3, [pc, #512]	; (800eb3c <detectValueInfoDisFunc+0x2d8>)
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e940:	2b00      	cmp	r3, #0
 800e942:	d15b      	bne.n	800e9fc <detectValueInfoDisFunc+0x198>
		if(deviceInfoP->mainPowerFault){
 800e944:	4b7d      	ldr	r3, [pc, #500]	; (800eb3c <detectValueInfoDisFunc+0x2d8>)
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d028      	beq.n	800e9a0 <detectValueInfoDisFunc+0x13c>
			if(bak != 4){
 800e94e:	4b7a      	ldr	r3, [pc, #488]	; (800eb38 <detectValueInfoDisFunc+0x2d4>)
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	2b04      	cmp	r3, #4
 800e954:	f000 8124 	beq.w	800eba0 <detectValueInfoDisFunc+0x33c>
				bak = 4;
 800e958:	4b77      	ldr	r3, [pc, #476]	; (800eb38 <detectValueInfoDisFunc+0x2d4>)
 800e95a:	2204      	movs	r2, #4
 800e95c:	601a      	str	r2, [r3, #0]
				detectValueAreaClean();
 800e95e:	f7ff ff65 	bl	800e82c <detectValueAreaClean>
				tftSetWin(87, 30, 24, 24*sizeof(mainPowerFault)/2);
 800e962:	2378      	movs	r3, #120	; 0x78
 800e964:	2218      	movs	r2, #24
 800e966:	211e      	movs	r1, #30
 800e968:	2057      	movs	r0, #87	; 0x57
 800e96a:	f002 fb6d 	bl	8011048 <tftSetWin>
				for(int i = 0; i < sizeof(mainPowerFault)/2; i++){
 800e96e:	2300      	movs	r3, #0
 800e970:	627b      	str	r3, [r7, #36]	; 0x24
 800e972:	e011      	b.n	800e998 <detectValueInfoDisFunc+0x134>
					uint16_t * word = (uint16_t *)getGB2312Word(1,1,&mainPowerFault[i*2], 24);
 800e974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e976:	005b      	lsls	r3, r3, #1
 800e978:	4a72      	ldr	r2, [pc, #456]	; (800eb44 <detectValueInfoDisFunc+0x2e0>)
 800e97a:	441a      	add	r2, r3
 800e97c:	2318      	movs	r3, #24
 800e97e:	2101      	movs	r1, #1
 800e980:	2001      	movs	r0, #1
 800e982:	f003 fcb7 	bl	80122f4 <getGB2312Word>
 800e986:	6138      	str	r0, [r7, #16]
					tftRamWriteWord(word, 24*24);
 800e988:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e98c:	6938      	ldr	r0, [r7, #16]
 800e98e:	f002 faea 	bl	8010f66 <tftRamWriteWord>
				for(int i = 0; i < sizeof(mainPowerFault)/2; i++){
 800e992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e994:	3301      	adds	r3, #1
 800e996:	627b      	str	r3, [r7, #36]	; 0x24
 800e998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e99a:	2b04      	cmp	r3, #4
 800e99c:	d9ea      	bls.n	800e974 <detectValueInfoDisFunc+0x110>
				}
			}
			return;
 800e99e:	e0ff      	b.n	800eba0 <detectValueInfoDisFunc+0x33c>
		}
		if(deviceInfoP->bakPowerFault){
 800e9a0:	4b66      	ldr	r3, [pc, #408]	; (800eb3c <detectValueInfoDisFunc+0x2d8>)
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d028      	beq.n	800e9fc <detectValueInfoDisFunc+0x198>
			if(bak != 5){
 800e9aa:	4b63      	ldr	r3, [pc, #396]	; (800eb38 <detectValueInfoDisFunc+0x2d4>)
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	2b05      	cmp	r3, #5
 800e9b0:	f000 80f8 	beq.w	800eba4 <detectValueInfoDisFunc+0x340>
				bak = 5;
 800e9b4:	4b60      	ldr	r3, [pc, #384]	; (800eb38 <detectValueInfoDisFunc+0x2d4>)
 800e9b6:	2205      	movs	r2, #5
 800e9b8:	601a      	str	r2, [r3, #0]
				detectValueAreaClean();
 800e9ba:	f7ff ff37 	bl	800e82c <detectValueAreaClean>
				tftSetWin(87, 30, 24, 24*sizeof(bakPowerFault)/2);
 800e9be:	2378      	movs	r3, #120	; 0x78
 800e9c0:	2218      	movs	r2, #24
 800e9c2:	211e      	movs	r1, #30
 800e9c4:	2057      	movs	r0, #87	; 0x57
 800e9c6:	f002 fb3f 	bl	8011048 <tftSetWin>
				for(int i = 0; i < sizeof(bakPowerFault)/2; i++){
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	623b      	str	r3, [r7, #32]
 800e9ce:	e011      	b.n	800e9f4 <detectValueInfoDisFunc+0x190>
					uint16_t * word = (uint16_t *)getGB2312Word(1,1,&bakPowerFault[i*2], 24);
 800e9d0:	6a3b      	ldr	r3, [r7, #32]
 800e9d2:	005b      	lsls	r3, r3, #1
 800e9d4:	4a5c      	ldr	r2, [pc, #368]	; (800eb48 <detectValueInfoDisFunc+0x2e4>)
 800e9d6:	441a      	add	r2, r3
 800e9d8:	2318      	movs	r3, #24
 800e9da:	2101      	movs	r1, #1
 800e9dc:	2001      	movs	r0, #1
 800e9de:	f003 fc89 	bl	80122f4 <getGB2312Word>
 800e9e2:	6178      	str	r0, [r7, #20]
					tftRamWriteWord(word, 24*24);
 800e9e4:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e9e8:	6978      	ldr	r0, [r7, #20]
 800e9ea:	f002 fabc 	bl	8010f66 <tftRamWriteWord>
				for(int i = 0; i < sizeof(bakPowerFault)/2; i++){
 800e9ee:	6a3b      	ldr	r3, [r7, #32]
 800e9f0:	3301      	adds	r3, #1
 800e9f2:	623b      	str	r3, [r7, #32]
 800e9f4:	6a3b      	ldr	r3, [r7, #32]
 800e9f6:	2b04      	cmp	r3, #4
 800e9f8:	d9ea      	bls.n	800e9d0 <detectValueInfoDisFunc+0x16c>
				}
			}
			return;
 800e9fa:	e0d3      	b.n	800eba4 <detectValueInfoDisFunc+0x340>
		}
	}

	if(bak != 0){
 800e9fc:	4b4e      	ldr	r3, [pc, #312]	; (800eb38 <detectValueInfoDisFunc+0x2d4>)
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d004      	beq.n	800ea0e <detectValueInfoDisFunc+0x1aa>
		bak = 0;
 800ea04:	4b4c      	ldr	r3, [pc, #304]	; (800eb38 <detectValueInfoDisFunc+0x2d4>)
 800ea06:	2200      	movs	r2, #0
 800ea08:	601a      	str	r2, [r3, #0]
		detectValueAreaClean();
 800ea0a:	f7ff ff0f 	bl	800e82c <detectValueAreaClean>
	}
	x[0] =  deviceInfoP->sensorValue/1000;
 800ea0e:	4b4b      	ldr	r3, [pc, #300]	; (800eb3c <detectValueInfoDisFunc+0x2d8>)
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	6a1b      	ldr	r3, [r3, #32]
 800ea14:	4a4d      	ldr	r2, [pc, #308]	; (800eb4c <detectValueInfoDisFunc+0x2e8>)
 800ea16:	fb82 1203 	smull	r1, r2, r2, r3
 800ea1a:	1192      	asrs	r2, r2, #6
 800ea1c:	17db      	asrs	r3, r3, #31
 800ea1e:	1ad3      	subs	r3, r2, r3
 800ea20:	b2db      	uxtb	r3, r3
 800ea22:	723b      	strb	r3, [r7, #8]
	x[1] =  deviceInfoP->sensorValue/100%10;
 800ea24:	4b45      	ldr	r3, [pc, #276]	; (800eb3c <detectValueInfoDisFunc+0x2d8>)
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	6a1b      	ldr	r3, [r3, #32]
 800ea2a:	4a49      	ldr	r2, [pc, #292]	; (800eb50 <detectValueInfoDisFunc+0x2ec>)
 800ea2c:	fb82 1203 	smull	r1, r2, r2, r3
 800ea30:	1152      	asrs	r2, r2, #5
 800ea32:	17db      	asrs	r3, r3, #31
 800ea34:	1ad2      	subs	r2, r2, r3
 800ea36:	4b47      	ldr	r3, [pc, #284]	; (800eb54 <detectValueInfoDisFunc+0x2f0>)
 800ea38:	fb83 1302 	smull	r1, r3, r3, r2
 800ea3c:	1099      	asrs	r1, r3, #2
 800ea3e:	17d3      	asrs	r3, r2, #31
 800ea40:	1ac9      	subs	r1, r1, r3
 800ea42:	460b      	mov	r3, r1
 800ea44:	009b      	lsls	r3, r3, #2
 800ea46:	440b      	add	r3, r1
 800ea48:	005b      	lsls	r3, r3, #1
 800ea4a:	1ad1      	subs	r1, r2, r3
 800ea4c:	b2cb      	uxtb	r3, r1
 800ea4e:	727b      	strb	r3, [r7, #9]
	x[3] =  deviceInfoP->sensorValue/10%10;
 800ea50:	4b3a      	ldr	r3, [pc, #232]	; (800eb3c <detectValueInfoDisFunc+0x2d8>)
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	6a1b      	ldr	r3, [r3, #32]
 800ea56:	4a3f      	ldr	r2, [pc, #252]	; (800eb54 <detectValueInfoDisFunc+0x2f0>)
 800ea58:	fb82 1203 	smull	r1, r2, r2, r3
 800ea5c:	1092      	asrs	r2, r2, #2
 800ea5e:	17db      	asrs	r3, r3, #31
 800ea60:	1ad2      	subs	r2, r2, r3
 800ea62:	4b3c      	ldr	r3, [pc, #240]	; (800eb54 <detectValueInfoDisFunc+0x2f0>)
 800ea64:	fb83 1302 	smull	r1, r3, r3, r2
 800ea68:	1099      	asrs	r1, r3, #2
 800ea6a:	17d3      	asrs	r3, r2, #31
 800ea6c:	1ac9      	subs	r1, r1, r3
 800ea6e:	460b      	mov	r3, r1
 800ea70:	009b      	lsls	r3, r3, #2
 800ea72:	440b      	add	r3, r1
 800ea74:	005b      	lsls	r3, r3, #1
 800ea76:	1ad1      	subs	r1, r2, r3
 800ea78:	b2cb      	uxtb	r3, r1
 800ea7a:	72fb      	strb	r3, [r7, #11]
	x[4] =  deviceInfoP->sensorValue%10;
 800ea7c:	4b2f      	ldr	r3, [pc, #188]	; (800eb3c <detectValueInfoDisFunc+0x2d8>)
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	6a1a      	ldr	r2, [r3, #32]
 800ea82:	4b34      	ldr	r3, [pc, #208]	; (800eb54 <detectValueInfoDisFunc+0x2f0>)
 800ea84:	fb83 1302 	smull	r1, r3, r3, r2
 800ea88:	1099      	asrs	r1, r3, #2
 800ea8a:	17d3      	asrs	r3, r2, #31
 800ea8c:	1ac9      	subs	r1, r1, r3
 800ea8e:	460b      	mov	r3, r1
 800ea90:	009b      	lsls	r3, r3, #2
 800ea92:	440b      	add	r3, r1
 800ea94:	005b      	lsls	r3, r3, #1
 800ea96:	1ad1      	subs	r1, r2, r3
 800ea98:	b2cb      	uxtb	r3, r1
 800ea9a:	733b      	strb	r3, [r7, #12]
	if(!deviceOwnInfo.limit){//显示两位
 800ea9c:	4b24      	ldr	r3, [pc, #144]	; (800eb30 <detectValueInfoDisFunc+0x2cc>)
 800ea9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d130      	bne.n	800eb06 <detectValueInfoDisFunc+0x2a2>
		tftSetWin(87, 32, 44, 22*5);
 800eaa4:	236e      	movs	r3, #110	; 0x6e
 800eaa6:	222c      	movs	r2, #44	; 0x2c
 800eaa8:	2120      	movs	r1, #32
 800eaaa:	2057      	movs	r0, #87	; 0x57
 800eaac:	f002 facc 	bl	8011048 <tftSetWin>
		for(int i = 0; i < 5; i++){
 800eab0:	2300      	movs	r3, #0
 800eab2:	61fb      	str	r3, [r7, #28]
 800eab4:	e023      	b.n	800eafe <detectValueInfoDisFunc+0x29a>
			if(i == 2)
 800eab6:	69fb      	ldr	r3, [r7, #28]
 800eab8:	2b02      	cmp	r3, #2
 800eaba:	d108      	bne.n	800eace <detectValueInfoDisFunc+0x26a>
				tftRamWrite(bigNumList[10].p, bigNumList[10].length);
 800eabc:	4b26      	ldr	r3, [pc, #152]	; (800eb58 <detectValueInfoDisFunc+0x2f4>)
 800eabe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eac0:	4b25      	ldr	r3, [pc, #148]	; (800eb58 <detectValueInfoDisFunc+0x2f4>)
 800eac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eac4:	4619      	mov	r1, r3
 800eac6:	4610      	mov	r0, r2
 800eac8:	f002 fa25 	bl	8010f16 <tftRamWrite>
 800eacc:	e014      	b.n	800eaf8 <detectValueInfoDisFunc+0x294>
			else
				tftRamWrite(bigNumList[x[i]].p, bigNumList[x[i]].length);
 800eace:	f107 0208 	add.w	r2, r7, #8
 800ead2:	69fb      	ldr	r3, [r7, #28]
 800ead4:	4413      	add	r3, r2
 800ead6:	781b      	ldrb	r3, [r3, #0]
 800ead8:	4a1f      	ldr	r2, [pc, #124]	; (800eb58 <detectValueInfoDisFunc+0x2f4>)
 800eada:	00db      	lsls	r3, r3, #3
 800eadc:	4413      	add	r3, r2
 800eade:	6858      	ldr	r0, [r3, #4]
 800eae0:	f107 0208 	add.w	r2, r7, #8
 800eae4:	69fb      	ldr	r3, [r7, #28]
 800eae6:	4413      	add	r3, r2
 800eae8:	781b      	ldrb	r3, [r3, #0]
 800eaea:	461a      	mov	r2, r3
 800eaec:	4b1a      	ldr	r3, [pc, #104]	; (800eb58 <detectValueInfoDisFunc+0x2f4>)
 800eaee:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800eaf2:	4619      	mov	r1, r3
 800eaf4:	f002 fa0f 	bl	8010f16 <tftRamWrite>
		for(int i = 0; i < 5; i++){
 800eaf8:	69fb      	ldr	r3, [r7, #28]
 800eafa:	3301      	adds	r3, #1
 800eafc:	61fb      	str	r3, [r7, #28]
 800eafe:	69fb      	ldr	r3, [r7, #28]
 800eb00:	2b04      	cmp	r3, #4
 800eb02:	ddd8      	ble.n	800eab6 <detectValueInfoDisFunc+0x252>
 800eb04:	e04f      	b.n	800eba6 <detectValueInfoDisFunc+0x342>
		}
	}
	else{
		tftSetWin(87, 43, 44, 22*4);
 800eb06:	2358      	movs	r3, #88	; 0x58
 800eb08:	222c      	movs	r2, #44	; 0x2c
 800eb0a:	212b      	movs	r1, #43	; 0x2b
 800eb0c:	2057      	movs	r0, #87	; 0x57
 800eb0e:	f002 fa9b 	bl	8011048 <tftSetWin>
		for(int i = 0; i < 4; i++){
 800eb12:	2300      	movs	r3, #0
 800eb14:	61bb      	str	r3, [r7, #24]
 800eb16:	e039      	b.n	800eb8c <detectValueInfoDisFunc+0x328>
			if(i == 2)
 800eb18:	69bb      	ldr	r3, [r7, #24]
 800eb1a:	2b02      	cmp	r3, #2
 800eb1c:	d11e      	bne.n	800eb5c <detectValueInfoDisFunc+0x2f8>
				tftRamWrite(bigNumList[10].p, bigNumList[10].length);
 800eb1e:	4b0e      	ldr	r3, [pc, #56]	; (800eb58 <detectValueInfoDisFunc+0x2f4>)
 800eb20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eb22:	4b0d      	ldr	r3, [pc, #52]	; (800eb58 <detectValueInfoDisFunc+0x2f4>)
 800eb24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb26:	4619      	mov	r1, r3
 800eb28:	4610      	mov	r0, r2
 800eb2a:	f002 f9f4 	bl	8010f16 <tftRamWrite>
 800eb2e:	e02a      	b.n	800eb86 <detectValueInfoDisFunc+0x322>
 800eb30:	2000017c 	.word	0x2000017c
 800eb34:	200058a8 	.word	0x200058a8
 800eb38:	200058ac 	.word	0x200058ac
 800eb3c:	200001fc 	.word	0x200001fc
 800eb40:	20000078 	.word	0x20000078
 800eb44:	20000098 	.word	0x20000098
 800eb48:	200000a4 	.word	0x200000a4
 800eb4c:	10624dd3 	.word	0x10624dd3
 800eb50:	51eb851f 	.word	0x51eb851f
 800eb54:	66666667 	.word	0x66666667
 800eb58:	08018528 	.word	0x08018528
			else
				tftRamWrite(bigNumList[x[i]].p, bigNumList[x[i]].length);
 800eb5c:	f107 0208 	add.w	r2, r7, #8
 800eb60:	69bb      	ldr	r3, [r7, #24]
 800eb62:	4413      	add	r3, r2
 800eb64:	781b      	ldrb	r3, [r3, #0]
 800eb66:	4a11      	ldr	r2, [pc, #68]	; (800ebac <detectValueInfoDisFunc+0x348>)
 800eb68:	00db      	lsls	r3, r3, #3
 800eb6a:	4413      	add	r3, r2
 800eb6c:	6858      	ldr	r0, [r3, #4]
 800eb6e:	f107 0208 	add.w	r2, r7, #8
 800eb72:	69bb      	ldr	r3, [r7, #24]
 800eb74:	4413      	add	r3, r2
 800eb76:	781b      	ldrb	r3, [r3, #0]
 800eb78:	461a      	mov	r2, r3
 800eb7a:	4b0c      	ldr	r3, [pc, #48]	; (800ebac <detectValueInfoDisFunc+0x348>)
 800eb7c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800eb80:	4619      	mov	r1, r3
 800eb82:	f002 f9c8 	bl	8010f16 <tftRamWrite>
		for(int i = 0; i < 4; i++){
 800eb86:	69bb      	ldr	r3, [r7, #24]
 800eb88:	3301      	adds	r3, #1
 800eb8a:	61bb      	str	r3, [r7, #24]
 800eb8c:	69bb      	ldr	r3, [r7, #24]
 800eb8e:	2b03      	cmp	r3, #3
 800eb90:	ddc2      	ble.n	800eb18 <detectValueInfoDisFunc+0x2b4>
 800eb92:	e008      	b.n	800eba6 <detectValueInfoDisFunc+0x342>
		return;
 800eb94:	bf00      	nop
 800eb96:	e006      	b.n	800eba6 <detectValueInfoDisFunc+0x342>
		return;
 800eb98:	bf00      	nop
 800eb9a:	e004      	b.n	800eba6 <detectValueInfoDisFunc+0x342>
		return;
 800eb9c:	bf00      	nop
 800eb9e:	e002      	b.n	800eba6 <detectValueInfoDisFunc+0x342>
			return;
 800eba0:	bf00      	nop
 800eba2:	e000      	b.n	800eba6 <detectValueInfoDisFunc+0x342>
			return;
 800eba4:	bf00      	nop
		}
	}

}
 800eba6:	3728      	adds	r7, #40	; 0x28
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	bd80      	pop	{r7, pc}
 800ebac:	08018528 	.word	0x08018528

0800ebb0 <configPage1InfoDisFunc>:

void configPage1InfoDisFunc(void * p){
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b082      	sub	sp, #8
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
	tftSetWin(0, 0, 220, 176);
 800ebb8:	23b0      	movs	r3, #176	; 0xb0
 800ebba:	22dc      	movs	r2, #220	; 0xdc
 800ebbc:	2100      	movs	r1, #0
 800ebbe:	2000      	movs	r0, #0
 800ebc0:	f002 fa42 	bl	8011048 <tftSetWin>
	tftRamWrite(setPageList[0].p, setPageList[0].length);
 800ebc4:	4b05      	ldr	r3, [pc, #20]	; (800ebdc <configPage1InfoDisFunc+0x2c>)
 800ebc6:	685a      	ldr	r2, [r3, #4]
 800ebc8:	4b04      	ldr	r3, [pc, #16]	; (800ebdc <configPage1InfoDisFunc+0x2c>)
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	4619      	mov	r1, r3
 800ebce:	4610      	mov	r0, r2
 800ebd0:	f002 f9a1 	bl	8010f16 <tftRamWrite>
}
 800ebd4:	bf00      	nop
 800ebd6:	3708      	adds	r7, #8
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	bd80      	pop	{r7, pc}
 800ebdc:	08043530 	.word	0x08043530

0800ebe0 <configPage2InfoDisFunc>:

void configPage2InfoDisFunc(void * p){
 800ebe0:	b580      	push	{r7, lr}
 800ebe2:	b082      	sub	sp, #8
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	6078      	str	r0, [r7, #4]
	tftSetWin(0, 0, 220, 176);
 800ebe8:	23b0      	movs	r3, #176	; 0xb0
 800ebea:	22dc      	movs	r2, #220	; 0xdc
 800ebec:	2100      	movs	r1, #0
 800ebee:	2000      	movs	r0, #0
 800ebf0:	f002 fa2a 	bl	8011048 <tftSetWin>
	tftRamWrite(setPageList[1].p, setPageList[1].length);
 800ebf4:	4b05      	ldr	r3, [pc, #20]	; (800ec0c <configPage2InfoDisFunc+0x2c>)
 800ebf6:	68da      	ldr	r2, [r3, #12]
 800ebf8:	4b04      	ldr	r3, [pc, #16]	; (800ec0c <configPage2InfoDisFunc+0x2c>)
 800ebfa:	689b      	ldr	r3, [r3, #8]
 800ebfc:	4619      	mov	r1, r3
 800ebfe:	4610      	mov	r0, r2
 800ec00:	f002 f989 	bl	8010f16 <tftRamWrite>
}
 800ec04:	bf00      	nop
 800ec06:	3708      	adds	r7, #8
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	bd80      	pop	{r7, pc}
 800ec0c:	08043530 	.word	0x08043530

0800ec10 <otherSetPageInfoDisFunc>:
extern struct otherSetStruct otherSetValue;
void otherSetPageInfoDisFunc(void * p){
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b084      	sub	sp, #16
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
	tftSetWin(0, 0, 220, 176);
 800ec18:	23b0      	movs	r3, #176	; 0xb0
 800ec1a:	22dc      	movs	r2, #220	; 0xdc
 800ec1c:	2100      	movs	r1, #0
 800ec1e:	2000      	movs	r0, #0
 800ec20:	f002 fa12 	bl	8011048 <tftSetWin>
	tftRamWrite(otherSetPage, 77440);
 800ec24:	49b4      	ldr	r1, [pc, #720]	; (800eef8 <otherSetPageInfoDisFunc+0x2e8>)
 800ec26:	48b5      	ldr	r0, [pc, #724]	; (800eefc <otherSetPageInfoDisFunc+0x2ec>)
 800ec28:	f002 f975 	bl	8010f16 <tftRamWrite>
	int cursorDisSwitch = *(char*)p;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	781b      	ldrb	r3, [r3, #0]
 800ec30:	60fb      	str	r3, [r7, #12]
	//本机地址
	tftSetWin(179, 155, 11, 8*2);
 800ec32:	2310      	movs	r3, #16
 800ec34:	220b      	movs	r2, #11
 800ec36:	219b      	movs	r1, #155	; 0x9b
 800ec38:	20b3      	movs	r0, #179	; 0xb3
 800ec3a:	f002 fa05 	bl	8011048 <tftSetWin>
	int x = deviceOwnInfo.addr/10;
 800ec3e:	4bb0      	ldr	r3, [pc, #704]	; (800ef00 <otherSetPageInfoDisFunc+0x2f0>)
 800ec40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec42:	4ab0      	ldr	r2, [pc, #704]	; (800ef04 <otherSetPageInfoDisFunc+0x2f4>)
 800ec44:	fb82 1203 	smull	r1, r2, r2, r3
 800ec48:	1092      	asrs	r2, r2, #2
 800ec4a:	17db      	asrs	r3, r3, #31
 800ec4c:	1ad3      	subs	r3, r2, r3
 800ec4e:	60bb      	str	r3, [r7, #8]
	tftRamWrite(smallNumList[x].p, smallNumList[x].length);
 800ec50:	4aad      	ldr	r2, [pc, #692]	; (800ef08 <otherSetPageInfoDisFunc+0x2f8>)
 800ec52:	68bb      	ldr	r3, [r7, #8]
 800ec54:	00db      	lsls	r3, r3, #3
 800ec56:	4413      	add	r3, r2
 800ec58:	6858      	ldr	r0, [r3, #4]
 800ec5a:	4aab      	ldr	r2, [pc, #684]	; (800ef08 <otherSetPageInfoDisFunc+0x2f8>)
 800ec5c:	68bb      	ldr	r3, [r7, #8]
 800ec5e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ec62:	4619      	mov	r1, r3
 800ec64:	f002 f957 	bl	8010f16 <tftRamWrite>
	x = deviceOwnInfo.addr%10;
 800ec68:	4ba5      	ldr	r3, [pc, #660]	; (800ef00 <otherSetPageInfoDisFunc+0x2f0>)
 800ec6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ec6c:	4ba5      	ldr	r3, [pc, #660]	; (800ef04 <otherSetPageInfoDisFunc+0x2f4>)
 800ec6e:	fb83 1302 	smull	r1, r3, r3, r2
 800ec72:	1099      	asrs	r1, r3, #2
 800ec74:	17d3      	asrs	r3, r2, #31
 800ec76:	1ac9      	subs	r1, r1, r3
 800ec78:	460b      	mov	r3, r1
 800ec7a:	009b      	lsls	r3, r3, #2
 800ec7c:	440b      	add	r3, r1
 800ec7e:	005b      	lsls	r3, r3, #1
 800ec80:	1ad3      	subs	r3, r2, r3
 800ec82:	60bb      	str	r3, [r7, #8]
	tftRamWrite(smallNumList[x].p, smallNumList[x].length);
 800ec84:	4aa0      	ldr	r2, [pc, #640]	; (800ef08 <otherSetPageInfoDisFunc+0x2f8>)
 800ec86:	68bb      	ldr	r3, [r7, #8]
 800ec88:	00db      	lsls	r3, r3, #3
 800ec8a:	4413      	add	r3, r2
 800ec8c:	6858      	ldr	r0, [r3, #4]
 800ec8e:	4a9e      	ldr	r2, [pc, #632]	; (800ef08 <otherSetPageInfoDisFunc+0x2f8>)
 800ec90:	68bb      	ldr	r3, [r7, #8]
 800ec92:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ec96:	4619      	mov	r1, r3
 800ec98:	f002 f93d 	bl	8010f16 <tftRamWrite>


	//精度显示
	tftSetWin(127, 162, 11, 8*2);
 800ec9c:	2310      	movs	r3, #16
 800ec9e:	220b      	movs	r2, #11
 800eca0:	21a2      	movs	r1, #162	; 0xa2
 800eca2:	207f      	movs	r0, #127	; 0x7f
 800eca4:	f002 f9d0 	bl	8011048 <tftSetWin>
	if(deviceOwnInfo.limit){
 800eca8:	4b95      	ldr	r3, [pc, #596]	; (800ef00 <otherSetPageInfoDisFunc+0x2f0>)
 800ecaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d008      	beq.n	800ecc2 <otherSetPageInfoDisFunc+0xb2>
		tftRamWrite(smallNumList[1].p, smallNumList[1].length);
 800ecb0:	4b95      	ldr	r3, [pc, #596]	; (800ef08 <otherSetPageInfoDisFunc+0x2f8>)
 800ecb2:	68da      	ldr	r2, [r3, #12]
 800ecb4:	4b94      	ldr	r3, [pc, #592]	; (800ef08 <otherSetPageInfoDisFunc+0x2f8>)
 800ecb6:	689b      	ldr	r3, [r3, #8]
 800ecb8:	4619      	mov	r1, r3
 800ecba:	4610      	mov	r0, r2
 800ecbc:	f002 f92b 	bl	8010f16 <tftRamWrite>
 800ecc0:	e007      	b.n	800ecd2 <otherSetPageInfoDisFunc+0xc2>
	}
	else{
		tftRamWrite(smallNumList[2].p, smallNumList[2].length);
 800ecc2:	4b91      	ldr	r3, [pc, #580]	; (800ef08 <otherSetPageInfoDisFunc+0x2f8>)
 800ecc4:	695a      	ldr	r2, [r3, #20]
 800ecc6:	4b90      	ldr	r3, [pc, #576]	; (800ef08 <otherSetPageInfoDisFunc+0x2f8>)
 800ecc8:	691b      	ldr	r3, [r3, #16]
 800ecca:	4619      	mov	r1, r3
 800eccc:	4610      	mov	r0, r2
 800ecce:	f002 f922 	bl	8010f16 <tftRamWrite>
	}

	//日期显示
	//???
	x = otherSetTime.Year/10;
 800ecd2:	4b8e      	ldr	r3, [pc, #568]	; (800ef0c <otherSetPageInfoDisFunc+0x2fc>)
 800ecd4:	881b      	ldrh	r3, [r3, #0]
 800ecd6:	4a8e      	ldr	r2, [pc, #568]	; (800ef10 <otherSetPageInfoDisFunc+0x300>)
 800ecd8:	fba2 2303 	umull	r2, r3, r2, r3
 800ecdc:	08db      	lsrs	r3, r3, #3
 800ecde:	b29b      	uxth	r3, r3
 800ece0:	60bb      	str	r3, [r7, #8]
	tftSetWin(25, 63, 11, 8*2);
 800ece2:	2310      	movs	r3, #16
 800ece4:	220b      	movs	r2, #11
 800ece6:	213f      	movs	r1, #63	; 0x3f
 800ece8:	2019      	movs	r0, #25
 800ecea:	f002 f9ad 	bl	8011048 <tftSetWin>
	tftRamWrite(smallNumList[x].p, smallNumList[x].length);
 800ecee:	4a86      	ldr	r2, [pc, #536]	; (800ef08 <otherSetPageInfoDisFunc+0x2f8>)
 800ecf0:	68bb      	ldr	r3, [r7, #8]
 800ecf2:	00db      	lsls	r3, r3, #3
 800ecf4:	4413      	add	r3, r2
 800ecf6:	6858      	ldr	r0, [r3, #4]
 800ecf8:	4a83      	ldr	r2, [pc, #524]	; (800ef08 <otherSetPageInfoDisFunc+0x2f8>)
 800ecfa:	68bb      	ldr	r3, [r7, #8]
 800ecfc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ed00:	4619      	mov	r1, r3
 800ed02:	f002 f908 	bl	8010f16 <tftRamWrite>
	x = otherSetTime.Year%10;
 800ed06:	4b81      	ldr	r3, [pc, #516]	; (800ef0c <otherSetPageInfoDisFunc+0x2fc>)
 800ed08:	881a      	ldrh	r2, [r3, #0]
 800ed0a:	4b81      	ldr	r3, [pc, #516]	; (800ef10 <otherSetPageInfoDisFunc+0x300>)
 800ed0c:	fba3 1302 	umull	r1, r3, r3, r2
 800ed10:	08d9      	lsrs	r1, r3, #3
 800ed12:	460b      	mov	r3, r1
 800ed14:	009b      	lsls	r3, r3, #2
 800ed16:	440b      	add	r3, r1
 800ed18:	005b      	lsls	r3, r3, #1
 800ed1a:	1ad3      	subs	r3, r2, r3
 800ed1c:	b29b      	uxth	r3, r3
 800ed1e:	60bb      	str	r3, [r7, #8]
	tftRamWrite(smallNumList[x].p, smallNumList[x].length);
 800ed20:	4a79      	ldr	r2, [pc, #484]	; (800ef08 <otherSetPageInfoDisFunc+0x2f8>)
 800ed22:	68bb      	ldr	r3, [r7, #8]
 800ed24:	00db      	lsls	r3, r3, #3
 800ed26:	4413      	add	r3, r2
 800ed28:	6858      	ldr	r0, [r3, #4]
 800ed2a:	4a77      	ldr	r2, [pc, #476]	; (800ef08 <otherSetPageInfoDisFunc+0x2f8>)
 800ed2c:	68bb      	ldr	r3, [r7, #8]
 800ed2e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ed32:	4619      	mov	r1, r3
 800ed34:	f002 f8ef 	bl	8010f16 <tftRamWrite>

	tftSetWin(25, 87, 11, 8*2);
 800ed38:	2310      	movs	r3, #16
 800ed3a:	220b      	movs	r2, #11
 800ed3c:	2157      	movs	r1, #87	; 0x57
 800ed3e:	2019      	movs	r0, #25
 800ed40:	f002 f982 	bl	8011048 <tftSetWin>
	x = otherSetTime.Month/10;
 800ed44:	4b71      	ldr	r3, [pc, #452]	; (800ef0c <otherSetPageInfoDisFunc+0x2fc>)
 800ed46:	789b      	ldrb	r3, [r3, #2]
 800ed48:	4a71      	ldr	r2, [pc, #452]	; (800ef10 <otherSetPageInfoDisFunc+0x300>)
 800ed4a:	fba2 2303 	umull	r2, r3, r2, r3
 800ed4e:	08db      	lsrs	r3, r3, #3
 800ed50:	b2db      	uxtb	r3, r3
 800ed52:	60bb      	str	r3, [r7, #8]
	tftRamWrite(smallNumList[x].p, smallNumList[x].length);
 800ed54:	4a6c      	ldr	r2, [pc, #432]	; (800ef08 <otherSetPageInfoDisFunc+0x2f8>)
 800ed56:	68bb      	ldr	r3, [r7, #8]
 800ed58:	00db      	lsls	r3, r3, #3
 800ed5a:	4413      	add	r3, r2
 800ed5c:	6858      	ldr	r0, [r3, #4]
 800ed5e:	4a6a      	ldr	r2, [pc, #424]	; (800ef08 <otherSetPageInfoDisFunc+0x2f8>)
 800ed60:	68bb      	ldr	r3, [r7, #8]
 800ed62:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ed66:	4619      	mov	r1, r3
 800ed68:	f002 f8d5 	bl	8010f16 <tftRamWrite>
	x = otherSetTime.Month%10;
 800ed6c:	4b67      	ldr	r3, [pc, #412]	; (800ef0c <otherSetPageInfoDisFunc+0x2fc>)
 800ed6e:	789a      	ldrb	r2, [r3, #2]
 800ed70:	4b67      	ldr	r3, [pc, #412]	; (800ef10 <otherSetPageInfoDisFunc+0x300>)
 800ed72:	fba3 1302 	umull	r1, r3, r3, r2
 800ed76:	08d9      	lsrs	r1, r3, #3
 800ed78:	460b      	mov	r3, r1
 800ed7a:	009b      	lsls	r3, r3, #2
 800ed7c:	440b      	add	r3, r1
 800ed7e:	005b      	lsls	r3, r3, #1
 800ed80:	1ad3      	subs	r3, r2, r3
 800ed82:	b2db      	uxtb	r3, r3
 800ed84:	60bb      	str	r3, [r7, #8]
	tftRamWrite(smallNumList[x].p, smallNumList[x].length);
 800ed86:	4a60      	ldr	r2, [pc, #384]	; (800ef08 <otherSetPageInfoDisFunc+0x2f8>)
 800ed88:	68bb      	ldr	r3, [r7, #8]
 800ed8a:	00db      	lsls	r3, r3, #3
 800ed8c:	4413      	add	r3, r2
 800ed8e:	6858      	ldr	r0, [r3, #4]
 800ed90:	4a5d      	ldr	r2, [pc, #372]	; (800ef08 <otherSetPageInfoDisFunc+0x2f8>)
 800ed92:	68bb      	ldr	r3, [r7, #8]
 800ed94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ed98:	4619      	mov	r1, r3
 800ed9a:	f002 f8bc 	bl	8010f16 <tftRamWrite>

	tftSetWin(25, 110, 11, 8*2);
 800ed9e:	2310      	movs	r3, #16
 800eda0:	220b      	movs	r2, #11
 800eda2:	216e      	movs	r1, #110	; 0x6e
 800eda4:	2019      	movs	r0, #25
 800eda6:	f002 f94f 	bl	8011048 <tftSetWin>
	x = otherSetTime.Day/10;
 800edaa:	4b58      	ldr	r3, [pc, #352]	; (800ef0c <otherSetPageInfoDisFunc+0x2fc>)
 800edac:	78db      	ldrb	r3, [r3, #3]
 800edae:	4a58      	ldr	r2, [pc, #352]	; (800ef10 <otherSetPageInfoDisFunc+0x300>)
 800edb0:	fba2 2303 	umull	r2, r3, r2, r3
 800edb4:	08db      	lsrs	r3, r3, #3
 800edb6:	b2db      	uxtb	r3, r3
 800edb8:	60bb      	str	r3, [r7, #8]
	tftRamWrite(smallNumList[x].p, smallNumList[x].length);
 800edba:	4a53      	ldr	r2, [pc, #332]	; (800ef08 <otherSetPageInfoDisFunc+0x2f8>)
 800edbc:	68bb      	ldr	r3, [r7, #8]
 800edbe:	00db      	lsls	r3, r3, #3
 800edc0:	4413      	add	r3, r2
 800edc2:	6858      	ldr	r0, [r3, #4]
 800edc4:	4a50      	ldr	r2, [pc, #320]	; (800ef08 <otherSetPageInfoDisFunc+0x2f8>)
 800edc6:	68bb      	ldr	r3, [r7, #8]
 800edc8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800edcc:	4619      	mov	r1, r3
 800edce:	f002 f8a2 	bl	8010f16 <tftRamWrite>
	x = otherSetTime.Day%10;
 800edd2:	4b4e      	ldr	r3, [pc, #312]	; (800ef0c <otherSetPageInfoDisFunc+0x2fc>)
 800edd4:	78da      	ldrb	r2, [r3, #3]
 800edd6:	4b4e      	ldr	r3, [pc, #312]	; (800ef10 <otherSetPageInfoDisFunc+0x300>)
 800edd8:	fba3 1302 	umull	r1, r3, r3, r2
 800eddc:	08d9      	lsrs	r1, r3, #3
 800edde:	460b      	mov	r3, r1
 800ede0:	009b      	lsls	r3, r3, #2
 800ede2:	440b      	add	r3, r1
 800ede4:	005b      	lsls	r3, r3, #1
 800ede6:	1ad3      	subs	r3, r2, r3
 800ede8:	b2db      	uxtb	r3, r3
 800edea:	60bb      	str	r3, [r7, #8]
	tftRamWrite(smallNumList[x].p, smallNumList[x].length);
 800edec:	4a46      	ldr	r2, [pc, #280]	; (800ef08 <otherSetPageInfoDisFunc+0x2f8>)
 800edee:	68bb      	ldr	r3, [r7, #8]
 800edf0:	00db      	lsls	r3, r3, #3
 800edf2:	4413      	add	r3, r2
 800edf4:	6858      	ldr	r0, [r3, #4]
 800edf6:	4a44      	ldr	r2, [pc, #272]	; (800ef08 <otherSetPageInfoDisFunc+0x2f8>)
 800edf8:	68bb      	ldr	r3, [r7, #8]
 800edfa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800edfe:	4619      	mov	r1, r3
 800ee00:	f002 f889 	bl	8010f16 <tftRamWrite>

	tftSetWin(25, 132, 11, 8*2);
 800ee04:	2310      	movs	r3, #16
 800ee06:	220b      	movs	r2, #11
 800ee08:	2184      	movs	r1, #132	; 0x84
 800ee0a:	2019      	movs	r0, #25
 800ee0c:	f002 f91c 	bl	8011048 <tftSetWin>
	x = otherSetTime.Hour/10;
 800ee10:	4b3e      	ldr	r3, [pc, #248]	; (800ef0c <otherSetPageInfoDisFunc+0x2fc>)
 800ee12:	791b      	ldrb	r3, [r3, #4]
 800ee14:	4a3e      	ldr	r2, [pc, #248]	; (800ef10 <otherSetPageInfoDisFunc+0x300>)
 800ee16:	fba2 2303 	umull	r2, r3, r2, r3
 800ee1a:	08db      	lsrs	r3, r3, #3
 800ee1c:	b2db      	uxtb	r3, r3
 800ee1e:	60bb      	str	r3, [r7, #8]
	tftRamWrite(smallNumList[x].p, smallNumList[x].length);
 800ee20:	4a39      	ldr	r2, [pc, #228]	; (800ef08 <otherSetPageInfoDisFunc+0x2f8>)
 800ee22:	68bb      	ldr	r3, [r7, #8]
 800ee24:	00db      	lsls	r3, r3, #3
 800ee26:	4413      	add	r3, r2
 800ee28:	6858      	ldr	r0, [r3, #4]
 800ee2a:	4a37      	ldr	r2, [pc, #220]	; (800ef08 <otherSetPageInfoDisFunc+0x2f8>)
 800ee2c:	68bb      	ldr	r3, [r7, #8]
 800ee2e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ee32:	4619      	mov	r1, r3
 800ee34:	f002 f86f 	bl	8010f16 <tftRamWrite>
	x = otherSetTime.Hour%10;
 800ee38:	4b34      	ldr	r3, [pc, #208]	; (800ef0c <otherSetPageInfoDisFunc+0x2fc>)
 800ee3a:	791a      	ldrb	r2, [r3, #4]
 800ee3c:	4b34      	ldr	r3, [pc, #208]	; (800ef10 <otherSetPageInfoDisFunc+0x300>)
 800ee3e:	fba3 1302 	umull	r1, r3, r3, r2
 800ee42:	08d9      	lsrs	r1, r3, #3
 800ee44:	460b      	mov	r3, r1
 800ee46:	009b      	lsls	r3, r3, #2
 800ee48:	440b      	add	r3, r1
 800ee4a:	005b      	lsls	r3, r3, #1
 800ee4c:	1ad3      	subs	r3, r2, r3
 800ee4e:	b2db      	uxtb	r3, r3
 800ee50:	60bb      	str	r3, [r7, #8]
	tftRamWrite(smallNumList[x].p, smallNumList[x].length);
 800ee52:	4a2d      	ldr	r2, [pc, #180]	; (800ef08 <otherSetPageInfoDisFunc+0x2f8>)
 800ee54:	68bb      	ldr	r3, [r7, #8]
 800ee56:	00db      	lsls	r3, r3, #3
 800ee58:	4413      	add	r3, r2
 800ee5a:	6858      	ldr	r0, [r3, #4]
 800ee5c:	4a2a      	ldr	r2, [pc, #168]	; (800ef08 <otherSetPageInfoDisFunc+0x2f8>)
 800ee5e:	68bb      	ldr	r3, [r7, #8]
 800ee60:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ee64:	4619      	mov	r1, r3
 800ee66:	f002 f856 	bl	8010f16 <tftRamWrite>

	tftSetWin(25, 155, 11, 8*2);
 800ee6a:	2310      	movs	r3, #16
 800ee6c:	220b      	movs	r2, #11
 800ee6e:	219b      	movs	r1, #155	; 0x9b
 800ee70:	2019      	movs	r0, #25
 800ee72:	f002 f8e9 	bl	8011048 <tftSetWin>
	x = otherSetTime.Min/10;
 800ee76:	4b25      	ldr	r3, [pc, #148]	; (800ef0c <otherSetPageInfoDisFunc+0x2fc>)
 800ee78:	795b      	ldrb	r3, [r3, #5]
 800ee7a:	4a25      	ldr	r2, [pc, #148]	; (800ef10 <otherSetPageInfoDisFunc+0x300>)
 800ee7c:	fba2 2303 	umull	r2, r3, r2, r3
 800ee80:	08db      	lsrs	r3, r3, #3
 800ee82:	b2db      	uxtb	r3, r3
 800ee84:	60bb      	str	r3, [r7, #8]
	tftRamWrite(smallNumList[x].p, smallNumList[x].length);
 800ee86:	4a20      	ldr	r2, [pc, #128]	; (800ef08 <otherSetPageInfoDisFunc+0x2f8>)
 800ee88:	68bb      	ldr	r3, [r7, #8]
 800ee8a:	00db      	lsls	r3, r3, #3
 800ee8c:	4413      	add	r3, r2
 800ee8e:	6858      	ldr	r0, [r3, #4]
 800ee90:	4a1d      	ldr	r2, [pc, #116]	; (800ef08 <otherSetPageInfoDisFunc+0x2f8>)
 800ee92:	68bb      	ldr	r3, [r7, #8]
 800ee94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ee98:	4619      	mov	r1, r3
 800ee9a:	f002 f83c 	bl	8010f16 <tftRamWrite>
	x = otherSetTime.Min%10;
 800ee9e:	4b1b      	ldr	r3, [pc, #108]	; (800ef0c <otherSetPageInfoDisFunc+0x2fc>)
 800eea0:	795a      	ldrb	r2, [r3, #5]
 800eea2:	4b1b      	ldr	r3, [pc, #108]	; (800ef10 <otherSetPageInfoDisFunc+0x300>)
 800eea4:	fba3 1302 	umull	r1, r3, r3, r2
 800eea8:	08d9      	lsrs	r1, r3, #3
 800eeaa:	460b      	mov	r3, r1
 800eeac:	009b      	lsls	r3, r3, #2
 800eeae:	440b      	add	r3, r1
 800eeb0:	005b      	lsls	r3, r3, #1
 800eeb2:	1ad3      	subs	r3, r2, r3
 800eeb4:	b2db      	uxtb	r3, r3
 800eeb6:	60bb      	str	r3, [r7, #8]
	tftRamWrite(smallNumList[x].p, smallNumList[x].length);
 800eeb8:	4a13      	ldr	r2, [pc, #76]	; (800ef08 <otherSetPageInfoDisFunc+0x2f8>)
 800eeba:	68bb      	ldr	r3, [r7, #8]
 800eebc:	00db      	lsls	r3, r3, #3
 800eebe:	4413      	add	r3, r2
 800eec0:	6858      	ldr	r0, [r3, #4]
 800eec2:	4a11      	ldr	r2, [pc, #68]	; (800ef08 <otherSetPageInfoDisFunc+0x2f8>)
 800eec4:	68bb      	ldr	r3, [r7, #8]
 800eec6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800eeca:	4619      	mov	r1, r3
 800eecc:	f002 f823 	bl	8010f16 <tftRamWrite>

	//const struct imageInfo managerList[]
	tftSetWin(76, 142, 14, 27);
 800eed0:	231b      	movs	r3, #27
 800eed2:	220e      	movs	r2, #14
 800eed4:	218e      	movs	r1, #142	; 0x8e
 800eed6:	204c      	movs	r0, #76	; 0x4c
 800eed8:	f002 f8b6 	bl	8011048 <tftSetWin>
	if(deviceOwnInfo.mannerge){
 800eedc:	4b08      	ldr	r3, [pc, #32]	; (800ef00 <otherSetPageInfoDisFunc+0x2f0>)
 800eede:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d019      	beq.n	800ef18 <otherSetPageInfoDisFunc+0x308>
		tftRamWrite(managerList[0].p, managerList[0].length);
 800eee4:	4b0b      	ldr	r3, [pc, #44]	; (800ef14 <otherSetPageInfoDisFunc+0x304>)
 800eee6:	685a      	ldr	r2, [r3, #4]
 800eee8:	4b0a      	ldr	r3, [pc, #40]	; (800ef14 <otherSetPageInfoDisFunc+0x304>)
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	4619      	mov	r1, r3
 800eeee:	4610      	mov	r0, r2
 800eef0:	f002 f811 	bl	8010f16 <tftRamWrite>
 800eef4:	e018      	b.n	800ef28 <otherSetPageInfoDisFunc+0x318>
 800eef6:	bf00      	nop
 800eef8:	00012e80 	.word	0x00012e80
 800eefc:	080564c8 	.word	0x080564c8
 800ef00:	2000017c 	.word	0x2000017c
 800ef04:	66666667 	.word	0x66666667
 800ef08:	08018dc0 	.word	0x08018dc0
 800ef0c:	20006bc8 	.word	0x20006bc8
 800ef10:	cccccccd 	.word	0xcccccccd
 800ef14:	08069930 	.word	0x08069930
	}
	else{
		tftRamWrite(managerList[1].p, managerList[1].length);
 800ef18:	4b49      	ldr	r3, [pc, #292]	; (800f040 <otherSetPageInfoDisFunc+0x430>)
 800ef1a:	68da      	ldr	r2, [r3, #12]
 800ef1c:	4b48      	ldr	r3, [pc, #288]	; (800f040 <otherSetPageInfoDisFunc+0x430>)
 800ef1e:	689b      	ldr	r3, [r3, #8]
 800ef20:	4619      	mov	r1, r3
 800ef22:	4610      	mov	r0, r2
 800ef24:	f001 fff7 	bl	8010f16 <tftRamWrite>
	}


	if(cursorDisSwitch){
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	f000 8084 	beq.w	800f038 <otherSetPageInfoDisFunc+0x428>
		switch(pageInfoList[4].arrowInfo){
 800ef30:	4b44      	ldr	r3, [pc, #272]	; (800f044 <otherSetPageInfoDisFunc+0x434>)
 800ef32:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 800ef36:	3b01      	subs	r3, #1
 800ef38:	2b03      	cmp	r3, #3
 800ef3a:	d87d      	bhi.n	800f038 <otherSetPageInfoDisFunc+0x428>
 800ef3c:	a201      	add	r2, pc, #4	; (adr r2, 800ef44 <otherSetPageInfoDisFunc+0x334>)
 800ef3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef42:	bf00      	nop
 800ef44:	0800ef55 	.word	0x0800ef55
 800ef48:	0800ef6d 	.word	0x0800ef6d
 800ef4c:	0800ef85 	.word	0x0800ef85
 800ef50:	0800ef9d 	.word	0x0800ef9d
			case 1: tftSetWin(178, 155, 1, 8*2);tftRamColorFill(0xffff, 16); break;
 800ef54:	2310      	movs	r3, #16
 800ef56:	2201      	movs	r2, #1
 800ef58:	219b      	movs	r1, #155	; 0x9b
 800ef5a:	20b2      	movs	r0, #178	; 0xb2
 800ef5c:	f002 f874 	bl	8011048 <tftSetWin>
 800ef60:	2110      	movs	r1, #16
 800ef62:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800ef66:	f001 ffbb 	bl	8010ee0 <tftRamColorFill>
 800ef6a:	e065      	b.n	800f038 <otherSetPageInfoDisFunc+0x428>
			case 2: tftSetWin(126, 162, 1, 8);tftRamColorFill(0xffff, 16); break;
 800ef6c:	2308      	movs	r3, #8
 800ef6e:	2201      	movs	r2, #1
 800ef70:	21a2      	movs	r1, #162	; 0xa2
 800ef72:	207e      	movs	r0, #126	; 0x7e
 800ef74:	f002 f868 	bl	8011048 <tftSetWin>
 800ef78:	2110      	movs	r1, #16
 800ef7a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800ef7e:	f001 ffaf 	bl	8010ee0 <tftRamColorFill>
 800ef82:	e059      	b.n	800f038 <otherSetPageInfoDisFunc+0x428>
			case 3: tftSetWin(76, 142, 1, 28);tftRamColorFill(0xffff, 28); break;
 800ef84:	231c      	movs	r3, #28
 800ef86:	2201      	movs	r2, #1
 800ef88:	218e      	movs	r1, #142	; 0x8e
 800ef8a:	204c      	movs	r0, #76	; 0x4c
 800ef8c:	f002 f85c 	bl	8011048 <tftSetWin>
 800ef90:	211c      	movs	r1, #28
 800ef92:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800ef96:	f001 ffa3 	bl	8010ee0 <tftRamColorFill>
 800ef9a:	e04d      	b.n	800f038 <otherSetPageInfoDisFunc+0x428>
			case 4:
					switch(pageCourseInfo.otherSet){
 800ef9c:	4b2a      	ldr	r3, [pc, #168]	; (800f048 <otherSetPageInfoDisFunc+0x438>)
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	2b04      	cmp	r3, #4
 800efa2:	d849      	bhi.n	800f038 <otherSetPageInfoDisFunc+0x428>
 800efa4:	a201      	add	r2, pc, #4	; (adr r2, 800efac <otherSetPageInfoDisFunc+0x39c>)
 800efa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efaa:	bf00      	nop
 800efac:	0800efc1 	.word	0x0800efc1
 800efb0:	0800efd9 	.word	0x0800efd9
 800efb4:	0800eff1 	.word	0x0800eff1
 800efb8:	0800f009 	.word	0x0800f009
 800efbc:	0800f021 	.word	0x0800f021
						case 0:tftSetWin(24, 63, 1, 8*2);tftRamColorFill(0xffff, 16);break;
 800efc0:	2310      	movs	r3, #16
 800efc2:	2201      	movs	r2, #1
 800efc4:	213f      	movs	r1, #63	; 0x3f
 800efc6:	2018      	movs	r0, #24
 800efc8:	f002 f83e 	bl	8011048 <tftSetWin>
 800efcc:	2110      	movs	r1, #16
 800efce:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800efd2:	f001 ff85 	bl	8010ee0 <tftRamColorFill>
 800efd6:	e02f      	b.n	800f038 <otherSetPageInfoDisFunc+0x428>
						case 1:tftSetWin(24, 87, 1, 8*2);tftRamColorFill(0xffff, 16);break;
 800efd8:	2310      	movs	r3, #16
 800efda:	2201      	movs	r2, #1
 800efdc:	2157      	movs	r1, #87	; 0x57
 800efde:	2018      	movs	r0, #24
 800efe0:	f002 f832 	bl	8011048 <tftSetWin>
 800efe4:	2110      	movs	r1, #16
 800efe6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800efea:	f001 ff79 	bl	8010ee0 <tftRamColorFill>
 800efee:	e023      	b.n	800f038 <otherSetPageInfoDisFunc+0x428>
						case 2:tftSetWin(24, 110, 1, 8*2);tftRamColorFill(0xffff, 16);break;
 800eff0:	2310      	movs	r3, #16
 800eff2:	2201      	movs	r2, #1
 800eff4:	216e      	movs	r1, #110	; 0x6e
 800eff6:	2018      	movs	r0, #24
 800eff8:	f002 f826 	bl	8011048 <tftSetWin>
 800effc:	2110      	movs	r1, #16
 800effe:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800f002:	f001 ff6d 	bl	8010ee0 <tftRamColorFill>
 800f006:	e017      	b.n	800f038 <otherSetPageInfoDisFunc+0x428>
						case 3:tftSetWin(24, 132, 1, 8*2);tftRamColorFill(0xffff, 16);break;
 800f008:	2310      	movs	r3, #16
 800f00a:	2201      	movs	r2, #1
 800f00c:	2184      	movs	r1, #132	; 0x84
 800f00e:	2018      	movs	r0, #24
 800f010:	f002 f81a 	bl	8011048 <tftSetWin>
 800f014:	2110      	movs	r1, #16
 800f016:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800f01a:	f001 ff61 	bl	8010ee0 <tftRamColorFill>
 800f01e:	e00b      	b.n	800f038 <otherSetPageInfoDisFunc+0x428>
						case 4:tftSetWin(24, 155, 1, 8*2);tftRamColorFill(0xffff, 16);break;
 800f020:	2310      	movs	r3, #16
 800f022:	2201      	movs	r2, #1
 800f024:	219b      	movs	r1, #155	; 0x9b
 800f026:	2018      	movs	r0, #24
 800f028:	f002 f80e 	bl	8011048 <tftSetWin>
 800f02c:	2110      	movs	r1, #16
 800f02e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800f032:	f001 ff55 	bl	8010ee0 <tftRamColorFill>
 800f036:	bf00      	nop
					}
		}
	}
}
 800f038:	bf00      	nop
 800f03a:	3710      	adds	r7, #16
 800f03c:	46bd      	mov	sp, r7
 800f03e:	bd80      	pop	{r7, pc}
 800f040:	08069930 	.word	0x08069930
 800f044:	20000200 	.word	0x20000200
 800f048:	200072e0 	.word	0x200072e0

0800f04c <detectSetPageInfoDisFunc>:

void detectSetPageInfoDisFunc(void * p){
 800f04c:	b580      	push	{r7, lr}
 800f04e:	b084      	sub	sp, #16
 800f050:	af00      	add	r7, sp, #0
 800f052:	6078      	str	r0, [r7, #4]
	int cursorDisSwitch = *(char*)p;
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	781b      	ldrb	r3, [r3, #0]
 800f058:	60fb      	str	r3, [r7, #12]
	tftSetWin(178, 22, 15, 61);
 800f05a:	233d      	movs	r3, #61	; 0x3d
 800f05c:	220f      	movs	r2, #15
 800f05e:	2116      	movs	r1, #22
 800f060:	20b2      	movs	r0, #178	; 0xb2
 800f062:	f001 fff1 	bl	8011048 <tftSetWin>
	tftRamWrite(detectPageList[0].p,detectPageList[0].length);
 800f066:	4bc0      	ldr	r3, [pc, #768]	; (800f368 <detectSetPageInfoDisFunc+0x31c>)
 800f068:	685a      	ldr	r2, [r3, #4]
 800f06a:	4bbf      	ldr	r3, [pc, #764]	; (800f368 <detectSetPageInfoDisFunc+0x31c>)
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	4619      	mov	r1, r3
 800f070:	4610      	mov	r0, r2
 800f072:	f001 ff50 	bl	8010f16 <tftRamWrite>
	tftSetWin(127, 22, 14, 63);
 800f076:	233f      	movs	r3, #63	; 0x3f
 800f078:	220e      	movs	r2, #14
 800f07a:	2116      	movs	r1, #22
 800f07c:	207f      	movs	r0, #127	; 0x7f
 800f07e:	f001 ffe3 	bl	8011048 <tftSetWin>
	tftRamWrite(detectPageList[1].p,detectPageList[1].length);
 800f082:	4bb9      	ldr	r3, [pc, #740]	; (800f368 <detectSetPageInfoDisFunc+0x31c>)
 800f084:	68da      	ldr	r2, [r3, #12]
 800f086:	4bb8      	ldr	r3, [pc, #736]	; (800f368 <detectSetPageInfoDisFunc+0x31c>)
 800f088:	689b      	ldr	r3, [r3, #8]
 800f08a:	4619      	mov	r1, r3
 800f08c:	4610      	mov	r0, r2
 800f08e:	f001 ff42 	bl	8010f16 <tftRamWrite>
	tftSetWin(76, 23, 14, 62);
 800f092:	233e      	movs	r3, #62	; 0x3e
 800f094:	220e      	movs	r2, #14
 800f096:	2117      	movs	r1, #23
 800f098:	204c      	movs	r0, #76	; 0x4c
 800f09a:	f001 ffd5 	bl	8011048 <tftSetWin>
	tftRamWrite(detectPageList[2].p,detectPageList[2].length);
 800f09e:	4bb2      	ldr	r3, [pc, #712]	; (800f368 <detectSetPageInfoDisFunc+0x31c>)
 800f0a0:	695a      	ldr	r2, [r3, #20]
 800f0a2:	4bb1      	ldr	r3, [pc, #708]	; (800f368 <detectSetPageInfoDisFunc+0x31c>)
 800f0a4:	691b      	ldr	r3, [r3, #16]
 800f0a6:	4619      	mov	r1, r3
 800f0a8:	4610      	mov	r0, r2
 800f0aa:	f001 ff34 	bl	8010f16 <tftRamWrite>
	tftSetWin(25, 23, 14, 62);
 800f0ae:	233e      	movs	r3, #62	; 0x3e
 800f0b0:	220e      	movs	r2, #14
 800f0b2:	2117      	movs	r1, #23
 800f0b4:	2019      	movs	r0, #25
 800f0b6:	f001 ffc7 	bl	8011048 <tftSetWin>
	tftRamWrite(detectPageList[3].p,detectPageList[3].length);
 800f0ba:	4bab      	ldr	r3, [pc, #684]	; (800f368 <detectSetPageInfoDisFunc+0x31c>)
 800f0bc:	69da      	ldr	r2, [r3, #28]
 800f0be:	4baa      	ldr	r3, [pc, #680]	; (800f368 <detectSetPageInfoDisFunc+0x31c>)
 800f0c0:	699b      	ldr	r3, [r3, #24]
 800f0c2:	4619      	mov	r1, r3
 800f0c4:	4610      	mov	r0, r2
 800f0c6:	f001 ff26 	bl	8010f16 <tftRamWrite>

	if(deviceOwnInfo.lowPercent > 99)
 800f0ca:	4ba8      	ldr	r3, [pc, #672]	; (800f36c <detectSetPageInfoDisFunc+0x320>)
 800f0cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0ce:	2b63      	cmp	r3, #99	; 0x63
 800f0d0:	dd03      	ble.n	800f0da <detectSetPageInfoDisFunc+0x8e>
		deviceOwnInfo.lowPercent = 99;
 800f0d2:	4ba6      	ldr	r3, [pc, #664]	; (800f36c <detectSetPageInfoDisFunc+0x320>)
 800f0d4:	2263      	movs	r2, #99	; 0x63
 800f0d6:	631a      	str	r2, [r3, #48]	; 0x30
 800f0d8:	e006      	b.n	800f0e8 <detectSetPageInfoDisFunc+0x9c>
	else if(deviceOwnInfo.lowPercent < 0)
 800f0da:	4ba4      	ldr	r3, [pc, #656]	; (800f36c <detectSetPageInfoDisFunc+0x320>)
 800f0dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	da02      	bge.n	800f0e8 <detectSetPageInfoDisFunc+0x9c>
		deviceOwnInfo.lowPercent = 0;
 800f0e2:	4ba2      	ldr	r3, [pc, #648]	; (800f36c <detectSetPageInfoDisFunc+0x320>)
 800f0e4:	2200      	movs	r2, #0
 800f0e6:	631a      	str	r2, [r3, #48]	; 0x30

	if(deviceOwnInfo.highPercent > 99)
 800f0e8:	4ba0      	ldr	r3, [pc, #640]	; (800f36c <detectSetPageInfoDisFunc+0x320>)
 800f0ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0ec:	2b63      	cmp	r3, #99	; 0x63
 800f0ee:	dd03      	ble.n	800f0f8 <detectSetPageInfoDisFunc+0xac>
		deviceOwnInfo.highPercent = 99;
 800f0f0:	4b9e      	ldr	r3, [pc, #632]	; (800f36c <detectSetPageInfoDisFunc+0x320>)
 800f0f2:	2263      	movs	r2, #99	; 0x63
 800f0f4:	62da      	str	r2, [r3, #44]	; 0x2c
 800f0f6:	e006      	b.n	800f106 <detectSetPageInfoDisFunc+0xba>
	else if(deviceOwnInfo.highPercent < 0)
 800f0f8:	4b9c      	ldr	r3, [pc, #624]	; (800f36c <detectSetPageInfoDisFunc+0x320>)
 800f0fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	da02      	bge.n	800f106 <detectSetPageInfoDisFunc+0xba>
		deviceOwnInfo.highPercent = 0;
 800f100:	4b9a      	ldr	r3, [pc, #616]	; (800f36c <detectSetPageInfoDisFunc+0x320>)
 800f102:	2200      	movs	r2, #0
 800f104:	62da      	str	r2, [r3, #44]	; 0x2c

	int x;
	tftSetWin(127, 156, 11, 8*2);
 800f106:	2310      	movs	r3, #16
 800f108:	220b      	movs	r2, #11
 800f10a:	219c      	movs	r1, #156	; 0x9c
 800f10c:	207f      	movs	r0, #127	; 0x7f
 800f10e:	f001 ff9b 	bl	8011048 <tftSetWin>
	x = deviceOwnInfo.lowPercent/10;
 800f112:	4b96      	ldr	r3, [pc, #600]	; (800f36c <detectSetPageInfoDisFunc+0x320>)
 800f114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f116:	4a96      	ldr	r2, [pc, #600]	; (800f370 <detectSetPageInfoDisFunc+0x324>)
 800f118:	fb82 1203 	smull	r1, r2, r2, r3
 800f11c:	1092      	asrs	r2, r2, #2
 800f11e:	17db      	asrs	r3, r3, #31
 800f120:	1ad3      	subs	r3, r2, r3
 800f122:	60bb      	str	r3, [r7, #8]
	tftRamWrite(smallNumList[x].p, smallNumList[x].length);
 800f124:	4a93      	ldr	r2, [pc, #588]	; (800f374 <detectSetPageInfoDisFunc+0x328>)
 800f126:	68bb      	ldr	r3, [r7, #8]
 800f128:	00db      	lsls	r3, r3, #3
 800f12a:	4413      	add	r3, r2
 800f12c:	6858      	ldr	r0, [r3, #4]
 800f12e:	4a91      	ldr	r2, [pc, #580]	; (800f374 <detectSetPageInfoDisFunc+0x328>)
 800f130:	68bb      	ldr	r3, [r7, #8]
 800f132:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f136:	4619      	mov	r1, r3
 800f138:	f001 feed 	bl	8010f16 <tftRamWrite>
	x = deviceOwnInfo.lowPercent%10;
 800f13c:	4b8b      	ldr	r3, [pc, #556]	; (800f36c <detectSetPageInfoDisFunc+0x320>)
 800f13e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f140:	4b8b      	ldr	r3, [pc, #556]	; (800f370 <detectSetPageInfoDisFunc+0x324>)
 800f142:	fb83 1302 	smull	r1, r3, r3, r2
 800f146:	1099      	asrs	r1, r3, #2
 800f148:	17d3      	asrs	r3, r2, #31
 800f14a:	1ac9      	subs	r1, r1, r3
 800f14c:	460b      	mov	r3, r1
 800f14e:	009b      	lsls	r3, r3, #2
 800f150:	440b      	add	r3, r1
 800f152:	005b      	lsls	r3, r3, #1
 800f154:	1ad3      	subs	r3, r2, r3
 800f156:	60bb      	str	r3, [r7, #8]
	tftRamWrite(smallNumList[x].p, smallNumList[x].length);
 800f158:	4a86      	ldr	r2, [pc, #536]	; (800f374 <detectSetPageInfoDisFunc+0x328>)
 800f15a:	68bb      	ldr	r3, [r7, #8]
 800f15c:	00db      	lsls	r3, r3, #3
 800f15e:	4413      	add	r3, r2
 800f160:	6858      	ldr	r0, [r3, #4]
 800f162:	4a84      	ldr	r2, [pc, #528]	; (800f374 <detectSetPageInfoDisFunc+0x328>)
 800f164:	68bb      	ldr	r3, [r7, #8]
 800f166:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f16a:	4619      	mov	r1, r3
 800f16c:	f001 fed3 	bl	8010f16 <tftRamWrite>

	tftSetWin(76, 156, 11, 8*2);
 800f170:	2310      	movs	r3, #16
 800f172:	220b      	movs	r2, #11
 800f174:	219c      	movs	r1, #156	; 0x9c
 800f176:	204c      	movs	r0, #76	; 0x4c
 800f178:	f001 ff66 	bl	8011048 <tftSetWin>
	x = deviceOwnInfo.highPercent/10;
 800f17c:	4b7b      	ldr	r3, [pc, #492]	; (800f36c <detectSetPageInfoDisFunc+0x320>)
 800f17e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f180:	4a7b      	ldr	r2, [pc, #492]	; (800f370 <detectSetPageInfoDisFunc+0x324>)
 800f182:	fb82 1203 	smull	r1, r2, r2, r3
 800f186:	1092      	asrs	r2, r2, #2
 800f188:	17db      	asrs	r3, r3, #31
 800f18a:	1ad3      	subs	r3, r2, r3
 800f18c:	60bb      	str	r3, [r7, #8]
	tftRamWrite(smallNumList[x].p, smallNumList[x].length);
 800f18e:	4a79      	ldr	r2, [pc, #484]	; (800f374 <detectSetPageInfoDisFunc+0x328>)
 800f190:	68bb      	ldr	r3, [r7, #8]
 800f192:	00db      	lsls	r3, r3, #3
 800f194:	4413      	add	r3, r2
 800f196:	6858      	ldr	r0, [r3, #4]
 800f198:	4a76      	ldr	r2, [pc, #472]	; (800f374 <detectSetPageInfoDisFunc+0x328>)
 800f19a:	68bb      	ldr	r3, [r7, #8]
 800f19c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f1a0:	4619      	mov	r1, r3
 800f1a2:	f001 feb8 	bl	8010f16 <tftRamWrite>
	x = deviceOwnInfo.highPercent%10;
 800f1a6:	4b71      	ldr	r3, [pc, #452]	; (800f36c <detectSetPageInfoDisFunc+0x320>)
 800f1a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f1aa:	4b71      	ldr	r3, [pc, #452]	; (800f370 <detectSetPageInfoDisFunc+0x324>)
 800f1ac:	fb83 1302 	smull	r1, r3, r3, r2
 800f1b0:	1099      	asrs	r1, r3, #2
 800f1b2:	17d3      	asrs	r3, r2, #31
 800f1b4:	1ac9      	subs	r1, r1, r3
 800f1b6:	460b      	mov	r3, r1
 800f1b8:	009b      	lsls	r3, r3, #2
 800f1ba:	440b      	add	r3, r1
 800f1bc:	005b      	lsls	r3, r3, #1
 800f1be:	1ad3      	subs	r3, r2, r3
 800f1c0:	60bb      	str	r3, [r7, #8]
	tftRamWrite(smallNumList[x].p, smallNumList[x].length);
 800f1c2:	4a6c      	ldr	r2, [pc, #432]	; (800f374 <detectSetPageInfoDisFunc+0x328>)
 800f1c4:	68bb      	ldr	r3, [r7, #8]
 800f1c6:	00db      	lsls	r3, r3, #3
 800f1c8:	4413      	add	r3, r2
 800f1ca:	6858      	ldr	r0, [r3, #4]
 800f1cc:	4a69      	ldr	r2, [pc, #420]	; (800f374 <detectSetPageInfoDisFunc+0x328>)
 800f1ce:	68bb      	ldr	r3, [r7, #8]
 800f1d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f1d4:	4619      	mov	r1, r3
 800f1d6:	f001 fe9e 	bl	8010f16 <tftRamWrite>

	tftSetWin(25, 172-8*4, 11, 8*4);
 800f1da:	2320      	movs	r3, #32
 800f1dc:	220b      	movs	r2, #11
 800f1de:	218c      	movs	r1, #140	; 0x8c
 800f1e0:	2019      	movs	r0, #25
 800f1e2:	f001 ff31 	bl	8011048 <tftSetWin>
	x = deviceOwnInfo.measureRange/1000%10;
 800f1e6:	4b61      	ldr	r3, [pc, #388]	; (800f36c <detectSetPageInfoDisFunc+0x320>)
 800f1e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f1ea:	4a63      	ldr	r2, [pc, #396]	; (800f378 <detectSetPageInfoDisFunc+0x32c>)
 800f1ec:	fb82 1203 	smull	r1, r2, r2, r3
 800f1f0:	1192      	asrs	r2, r2, #6
 800f1f2:	17db      	asrs	r3, r3, #31
 800f1f4:	1ad2      	subs	r2, r2, r3
 800f1f6:	4b5e      	ldr	r3, [pc, #376]	; (800f370 <detectSetPageInfoDisFunc+0x324>)
 800f1f8:	fb83 1302 	smull	r1, r3, r3, r2
 800f1fc:	1099      	asrs	r1, r3, #2
 800f1fe:	17d3      	asrs	r3, r2, #31
 800f200:	1ac9      	subs	r1, r1, r3
 800f202:	460b      	mov	r3, r1
 800f204:	009b      	lsls	r3, r3, #2
 800f206:	440b      	add	r3, r1
 800f208:	005b      	lsls	r3, r3, #1
 800f20a:	1ad3      	subs	r3, r2, r3
 800f20c:	60bb      	str	r3, [r7, #8]
	tftRamWrite(smallNumList[x].p, smallNumList[x].length);
 800f20e:	4a59      	ldr	r2, [pc, #356]	; (800f374 <detectSetPageInfoDisFunc+0x328>)
 800f210:	68bb      	ldr	r3, [r7, #8]
 800f212:	00db      	lsls	r3, r3, #3
 800f214:	4413      	add	r3, r2
 800f216:	6858      	ldr	r0, [r3, #4]
 800f218:	4a56      	ldr	r2, [pc, #344]	; (800f374 <detectSetPageInfoDisFunc+0x328>)
 800f21a:	68bb      	ldr	r3, [r7, #8]
 800f21c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f220:	4619      	mov	r1, r3
 800f222:	f001 fe78 	bl	8010f16 <tftRamWrite>
	x = deviceOwnInfo.measureRange/100%10;
 800f226:	4b51      	ldr	r3, [pc, #324]	; (800f36c <detectSetPageInfoDisFunc+0x320>)
 800f228:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f22a:	4a54      	ldr	r2, [pc, #336]	; (800f37c <detectSetPageInfoDisFunc+0x330>)
 800f22c:	fb82 1203 	smull	r1, r2, r2, r3
 800f230:	1152      	asrs	r2, r2, #5
 800f232:	17db      	asrs	r3, r3, #31
 800f234:	1ad2      	subs	r2, r2, r3
 800f236:	4b4e      	ldr	r3, [pc, #312]	; (800f370 <detectSetPageInfoDisFunc+0x324>)
 800f238:	fb83 1302 	smull	r1, r3, r3, r2
 800f23c:	1099      	asrs	r1, r3, #2
 800f23e:	17d3      	asrs	r3, r2, #31
 800f240:	1ac9      	subs	r1, r1, r3
 800f242:	460b      	mov	r3, r1
 800f244:	009b      	lsls	r3, r3, #2
 800f246:	440b      	add	r3, r1
 800f248:	005b      	lsls	r3, r3, #1
 800f24a:	1ad3      	subs	r3, r2, r3
 800f24c:	60bb      	str	r3, [r7, #8]
	tftRamWrite(smallNumList[x].p, smallNumList[x].length);
 800f24e:	4a49      	ldr	r2, [pc, #292]	; (800f374 <detectSetPageInfoDisFunc+0x328>)
 800f250:	68bb      	ldr	r3, [r7, #8]
 800f252:	00db      	lsls	r3, r3, #3
 800f254:	4413      	add	r3, r2
 800f256:	6858      	ldr	r0, [r3, #4]
 800f258:	4a46      	ldr	r2, [pc, #280]	; (800f374 <detectSetPageInfoDisFunc+0x328>)
 800f25a:	68bb      	ldr	r3, [r7, #8]
 800f25c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f260:	4619      	mov	r1, r3
 800f262:	f001 fe58 	bl	8010f16 <tftRamWrite>
	x = deviceOwnInfo.measureRange/10%10;
 800f266:	4b41      	ldr	r3, [pc, #260]	; (800f36c <detectSetPageInfoDisFunc+0x320>)
 800f268:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f26a:	4a41      	ldr	r2, [pc, #260]	; (800f370 <detectSetPageInfoDisFunc+0x324>)
 800f26c:	fb82 1203 	smull	r1, r2, r2, r3
 800f270:	1092      	asrs	r2, r2, #2
 800f272:	17db      	asrs	r3, r3, #31
 800f274:	1ad2      	subs	r2, r2, r3
 800f276:	4b3e      	ldr	r3, [pc, #248]	; (800f370 <detectSetPageInfoDisFunc+0x324>)
 800f278:	fb83 1302 	smull	r1, r3, r3, r2
 800f27c:	1099      	asrs	r1, r3, #2
 800f27e:	17d3      	asrs	r3, r2, #31
 800f280:	1ac9      	subs	r1, r1, r3
 800f282:	460b      	mov	r3, r1
 800f284:	009b      	lsls	r3, r3, #2
 800f286:	440b      	add	r3, r1
 800f288:	005b      	lsls	r3, r3, #1
 800f28a:	1ad3      	subs	r3, r2, r3
 800f28c:	60bb      	str	r3, [r7, #8]
	tftRamWrite(smallNumList[x].p, smallNumList[x].length);
 800f28e:	4a39      	ldr	r2, [pc, #228]	; (800f374 <detectSetPageInfoDisFunc+0x328>)
 800f290:	68bb      	ldr	r3, [r7, #8]
 800f292:	00db      	lsls	r3, r3, #3
 800f294:	4413      	add	r3, r2
 800f296:	6858      	ldr	r0, [r3, #4]
 800f298:	4a36      	ldr	r2, [pc, #216]	; (800f374 <detectSetPageInfoDisFunc+0x328>)
 800f29a:	68bb      	ldr	r3, [r7, #8]
 800f29c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f2a0:	4619      	mov	r1, r3
 800f2a2:	f001 fe38 	bl	8010f16 <tftRamWrite>
	x = deviceOwnInfo.measureRange%10;
 800f2a6:	4b31      	ldr	r3, [pc, #196]	; (800f36c <detectSetPageInfoDisFunc+0x320>)
 800f2a8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800f2aa:	4b31      	ldr	r3, [pc, #196]	; (800f370 <detectSetPageInfoDisFunc+0x324>)
 800f2ac:	fb83 1302 	smull	r1, r3, r3, r2
 800f2b0:	1099      	asrs	r1, r3, #2
 800f2b2:	17d3      	asrs	r3, r2, #31
 800f2b4:	1ac9      	subs	r1, r1, r3
 800f2b6:	460b      	mov	r3, r1
 800f2b8:	009b      	lsls	r3, r3, #2
 800f2ba:	440b      	add	r3, r1
 800f2bc:	005b      	lsls	r3, r3, #1
 800f2be:	1ad3      	subs	r3, r2, r3
 800f2c0:	60bb      	str	r3, [r7, #8]
	tftRamWrite(smallNumList[x].p, smallNumList[x].length);
 800f2c2:	4a2c      	ldr	r2, [pc, #176]	; (800f374 <detectSetPageInfoDisFunc+0x328>)
 800f2c4:	68bb      	ldr	r3, [r7, #8]
 800f2c6:	00db      	lsls	r3, r3, #3
 800f2c8:	4413      	add	r3, r2
 800f2ca:	6858      	ldr	r0, [r3, #4]
 800f2cc:	4a29      	ldr	r2, [pc, #164]	; (800f374 <detectSetPageInfoDisFunc+0x328>)
 800f2ce:	68bb      	ldr	r3, [r7, #8]
 800f2d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f2d4:	4619      	mov	r1, r3
 800f2d6:	f001 fe1e 	bl	8010f16 <tftRamWrite>

	tftSetWin(178, 124, 1, 52);
 800f2da:	2334      	movs	r3, #52	; 0x34
 800f2dc:	2201      	movs	r2, #1
 800f2de:	217c      	movs	r1, #124	; 0x7c
 800f2e0:	20b2      	movs	r0, #178	; 0xb2
 800f2e2:	f001 feb1 	bl	8011048 <tftSetWin>
	tftRamColorFill(0x2945, 52);
 800f2e6:	2134      	movs	r1, #52	; 0x34
 800f2e8:	f642 1045 	movw	r0, #10565	; 0x2945
 800f2ec:	f001 fdf8 	bl	8010ee0 <tftRamColorFill>
	tftSetWin(126, 156, 1, 16);
 800f2f0:	2310      	movs	r3, #16
 800f2f2:	2201      	movs	r2, #1
 800f2f4:	219c      	movs	r1, #156	; 0x9c
 800f2f6:	207e      	movs	r0, #126	; 0x7e
 800f2f8:	f001 fea6 	bl	8011048 <tftSetWin>
	tftRamColorFill(0x2945, 16);
 800f2fc:	2110      	movs	r1, #16
 800f2fe:	f642 1045 	movw	r0, #10565	; 0x2945
 800f302:	f001 fded 	bl	8010ee0 <tftRamColorFill>
	tftSetWin(75, 156, 1, 16);
 800f306:	2310      	movs	r3, #16
 800f308:	2201      	movs	r2, #1
 800f30a:	219c      	movs	r1, #156	; 0x9c
 800f30c:	204b      	movs	r0, #75	; 0x4b
 800f30e:	f001 fe9b 	bl	8011048 <tftSetWin>
	tftRamColorFill(0x2945, 16);
 800f312:	2110      	movs	r1, #16
 800f314:	f642 1045 	movw	r0, #10565	; 0x2945
 800f318:	f001 fde2 	bl	8010ee0 <tftRamColorFill>
	if(cursorDisSwitch){
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d03c      	beq.n	800f39c <detectSetPageInfoDisFunc+0x350>
		switch(pageInfoList[5].arrowInfo){
 800f322:	4b17      	ldr	r3, [pc, #92]	; (800f380 <detectSetPageInfoDisFunc+0x334>)
 800f324:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 800f328:	2b02      	cmp	r3, #2
 800f32a:	d010      	beq.n	800f34e <detectSetPageInfoDisFunc+0x302>
 800f32c:	2b03      	cmp	r3, #3
 800f32e:	d029      	beq.n	800f384 <detectSetPageInfoDisFunc+0x338>
 800f330:	2b01      	cmp	r3, #1
 800f332:	d000      	beq.n	800f336 <detectSetPageInfoDisFunc+0x2ea>
			case 2: tftSetWin(126, 156, 1, 16);tftRamColorFill(0xffff, 16); break;
			case 3: tftSetWin(76, 156, 1, 16);tftRamColorFill(0xffff, 16); break;
		}
	}

}
 800f334:	e032      	b.n	800f39c <detectSetPageInfoDisFunc+0x350>
			case 1: tftSetWin(178, 124, 1, 52);tftRamColorFill(0xffff, 52); break;
 800f336:	2334      	movs	r3, #52	; 0x34
 800f338:	2201      	movs	r2, #1
 800f33a:	217c      	movs	r1, #124	; 0x7c
 800f33c:	20b2      	movs	r0, #178	; 0xb2
 800f33e:	f001 fe83 	bl	8011048 <tftSetWin>
 800f342:	2134      	movs	r1, #52	; 0x34
 800f344:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800f348:	f001 fdca 	bl	8010ee0 <tftRamColorFill>
 800f34c:	e026      	b.n	800f39c <detectSetPageInfoDisFunc+0x350>
			case 2: tftSetWin(126, 156, 1, 16);tftRamColorFill(0xffff, 16); break;
 800f34e:	2310      	movs	r3, #16
 800f350:	2201      	movs	r2, #1
 800f352:	219c      	movs	r1, #156	; 0x9c
 800f354:	207e      	movs	r0, #126	; 0x7e
 800f356:	f001 fe77 	bl	8011048 <tftSetWin>
 800f35a:	2110      	movs	r1, #16
 800f35c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800f360:	f001 fdbe 	bl	8010ee0 <tftRamColorFill>
 800f364:	e01a      	b.n	800f39c <detectSetPageInfoDisFunc+0x350>
 800f366:	bf00      	nop
 800f368:	20000040 	.word	0x20000040
 800f36c:	2000017c 	.word	0x2000017c
 800f370:	66666667 	.word	0x66666667
 800f374:	08018dc0 	.word	0x08018dc0
 800f378:	10624dd3 	.word	0x10624dd3
 800f37c:	51eb851f 	.word	0x51eb851f
 800f380:	20000200 	.word	0x20000200
			case 3: tftSetWin(76, 156, 1, 16);tftRamColorFill(0xffff, 16); break;
 800f384:	2310      	movs	r3, #16
 800f386:	2201      	movs	r2, #1
 800f388:	219c      	movs	r1, #156	; 0x9c
 800f38a:	204c      	movs	r0, #76	; 0x4c
 800f38c:	f001 fe5c 	bl	8011048 <tftSetWin>
 800f390:	2110      	movs	r1, #16
 800f392:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800f396:	f001 fda3 	bl	8010ee0 <tftRamColorFill>
 800f39a:	bf00      	nop
}
 800f39c:	bf00      	nop
 800f39e:	3710      	adds	r7, #16
 800f3a0:	46bd      	mov	sp, r7
 800f3a2:	bd80      	pop	{r7, pc}

0800f3a4 <firstPagebaseInfoDisFunc>:

void firstPagebaseInfoDisFunc(void * p){
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b082      	sub	sp, #8
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	6078      	str	r0, [r7, #4]
	//显示定位图标
	tftSetWin(0, 0, 21, 16);
 800f3ac:	2310      	movs	r3, #16
 800f3ae:	2215      	movs	r2, #21
 800f3b0:	2100      	movs	r1, #0
 800f3b2:	2000      	movs	r0, #0
 800f3b4:	f001 fe48 	bl	8011048 <tftSetWin>
	tftRamWrite(gImage_locationMesg, sizeof(gImage_locationMesg));
 800f3b8:	f44f 7128 	mov.w	r1, #672	; 0x2a0
 800f3bc:	4803      	ldr	r0, [pc, #12]	; (800f3cc <firstPagebaseInfoDisFunc+0x28>)
 800f3be:	f001 fdaa 	bl	8010f16 <tftRamWrite>
}
 800f3c2:	bf00      	nop
 800f3c4:	3708      	adds	r7, #8
 800f3c6:	46bd      	mov	sp, r7
 800f3c8:	bd80      	pop	{r7, pc}
 800f3ca:	bf00      	nop
 800f3cc:	08019a60 	.word	0x08019a60

0800f3d0 <inputPassWordInfoDisFunc>:
		tftSetWin(220-24, (176/2)-24*2+10+24*i, 24, 24);
		tftRamWriteWord(word, 24*24);
	}
}

void inputPassWordInfoDisFunc(void * p){
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b084      	sub	sp, #16
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	6078      	str	r0, [r7, #4]
	tftSetWin(0, 0, 220, 176);
 800f3d8:	23b0      	movs	r3, #176	; 0xb0
 800f3da:	22dc      	movs	r2, #220	; 0xdc
 800f3dc:	2100      	movs	r1, #0
 800f3de:	2000      	movs	r0, #0
 800f3e0:	f001 fe32 	bl	8011048 <tftSetWin>
	tftRamWrite(passWordInputPage, 77440);
 800f3e4:	4912      	ldr	r1, [pc, #72]	; (800f430 <inputPassWordInfoDisFunc+0x60>)
 800f3e6:	4813      	ldr	r0, [pc, #76]	; (800f434 <inputPassWordInfoDisFunc+0x64>)
 800f3e8:	f001 fd95 	bl	8010f16 <tftRamWrite>
	for(int i = 0; i < myStack.curLoc; i++)
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	60fb      	str	r3, [r7, #12]
 800f3f0:	e015      	b.n	800f41e <inputPassWordInfoDisFunc+0x4e>
	{
		tftSetWin(143, 29+36*i, 11, 12);
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	b2db      	uxtb	r3, r3
 800f3f6:	461a      	mov	r2, r3
 800f3f8:	00d2      	lsls	r2, r2, #3
 800f3fa:	4413      	add	r3, r2
 800f3fc:	009b      	lsls	r3, r3, #2
 800f3fe:	b2db      	uxtb	r3, r3
 800f400:	331d      	adds	r3, #29
 800f402:	b2d9      	uxtb	r1, r3
 800f404:	230c      	movs	r3, #12
 800f406:	220b      	movs	r2, #11
 800f408:	208f      	movs	r0, #143	; 0x8f
 800f40a:	f001 fe1d 	bl	8011048 <tftSetWin>
		tftRamWrite(passwordWord, sizeof(passwordWord));
 800f40e:	f44f 7184 	mov.w	r1, #264	; 0x108
 800f412:	4809      	ldr	r0, [pc, #36]	; (800f438 <inputPassWordInfoDisFunc+0x68>)
 800f414:	f001 fd7f 	bl	8010f16 <tftRamWrite>
	for(int i = 0; i < myStack.curLoc; i++)
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	3301      	adds	r3, #1
 800f41c:	60fb      	str	r3, [r7, #12]
 800f41e:	4b07      	ldr	r3, [pc, #28]	; (800f43c <inputPassWordInfoDisFunc+0x6c>)
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	68fa      	ldr	r2, [r7, #12]
 800f424:	429a      	cmp	r2, r3
 800f426:	dbe4      	blt.n	800f3f2 <inputPassWordInfoDisFunc+0x22>
	}
}
 800f428:	bf00      	nop
 800f42a:	3710      	adds	r7, #16
 800f42c:	46bd      	mov	sp, r7
 800f42e:	bd80      	pop	{r7, pc}
 800f430:	00012e80 	.word	0x00012e80
 800f434:	08043540 	.word	0x08043540
 800f438:	080563c0 	.word	0x080563c0
 800f43c:	200072c4 	.word	0x200072c4

0800f440 <demarcateBaseDisFunc>:


void demarcateBaseDisFunc(void * p){
 800f440:	b580      	push	{r7, lr}
 800f442:	b084      	sub	sp, #16
 800f444:	af00      	add	r7, sp, #0
 800f446:	6078      	str	r0, [r7, #4]
	int k = *(char *)p;
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	781b      	ldrb	r3, [r3, #0]
 800f44c:	60fb      	str	r3, [r7, #12]
	tftSetWin(178, 23, 14, 57);//零点标定
 800f44e:	2339      	movs	r3, #57	; 0x39
 800f450:	220e      	movs	r2, #14
 800f452:	2117      	movs	r1, #23
 800f454:	20b2      	movs	r0, #178	; 0xb2
 800f456:	f001 fdf7 	bl	8011048 <tftSetWin>
	tftRamWrite(demarcatePage[0].p, demarcatePage[0].length);
 800f45a:	4b3b      	ldr	r3, [pc, #236]	; (800f548 <demarcateBaseDisFunc+0x108>)
 800f45c:	685a      	ldr	r2, [r3, #4]
 800f45e:	4b3a      	ldr	r3, [pc, #232]	; (800f548 <demarcateBaseDisFunc+0x108>)
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	4619      	mov	r1, r3
 800f464:	4610      	mov	r0, r2
 800f466:	f001 fd56 	bl	8010f16 <tftRamWrite>
	tftSetWin(127, 23, 14, 77);//跨度值标定
 800f46a:	234d      	movs	r3, #77	; 0x4d
 800f46c:	220e      	movs	r2, #14
 800f46e:	2117      	movs	r1, #23
 800f470:	207f      	movs	r0, #127	; 0x7f
 800f472:	f001 fde9 	bl	8011048 <tftSetWin>
	tftRamWrite(demarcatePage[1].p, demarcatePage[1].length);
 800f476:	4b34      	ldr	r3, [pc, #208]	; (800f548 <demarcateBaseDisFunc+0x108>)
 800f478:	68da      	ldr	r2, [r3, #12]
 800f47a:	4b33      	ldr	r3, [pc, #204]	; (800f548 <demarcateBaseDisFunc+0x108>)
 800f47c:	689b      	ldr	r3, [r3, #8]
 800f47e:	4619      	mov	r1, r3
 800f480:	4610      	mov	r0, r2
 800f482:	f001 fd48 	bl	8010f16 <tftRamWrite>
	tftSetWin(75, 23, 14, 86);//执行跨度值标定
 800f486:	2356      	movs	r3, #86	; 0x56
 800f488:	220e      	movs	r2, #14
 800f48a:	2117      	movs	r1, #23
 800f48c:	204b      	movs	r0, #75	; 0x4b
 800f48e:	f001 fddb 	bl	8011048 <tftSetWin>
	tftRamWrite(demarcatePage[2].p, demarcatePage[2].length);
 800f492:	4b2d      	ldr	r3, [pc, #180]	; (800f548 <demarcateBaseDisFunc+0x108>)
 800f494:	695a      	ldr	r2, [r3, #20]
 800f496:	4b2c      	ldr	r3, [pc, #176]	; (800f548 <demarcateBaseDisFunc+0x108>)
 800f498:	691b      	ldr	r3, [r3, #16]
 800f49a:	4619      	mov	r1, r3
 800f49c:	4610      	mov	r0, r2
 800f49e:	f001 fd3a 	bl	8010f16 <tftRamWrite>
	//detectSetValue.spanValue
	tftSetWin(128, 105, 11, 8*2);
 800f4a2:	2310      	movs	r3, #16
 800f4a4:	220b      	movs	r2, #11
 800f4a6:	2169      	movs	r1, #105	; 0x69
 800f4a8:	2080      	movs	r0, #128	; 0x80
 800f4aa:	f001 fdcd 	bl	8011048 <tftSetWin>
	int x = deviceOwnInfo.spanValue/10;
 800f4ae:	4b27      	ldr	r3, [pc, #156]	; (800f54c <demarcateBaseDisFunc+0x10c>)
 800f4b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f4b2:	4a27      	ldr	r2, [pc, #156]	; (800f550 <demarcateBaseDisFunc+0x110>)
 800f4b4:	fb82 1203 	smull	r1, r2, r2, r3
 800f4b8:	1092      	asrs	r2, r2, #2
 800f4ba:	17db      	asrs	r3, r3, #31
 800f4bc:	1ad3      	subs	r3, r2, r3
 800f4be:	60bb      	str	r3, [r7, #8]
	tftRamWrite(smallNumList[x].p, smallNumList[x].length);
 800f4c0:	4a24      	ldr	r2, [pc, #144]	; (800f554 <demarcateBaseDisFunc+0x114>)
 800f4c2:	68bb      	ldr	r3, [r7, #8]
 800f4c4:	00db      	lsls	r3, r3, #3
 800f4c6:	4413      	add	r3, r2
 800f4c8:	6858      	ldr	r0, [r3, #4]
 800f4ca:	4a22      	ldr	r2, [pc, #136]	; (800f554 <demarcateBaseDisFunc+0x114>)
 800f4cc:	68bb      	ldr	r3, [r7, #8]
 800f4ce:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f4d2:	4619      	mov	r1, r3
 800f4d4:	f001 fd1f 	bl	8010f16 <tftRamWrite>
	x = deviceOwnInfo.spanValue%10;
 800f4d8:	4b1c      	ldr	r3, [pc, #112]	; (800f54c <demarcateBaseDisFunc+0x10c>)
 800f4da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f4dc:	4b1c      	ldr	r3, [pc, #112]	; (800f550 <demarcateBaseDisFunc+0x110>)
 800f4de:	fb83 1302 	smull	r1, r3, r3, r2
 800f4e2:	1099      	asrs	r1, r3, #2
 800f4e4:	17d3      	asrs	r3, r2, #31
 800f4e6:	1ac9      	subs	r1, r1, r3
 800f4e8:	460b      	mov	r3, r1
 800f4ea:	009b      	lsls	r3, r3, #2
 800f4ec:	440b      	add	r3, r1
 800f4ee:	005b      	lsls	r3, r3, #1
 800f4f0:	1ad3      	subs	r3, r2, r3
 800f4f2:	60bb      	str	r3, [r7, #8]
	tftRamWrite(smallNumList[x].p, smallNumList[x].length);
 800f4f4:	4a17      	ldr	r2, [pc, #92]	; (800f554 <demarcateBaseDisFunc+0x114>)
 800f4f6:	68bb      	ldr	r3, [r7, #8]
 800f4f8:	00db      	lsls	r3, r3, #3
 800f4fa:	4413      	add	r3, r2
 800f4fc:	6858      	ldr	r0, [r3, #4]
 800f4fe:	4a15      	ldr	r2, [pc, #84]	; (800f554 <demarcateBaseDisFunc+0x114>)
 800f500:	68bb      	ldr	r3, [r7, #8]
 800f502:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f506:	4619      	mov	r1, r3
 800f508:	f001 fd05 	bl	8010f16 <tftRamWrite>
	if(k == 1){
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	2b01      	cmp	r3, #1
 800f510:	d10b      	bne.n	800f52a <demarcateBaseDisFunc+0xea>
		tftSetWin(127, 105, 1, 8*2);
 800f512:	2310      	movs	r3, #16
 800f514:	2201      	movs	r2, #1
 800f516:	2169      	movs	r1, #105	; 0x69
 800f518:	207f      	movs	r0, #127	; 0x7f
 800f51a:	f001 fd95 	bl	8011048 <tftSetWin>
		tftRamColorFill(0xffff, 16);
 800f51e:	2110      	movs	r1, #16
 800f520:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800f524:	f001 fcdc 	bl	8010ee0 <tftRamColorFill>
	}
	else{
		tftSetWin(127, 105, 1, 8*2);
		tftRamColorFill(0x2945, 16);
	}
}
 800f528:	e00a      	b.n	800f540 <demarcateBaseDisFunc+0x100>
		tftSetWin(127, 105, 1, 8*2);
 800f52a:	2310      	movs	r3, #16
 800f52c:	2201      	movs	r2, #1
 800f52e:	2169      	movs	r1, #105	; 0x69
 800f530:	207f      	movs	r0, #127	; 0x7f
 800f532:	f001 fd89 	bl	8011048 <tftSetWin>
		tftRamColorFill(0x2945, 16);
 800f536:	2110      	movs	r1, #16
 800f538:	f642 1045 	movw	r0, #10565	; 0x2945
 800f53c:	f001 fcd0 	bl	8010ee0 <tftRamColorFill>
}
 800f540:	bf00      	nop
 800f542:	3710      	adds	r7, #16
 800f544:	46bd      	mov	sp, r7
 800f546:	bd80      	pop	{r7, pc}
 800f548:	20000060 	.word	0x20000060
 800f54c:	2000017c 	.word	0x2000017c
 800f550:	66666667 	.word	0x66666667
 800f554:	08018dc0 	.word	0x08018dc0

0800f558 <gb2313WordShow>:
uint8_t gb2312ChangeDis[] = {0xD0, 0xDE, 0xB8, 0xC4, 0xCF, 0xD4, 0xCA, 0xBE, 0xBE, 0xAB, 0xB6, 0xC8};
uint8_t gb2312ChangeManerger1[] ={0xB3, 0xC9, 0xCE, 0xAA, 0xD6, 0xF7, 0xBF, 0xD8, 0xD6, 0xC6, 0xC6, 0xF7};
uint8_t gb2312ChangeManerger0[] ={0xC8, 0xA1, 0xCF, 0xFB, 0xD6, 0xF7, 0xBF, 0xD8, 0xD6, 0xC6, 0xC6, 0xF7};
uint8_t gb2312SelfTest[] = {0xD7, 0xD4, 0xBC, 0xEC};

void gb2313WordShow(uint8_t * wordAddr, int length, int value1, int value2){
 800f558:	b580      	push	{r7, lr}
 800f55a:	b086      	sub	sp, #24
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	60f8      	str	r0, [r7, #12]
 800f560:	60b9      	str	r1, [r7, #8]
 800f562:	607a      	str	r2, [r7, #4]
 800f564:	603b      	str	r3, [r7, #0]

	for(int i = 0; i < length/2; i++){
 800f566:	2300      	movs	r3, #0
 800f568:	617b      	str	r3, [r7, #20]
 800f56a:	e020      	b.n	800f5ae <gb2313WordShow+0x56>
		uint16_t * word = (uint16_t *)getGB2312Word(1,1,&wordAddr[i*2],16);
 800f56c:	697b      	ldr	r3, [r7, #20]
 800f56e:	005b      	lsls	r3, r3, #1
 800f570:	461a      	mov	r2, r3
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	441a      	add	r2, r3
 800f576:	2310      	movs	r3, #16
 800f578:	2101      	movs	r1, #1
 800f57a:	2001      	movs	r0, #1
 800f57c:	f002 feba 	bl	80122f4 <getGB2312Word>
 800f580:	6138      	str	r0, [r7, #16]
		tftSetWin(value1, value2+16*i, 16, 16);
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	b2d8      	uxtb	r0, r3
 800f586:	697b      	ldr	r3, [r7, #20]
 800f588:	b2db      	uxtb	r3, r3
 800f58a:	011b      	lsls	r3, r3, #4
 800f58c:	b2da      	uxtb	r2, r3
 800f58e:	683b      	ldr	r3, [r7, #0]
 800f590:	b2db      	uxtb	r3, r3
 800f592:	4413      	add	r3, r2
 800f594:	b2d9      	uxtb	r1, r3
 800f596:	2310      	movs	r3, #16
 800f598:	2210      	movs	r2, #16
 800f59a:	f001 fd55 	bl	8011048 <tftSetWin>
		tftRamWriteWord(word, 16*16);
 800f59e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f5a2:	6938      	ldr	r0, [r7, #16]
 800f5a4:	f001 fcdf 	bl	8010f66 <tftRamWriteWord>
	for(int i = 0; i < length/2; i++){
 800f5a8:	697b      	ldr	r3, [r7, #20]
 800f5aa:	3301      	adds	r3, #1
 800f5ac:	617b      	str	r3, [r7, #20]
 800f5ae:	68bb      	ldr	r3, [r7, #8]
 800f5b0:	0fda      	lsrs	r2, r3, #31
 800f5b2:	4413      	add	r3, r2
 800f5b4:	105b      	asrs	r3, r3, #1
 800f5b6:	461a      	mov	r2, r3
 800f5b8:	697b      	ldr	r3, [r7, #20]
 800f5ba:	4293      	cmp	r3, r2
 800f5bc:	dbd6      	blt.n	800f56c <gb2313WordShow+0x14>
	}

}
 800f5be:	bf00      	nop
 800f5c0:	3718      	adds	r7, #24
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	bd80      	pop	{r7, pc}
	...

0800f5c8 <gb2313NumShow>:
void gb2313NumShow(int x, int value1, int value2){
 800f5c8:	b580      	push	{r7, lr}
 800f5ca:	b088      	sub	sp, #32
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	60f8      	str	r0, [r7, #12]
 800f5d0:	60b9      	str	r1, [r7, #8]
 800f5d2:	607a      	str	r2, [r7, #4]

	uint8_t num[8] = {0xA3,0xB0,0xA3,0xB0,0xA3,0xB0,0xA3,0xB0};
 800f5d4:	4a43      	ldr	r2, [pc, #268]	; (800f6e4 <gb2313NumShow+0x11c>)
 800f5d6:	f107 0310 	add.w	r3, r7, #16
 800f5da:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f5de:	e883 0003 	stmia.w	r3, {r0, r1}
	num[1] += x/1000%10;
 800f5e2:	7c78      	ldrb	r0, [r7, #17]
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	4a40      	ldr	r2, [pc, #256]	; (800f6e8 <gb2313NumShow+0x120>)
 800f5e8:	fb82 1203 	smull	r1, r2, r2, r3
 800f5ec:	1192      	asrs	r2, r2, #6
 800f5ee:	17db      	asrs	r3, r3, #31
 800f5f0:	1ad2      	subs	r2, r2, r3
 800f5f2:	4b3e      	ldr	r3, [pc, #248]	; (800f6ec <gb2313NumShow+0x124>)
 800f5f4:	fb83 1302 	smull	r1, r3, r3, r2
 800f5f8:	1099      	asrs	r1, r3, #2
 800f5fa:	17d3      	asrs	r3, r2, #31
 800f5fc:	1ac9      	subs	r1, r1, r3
 800f5fe:	460b      	mov	r3, r1
 800f600:	009b      	lsls	r3, r3, #2
 800f602:	440b      	add	r3, r1
 800f604:	005b      	lsls	r3, r3, #1
 800f606:	1ad1      	subs	r1, r2, r3
 800f608:	b2cb      	uxtb	r3, r1
 800f60a:	4403      	add	r3, r0
 800f60c:	b2db      	uxtb	r3, r3
 800f60e:	747b      	strb	r3, [r7, #17]
	num[3] += x/100%10;
 800f610:	7cf8      	ldrb	r0, [r7, #19]
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	4a36      	ldr	r2, [pc, #216]	; (800f6f0 <gb2313NumShow+0x128>)
 800f616:	fb82 1203 	smull	r1, r2, r2, r3
 800f61a:	1152      	asrs	r2, r2, #5
 800f61c:	17db      	asrs	r3, r3, #31
 800f61e:	1ad2      	subs	r2, r2, r3
 800f620:	4b32      	ldr	r3, [pc, #200]	; (800f6ec <gb2313NumShow+0x124>)
 800f622:	fb83 1302 	smull	r1, r3, r3, r2
 800f626:	1099      	asrs	r1, r3, #2
 800f628:	17d3      	asrs	r3, r2, #31
 800f62a:	1ac9      	subs	r1, r1, r3
 800f62c:	460b      	mov	r3, r1
 800f62e:	009b      	lsls	r3, r3, #2
 800f630:	440b      	add	r3, r1
 800f632:	005b      	lsls	r3, r3, #1
 800f634:	1ad1      	subs	r1, r2, r3
 800f636:	b2cb      	uxtb	r3, r1
 800f638:	4403      	add	r3, r0
 800f63a:	b2db      	uxtb	r3, r3
 800f63c:	74fb      	strb	r3, [r7, #19]
	num[5] += x/10%10;
 800f63e:	7d78      	ldrb	r0, [r7, #21]
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	4a2a      	ldr	r2, [pc, #168]	; (800f6ec <gb2313NumShow+0x124>)
 800f644:	fb82 1203 	smull	r1, r2, r2, r3
 800f648:	1092      	asrs	r2, r2, #2
 800f64a:	17db      	asrs	r3, r3, #31
 800f64c:	1ad2      	subs	r2, r2, r3
 800f64e:	4b27      	ldr	r3, [pc, #156]	; (800f6ec <gb2313NumShow+0x124>)
 800f650:	fb83 1302 	smull	r1, r3, r3, r2
 800f654:	1099      	asrs	r1, r3, #2
 800f656:	17d3      	asrs	r3, r2, #31
 800f658:	1ac9      	subs	r1, r1, r3
 800f65a:	460b      	mov	r3, r1
 800f65c:	009b      	lsls	r3, r3, #2
 800f65e:	440b      	add	r3, r1
 800f660:	005b      	lsls	r3, r3, #1
 800f662:	1ad1      	subs	r1, r2, r3
 800f664:	b2cb      	uxtb	r3, r1
 800f666:	4403      	add	r3, r0
 800f668:	b2db      	uxtb	r3, r3
 800f66a:	757b      	strb	r3, [r7, #21]
	num[7] += x%10;
 800f66c:	7df8      	ldrb	r0, [r7, #23]
 800f66e:	68fa      	ldr	r2, [r7, #12]
 800f670:	4b1e      	ldr	r3, [pc, #120]	; (800f6ec <gb2313NumShow+0x124>)
 800f672:	fb83 1302 	smull	r1, r3, r3, r2
 800f676:	1099      	asrs	r1, r3, #2
 800f678:	17d3      	asrs	r3, r2, #31
 800f67a:	1ac9      	subs	r1, r1, r3
 800f67c:	460b      	mov	r3, r1
 800f67e:	009b      	lsls	r3, r3, #2
 800f680:	440b      	add	r3, r1
 800f682:	005b      	lsls	r3, r3, #1
 800f684:	1ad1      	subs	r1, r2, r3
 800f686:	b2cb      	uxtb	r3, r1
 800f688:	4403      	add	r3, r0
 800f68a:	b2db      	uxtb	r3, r3
 800f68c:	75fb      	strb	r3, [r7, #23]

	for(int i = 0; i < 4; i++){
 800f68e:	2300      	movs	r3, #0
 800f690:	61fb      	str	r3, [r7, #28]
 800f692:	e020      	b.n	800f6d6 <gb2313NumShow+0x10e>
		uint16_t * word = (uint16_t *)getGB2312Word(1,1,&num[i*2],16);
 800f694:	69fb      	ldr	r3, [r7, #28]
 800f696:	005b      	lsls	r3, r3, #1
 800f698:	f107 0210 	add.w	r2, r7, #16
 800f69c:	441a      	add	r2, r3
 800f69e:	2310      	movs	r3, #16
 800f6a0:	2101      	movs	r1, #1
 800f6a2:	2001      	movs	r0, #1
 800f6a4:	f002 fe26 	bl	80122f4 <getGB2312Word>
 800f6a8:	61b8      	str	r0, [r7, #24]
		tftSetWin(value1, value2+16*i, 16, 16);
 800f6aa:	68bb      	ldr	r3, [r7, #8]
 800f6ac:	b2d8      	uxtb	r0, r3
 800f6ae:	69fb      	ldr	r3, [r7, #28]
 800f6b0:	b2db      	uxtb	r3, r3
 800f6b2:	011b      	lsls	r3, r3, #4
 800f6b4:	b2da      	uxtb	r2, r3
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	b2db      	uxtb	r3, r3
 800f6ba:	4413      	add	r3, r2
 800f6bc:	b2d9      	uxtb	r1, r3
 800f6be:	2310      	movs	r3, #16
 800f6c0:	2210      	movs	r2, #16
 800f6c2:	f001 fcc1 	bl	8011048 <tftSetWin>
		tftRamWriteWord(word, 16*16);
 800f6c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f6ca:	69b8      	ldr	r0, [r7, #24]
 800f6cc:	f001 fc4b 	bl	8010f66 <tftRamWriteWord>
	for(int i = 0; i < 4; i++){
 800f6d0:	69fb      	ldr	r3, [r7, #28]
 800f6d2:	3301      	adds	r3, #1
 800f6d4:	61fb      	str	r3, [r7, #28]
 800f6d6:	69fb      	ldr	r3, [r7, #28]
 800f6d8:	2b03      	cmp	r3, #3
 800f6da:	dddb      	ble.n	800f694 <gb2313NumShow+0xcc>
	}
}
 800f6dc:	bf00      	nop
 800f6de:	3720      	adds	r7, #32
 800f6e0:	46bd      	mov	sp, r7
 800f6e2:	bd80      	pop	{r7, pc}
 800f6e4:	08012fb8 	.word	0x08012fb8
 800f6e8:	10624dd3 	.word	0x10624dd3
 800f6ec:	66666667 	.word	0x66666667
 800f6f0:	51eb851f 	.word	0x51eb851f

0800f6f4 <warnReferBaseDisFunc>:
uint8_t gb2312BakPowerlow[] ={0xB1, 0xB8, 0xD3, 0xC3, 0xB5, 0xE7, 0xD4, 0xB4, 0xB5, 0xCD};

int warnReferPageNum;
int faultReferPageNum;
int oprateReferPageNum;
void warnReferBaseDisFunc(void * p){
 800f6f4:	b580      	push	{r7, lr}
 800f6f6:	b08a      	sub	sp, #40	; 0x28
 800f6f8:	af00      	add	r7, sp, #0
 800f6fa:	6078      	str	r0, [r7, #4]
	int u = *(int *)p;
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	617b      	str	r3, [r7, #20]

	if(warnReferPageNum != u){
 800f702:	4b74      	ldr	r3, [pc, #464]	; (800f8d4 <warnReferBaseDisFunc+0x1e0>)
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	697a      	ldr	r2, [r7, #20]
 800f708:	429a      	cmp	r2, r3
 800f70a:	d029      	beq.n	800f760 <warnReferBaseDisFunc+0x6c>
		if(fileGetLine("Warning.txt", u, &FileInfo)==-1){
 800f70c:	4a72      	ldr	r2, [pc, #456]	; (800f8d8 <warnReferBaseDisFunc+0x1e4>)
 800f70e:	6979      	ldr	r1, [r7, #20]
 800f710:	4872      	ldr	r0, [pc, #456]	; (800f8dc <warnReferBaseDisFunc+0x1e8>)
 800f712:	f001 fee9 	bl	80114e8 <fileGetLine>
 800f716:	4603      	mov	r3, r0
 800f718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f71c:	d10b      	bne.n	800f736 <warnReferBaseDisFunc+0x42>
			fileGetLine("Warning.txt", warnReferPageNum, &FileInfo);
 800f71e:	4b6d      	ldr	r3, [pc, #436]	; (800f8d4 <warnReferBaseDisFunc+0x1e0>)
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	4a6d      	ldr	r2, [pc, #436]	; (800f8d8 <warnReferBaseDisFunc+0x1e4>)
 800f724:	4619      	mov	r1, r3
 800f726:	486d      	ldr	r0, [pc, #436]	; (800f8dc <warnReferBaseDisFunc+0x1e8>)
 800f728:	f001 fede 	bl	80114e8 <fileGetLine>
			(*(int *)p) = warnReferPageNum;
 800f72c:	4b69      	ldr	r3, [pc, #420]	; (800f8d4 <warnReferBaseDisFunc+0x1e0>)
 800f72e:	681a      	ldr	r2, [r3, #0]
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	601a      	str	r2, [r3, #0]
 800f734:	e002      	b.n	800f73c <warnReferBaseDisFunc+0x48>
		}
		else
			warnReferPageNum = u;
 800f736:	4a67      	ldr	r2, [pc, #412]	; (800f8d4 <warnReferBaseDisFunc+0x1e0>)
 800f738:	697b      	ldr	r3, [r7, #20]
 800f73a:	6013      	str	r3, [r2, #0]
		lcdClean(0x2945);
 800f73c:	f642 1045 	movw	r0, #10565	; 0x2945
 800f740:	f001 fd18 	bl	8011174 <lcdClean>
		uint8_t headLine[] = {0xBE, 0xAF, 0xB8, 0xE6, 0xB2, 0xE9, 0xD1, 0xAF};
 800f744:	4a66      	ldr	r2, [pc, #408]	; (800f8e0 <warnReferBaseDisFunc+0x1ec>)
 800f746:	f107 030c 	add.w	r3, r7, #12
 800f74a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f74e:	e883 0003 	stmia.w	r3, {r0, r1}
		gb2313WordShow(headLine, sizeof(headLine), 220-20, 60);
 800f752:	f107 000c 	add.w	r0, r7, #12
 800f756:	233c      	movs	r3, #60	; 0x3c
 800f758:	22c8      	movs	r2, #200	; 0xc8
 800f75a:	2108      	movs	r1, #8
 800f75c:	f7ff fefc 	bl	800f558 <gb2313WordShow>
	}

	tftSetWin(198, 6, 1, 164);
 800f760:	23a4      	movs	r3, #164	; 0xa4
 800f762:	2201      	movs	r2, #1
 800f764:	2106      	movs	r1, #6
 800f766:	20c6      	movs	r0, #198	; 0xc6
 800f768:	f001 fc6e 	bl	8011048 <tftSetWin>
	tftRamWrite(segmentationSymbols, sizeof(segmentationSymbols));
 800f76c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800f770:	485c      	ldr	r0, [pc, #368]	; (800f8e4 <warnReferBaseDisFunc+0x1f0>)
 800f772:	f001 fbd0 	bl	8010f16 <tftRamWrite>

	tftSetWin(170-24-2, 6, 1, 164);
 800f776:	23a4      	movs	r3, #164	; 0xa4
 800f778:	2201      	movs	r2, #1
 800f77a:	2106      	movs	r1, #6
 800f77c:	2090      	movs	r0, #144	; 0x90
 800f77e:	f001 fc63 	bl	8011048 <tftSetWin>
	tftRamWrite(segmentationSymbols, sizeof(segmentationSymbols));
 800f782:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800f786:	4857      	ldr	r0, [pc, #348]	; (800f8e4 <warnReferBaseDisFunc+0x1f0>)
 800f788:	f001 fbc5 	bl	8010f16 <tftRamWrite>



	if(FileInfo.time[0] != 0){
 800f78c:	4b52      	ldr	r3, [pc, #328]	; (800f8d8 <warnReferBaseDisFunc+0x1e4>)
 800f78e:	781b      	ldrb	r3, [r3, #0]
 800f790:	2b00      	cmp	r3, #0
 800f792:	f000 809b 	beq.w	800f8cc <warnReferBaseDisFunc+0x1d8>
		tftSetWin(170, 10, 11, 10*10);
 800f796:	2364      	movs	r3, #100	; 0x64
 800f798:	220b      	movs	r2, #11
 800f79a:	210a      	movs	r1, #10
 800f79c:	20aa      	movs	r0, #170	; 0xaa
 800f79e:	f001 fc53 	bl	8011048 <tftSetWin>
		for(int i = 0,j = 0; i < 10; i++){
 800f7a2:	2300      	movs	r3, #0
 800f7a4:	627b      	str	r3, [r7, #36]	; 0x24
 800f7a6:	2300      	movs	r3, #0
 800f7a8:	623b      	str	r3, [r7, #32]
 800f7aa:	e023      	b.n	800f7f4 <warnReferBaseDisFunc+0x100>
			if(i == 4||i == 7)
 800f7ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7ae:	2b04      	cmp	r3, #4
 800f7b0:	d002      	beq.n	800f7b8 <warnReferBaseDisFunc+0xc4>
 800f7b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7b4:	2b07      	cmp	r3, #7
 800f7b6:	d108      	bne.n	800f7ca <warnReferBaseDisFunc+0xd6>
				tftRamWrite(smallNumList[10].p, smallNumList[0].length);
 800f7b8:	4b4b      	ldr	r3, [pc, #300]	; (800f8e8 <warnReferBaseDisFunc+0x1f4>)
 800f7ba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f7bc:	4b4a      	ldr	r3, [pc, #296]	; (800f8e8 <warnReferBaseDisFunc+0x1f4>)
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	4619      	mov	r1, r3
 800f7c2:	4610      	mov	r0, r2
 800f7c4:	f001 fba7 	bl	8010f16 <tftRamWrite>
 800f7c8:	e011      	b.n	800f7ee <warnReferBaseDisFunc+0xfa>
			else{
				tftRamWrite(smallNumList[FileInfo.time[j]-0x30].p, smallNumList[0].length);
 800f7ca:	4a43      	ldr	r2, [pc, #268]	; (800f8d8 <warnReferBaseDisFunc+0x1e4>)
 800f7cc:	6a3b      	ldr	r3, [r7, #32]
 800f7ce:	4413      	add	r3, r2
 800f7d0:	781b      	ldrb	r3, [r3, #0]
 800f7d2:	3b30      	subs	r3, #48	; 0x30
 800f7d4:	4a44      	ldr	r2, [pc, #272]	; (800f8e8 <warnReferBaseDisFunc+0x1f4>)
 800f7d6:	00db      	lsls	r3, r3, #3
 800f7d8:	4413      	add	r3, r2
 800f7da:	685a      	ldr	r2, [r3, #4]
 800f7dc:	4b42      	ldr	r3, [pc, #264]	; (800f8e8 <warnReferBaseDisFunc+0x1f4>)
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	4619      	mov	r1, r3
 800f7e2:	4610      	mov	r0, r2
 800f7e4:	f001 fb97 	bl	8010f16 <tftRamWrite>
				j++;
 800f7e8:	6a3b      	ldr	r3, [r7, #32]
 800f7ea:	3301      	adds	r3, #1
 800f7ec:	623b      	str	r3, [r7, #32]
		for(int i = 0,j = 0; i < 10; i++){
 800f7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7f0:	3301      	adds	r3, #1
 800f7f2:	627b      	str	r3, [r7, #36]	; 0x24
 800f7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7f6:	2b09      	cmp	r3, #9
 800f7f8:	ddd8      	ble.n	800f7ac <warnReferBaseDisFunc+0xb8>
			}
		}
		tftSetWin(170-24, 10, 11, 10*10);
 800f7fa:	2364      	movs	r3, #100	; 0x64
 800f7fc:	220b      	movs	r2, #11
 800f7fe:	210a      	movs	r1, #10
 800f800:	2092      	movs	r0, #146	; 0x92
 800f802:	f001 fc21 	bl	8011048 <tftSetWin>
		for(int i = 0,j = 0; i < 5; i++){
 800f806:	2300      	movs	r3, #0
 800f808:	61fb      	str	r3, [r7, #28]
 800f80a:	2300      	movs	r3, #0
 800f80c:	61bb      	str	r3, [r7, #24]
 800f80e:	e020      	b.n	800f852 <warnReferBaseDisFunc+0x15e>
			if(i == 2)
 800f810:	69fb      	ldr	r3, [r7, #28]
 800f812:	2b02      	cmp	r3, #2
 800f814:	d108      	bne.n	800f828 <warnReferBaseDisFunc+0x134>
				tftRamWrite(smallNumList[10].p, smallNumList[0].length);
 800f816:	4b34      	ldr	r3, [pc, #208]	; (800f8e8 <warnReferBaseDisFunc+0x1f4>)
 800f818:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f81a:	4b33      	ldr	r3, [pc, #204]	; (800f8e8 <warnReferBaseDisFunc+0x1f4>)
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	4619      	mov	r1, r3
 800f820:	4610      	mov	r0, r2
 800f822:	f001 fb78 	bl	8010f16 <tftRamWrite>
 800f826:	e011      	b.n	800f84c <warnReferBaseDisFunc+0x158>
			else{
				tftRamWrite(smallNumList[FileInfo.time[j+8]-0x30].p, smallNumList[0].length);
 800f828:	69bb      	ldr	r3, [r7, #24]
 800f82a:	3308      	adds	r3, #8
 800f82c:	4a2a      	ldr	r2, [pc, #168]	; (800f8d8 <warnReferBaseDisFunc+0x1e4>)
 800f82e:	5cd3      	ldrb	r3, [r2, r3]
 800f830:	3b30      	subs	r3, #48	; 0x30
 800f832:	4a2d      	ldr	r2, [pc, #180]	; (800f8e8 <warnReferBaseDisFunc+0x1f4>)
 800f834:	00db      	lsls	r3, r3, #3
 800f836:	4413      	add	r3, r2
 800f838:	685a      	ldr	r2, [r3, #4]
 800f83a:	4b2b      	ldr	r3, [pc, #172]	; (800f8e8 <warnReferBaseDisFunc+0x1f4>)
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	4619      	mov	r1, r3
 800f840:	4610      	mov	r0, r2
 800f842:	f001 fb68 	bl	8010f16 <tftRamWrite>
				j++;
 800f846:	69bb      	ldr	r3, [r7, #24]
 800f848:	3301      	adds	r3, #1
 800f84a:	61bb      	str	r3, [r7, #24]
		for(int i = 0,j = 0; i < 5; i++){
 800f84c:	69fb      	ldr	r3, [r7, #28]
 800f84e:	3301      	adds	r3, #1
 800f850:	61fb      	str	r3, [r7, #28]
 800f852:	69fb      	ldr	r3, [r7, #28]
 800f854:	2b04      	cmp	r3, #4
 800f856:	dddb      	ble.n	800f810 <warnReferBaseDisFunc+0x11c>
			}
		}
		switch(FileInfo.operationFunc){
 800f858:	4b1f      	ldr	r3, [pc, #124]	; (800f8d8 <warnReferBaseDisFunc+0x1e4>)
 800f85a:	7b1b      	ldrb	r3, [r3, #12]
 800f85c:	2b03      	cmp	r3, #3
 800f85e:	d835      	bhi.n	800f8cc <warnReferBaseDisFunc+0x1d8>
 800f860:	a201      	add	r2, pc, #4	; (adr r2, 800f868 <warnReferBaseDisFunc+0x174>)
 800f862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f866:	bf00      	nop
 800f868:	0800f879 	.word	0x0800f879
 800f86c:	0800f895 	.word	0x0800f895
 800f870:	0800f8b1 	.word	0x0800f8b1
 800f874:	0800f8bf 	.word	0x0800f8bf
		case highWarnRecordValue:
			gb2313WordShow(gb2312HighWarn,sizeof(gb2312HighWarn), 110-24, 10);
 800f878:	230a      	movs	r3, #10
 800f87a:	2256      	movs	r2, #86	; 0x56
 800f87c:	2106      	movs	r1, #6
 800f87e:	481b      	ldr	r0, [pc, #108]	; (800f8ec <warnReferBaseDisFunc+0x1f8>)
 800f880:	f7ff fe6a 	bl	800f558 <gb2313WordShow>
			gb2313NumShow(FileInfo.operationValue, 110-48, 10);
 800f884:	4b14      	ldr	r3, [pc, #80]	; (800f8d8 <warnReferBaseDisFunc+0x1e4>)
 800f886:	691b      	ldr	r3, [r3, #16]
 800f888:	220a      	movs	r2, #10
 800f88a:	213e      	movs	r1, #62	; 0x3e
 800f88c:	4618      	mov	r0, r3
 800f88e:	f7ff fe9b 	bl	800f5c8 <gb2313NumShow>
			break;
 800f892:	e01b      	b.n	800f8cc <warnReferBaseDisFunc+0x1d8>
		case lowWarnRecordValue:
			gb2313WordShow(gb2312LowWarn,sizeof(gb2312LowWarn), 110-24, 10);
 800f894:	230a      	movs	r3, #10
 800f896:	2256      	movs	r2, #86	; 0x56
 800f898:	2106      	movs	r1, #6
 800f89a:	4815      	ldr	r0, [pc, #84]	; (800f8f0 <warnReferBaseDisFunc+0x1fc>)
 800f89c:	f7ff fe5c 	bl	800f558 <gb2313WordShow>
			gb2313NumShow(FileInfo.operationValue, 110-48, 10);
 800f8a0:	4b0d      	ldr	r3, [pc, #52]	; (800f8d8 <warnReferBaseDisFunc+0x1e4>)
 800f8a2:	691b      	ldr	r3, [r3, #16]
 800f8a4:	220a      	movs	r2, #10
 800f8a6:	213e      	movs	r1, #62	; 0x3e
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	f7ff fe8d 	bl	800f5c8 <gb2313NumShow>
			break;
 800f8ae:	e00d      	b.n	800f8cc <warnReferBaseDisFunc+0x1d8>
		case MainPowerlowRecordValue:
			gb2313WordShow(gb2312MainPowerlow,sizeof(gb2312MainPowerlow), 110-24, 10);
 800f8b0:	230a      	movs	r3, #10
 800f8b2:	2256      	movs	r2, #86	; 0x56
 800f8b4:	2108      	movs	r1, #8
 800f8b6:	480f      	ldr	r0, [pc, #60]	; (800f8f4 <warnReferBaseDisFunc+0x200>)
 800f8b8:	f7ff fe4e 	bl	800f558 <gb2313WordShow>
			break;
 800f8bc:	e006      	b.n	800f8cc <warnReferBaseDisFunc+0x1d8>
		case BakPowerlowRecordValue:
			gb2313WordShow(gb2312BakPowerlow,sizeof(gb2312BakPowerlow), 110-24, 10);
 800f8be:	230a      	movs	r3, #10
 800f8c0:	2256      	movs	r2, #86	; 0x56
 800f8c2:	210a      	movs	r1, #10
 800f8c4:	480c      	ldr	r0, [pc, #48]	; (800f8f8 <warnReferBaseDisFunc+0x204>)
 800f8c6:	f7ff fe47 	bl	800f558 <gb2313WordShow>
			break;
 800f8ca:	bf00      	nop
		}
	}
}
 800f8cc:	bf00      	nop
 800f8ce:	3728      	adds	r7, #40	; 0x28
 800f8d0:	46bd      	mov	sp, r7
 800f8d2:	bd80      	pop	{r7, pc}
 800f8d4:	2000731c 	.word	0x2000731c
 800f8d8:	200072cc 	.word	0x200072cc
 800f8dc:	08012fc0 	.word	0x08012fc0
 800f8e0:	08012fcc 	.word	0x08012fcc
 800f8e4:	0806de74 	.word	0x0806de74
 800f8e8:	08018dc0 	.word	0x08018dc0
 800f8ec:	20000120 	.word	0x20000120
 800f8f0:	20000128 	.word	0x20000128
 800f8f4:	20000130 	.word	0x20000130
 800f8f8:	20000138 	.word	0x20000138

0800f8fc <faultBaseDisFunc>:
uint8_t gb2312SensorFault[] = {0xB4, 0xAB, 0xB8, 0xD0, 0xC6, 0xF7, 0xB9, 0xCA, 0xD5, 0xCF};
uint8_t gb2312Disconnect[] = {0xC1, 0xAC, 0xBD, 0xD3, 0xD6, 0xD0, 0xB6, 0xCF};
uint8_t gb2312NoDemarcate[] = {0xB4, 0xAB, 0xB8, 0xD0, 0xC6, 0xF7, 0xCE, 0xB4, 0xB1, 0xEA, 0xB6, 0xA8};
uint8_t gb2312MainPowerFault[] = {0xD6, 0xF7, 0xB5, 0xE7, 0xD4, 0xB4, 0xB9, 0xCA, 0xD5, 0xCF};
uint8_t gb2312BakPowerFault[] = {0xB8, 0xB1, 0xB5, 0xE7, 0xD4, 0xB4, 0xB9, 0xCA, 0xD5, 0xCF};
void faultBaseDisFunc(void * p){
 800f8fc:	b580      	push	{r7, lr}
 800f8fe:	b08a      	sub	sp, #40	; 0x28
 800f900:	af00      	add	r7, sp, #0
 800f902:	6078      	str	r0, [r7, #4]
	int u = *(int *)p;
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	617b      	str	r3, [r7, #20]

	if(faultReferPageNum != u){
 800f90a:	4b65      	ldr	r3, [pc, #404]	; (800faa0 <faultBaseDisFunc+0x1a4>)
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	697a      	ldr	r2, [r7, #20]
 800f910:	429a      	cmp	r2, r3
 800f912:	d029      	beq.n	800f968 <faultBaseDisFunc+0x6c>
		if(fileGetLine("Fault.txt", u, &FileInfo)==-1){
 800f914:	4a63      	ldr	r2, [pc, #396]	; (800faa4 <faultBaseDisFunc+0x1a8>)
 800f916:	6979      	ldr	r1, [r7, #20]
 800f918:	4863      	ldr	r0, [pc, #396]	; (800faa8 <faultBaseDisFunc+0x1ac>)
 800f91a:	f001 fde5 	bl	80114e8 <fileGetLine>
 800f91e:	4603      	mov	r3, r0
 800f920:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f924:	d10b      	bne.n	800f93e <faultBaseDisFunc+0x42>
			fileGetLine("Fault.txt", faultReferPageNum, &FileInfo);
 800f926:	4b5e      	ldr	r3, [pc, #376]	; (800faa0 <faultBaseDisFunc+0x1a4>)
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	4a5e      	ldr	r2, [pc, #376]	; (800faa4 <faultBaseDisFunc+0x1a8>)
 800f92c:	4619      	mov	r1, r3
 800f92e:	485e      	ldr	r0, [pc, #376]	; (800faa8 <faultBaseDisFunc+0x1ac>)
 800f930:	f001 fdda 	bl	80114e8 <fileGetLine>
			*(int *)p = faultReferPageNum;
 800f934:	4b5a      	ldr	r3, [pc, #360]	; (800faa0 <faultBaseDisFunc+0x1a4>)
 800f936:	681a      	ldr	r2, [r3, #0]
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	601a      	str	r2, [r3, #0]
 800f93c:	e002      	b.n	800f944 <faultBaseDisFunc+0x48>
		}
		else
			faultReferPageNum = u;
 800f93e:	4a58      	ldr	r2, [pc, #352]	; (800faa0 <faultBaseDisFunc+0x1a4>)
 800f940:	697b      	ldr	r3, [r7, #20]
 800f942:	6013      	str	r3, [r2, #0]
		lcdClean(0x2945);
 800f944:	f642 1045 	movw	r0, #10565	; 0x2945
 800f948:	f001 fc14 	bl	8011174 <lcdClean>
		uint8_t headLine[] = {0xB9, 0xCA, 0xD5, 0xCF, 0xB2, 0xE9, 0xD1, 0xAF};
 800f94c:	4a57      	ldr	r2, [pc, #348]	; (800faac <faultBaseDisFunc+0x1b0>)
 800f94e:	f107 030c 	add.w	r3, r7, #12
 800f952:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f956:	e883 0003 	stmia.w	r3, {r0, r1}
		gb2313WordShow(headLine, sizeof(headLine), 220-20, 60);
 800f95a:	f107 000c 	add.w	r0, r7, #12
 800f95e:	233c      	movs	r3, #60	; 0x3c
 800f960:	22c8      	movs	r2, #200	; 0xc8
 800f962:	2108      	movs	r1, #8
 800f964:	f7ff fdf8 	bl	800f558 <gb2313WordShow>
	}
	if(FileInfo.time[0] != 0){
 800f968:	4b4e      	ldr	r3, [pc, #312]	; (800faa4 <faultBaseDisFunc+0x1a8>)
 800f96a:	781b      	ldrb	r3, [r3, #0]
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d07d      	beq.n	800fa6c <faultBaseDisFunc+0x170>
		tftSetWin(170, 10, 11, 10*10);
 800f970:	2364      	movs	r3, #100	; 0x64
 800f972:	220b      	movs	r2, #11
 800f974:	210a      	movs	r1, #10
 800f976:	20aa      	movs	r0, #170	; 0xaa
 800f978:	f001 fb66 	bl	8011048 <tftSetWin>
		for(int i = 0,j = 0; i < 10; i++){
 800f97c:	2300      	movs	r3, #0
 800f97e:	627b      	str	r3, [r7, #36]	; 0x24
 800f980:	2300      	movs	r3, #0
 800f982:	623b      	str	r3, [r7, #32]
 800f984:	e023      	b.n	800f9ce <faultBaseDisFunc+0xd2>
			if(i == 4||i == 7)
 800f986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f988:	2b04      	cmp	r3, #4
 800f98a:	d002      	beq.n	800f992 <faultBaseDisFunc+0x96>
 800f98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f98e:	2b07      	cmp	r3, #7
 800f990:	d108      	bne.n	800f9a4 <faultBaseDisFunc+0xa8>
				tftRamWrite(smallNumList[10].p, smallNumList[0].length);
 800f992:	4b47      	ldr	r3, [pc, #284]	; (800fab0 <faultBaseDisFunc+0x1b4>)
 800f994:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f996:	4b46      	ldr	r3, [pc, #280]	; (800fab0 <faultBaseDisFunc+0x1b4>)
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	4619      	mov	r1, r3
 800f99c:	4610      	mov	r0, r2
 800f99e:	f001 faba 	bl	8010f16 <tftRamWrite>
 800f9a2:	e011      	b.n	800f9c8 <faultBaseDisFunc+0xcc>
			else{
				tftRamWrite(smallNumList[FileInfo.time[j]-0x30].p, smallNumList[0].length);
 800f9a4:	4a3f      	ldr	r2, [pc, #252]	; (800faa4 <faultBaseDisFunc+0x1a8>)
 800f9a6:	6a3b      	ldr	r3, [r7, #32]
 800f9a8:	4413      	add	r3, r2
 800f9aa:	781b      	ldrb	r3, [r3, #0]
 800f9ac:	3b30      	subs	r3, #48	; 0x30
 800f9ae:	4a40      	ldr	r2, [pc, #256]	; (800fab0 <faultBaseDisFunc+0x1b4>)
 800f9b0:	00db      	lsls	r3, r3, #3
 800f9b2:	4413      	add	r3, r2
 800f9b4:	685a      	ldr	r2, [r3, #4]
 800f9b6:	4b3e      	ldr	r3, [pc, #248]	; (800fab0 <faultBaseDisFunc+0x1b4>)
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	4619      	mov	r1, r3
 800f9bc:	4610      	mov	r0, r2
 800f9be:	f001 faaa 	bl	8010f16 <tftRamWrite>
				j++;
 800f9c2:	6a3b      	ldr	r3, [r7, #32]
 800f9c4:	3301      	adds	r3, #1
 800f9c6:	623b      	str	r3, [r7, #32]
		for(int i = 0,j = 0; i < 10; i++){
 800f9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9ca:	3301      	adds	r3, #1
 800f9cc:	627b      	str	r3, [r7, #36]	; 0x24
 800f9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9d0:	2b09      	cmp	r3, #9
 800f9d2:	ddd8      	ble.n	800f986 <faultBaseDisFunc+0x8a>
			}
		}
		tftSetWin(170-24, 10, 11, 10*10);
 800f9d4:	2364      	movs	r3, #100	; 0x64
 800f9d6:	220b      	movs	r2, #11
 800f9d8:	210a      	movs	r1, #10
 800f9da:	2092      	movs	r0, #146	; 0x92
 800f9dc:	f001 fb34 	bl	8011048 <tftSetWin>
		for(int i = 0,j = 0; i < 5; i++){
 800f9e0:	2300      	movs	r3, #0
 800f9e2:	61fb      	str	r3, [r7, #28]
 800f9e4:	2300      	movs	r3, #0
 800f9e6:	61bb      	str	r3, [r7, #24]
 800f9e8:	e020      	b.n	800fa2c <faultBaseDisFunc+0x130>
			if(i == 2)
 800f9ea:	69fb      	ldr	r3, [r7, #28]
 800f9ec:	2b02      	cmp	r3, #2
 800f9ee:	d108      	bne.n	800fa02 <faultBaseDisFunc+0x106>
				tftRamWrite(smallNumList[10].p, smallNumList[0].length);
 800f9f0:	4b2f      	ldr	r3, [pc, #188]	; (800fab0 <faultBaseDisFunc+0x1b4>)
 800f9f2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f9f4:	4b2e      	ldr	r3, [pc, #184]	; (800fab0 <faultBaseDisFunc+0x1b4>)
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	4619      	mov	r1, r3
 800f9fa:	4610      	mov	r0, r2
 800f9fc:	f001 fa8b 	bl	8010f16 <tftRamWrite>
 800fa00:	e011      	b.n	800fa26 <faultBaseDisFunc+0x12a>
			else{
				tftRamWrite(smallNumList[FileInfo.time[j+8]-0x30].p, smallNumList[0].length);
 800fa02:	69bb      	ldr	r3, [r7, #24]
 800fa04:	3308      	adds	r3, #8
 800fa06:	4a27      	ldr	r2, [pc, #156]	; (800faa4 <faultBaseDisFunc+0x1a8>)
 800fa08:	5cd3      	ldrb	r3, [r2, r3]
 800fa0a:	3b30      	subs	r3, #48	; 0x30
 800fa0c:	4a28      	ldr	r2, [pc, #160]	; (800fab0 <faultBaseDisFunc+0x1b4>)
 800fa0e:	00db      	lsls	r3, r3, #3
 800fa10:	4413      	add	r3, r2
 800fa12:	685a      	ldr	r2, [r3, #4]
 800fa14:	4b26      	ldr	r3, [pc, #152]	; (800fab0 <faultBaseDisFunc+0x1b4>)
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	4619      	mov	r1, r3
 800fa1a:	4610      	mov	r0, r2
 800fa1c:	f001 fa7b 	bl	8010f16 <tftRamWrite>
				j++;
 800fa20:	69bb      	ldr	r3, [r7, #24]
 800fa22:	3301      	adds	r3, #1
 800fa24:	61bb      	str	r3, [r7, #24]
		for(int i = 0,j = 0; i < 5; i++){
 800fa26:	69fb      	ldr	r3, [r7, #28]
 800fa28:	3301      	adds	r3, #1
 800fa2a:	61fb      	str	r3, [r7, #28]
 800fa2c:	69fb      	ldr	r3, [r7, #28]
 800fa2e:	2b04      	cmp	r3, #4
 800fa30:	dddb      	ble.n	800f9ea <faultBaseDisFunc+0xee>
			}
		}
		switch(FileInfo.operationFunc){
 800fa32:	4b1c      	ldr	r3, [pc, #112]	; (800faa4 <faultBaseDisFunc+0x1a8>)
 800fa34:	7b1b      	ldrb	r3, [r3, #12]
 800fa36:	2b05      	cmp	r3, #5
 800fa38:	d00a      	beq.n	800fa50 <faultBaseDisFunc+0x154>
 800fa3a:	2b06      	cmp	r3, #6
 800fa3c:	d00f      	beq.n	800fa5e <faultBaseDisFunc+0x162>
 800fa3e:	2b04      	cmp	r3, #4
 800fa40:	d114      	bne.n	800fa6c <faultBaseDisFunc+0x170>
			case sensorFaultValue:			gb2313WordShow(gb2312SensorFault,sizeof(gb2312SensorFault), 110-24, 10);	break;
 800fa42:	230a      	movs	r3, #10
 800fa44:	2256      	movs	r2, #86	; 0x56
 800fa46:	210a      	movs	r1, #10
 800fa48:	481a      	ldr	r0, [pc, #104]	; (800fab4 <faultBaseDisFunc+0x1b8>)
 800fa4a:	f7ff fd85 	bl	800f558 <gb2313WordShow>
 800fa4e:	e00d      	b.n	800fa6c <faultBaseDisFunc+0x170>
			case disconnectRecordValue:		gb2313WordShow(gb2312Disconnect,sizeof(gb2312Disconnect), 110-24, 10);	break;
 800fa50:	230a      	movs	r3, #10
 800fa52:	2256      	movs	r2, #86	; 0x56
 800fa54:	2108      	movs	r1, #8
 800fa56:	4818      	ldr	r0, [pc, #96]	; (800fab8 <faultBaseDisFunc+0x1bc>)
 800fa58:	f7ff fd7e 	bl	800f558 <gb2313WordShow>
 800fa5c:	e006      	b.n	800fa6c <faultBaseDisFunc+0x170>
			case noDemarcateRecordValue:	gb2313WordShow(gb2312NoDemarcate,sizeof(gb2312NoDemarcate), 110-24, 10);	break;
 800fa5e:	230a      	movs	r3, #10
 800fa60:	2256      	movs	r2, #86	; 0x56
 800fa62:	210c      	movs	r1, #12
 800fa64:	4815      	ldr	r0, [pc, #84]	; (800fabc <faultBaseDisFunc+0x1c0>)
 800fa66:	f7ff fd77 	bl	800f558 <gb2313WordShow>
 800fa6a:	bf00      	nop
		}
	}

	tftSetWin(198, 6, 1, 164);
 800fa6c:	23a4      	movs	r3, #164	; 0xa4
 800fa6e:	2201      	movs	r2, #1
 800fa70:	2106      	movs	r1, #6
 800fa72:	20c6      	movs	r0, #198	; 0xc6
 800fa74:	f001 fae8 	bl	8011048 <tftSetWin>
	tftRamWrite(segmentationSymbols, sizeof(segmentationSymbols));
 800fa78:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800fa7c:	4810      	ldr	r0, [pc, #64]	; (800fac0 <faultBaseDisFunc+0x1c4>)
 800fa7e:	f001 fa4a 	bl	8010f16 <tftRamWrite>

	tftSetWin(170-24-2, 6, 1, 164);
 800fa82:	23a4      	movs	r3, #164	; 0xa4
 800fa84:	2201      	movs	r2, #1
 800fa86:	2106      	movs	r1, #6
 800fa88:	2090      	movs	r0, #144	; 0x90
 800fa8a:	f001 fadd 	bl	8011048 <tftSetWin>
	tftRamWrite(segmentationSymbols, sizeof(segmentationSymbols));
 800fa8e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800fa92:	480b      	ldr	r0, [pc, #44]	; (800fac0 <faultBaseDisFunc+0x1c4>)
 800fa94:	f001 fa3f 	bl	8010f16 <tftRamWrite>
}
 800fa98:	bf00      	nop
 800fa9a:	3728      	adds	r7, #40	; 0x28
 800fa9c:	46bd      	mov	sp, r7
 800fa9e:	bd80      	pop	{r7, pc}
 800faa0:	200093ac 	.word	0x200093ac
 800faa4:	200072cc 	.word	0x200072cc
 800faa8:	08012fd4 	.word	0x08012fd4
 800faac:	08012fe0 	.word	0x08012fe0
 800fab0:	08018dc0 	.word	0x08018dc0
 800fab4:	20000144 	.word	0x20000144
 800fab8:	20000150 	.word	0x20000150
 800fabc:	20000158 	.word	0x20000158
 800fac0:	0806de74 	.word	0x0806de74

0800fac4 <oprateBaseDisFunc>:

void oprateBaseDisFunc(void * p){
 800fac4:	b580      	push	{r7, lr}
 800fac6:	b08a      	sub	sp, #40	; 0x28
 800fac8:	af00      	add	r7, sp, #0
 800faca:	6078      	str	r0, [r7, #4]
	int u = *(int *)p;
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	617b      	str	r3, [r7, #20]
	if(oprateReferPageNum != u){
 800fad2:	4bae      	ldr	r3, [pc, #696]	; (800fd8c <oprateBaseDisFunc+0x2c8>)
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	697a      	ldr	r2, [r7, #20]
 800fad8:	429a      	cmp	r2, r3
 800fada:	d029      	beq.n	800fb30 <oprateBaseDisFunc+0x6c>
		if(fileGetLine("Opera.txt", u, &FileInfo)==-1){
 800fadc:	4aac      	ldr	r2, [pc, #688]	; (800fd90 <oprateBaseDisFunc+0x2cc>)
 800fade:	6979      	ldr	r1, [r7, #20]
 800fae0:	48ac      	ldr	r0, [pc, #688]	; (800fd94 <oprateBaseDisFunc+0x2d0>)
 800fae2:	f001 fd01 	bl	80114e8 <fileGetLine>
 800fae6:	4603      	mov	r3, r0
 800fae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800faec:	d10b      	bne.n	800fb06 <oprateBaseDisFunc+0x42>
			*(int *)p = oprateReferPageNum;
 800faee:	4ba7      	ldr	r3, [pc, #668]	; (800fd8c <oprateBaseDisFunc+0x2c8>)
 800faf0:	681a      	ldr	r2, [r3, #0]
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	601a      	str	r2, [r3, #0]
			fileGetLine("Opera.txt", oprateReferPageNum, &FileInfo);
 800faf6:	4ba5      	ldr	r3, [pc, #660]	; (800fd8c <oprateBaseDisFunc+0x2c8>)
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	4aa5      	ldr	r2, [pc, #660]	; (800fd90 <oprateBaseDisFunc+0x2cc>)
 800fafc:	4619      	mov	r1, r3
 800fafe:	48a5      	ldr	r0, [pc, #660]	; (800fd94 <oprateBaseDisFunc+0x2d0>)
 800fb00:	f001 fcf2 	bl	80114e8 <fileGetLine>
 800fb04:	e002      	b.n	800fb0c <oprateBaseDisFunc+0x48>
		}
		else
			oprateReferPageNum = u;
 800fb06:	4aa1      	ldr	r2, [pc, #644]	; (800fd8c <oprateBaseDisFunc+0x2c8>)
 800fb08:	697b      	ldr	r3, [r7, #20]
 800fb0a:	6013      	str	r3, [r2, #0]
		lcdClean(0x2945);
 800fb0c:	f642 1045 	movw	r0, #10565	; 0x2945
 800fb10:	f001 fb30 	bl	8011174 <lcdClean>
		uint8_t headLine[] = {0xB2, 0xD9, 0xD7, 0xF7, 0xB2, 0xE9, 0xD1, 0xAF};
 800fb14:	4aa0      	ldr	r2, [pc, #640]	; (800fd98 <oprateBaseDisFunc+0x2d4>)
 800fb16:	f107 030c 	add.w	r3, r7, #12
 800fb1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fb1e:	e883 0003 	stmia.w	r3, {r0, r1}
		gb2313WordShow(headLine, sizeof(headLine), 220-20, 60);
 800fb22:	f107 000c 	add.w	r0, r7, #12
 800fb26:	233c      	movs	r3, #60	; 0x3c
 800fb28:	22c8      	movs	r2, #200	; 0xc8
 800fb2a:	2108      	movs	r1, #8
 800fb2c:	f7ff fd14 	bl	800f558 <gb2313WordShow>
	}
	if(FileInfo.time[0] != 0){
 800fb30:	4b97      	ldr	r3, [pc, #604]	; (800fd90 <oprateBaseDisFunc+0x2cc>)
 800fb32:	781b      	ldrb	r3, [r3, #0]
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	f000 8124 	beq.w	800fd82 <oprateBaseDisFunc+0x2be>
		tftSetWin(170, 10, 11, 10*10);
 800fb3a:	2364      	movs	r3, #100	; 0x64
 800fb3c:	220b      	movs	r2, #11
 800fb3e:	210a      	movs	r1, #10
 800fb40:	20aa      	movs	r0, #170	; 0xaa
 800fb42:	f001 fa81 	bl	8011048 <tftSetWin>
		for(int i = 0,j = 0; i < 10; i++){
 800fb46:	2300      	movs	r3, #0
 800fb48:	627b      	str	r3, [r7, #36]	; 0x24
 800fb4a:	2300      	movs	r3, #0
 800fb4c:	623b      	str	r3, [r7, #32]
 800fb4e:	e023      	b.n	800fb98 <oprateBaseDisFunc+0xd4>
			if(i == 4||i == 7)
 800fb50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb52:	2b04      	cmp	r3, #4
 800fb54:	d002      	beq.n	800fb5c <oprateBaseDisFunc+0x98>
 800fb56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb58:	2b07      	cmp	r3, #7
 800fb5a:	d108      	bne.n	800fb6e <oprateBaseDisFunc+0xaa>
				tftRamWrite(smallNumList[10].p, smallNumList[0].length);
 800fb5c:	4b8f      	ldr	r3, [pc, #572]	; (800fd9c <oprateBaseDisFunc+0x2d8>)
 800fb5e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fb60:	4b8e      	ldr	r3, [pc, #568]	; (800fd9c <oprateBaseDisFunc+0x2d8>)
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	4619      	mov	r1, r3
 800fb66:	4610      	mov	r0, r2
 800fb68:	f001 f9d5 	bl	8010f16 <tftRamWrite>
 800fb6c:	e011      	b.n	800fb92 <oprateBaseDisFunc+0xce>
			else{
				tftRamWrite(smallNumList[FileInfo.time[j]-0x30].p, smallNumList[0].length);
 800fb6e:	4a88      	ldr	r2, [pc, #544]	; (800fd90 <oprateBaseDisFunc+0x2cc>)
 800fb70:	6a3b      	ldr	r3, [r7, #32]
 800fb72:	4413      	add	r3, r2
 800fb74:	781b      	ldrb	r3, [r3, #0]
 800fb76:	3b30      	subs	r3, #48	; 0x30
 800fb78:	4a88      	ldr	r2, [pc, #544]	; (800fd9c <oprateBaseDisFunc+0x2d8>)
 800fb7a:	00db      	lsls	r3, r3, #3
 800fb7c:	4413      	add	r3, r2
 800fb7e:	685a      	ldr	r2, [r3, #4]
 800fb80:	4b86      	ldr	r3, [pc, #536]	; (800fd9c <oprateBaseDisFunc+0x2d8>)
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	4619      	mov	r1, r3
 800fb86:	4610      	mov	r0, r2
 800fb88:	f001 f9c5 	bl	8010f16 <tftRamWrite>
				j++;
 800fb8c:	6a3b      	ldr	r3, [r7, #32]
 800fb8e:	3301      	adds	r3, #1
 800fb90:	623b      	str	r3, [r7, #32]
		for(int i = 0,j = 0; i < 10; i++){
 800fb92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb94:	3301      	adds	r3, #1
 800fb96:	627b      	str	r3, [r7, #36]	; 0x24
 800fb98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb9a:	2b09      	cmp	r3, #9
 800fb9c:	ddd8      	ble.n	800fb50 <oprateBaseDisFunc+0x8c>
			}
		}
		tftSetWin(170-24, 10, 11, 10*10);
 800fb9e:	2364      	movs	r3, #100	; 0x64
 800fba0:	220b      	movs	r2, #11
 800fba2:	210a      	movs	r1, #10
 800fba4:	2092      	movs	r0, #146	; 0x92
 800fba6:	f001 fa4f 	bl	8011048 <tftSetWin>
		for(int i = 0,j = 0; i < 5; i++){
 800fbaa:	2300      	movs	r3, #0
 800fbac:	61fb      	str	r3, [r7, #28]
 800fbae:	2300      	movs	r3, #0
 800fbb0:	61bb      	str	r3, [r7, #24]
 800fbb2:	e020      	b.n	800fbf6 <oprateBaseDisFunc+0x132>
			if(i == 2)
 800fbb4:	69fb      	ldr	r3, [r7, #28]
 800fbb6:	2b02      	cmp	r3, #2
 800fbb8:	d108      	bne.n	800fbcc <oprateBaseDisFunc+0x108>
				tftRamWrite(smallNumList[10].p, smallNumList[0].length);
 800fbba:	4b78      	ldr	r3, [pc, #480]	; (800fd9c <oprateBaseDisFunc+0x2d8>)
 800fbbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fbbe:	4b77      	ldr	r3, [pc, #476]	; (800fd9c <oprateBaseDisFunc+0x2d8>)
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	4619      	mov	r1, r3
 800fbc4:	4610      	mov	r0, r2
 800fbc6:	f001 f9a6 	bl	8010f16 <tftRamWrite>
 800fbca:	e011      	b.n	800fbf0 <oprateBaseDisFunc+0x12c>
			else{
				tftRamWrite(smallNumList[FileInfo.time[j+8]-0x30].p, smallNumList[0].length);
 800fbcc:	69bb      	ldr	r3, [r7, #24]
 800fbce:	3308      	adds	r3, #8
 800fbd0:	4a6f      	ldr	r2, [pc, #444]	; (800fd90 <oprateBaseDisFunc+0x2cc>)
 800fbd2:	5cd3      	ldrb	r3, [r2, r3]
 800fbd4:	3b30      	subs	r3, #48	; 0x30
 800fbd6:	4a71      	ldr	r2, [pc, #452]	; (800fd9c <oprateBaseDisFunc+0x2d8>)
 800fbd8:	00db      	lsls	r3, r3, #3
 800fbda:	4413      	add	r3, r2
 800fbdc:	685a      	ldr	r2, [r3, #4]
 800fbde:	4b6f      	ldr	r3, [pc, #444]	; (800fd9c <oprateBaseDisFunc+0x2d8>)
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	4619      	mov	r1, r3
 800fbe4:	4610      	mov	r0, r2
 800fbe6:	f001 f996 	bl	8010f16 <tftRamWrite>
				j++;
 800fbea:	69bb      	ldr	r3, [r7, #24]
 800fbec:	3301      	adds	r3, #1
 800fbee:	61bb      	str	r3, [r7, #24]
		for(int i = 0,j = 0; i < 5; i++){
 800fbf0:	69fb      	ldr	r3, [r7, #28]
 800fbf2:	3301      	adds	r3, #1
 800fbf4:	61fb      	str	r3, [r7, #28]
 800fbf6:	69fb      	ldr	r3, [r7, #28]
 800fbf8:	2b04      	cmp	r3, #4
 800fbfa:	dddb      	ble.n	800fbb4 <oprateBaseDisFunc+0xf0>
			}
		}

		tftSetWin(198, 6, 1, 164);
 800fbfc:	23a4      	movs	r3, #164	; 0xa4
 800fbfe:	2201      	movs	r2, #1
 800fc00:	2106      	movs	r1, #6
 800fc02:	20c6      	movs	r0, #198	; 0xc6
 800fc04:	f001 fa20 	bl	8011048 <tftSetWin>
		tftRamWrite(segmentationSymbols, sizeof(segmentationSymbols));
 800fc08:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800fc0c:	4864      	ldr	r0, [pc, #400]	; (800fda0 <oprateBaseDisFunc+0x2dc>)
 800fc0e:	f001 f982 	bl	8010f16 <tftRamWrite>

		tftSetWin(170-24-2, 6, 1, 164);
 800fc12:	23a4      	movs	r3, #164	; 0xa4
 800fc14:	2201      	movs	r2, #1
 800fc16:	2106      	movs	r1, #6
 800fc18:	2090      	movs	r0, #144	; 0x90
 800fc1a:	f001 fa15 	bl	8011048 <tftSetWin>
		tftRamWrite(segmentationSymbols, sizeof(segmentationSymbols));
 800fc1e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800fc22:	485f      	ldr	r0, [pc, #380]	; (800fda0 <oprateBaseDisFunc+0x2dc>)
 800fc24:	f001 f977 	bl	8010f16 <tftRamWrite>

		switch(FileInfo.operationFunc){
 800fc28:	4b59      	ldr	r3, [pc, #356]	; (800fd90 <oprateBaseDisFunc+0x2cc>)
 800fc2a:	7b1b      	ldrb	r3, [r3, #12]
 800fc2c:	3b07      	subs	r3, #7
 800fc2e:	2b0c      	cmp	r3, #12
 800fc30:	f200 80a7 	bhi.w	800fd82 <oprateBaseDisFunc+0x2be>
 800fc34:	a201      	add	r2, pc, #4	; (adr r2, 800fc3c <oprateBaseDisFunc+0x178>)
 800fc36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc3a:	bf00      	nop
 800fc3c:	0800fc71 	.word	0x0800fc71
 800fc40:	0800fc8d 	.word	0x0800fc8d
 800fc44:	0800fca9 	.word	0x0800fca9
 800fc48:	0800fcc5 	.word	0x0800fcc5
 800fc4c:	0800fcd3 	.word	0x0800fcd3
 800fc50:	0800fce1 	.word	0x0800fce1
 800fc54:	0800fcfd 	.word	0x0800fcfd
 800fc58:	0800fd0b 	.word	0x0800fd0b
 800fc5c:	0800fd27 	.word	0x0800fd27
 800fc60:	0800fd35 	.word	0x0800fd35
 800fc64:	0800fd51 	.word	0x0800fd51
 800fc68:	0800fd83 	.word	0x0800fd83
 800fc6c:	0800fd75 	.word	0x0800fd75
		case changePassWordRecordValue:
			gb2313WordShow(gb2312PassWordChange,sizeof(gb2312PassWordChange), 110-24, 10);
 800fc70:	230a      	movs	r3, #10
 800fc72:	2256      	movs	r2, #86	; 0x56
 800fc74:	2108      	movs	r1, #8
 800fc76:	484b      	ldr	r0, [pc, #300]	; (800fda4 <oprateBaseDisFunc+0x2e0>)
 800fc78:	f7ff fc6e 	bl	800f558 <gb2313WordShow>
			gb2313NumShow(FileInfo.operationValue, 110-48,10);
 800fc7c:	4b44      	ldr	r3, [pc, #272]	; (800fd90 <oprateBaseDisFunc+0x2cc>)
 800fc7e:	691b      	ldr	r3, [r3, #16]
 800fc80:	220a      	movs	r2, #10
 800fc82:	213e      	movs	r1, #62	; 0x3e
 800fc84:	4618      	mov	r0, r3
 800fc86:	f7ff fc9f 	bl	800f5c8 <gb2313NumShow>
			break;
 800fc8a:	e07a      	b.n	800fd82 <oprateBaseDisFunc+0x2be>
		case setHighLimitRecordValue:
			gb2313WordShow(gb2312HighLimitChange,sizeof(gb2312HighLimitChange), 110-24, 10);
 800fc8c:	230a      	movs	r3, #10
 800fc8e:	2256      	movs	r2, #86	; 0x56
 800fc90:	210a      	movs	r1, #10
 800fc92:	4845      	ldr	r0, [pc, #276]	; (800fda8 <oprateBaseDisFunc+0x2e4>)
 800fc94:	f7ff fc60 	bl	800f558 <gb2313WordShow>
			gb2313NumShow(FileInfo.operationValue, 130-48,10);
 800fc98:	4b3d      	ldr	r3, [pc, #244]	; (800fd90 <oprateBaseDisFunc+0x2cc>)
 800fc9a:	691b      	ldr	r3, [r3, #16]
 800fc9c:	220a      	movs	r2, #10
 800fc9e:	2152      	movs	r1, #82	; 0x52
 800fca0:	4618      	mov	r0, r3
 800fca2:	f7ff fc91 	bl	800f5c8 <gb2313NumShow>
			break;
 800fca6:	e06c      	b.n	800fd82 <oprateBaseDisFunc+0x2be>
		case setLowLimitRecordValue:
			gb2313WordShow(gb2312LowLimitChange,sizeof(gb2312LowLimitChange), 110-24, 10);
 800fca8:	230a      	movs	r3, #10
 800fcaa:	2256      	movs	r2, #86	; 0x56
 800fcac:	210a      	movs	r1, #10
 800fcae:	483f      	ldr	r0, [pc, #252]	; (800fdac <oprateBaseDisFunc+0x2e8>)
 800fcb0:	f7ff fc52 	bl	800f558 <gb2313WordShow>
			gb2313NumShow(FileInfo.operationValue, 110-48,10);
 800fcb4:	4b36      	ldr	r3, [pc, #216]	; (800fd90 <oprateBaseDisFunc+0x2cc>)
 800fcb6:	691b      	ldr	r3, [r3, #16]
 800fcb8:	220a      	movs	r2, #10
 800fcba:	213e      	movs	r1, #62	; 0x3e
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	f7ff fc83 	bl	800f5c8 <gb2313NumShow>
			break;
 800fcc2:	e05e      	b.n	800fd82 <oprateBaseDisFunc+0x2be>
		case setBuzzerSilenceRecordValue:
			gb2313WordShow(gb2312Slience,sizeof(gb2312Slience), 110-24, 10);
 800fcc4:	230a      	movs	r3, #10
 800fcc6:	2256      	movs	r2, #86	; 0x56
 800fcc8:	2104      	movs	r1, #4
 800fcca:	4839      	ldr	r0, [pc, #228]	; (800fdb0 <oprateBaseDisFunc+0x2ec>)
 800fccc:	f7ff fc44 	bl	800f558 <gb2313WordShow>
			break;
 800fcd0:	e057      	b.n	800fd82 <oprateBaseDisFunc+0x2be>
		case setResetRecordValue:
			gb2313WordShow(gb2312Reset,sizeof(gb2312Reset), 110-24, 10);
 800fcd2:	230a      	movs	r3, #10
 800fcd4:	2256      	movs	r2, #86	; 0x56
 800fcd6:	2104      	movs	r1, #4
 800fcd8:	4836      	ldr	r0, [pc, #216]	; (800fdb4 <oprateBaseDisFunc+0x2f0>)
 800fcda:	f7ff fc3d 	bl	800f558 <gb2313WordShow>
			break;
 800fcde:	e050      	b.n	800fd82 <oprateBaseDisFunc+0x2be>
		case spanDemarcateRecordValue:
			gb2313WordShow(gb2312Span,sizeof(gb2312Span), 110-24, 10);
 800fce0:	230a      	movs	r3, #10
 800fce2:	2256      	movs	r2, #86	; 0x56
 800fce4:	2108      	movs	r1, #8
 800fce6:	4834      	ldr	r0, [pc, #208]	; (800fdb8 <oprateBaseDisFunc+0x2f4>)
 800fce8:	f7ff fc36 	bl	800f558 <gb2313WordShow>
			gb2313NumShow(FileInfo.operationValue, 110-48,10);
 800fcec:	4b28      	ldr	r3, [pc, #160]	; (800fd90 <oprateBaseDisFunc+0x2cc>)
 800fcee:	691b      	ldr	r3, [r3, #16]
 800fcf0:	220a      	movs	r2, #10
 800fcf2:	213e      	movs	r1, #62	; 0x3e
 800fcf4:	4618      	mov	r0, r3
 800fcf6:	f7ff fc67 	bl	800f5c8 <gb2313NumShow>
			break;
 800fcfa:	e042      	b.n	800fd82 <oprateBaseDisFunc+0x2be>
		case zeroDemarcateRecordValue:
			gb2313WordShow(gb2312Zero,sizeof(gb2312Zero), 110-24, 10);
 800fcfc:	230a      	movs	r3, #10
 800fcfe:	2256      	movs	r2, #86	; 0x56
 800fd00:	2108      	movs	r1, #8
 800fd02:	482e      	ldr	r0, [pc, #184]	; (800fdbc <oprateBaseDisFunc+0x2f8>)
 800fd04:	f7ff fc28 	bl	800f558 <gb2313WordShow>
			break;
 800fd08:	e03b      	b.n	800fd82 <oprateBaseDisFunc+0x2be>
		case changeAddrRecordValue:
			gb2313WordShow(gb2312ChangeAddr,sizeof(gb2312ChangeAddr), 110-24, 10);
 800fd0a:	230a      	movs	r3, #10
 800fd0c:	2256      	movs	r2, #86	; 0x56
 800fd0e:	2108      	movs	r1, #8
 800fd10:	482b      	ldr	r0, [pc, #172]	; (800fdc0 <oprateBaseDisFunc+0x2fc>)
 800fd12:	f7ff fc21 	bl	800f558 <gb2313WordShow>
			gb2313NumShow(FileInfo.operationValue, 110-48,10);
 800fd16:	4b1e      	ldr	r3, [pc, #120]	; (800fd90 <oprateBaseDisFunc+0x2cc>)
 800fd18:	691b      	ldr	r3, [r3, #16]
 800fd1a:	220a      	movs	r2, #10
 800fd1c:	213e      	movs	r1, #62	; 0x3e
 800fd1e:	4618      	mov	r0, r3
 800fd20:	f7ff fc52 	bl	800f5c8 <gb2313NumShow>
			break;
 800fd24:	e02d      	b.n	800fd82 <oprateBaseDisFunc+0x2be>
		case changeUnitRecordValue:
			gb2313WordShow(gb2312ChangeUnit,sizeof(gb2312ChangeUnit), 110-24, 10);
 800fd26:	230a      	movs	r3, #10
 800fd28:	2256      	movs	r2, #86	; 0x56
 800fd2a:	2108      	movs	r1, #8
 800fd2c:	4825      	ldr	r0, [pc, #148]	; (800fdc4 <oprateBaseDisFunc+0x300>)
 800fd2e:	f7ff fc13 	bl	800f558 <gb2313WordShow>
			break;
 800fd32:	e026      	b.n	800fd82 <oprateBaseDisFunc+0x2be>
		case changeDisRecordValue:
			gb2313WordShow(gb2312ChangeDis,sizeof(gb2312ChangeDis), 110-24, 10);
 800fd34:	230a      	movs	r3, #10
 800fd36:	2256      	movs	r2, #86	; 0x56
 800fd38:	210c      	movs	r1, #12
 800fd3a:	4823      	ldr	r0, [pc, #140]	; (800fdc8 <oprateBaseDisFunc+0x304>)
 800fd3c:	f7ff fc0c 	bl	800f558 <gb2313WordShow>
			gb2313NumShow(FileInfo.operationValue, 110-48,10);
 800fd40:	4b13      	ldr	r3, [pc, #76]	; (800fd90 <oprateBaseDisFunc+0x2cc>)
 800fd42:	691b      	ldr	r3, [r3, #16]
 800fd44:	220a      	movs	r2, #10
 800fd46:	213e      	movs	r1, #62	; 0x3e
 800fd48:	4618      	mov	r0, r3
 800fd4a:	f7ff fc3d 	bl	800f5c8 <gb2313NumShow>
			break;
 800fd4e:	e018      	b.n	800fd82 <oprateBaseDisFunc+0x2be>
		case changeMangerRecordValue:
			if(FileInfo.operationValue)
 800fd50:	4b0f      	ldr	r3, [pc, #60]	; (800fd90 <oprateBaseDisFunc+0x2cc>)
 800fd52:	691b      	ldr	r3, [r3, #16]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d006      	beq.n	800fd66 <oprateBaseDisFunc+0x2a2>
				gb2313WordShow(gb2312ChangeManerger1,sizeof(gb2312ChangeManerger1), 110-24, 10);
 800fd58:	230a      	movs	r3, #10
 800fd5a:	2256      	movs	r2, #86	; 0x56
 800fd5c:	210c      	movs	r1, #12
 800fd5e:	481b      	ldr	r0, [pc, #108]	; (800fdcc <oprateBaseDisFunc+0x308>)
 800fd60:	f7ff fbfa 	bl	800f558 <gb2313WordShow>
			else
				gb2313WordShow(gb2312ChangeManerger0,sizeof(gb2312ChangeManerger0), 110-24, 10);
			break;
 800fd64:	e00d      	b.n	800fd82 <oprateBaseDisFunc+0x2be>
				gb2313WordShow(gb2312ChangeManerger0,sizeof(gb2312ChangeManerger0), 110-24, 10);
 800fd66:	230a      	movs	r3, #10
 800fd68:	2256      	movs	r2, #86	; 0x56
 800fd6a:	210c      	movs	r1, #12
 800fd6c:	4818      	ldr	r0, [pc, #96]	; (800fdd0 <oprateBaseDisFunc+0x30c>)
 800fd6e:	f7ff fbf3 	bl	800f558 <gb2313WordShow>
			break;
 800fd72:	e006      	b.n	800fd82 <oprateBaseDisFunc+0x2be>
		case selfTest:
			gb2313WordShow(gb2312SelfTest,sizeof(gb2312SelfTest), 110-24, 10);
 800fd74:	230a      	movs	r3, #10
 800fd76:	2256      	movs	r2, #86	; 0x56
 800fd78:	2104      	movs	r1, #4
 800fd7a:	4816      	ldr	r0, [pc, #88]	; (800fdd4 <oprateBaseDisFunc+0x310>)
 800fd7c:	f7ff fbec 	bl	800f558 <gb2313WordShow>
			break;
 800fd80:	bf00      	nop
		}
	}
}
 800fd82:	bf00      	nop
 800fd84:	3728      	adds	r7, #40	; 0x28
 800fd86:	46bd      	mov	sp, r7
 800fd88:	bd80      	pop	{r7, pc}
 800fd8a:	bf00      	nop
 800fd8c:	200072e4 	.word	0x200072e4
 800fd90:	200072cc 	.word	0x200072cc
 800fd94:	08012fe8 	.word	0x08012fe8
 800fd98:	08012ff4 	.word	0x08012ff4
 800fd9c:	08018dc0 	.word	0x08018dc0
 800fda0:	0806de74 	.word	0x0806de74
 800fda4:	200000b0 	.word	0x200000b0
 800fda8:	200000b8 	.word	0x200000b8
 800fdac:	200000c4 	.word	0x200000c4
 800fdb0:	200000d0 	.word	0x200000d0
 800fdb4:	200000d4 	.word	0x200000d4
 800fdb8:	200000d8 	.word	0x200000d8
 800fdbc:	200000e0 	.word	0x200000e0
 800fdc0:	200000e8 	.word	0x200000e8
 800fdc4:	200000f0 	.word	0x200000f0
 800fdc8:	200000f8 	.word	0x200000f8
 800fdcc:	20000104 	.word	0x20000104
 800fdd0:	20000110 	.word	0x20000110
 800fdd4:	2000011c 	.word	0x2000011c

0800fdd8 <nullFunc>:

void nullFunc(void * p)
{
 800fdd8:	b480      	push	{r7}
 800fdda:	b083      	sub	sp, #12
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	6078      	str	r0, [r7, #4]
	return;
 800fde0:	bf00      	nop
}
 800fde2:	370c      	adds	r7, #12
 800fde4:	46bd      	mov	sp, r7
 800fde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdea:	4770      	bx	lr

0800fdec <assignPage>:
};
int disArraySize = sizeof(pageInfoList);


void assignPage(int x)
{
 800fdec:	b480      	push	{r7}
 800fdee:	b085      	sub	sp, #20
 800fdf0:	af00      	add	r7, sp, #0
 800fdf2:	6078      	str	r0, [r7, #4]
	for(int i =0; i < pageNum; i++)
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	60fb      	str	r3, [r7, #12]
 800fdf8:	e008      	b.n	800fe0c <assignPage+0x20>
		pageInfoList[i].isDis = 0;
 800fdfa:	4a1b      	ldr	r2, [pc, #108]	; (800fe68 <assignPage+0x7c>)
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	019b      	lsls	r3, r3, #6
 800fe00:	4413      	add	r3, r2
 800fe02:	2200      	movs	r2, #0
 800fe04:	701a      	strb	r2, [r3, #0]
	for(int i =0; i < pageNum; i++)
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	3301      	adds	r3, #1
 800fe0a:	60fb      	str	r3, [r7, #12]
 800fe0c:	4b17      	ldr	r3, [pc, #92]	; (800fe6c <assignPage+0x80>)
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	68fa      	ldr	r2, [r7, #12]
 800fe12:	429a      	cmp	r2, r3
 800fe14:	dbf1      	blt.n	800fdfa <assignPage+0xe>
	pageInfoList[x].isDis = 1;
 800fe16:	4a14      	ldr	r2, [pc, #80]	; (800fe68 <assignPage+0x7c>)
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	019b      	lsls	r3, r3, #6
 800fe1c:	4413      	add	r3, r2
 800fe1e:	2201      	movs	r2, #1
 800fe20:	701a      	strb	r2, [r3, #0]
	if(x == 0)
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d118      	bne.n	800fe5a <assignPage+0x6e>
	{
		pageInfoList[firstPage].arrowInfo = 0;
 800fe28:	4b0f      	ldr	r3, [pc, #60]	; (800fe68 <assignPage+0x7c>)
 800fe2a:	2200      	movs	r2, #0
 800fe2c:	705a      	strb	r2, [r3, #1]
		pageInfoList[setPage1].arrowInfo = 1;
 800fe2e:	4b0e      	ldr	r3, [pc, #56]	; (800fe68 <assignPage+0x7c>)
 800fe30:	2201      	movs	r2, #1
 800fe32:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
		pageInfoList[setPage2].arrowInfo = 1;
 800fe36:	4b0c      	ldr	r3, [pc, #48]	; (800fe68 <assignPage+0x7c>)
 800fe38:	2201      	movs	r2, #1
 800fe3a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
		pageInfoList[otherSet].arrowInfo = 1;
 800fe3e:	4b0a      	ldr	r3, [pc, #40]	; (800fe68 <assignPage+0x7c>)
 800fe40:	2201      	movs	r2, #1
 800fe42:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
		deviceOwnInfo.backMainPage = !deviceOwnInfo.backMainPage;
 800fe46:	4b0a      	ldr	r3, [pc, #40]	; (800fe70 <assignPage+0x84>)
 800fe48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	bf0c      	ite	eq
 800fe4e:	2301      	moveq	r3, #1
 800fe50:	2300      	movne	r3, #0
 800fe52:	b2db      	uxtb	r3, r3
 800fe54:	461a      	mov	r2, r3
 800fe56:	4b06      	ldr	r3, [pc, #24]	; (800fe70 <assignPage+0x84>)
 800fe58:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
 800fe5a:	bf00      	nop
 800fe5c:	3714      	adds	r7, #20
 800fe5e:	46bd      	mov	sp, r7
 800fe60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe64:	4770      	bx	lr
 800fe66:	bf00      	nop
 800fe68:	20000200 	.word	0x20000200
 800fe6c:	20000624 	.word	0x20000624
 800fe70:	2000017c 	.word	0x2000017c

0800fe74 <configPage1BackClickFunc>:

void configPage1BackClickFunc(int i)
{
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b082      	sub	sp, #8
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
	if(i == 0)
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d006      	beq.n	800fe90 <configPage1BackClickFunc+0x1c>
		return;
	assignPage(firstPage);
 800fe82:	2000      	movs	r0, #0
 800fe84:	f7ff ffb2 	bl	800fdec <assignPage>
	osDelay(200);
 800fe88:	20c8      	movs	r0, #200	; 0xc8
 800fe8a:	f7f8 ff1d 	bl	8008cc8 <osDelay>
 800fe8e:	e000      	b.n	800fe92 <configPage1BackClickFunc+0x1e>
		return;
 800fe90:	bf00      	nop
}
 800fe92:	3708      	adds	r7, #8
 800fe94:	46bd      	mov	sp, r7
 800fe96:	bd80      	pop	{r7, pc}

0800fe98 <configPage2BackClickFunc>:

void configPage2BackClickFunc(int i)
{
 800fe98:	b580      	push	{r7, lr}
 800fe9a:	b082      	sub	sp, #8
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	6078      	str	r0, [r7, #4]
	if(i == 0)
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d006      	beq.n	800feb4 <configPage2BackClickFunc+0x1c>
		return;
	assignPage(firstPage);
 800fea6:	2000      	movs	r0, #0
 800fea8:	f7ff ffa0 	bl	800fdec <assignPage>
	osDelay(200);
 800feac:	20c8      	movs	r0, #200	; 0xc8
 800feae:	f7f8 ff0b 	bl	8008cc8 <osDelay>
 800feb2:	e000      	b.n	800feb6 <configPage2BackClickFunc+0x1e>
		return;
 800feb4:	bf00      	nop
}
 800feb6:	3708      	adds	r7, #8
 800feb8:	46bd      	mov	sp, r7
 800feba:	bd80      	pop	{r7, pc}

0800febc <biFirstClickFunc>:
extern int alamBan;
void biFirstClickFunc(int i)
{
 800febc:	b580      	push	{r7, lr}
 800febe:	b082      	sub	sp, #8
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	6078      	str	r0, [r7, #4]
	if(i == 0)
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d007      	beq.n	800feda <biFirstClickFunc+0x1e>
		return;
	operationRecord(setBuzzerSilenceRecordValue, 0);
 800feca:	2100      	movs	r1, #0
 800fecc:	200a      	movs	r0, #10
 800fece:	f001 f9f1 	bl	80112b4 <operationRecord>
	alamBan = 0;
 800fed2:	4b04      	ldr	r3, [pc, #16]	; (800fee4 <biFirstClickFunc+0x28>)
 800fed4:	2200      	movs	r2, #0
 800fed6:	601a      	str	r2, [r3, #0]
 800fed8:	e000      	b.n	800fedc <biFirstClickFunc+0x20>
		return;
 800feda:	bf00      	nop
}
 800fedc:	3708      	adds	r7, #8
 800fede:	46bd      	mov	sp, r7
 800fee0:	bd80      	pop	{r7, pc}
 800fee2:	bf00      	nop
 800fee4:	20000090 	.word	0x20000090

0800fee8 <configPage1EnterClickFunc>:


void configPage1EnterClickFunc(int i)
{
 800fee8:	b580      	push	{r7, lr}
 800feea:	b082      	sub	sp, #8
 800feec:	af00      	add	r7, sp, #0
 800feee:	6078      	str	r0, [r7, #4]
	if(i == 0)
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d022      	beq.n	800ff3c <configPage1EnterClickFunc+0x54>
		return;
	if(pageInfoList[setPage1].arrowInfo == 1)
 800fef6:	4b13      	ldr	r3, [pc, #76]	; (800ff44 <configPage1EnterClickFunc+0x5c>)
 800fef8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800fefc:	2b01      	cmp	r3, #1
 800fefe:	d101      	bne.n	800ff04 <configPage1EnterClickFunc+0x1c>
		checkSelf();
 800ff00:	f7fd f950 	bl	800d1a4 <checkSelf>
	if(pageInfoList[setPage1].arrowInfo == 2)
 800ff04:	4b0f      	ldr	r3, [pc, #60]	; (800ff44 <configPage1EnterClickFunc+0x5c>)
 800ff06:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ff0a:	2b02      	cmp	r3, #2
 800ff0c:	d102      	bne.n	800ff14 <configPage1EnterClickFunc+0x2c>
		assignPage(detectSet);
 800ff0e:	2005      	movs	r0, #5
 800ff10:	f7ff ff6c 	bl	800fdec <assignPage>
	if(pageInfoList[setPage1].arrowInfo == 3)
 800ff14:	4b0b      	ldr	r3, [pc, #44]	; (800ff44 <configPage1EnterClickFunc+0x5c>)
 800ff16:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ff1a:	2b03      	cmp	r3, #3
 800ff1c:	d102      	bne.n	800ff24 <configPage1EnterClickFunc+0x3c>
		assignPage(demarcate);
 800ff1e:	2008      	movs	r0, #8
 800ff20:	f7ff ff64 	bl	800fdec <assignPage>
	if(pageInfoList[setPage1].arrowInfo == 4)
 800ff24:	4b07      	ldr	r3, [pc, #28]	; (800ff44 <configPage1EnterClickFunc+0x5c>)
 800ff26:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ff2a:	2b04      	cmp	r3, #4
 800ff2c:	d102      	bne.n	800ff34 <configPage1EnterClickFunc+0x4c>
		assignPage(otherSet);
 800ff2e:	2004      	movs	r0, #4
 800ff30:	f7ff ff5c 	bl	800fdec <assignPage>
	osDelay(100);
 800ff34:	2064      	movs	r0, #100	; 0x64
 800ff36:	f7f8 fec7 	bl	8008cc8 <osDelay>
 800ff3a:	e000      	b.n	800ff3e <configPage1EnterClickFunc+0x56>
		return;
 800ff3c:	bf00      	nop
}
 800ff3e:	3708      	adds	r7, #8
 800ff40:	46bd      	mov	sp, r7
 800ff42:	bd80      	pop	{r7, pc}
 800ff44:	20000200 	.word	0x20000200

0800ff48 <configPage2SureClickFunc>:

void configPage2SureClickFunc(int i)
{
 800ff48:	b580      	push	{r7, lr}
 800ff4a:	b082      	sub	sp, #8
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	6078      	str	r0, [r7, #4]
	if(i == 0)
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d023      	beq.n	800ff9e <configPage2SureClickFunc+0x56>
		return;
	if(pageInfoList[setPage2].arrowInfo == 1)
 800ff56:	4b14      	ldr	r3, [pc, #80]	; (800ffa8 <configPage2SureClickFunc+0x60>)
 800ff58:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800ff5c:	2b01      	cmp	r3, #1
 800ff5e:	d102      	bne.n	800ff66 <configPage2SureClickFunc+0x1e>
		assignPage(faultRefer);
 800ff60:	200a      	movs	r0, #10
 800ff62:	f7ff ff43 	bl	800fdec <assignPage>
	if(pageInfoList[setPage2].arrowInfo == 2)
 800ff66:	4b10      	ldr	r3, [pc, #64]	; (800ffa8 <configPage2SureClickFunc+0x60>)
 800ff68:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800ff6c:	2b02      	cmp	r3, #2
 800ff6e:	d102      	bne.n	800ff76 <configPage2SureClickFunc+0x2e>
		assignPage(warning);
 800ff70:	2007      	movs	r0, #7
 800ff72:	f7ff ff3b 	bl	800fdec <assignPage>
	if(pageInfoList[setPage2].arrowInfo == 3)
 800ff76:	4b0c      	ldr	r3, [pc, #48]	; (800ffa8 <configPage2SureClickFunc+0x60>)
 800ff78:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800ff7c:	2b03      	cmp	r3, #3
 800ff7e:	d102      	bne.n	800ff86 <configPage2SureClickFunc+0x3e>
		assignPage(operation);
 800ff80:	2009      	movs	r0, #9
 800ff82:	f7ff ff33 	bl	800fdec <assignPage>
	if(pageInfoList[setPage2].arrowInfo == 4)
 800ff86:	4b08      	ldr	r3, [pc, #32]	; (800ffa8 <configPage2SureClickFunc+0x60>)
 800ff88:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800ff8c:	2b04      	cmp	r3, #4
 800ff8e:	d102      	bne.n	800ff96 <configPage2SureClickFunc+0x4e>
		assignPage(passWordChange);
 800ff90:	2006      	movs	r0, #6
 800ff92:	f7ff ff2b 	bl	800fdec <assignPage>
	osDelay(200);
 800ff96:	20c8      	movs	r0, #200	; 0xc8
 800ff98:	f7f8 fe96 	bl	8008cc8 <osDelay>
 800ff9c:	e000      	b.n	800ffa0 <configPage2SureClickFunc+0x58>
		return;
 800ff9e:	bf00      	nop
}
 800ffa0:	3708      	adds	r7, #8
 800ffa2:	46bd      	mov	sp, r7
 800ffa4:	bd80      	pop	{r7, pc}
 800ffa6:	bf00      	nop
 800ffa8:	20000200 	.word	0x20000200

0800ffac <setFirstClickFunc>:




void setFirstClickFunc(int i)
{
 800ffac:	b580      	push	{r7, lr}
 800ffae:	b082      	sub	sp, #8
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	6078      	str	r0, [r7, #4]
	if(i == 0)
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d008      	beq.n	800ffcc <setFirstClickFunc+0x20>
		return;
	assignPage(passWordInput);
 800ffba:	2001      	movs	r0, #1
 800ffbc:	f7ff ff16 	bl	800fdec <assignPage>
	cleanStack();
 800ffc0:	f7fd ff8e 	bl	800dee0 <cleanStack>
	osDelay(200);
 800ffc4:	20c8      	movs	r0, #200	; 0xc8
 800ffc6:	f7f8 fe7f 	bl	8008cc8 <osDelay>
 800ffca:	e000      	b.n	800ffce <setFirstClickFunc+0x22>
		return;
 800ffcc:	bf00      	nop
}
 800ffce:	3708      	adds	r7, #8
 800ffd0:	46bd      	mov	sp, r7
 800ffd2:	bd80      	pop	{r7, pc}

0800ffd4 <configPage1TopClickFunc>:
void configPage1TopClickFunc(int i)
{
 800ffd4:	b580      	push	{r7, lr}
 800ffd6:	b082      	sub	sp, #8
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	6078      	str	r0, [r7, #4]
	if(i == 0)
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d014      	beq.n	801000c <configPage1TopClickFunc+0x38>
		return;
	pageInfoList[setPage1].arrowInfo--;
 800ffe2:	4b0c      	ldr	r3, [pc, #48]	; (8010014 <configPage1TopClickFunc+0x40>)
 800ffe4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ffe8:	3b01      	subs	r3, #1
 800ffea:	b2da      	uxtb	r2, r3
 800ffec:	4b09      	ldr	r3, [pc, #36]	; (8010014 <configPage1TopClickFunc+0x40>)
 800ffee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	if(pageInfoList[setPage1].arrowInfo < 1){
 800fff2:	4b08      	ldr	r3, [pc, #32]	; (8010014 <configPage1TopClickFunc+0x40>)
 800fff4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d103      	bne.n	8010004 <configPage1TopClickFunc+0x30>
		pageInfoList[setPage1].arrowInfo =1;
 800fffc:	4b05      	ldr	r3, [pc, #20]	; (8010014 <configPage1TopClickFunc+0x40>)
 800fffe:	2201      	movs	r2, #1
 8010000:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	}
	osDelay(200);
 8010004:	20c8      	movs	r0, #200	; 0xc8
 8010006:	f7f8 fe5f 	bl	8008cc8 <osDelay>
 801000a:	e000      	b.n	801000e <configPage1TopClickFunc+0x3a>
		return;
 801000c:	bf00      	nop
}
 801000e:	3708      	adds	r7, #8
 8010010:	46bd      	mov	sp, r7
 8010012:	bd80      	pop	{r7, pc}
 8010014:	20000200 	.word	0x20000200

08010018 <configPage1BottomClickFunc>:
void configPage1BottomClickFunc(int i)
{
 8010018:	b580      	push	{r7, lr}
 801001a:	b082      	sub	sp, #8
 801001c:	af00      	add	r7, sp, #0
 801001e:	6078      	str	r0, [r7, #4]
	if(i == 0)
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	2b00      	cmp	r3, #0
 8010024:	d017      	beq.n	8010056 <configPage1BottomClickFunc+0x3e>
		return;
	pageInfoList[setPage1].arrowInfo ++;
 8010026:	4b0e      	ldr	r3, [pc, #56]	; (8010060 <configPage1BottomClickFunc+0x48>)
 8010028:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801002c:	3301      	adds	r3, #1
 801002e:	b2da      	uxtb	r2, r3
 8010030:	4b0b      	ldr	r3, [pc, #44]	; (8010060 <configPage1BottomClickFunc+0x48>)
 8010032:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	if(pageInfoList[setPage1].arrowInfo>4){
 8010036:	4b0a      	ldr	r3, [pc, #40]	; (8010060 <configPage1BottomClickFunc+0x48>)
 8010038:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801003c:	2b04      	cmp	r3, #4
 801003e:	d906      	bls.n	801004e <configPage1BottomClickFunc+0x36>
		pageInfoList[setPage1].arrowInfo = 4;
 8010040:	4b07      	ldr	r3, [pc, #28]	; (8010060 <configPage1BottomClickFunc+0x48>)
 8010042:	2204      	movs	r2, #4
 8010044:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
		assignPage(setPage2);
 8010048:	2003      	movs	r0, #3
 801004a:	f7ff fecf 	bl	800fdec <assignPage>
	}
	osDelay(200);
 801004e:	20c8      	movs	r0, #200	; 0xc8
 8010050:	f7f8 fe3a 	bl	8008cc8 <osDelay>
 8010054:	e000      	b.n	8010058 <configPage1BottomClickFunc+0x40>
		return;
 8010056:	bf00      	nop
}
 8010058:	3708      	adds	r7, #8
 801005a:	46bd      	mov	sp, r7
 801005c:	bd80      	pop	{r7, pc}
 801005e:	bf00      	nop
 8010060:	20000200 	.word	0x20000200

08010064 <configPage2TopClickFunc>:
void configPage2TopClickFunc(int i)
{
 8010064:	b580      	push	{r7, lr}
 8010066:	b082      	sub	sp, #8
 8010068:	af00      	add	r7, sp, #0
 801006a:	6078      	str	r0, [r7, #4]
	if(i == 0)
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d017      	beq.n	80100a2 <configPage2TopClickFunc+0x3e>
		return;
	pageInfoList[setPage2].arrowInfo--;
 8010072:	4b0e      	ldr	r3, [pc, #56]	; (80100ac <configPage2TopClickFunc+0x48>)
 8010074:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8010078:	3b01      	subs	r3, #1
 801007a:	b2da      	uxtb	r2, r3
 801007c:	4b0b      	ldr	r3, [pc, #44]	; (80100ac <configPage2TopClickFunc+0x48>)
 801007e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	if(pageInfoList[setPage2].arrowInfo == 0){
 8010082:	4b0a      	ldr	r3, [pc, #40]	; (80100ac <configPage2TopClickFunc+0x48>)
 8010084:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8010088:	2b00      	cmp	r3, #0
 801008a:	d106      	bne.n	801009a <configPage2TopClickFunc+0x36>
		pageInfoList[setPage2].arrowInfo = 1;
 801008c:	4b07      	ldr	r3, [pc, #28]	; (80100ac <configPage2TopClickFunc+0x48>)
 801008e:	2201      	movs	r2, #1
 8010090:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
		assignPage(setPage1);
 8010094:	2002      	movs	r0, #2
 8010096:	f7ff fea9 	bl	800fdec <assignPage>
	}
	osDelay(200);
 801009a:	20c8      	movs	r0, #200	; 0xc8
 801009c:	f7f8 fe14 	bl	8008cc8 <osDelay>
 80100a0:	e000      	b.n	80100a4 <configPage2TopClickFunc+0x40>
		return;
 80100a2:	bf00      	nop
}
 80100a4:	3708      	adds	r7, #8
 80100a6:	46bd      	mov	sp, r7
 80100a8:	bd80      	pop	{r7, pc}
 80100aa:	bf00      	nop
 80100ac:	20000200 	.word	0x20000200

080100b0 <configPage2BottomClickFunc>:
void configPage2BottomClickFunc(int i)
{
 80100b0:	b580      	push	{r7, lr}
 80100b2:	b082      	sub	sp, #8
 80100b4:	af00      	add	r7, sp, #0
 80100b6:	6078      	str	r0, [r7, #4]
	if(i == 0)
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d014      	beq.n	80100e8 <configPage2BottomClickFunc+0x38>
		return;
	pageInfoList[setPage2].arrowInfo++;
 80100be:	4b0c      	ldr	r3, [pc, #48]	; (80100f0 <configPage2BottomClickFunc+0x40>)
 80100c0:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80100c4:	3301      	adds	r3, #1
 80100c6:	b2da      	uxtb	r2, r3
 80100c8:	4b09      	ldr	r3, [pc, #36]	; (80100f0 <configPage2BottomClickFunc+0x40>)
 80100ca:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	if(pageInfoList[setPage2].arrowInfo>4){
 80100ce:	4b08      	ldr	r3, [pc, #32]	; (80100f0 <configPage2BottomClickFunc+0x40>)
 80100d0:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80100d4:	2b04      	cmp	r3, #4
 80100d6:	d903      	bls.n	80100e0 <configPage2BottomClickFunc+0x30>
		pageInfoList[setPage2].arrowInfo = 4;
 80100d8:	4b05      	ldr	r3, [pc, #20]	; (80100f0 <configPage2BottomClickFunc+0x40>)
 80100da:	2204      	movs	r2, #4
 80100dc:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	}
	osDelay(200);
 80100e0:	20c8      	movs	r0, #200	; 0xc8
 80100e2:	f7f8 fdf1 	bl	8008cc8 <osDelay>
 80100e6:	e000      	b.n	80100ea <configPage2BottomClickFunc+0x3a>
		return;
 80100e8:	bf00      	nop
}
 80100ea:	3708      	adds	r7, #8
 80100ec:	46bd      	mov	sp, r7
 80100ee:	bd80      	pop	{r7, pc}
 80100f0:	20000200 	.word	0x20000200

080100f4 <passwordInputPageBackClickFunc>:



void passwordInputPageBackClickFunc(int i){
 80100f4:	b580      	push	{r7, lr}
 80100f6:	b082      	sub	sp, #8
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	6078      	str	r0, [r7, #4]
	if(i == 0)
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d016      	beq.n	8010130 <passwordInputPageBackClickFunc+0x3c>
		return;
	myStack.curLoc = 0;
 8010102:	4b0d      	ldr	r3, [pc, #52]	; (8010138 <passwordInputPageBackClickFunc+0x44>)
 8010104:	2200      	movs	r2, #0
 8010106:	601a      	str	r2, [r3, #0]
	if(pageInfoList[passWordInput].isDis)
 8010108:	4b0c      	ldr	r3, [pc, #48]	; (801013c <passwordInputPageBackClickFunc+0x48>)
 801010a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801010e:	2b00      	cmp	r3, #0
 8010110:	d002      	beq.n	8010118 <passwordInputPageBackClickFunc+0x24>
		assignPage(firstPage);
 8010112:	2000      	movs	r0, #0
 8010114:	f7ff fe6a 	bl	800fdec <assignPage>
	if(pageInfoList[passWordChange].isDis)
 8010118:	4b08      	ldr	r3, [pc, #32]	; (801013c <passwordInputPageBackClickFunc+0x48>)
 801011a:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 801011e:	2b00      	cmp	r3, #0
 8010120:	d002      	beq.n	8010128 <passwordInputPageBackClickFunc+0x34>
		assignPage(setPage2);
 8010122:	2003      	movs	r0, #3
 8010124:	f7ff fe62 	bl	800fdec <assignPage>
	osDelay(200);
 8010128:	20c8      	movs	r0, #200	; 0xc8
 801012a:	f7f8 fdcd 	bl	8008cc8 <osDelay>
 801012e:	e000      	b.n	8010132 <passwordInputPageBackClickFunc+0x3e>
		return;
 8010130:	bf00      	nop
}
 8010132:	3708      	adds	r7, #8
 8010134:	46bd      	mov	sp, r7
 8010136:	bd80      	pop	{r7, pc}
 8010138:	200072c4 	.word	0x200072c4
 801013c:	20000200 	.word	0x20000200

08010140 <referBackClickFunc>:



void referBackClickFunc(int i){
 8010140:	b580      	push	{r7, lr}
 8010142:	b082      	sub	sp, #8
 8010144:	af00      	add	r7, sp, #0
 8010146:	6078      	str	r0, [r7, #4]
	if(i == 0)
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	2b00      	cmp	r3, #0
 801014c:	d01b      	beq.n	8010186 <referBackClickFunc+0x46>
		return;
	pageInfoList[warning].baseInfo = 1;
 801014e:	4b10      	ldr	r3, [pc, #64]	; (8010190 <referBackClickFunc+0x50>)
 8010150:	2201      	movs	r2, #1
 8010152:	f883 21f0 	strb.w	r2, [r3, #496]	; 0x1f0
	pageInfoList[operation].baseInfo = 1;
 8010156:	4b0e      	ldr	r3, [pc, #56]	; (8010190 <referBackClickFunc+0x50>)
 8010158:	2201      	movs	r2, #1
 801015a:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270
	pageInfoList[faultRefer].baseInfo = 1;
 801015e:	4b0c      	ldr	r3, [pc, #48]	; (8010190 <referBackClickFunc+0x50>)
 8010160:	2201      	movs	r2, #1
 8010162:	f883 22b0 	strb.w	r2, [r3, #688]	; 0x2b0
	warnReferPageNum = 0;
 8010166:	4b0b      	ldr	r3, [pc, #44]	; (8010194 <referBackClickFunc+0x54>)
 8010168:	2200      	movs	r2, #0
 801016a:	601a      	str	r2, [r3, #0]
	faultReferPageNum = 0;
 801016c:	4b0a      	ldr	r3, [pc, #40]	; (8010198 <referBackClickFunc+0x58>)
 801016e:	2200      	movs	r2, #0
 8010170:	601a      	str	r2, [r3, #0]
	oprateReferPageNum = 0;
 8010172:	4b0a      	ldr	r3, [pc, #40]	; (801019c <referBackClickFunc+0x5c>)
 8010174:	2200      	movs	r2, #0
 8010176:	601a      	str	r2, [r3, #0]
	assignPage(setPage2);
 8010178:	2003      	movs	r0, #3
 801017a:	f7ff fe37 	bl	800fdec <assignPage>
	osDelay(200);
 801017e:	20c8      	movs	r0, #200	; 0xc8
 8010180:	f7f8 fda2 	bl	8008cc8 <osDelay>
 8010184:	e000      	b.n	8010188 <referBackClickFunc+0x48>
		return;
 8010186:	bf00      	nop
}
 8010188:	3708      	adds	r7, #8
 801018a:	46bd      	mov	sp, r7
 801018c:	bd80      	pop	{r7, pc}
 801018e:	bf00      	nop
 8010190:	20000200 	.word	0x20000200
 8010194:	2000731c 	.word	0x2000731c
 8010198:	200093ac 	.word	0x200093ac
 801019c:	200072e4 	.word	0x200072e4

080101a0 <referPageTopClickFunc>:

void referPageTopClickFunc(int i){
 80101a0:	b580      	push	{r7, lr}
 80101a2:	b082      	sub	sp, #8
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	6078      	str	r0, [r7, #4]
	if(i == 0)
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d039      	beq.n	8010222 <referPageTopClickFunc+0x82>
		return;
	if(pageInfoList[warning].isDis){
 80101ae:	4b1f      	ldr	r3, [pc, #124]	; (801022c <referPageTopClickFunc+0x8c>)
 80101b0:	f893 31c0 	ldrb.w	r3, [r3, #448]	; 0x1c0
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d00c      	beq.n	80101d2 <referPageTopClickFunc+0x32>
		if(pageInfoList[warning].baseInfo > 1)
 80101b8:	4b1c      	ldr	r3, [pc, #112]	; (801022c <referPageTopClickFunc+0x8c>)
 80101ba:	f893 31f0 	ldrb.w	r3, [r3, #496]	; 0x1f0
 80101be:	2b01      	cmp	r3, #1
 80101c0:	d907      	bls.n	80101d2 <referPageTopClickFunc+0x32>
			pageInfoList[warning].baseInfo--;
 80101c2:	4b1a      	ldr	r3, [pc, #104]	; (801022c <referPageTopClickFunc+0x8c>)
 80101c4:	f893 31f0 	ldrb.w	r3, [r3, #496]	; 0x1f0
 80101c8:	3b01      	subs	r3, #1
 80101ca:	b2da      	uxtb	r2, r3
 80101cc:	4b17      	ldr	r3, [pc, #92]	; (801022c <referPageTopClickFunc+0x8c>)
 80101ce:	f883 21f0 	strb.w	r2, [r3, #496]	; 0x1f0
	}
	if(pageInfoList[operation].isDis){
 80101d2:	4b16      	ldr	r3, [pc, #88]	; (801022c <referPageTopClickFunc+0x8c>)
 80101d4:	f893 3240 	ldrb.w	r3, [r3, #576]	; 0x240
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d00c      	beq.n	80101f6 <referPageTopClickFunc+0x56>
		if(pageInfoList[operation].baseInfo > 1)
 80101dc:	4b13      	ldr	r3, [pc, #76]	; (801022c <referPageTopClickFunc+0x8c>)
 80101de:	f893 3270 	ldrb.w	r3, [r3, #624]	; 0x270
 80101e2:	2b01      	cmp	r3, #1
 80101e4:	d907      	bls.n	80101f6 <referPageTopClickFunc+0x56>
			pageInfoList[operation].baseInfo--;
 80101e6:	4b11      	ldr	r3, [pc, #68]	; (801022c <referPageTopClickFunc+0x8c>)
 80101e8:	f893 3270 	ldrb.w	r3, [r3, #624]	; 0x270
 80101ec:	3b01      	subs	r3, #1
 80101ee:	b2da      	uxtb	r2, r3
 80101f0:	4b0e      	ldr	r3, [pc, #56]	; (801022c <referPageTopClickFunc+0x8c>)
 80101f2:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270
	}
	if(pageInfoList[faultRefer].isDis){
 80101f6:	4b0d      	ldr	r3, [pc, #52]	; (801022c <referPageTopClickFunc+0x8c>)
 80101f8:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d00c      	beq.n	801021a <referPageTopClickFunc+0x7a>
		if(pageInfoList[faultRefer].baseInfo > 1)
 8010200:	4b0a      	ldr	r3, [pc, #40]	; (801022c <referPageTopClickFunc+0x8c>)
 8010202:	f893 32b0 	ldrb.w	r3, [r3, #688]	; 0x2b0
 8010206:	2b01      	cmp	r3, #1
 8010208:	d907      	bls.n	801021a <referPageTopClickFunc+0x7a>
			pageInfoList[faultRefer].baseInfo--;
 801020a:	4b08      	ldr	r3, [pc, #32]	; (801022c <referPageTopClickFunc+0x8c>)
 801020c:	f893 32b0 	ldrb.w	r3, [r3, #688]	; 0x2b0
 8010210:	3b01      	subs	r3, #1
 8010212:	b2da      	uxtb	r2, r3
 8010214:	4b05      	ldr	r3, [pc, #20]	; (801022c <referPageTopClickFunc+0x8c>)
 8010216:	f883 22b0 	strb.w	r2, [r3, #688]	; 0x2b0
	}
	osDelay(200);
 801021a:	20c8      	movs	r0, #200	; 0xc8
 801021c:	f7f8 fd54 	bl	8008cc8 <osDelay>
 8010220:	e000      	b.n	8010224 <referPageTopClickFunc+0x84>
		return;
 8010222:	bf00      	nop
}
 8010224:	3708      	adds	r7, #8
 8010226:	46bd      	mov	sp, r7
 8010228:	bd80      	pop	{r7, pc}
 801022a:	bf00      	nop
 801022c:	20000200 	.word	0x20000200

08010230 <referPageBottomClickFunc>:
void referPageBottomClickFunc(int i){
 8010230:	b580      	push	{r7, lr}
 8010232:	b082      	sub	sp, #8
 8010234:	af00      	add	r7, sp, #0
 8010236:	6078      	str	r0, [r7, #4]
	if(i == 0)
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d02a      	beq.n	8010294 <referPageBottomClickFunc+0x64>
		return;
	if(pageInfoList[warning].isDis){
 801023e:	4b17      	ldr	r3, [pc, #92]	; (801029c <referPageBottomClickFunc+0x6c>)
 8010240:	f893 31c0 	ldrb.w	r3, [r3, #448]	; 0x1c0
 8010244:	2b00      	cmp	r3, #0
 8010246:	d007      	beq.n	8010258 <referPageBottomClickFunc+0x28>
		if(pageInfoList[warning].baseInfo < 1500)
			pageInfoList[warning].baseInfo++;
 8010248:	4b14      	ldr	r3, [pc, #80]	; (801029c <referPageBottomClickFunc+0x6c>)
 801024a:	f893 31f0 	ldrb.w	r3, [r3, #496]	; 0x1f0
 801024e:	3301      	adds	r3, #1
 8010250:	b2da      	uxtb	r2, r3
 8010252:	4b12      	ldr	r3, [pc, #72]	; (801029c <referPageBottomClickFunc+0x6c>)
 8010254:	f883 21f0 	strb.w	r2, [r3, #496]	; 0x1f0
	}
	if(pageInfoList[operation].isDis){
 8010258:	4b10      	ldr	r3, [pc, #64]	; (801029c <referPageBottomClickFunc+0x6c>)
 801025a:	f893 3240 	ldrb.w	r3, [r3, #576]	; 0x240
 801025e:	2b00      	cmp	r3, #0
 8010260:	d007      	beq.n	8010272 <referPageBottomClickFunc+0x42>
		if(pageInfoList[operation].baseInfo < 1500)
			pageInfoList[operation].baseInfo++;
 8010262:	4b0e      	ldr	r3, [pc, #56]	; (801029c <referPageBottomClickFunc+0x6c>)
 8010264:	f893 3270 	ldrb.w	r3, [r3, #624]	; 0x270
 8010268:	3301      	adds	r3, #1
 801026a:	b2da      	uxtb	r2, r3
 801026c:	4b0b      	ldr	r3, [pc, #44]	; (801029c <referPageBottomClickFunc+0x6c>)
 801026e:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270
	}
	if(pageInfoList[faultRefer].isDis){
 8010272:	4b0a      	ldr	r3, [pc, #40]	; (801029c <referPageBottomClickFunc+0x6c>)
 8010274:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8010278:	2b00      	cmp	r3, #0
 801027a:	d007      	beq.n	801028c <referPageBottomClickFunc+0x5c>
		if(pageInfoList[faultRefer].baseInfo < 1500)
			pageInfoList[faultRefer].baseInfo++;
 801027c:	4b07      	ldr	r3, [pc, #28]	; (801029c <referPageBottomClickFunc+0x6c>)
 801027e:	f893 32b0 	ldrb.w	r3, [r3, #688]	; 0x2b0
 8010282:	3301      	adds	r3, #1
 8010284:	b2da      	uxtb	r2, r3
 8010286:	4b05      	ldr	r3, [pc, #20]	; (801029c <referPageBottomClickFunc+0x6c>)
 8010288:	f883 22b0 	strb.w	r2, [r3, #688]	; 0x2b0
	}
	osDelay(200);
 801028c:	20c8      	movs	r0, #200	; 0xc8
 801028e:	f7f8 fd1b 	bl	8008cc8 <osDelay>
 8010292:	e000      	b.n	8010296 <referPageBottomClickFunc+0x66>
		return;
 8010294:	bf00      	nop
}
 8010296:	3708      	adds	r7, #8
 8010298:	46bd      	mov	sp, r7
 801029a:	bd80      	pop	{r7, pc}
 801029c:	20000200 	.word	0x20000200

080102a0 <demarcatePageTopClickFunc>:

void demarcatePageTopClickFunc(int i){
 80102a0:	b580      	push	{r7, lr}
 80102a2:	b082      	sub	sp, #8
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	6078      	str	r0, [r7, #4]
	if(i == 0)
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d026      	beq.n	80102fc <demarcatePageTopClickFunc+0x5c>
		return;
	if(pageInfoList[demarcate].baseInfo == 0){
 80102ae:	4b15      	ldr	r3, [pc, #84]	; (8010304 <demarcatePageTopClickFunc+0x64>)
 80102b0:	f893 3230 	ldrb.w	r3, [r3, #560]	; 0x230
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d111      	bne.n	80102dc <demarcatePageTopClickFunc+0x3c>
		pageInfoList[demarcate].arrowInfo--;
 80102b8:	4b12      	ldr	r3, [pc, #72]	; (8010304 <demarcatePageTopClickFunc+0x64>)
 80102ba:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80102be:	3b01      	subs	r3, #1
 80102c0:	b2da      	uxtb	r2, r3
 80102c2:	4b10      	ldr	r3, [pc, #64]	; (8010304 <demarcatePageTopClickFunc+0x64>)
 80102c4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
		if(pageInfoList[demarcate].arrowInfo < 1)
 80102c8:	4b0e      	ldr	r3, [pc, #56]	; (8010304 <demarcatePageTopClickFunc+0x64>)
 80102ca:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d110      	bne.n	80102f4 <demarcatePageTopClickFunc+0x54>
			pageInfoList[demarcate].arrowInfo = 1;
 80102d2:	4b0c      	ldr	r3, [pc, #48]	; (8010304 <demarcatePageTopClickFunc+0x64>)
 80102d4:	2201      	movs	r2, #1
 80102d6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
 80102da:	e00b      	b.n	80102f4 <demarcatePageTopClickFunc+0x54>
	}
	else{
		deviceOwnInfo.spanValue++;
 80102dc:	4b0a      	ldr	r3, [pc, #40]	; (8010308 <demarcatePageTopClickFunc+0x68>)
 80102de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80102e0:	3301      	adds	r3, #1
 80102e2:	4a09      	ldr	r2, [pc, #36]	; (8010308 <demarcatePageTopClickFunc+0x68>)
 80102e4:	63d3      	str	r3, [r2, #60]	; 0x3c
		if(deviceOwnInfo.spanValue>99)
 80102e6:	4b08      	ldr	r3, [pc, #32]	; (8010308 <demarcatePageTopClickFunc+0x68>)
 80102e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80102ea:	2b63      	cmp	r3, #99	; 0x63
 80102ec:	dd02      	ble.n	80102f4 <demarcatePageTopClickFunc+0x54>
			deviceOwnInfo.spanValue = 99;
 80102ee:	4b06      	ldr	r3, [pc, #24]	; (8010308 <demarcatePageTopClickFunc+0x68>)
 80102f0:	2263      	movs	r2, #99	; 0x63
 80102f2:	63da      	str	r2, [r3, #60]	; 0x3c
	}
	osDelay(200);
 80102f4:	20c8      	movs	r0, #200	; 0xc8
 80102f6:	f7f8 fce7 	bl	8008cc8 <osDelay>
 80102fa:	e000      	b.n	80102fe <demarcatePageTopClickFunc+0x5e>
		return;
 80102fc:	bf00      	nop

}
 80102fe:	3708      	adds	r7, #8
 8010300:	46bd      	mov	sp, r7
 8010302:	bd80      	pop	{r7, pc}
 8010304:	20000200 	.word	0x20000200
 8010308:	2000017c 	.word	0x2000017c

0801030c <demarcatePageLeftClickFunc>:
void demarcatePageLeftClickFunc(int i){
 801030c:	b480      	push	{r7}
 801030e:	b083      	sub	sp, #12
 8010310:	af00      	add	r7, sp, #0
 8010312:	6078      	str	r0, [r7, #4]
	if(i == 0)
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	2b00      	cmp	r3, #0
		return;
}
 8010318:	370c      	adds	r7, #12
 801031a:	46bd      	mov	sp, r7
 801031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010320:	4770      	bx	lr

08010322 <demarcatePageRightClickFunc>:
void demarcatePageRightClickFunc(int i){
 8010322:	b480      	push	{r7}
 8010324:	b083      	sub	sp, #12
 8010326:	af00      	add	r7, sp, #0
 8010328:	6078      	str	r0, [r7, #4]
	if(i == 0)
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	2b00      	cmp	r3, #0
		return;
}
 801032e:	370c      	adds	r7, #12
 8010330:	46bd      	mov	sp, r7
 8010332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010336:	4770      	bx	lr

08010338 <demarcatePageBottomClickFunc>:
void demarcatePageBottomClickFunc(int i){
 8010338:	b580      	push	{r7, lr}
 801033a:	b082      	sub	sp, #8
 801033c:	af00      	add	r7, sp, #0
 801033e:	6078      	str	r0, [r7, #4]
	if(i == 0)
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	2b00      	cmp	r3, #0
 8010344:	d026      	beq.n	8010394 <demarcatePageBottomClickFunc+0x5c>
		return;
	if(pageInfoList[demarcate].baseInfo == 0){
 8010346:	4b15      	ldr	r3, [pc, #84]	; (801039c <demarcatePageBottomClickFunc+0x64>)
 8010348:	f893 3230 	ldrb.w	r3, [r3, #560]	; 0x230
 801034c:	2b00      	cmp	r3, #0
 801034e:	d111      	bne.n	8010374 <demarcatePageBottomClickFunc+0x3c>
			pageInfoList[demarcate].arrowInfo++;
 8010350:	4b12      	ldr	r3, [pc, #72]	; (801039c <demarcatePageBottomClickFunc+0x64>)
 8010352:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8010356:	3301      	adds	r3, #1
 8010358:	b2da      	uxtb	r2, r3
 801035a:	4b10      	ldr	r3, [pc, #64]	; (801039c <demarcatePageBottomClickFunc+0x64>)
 801035c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
			if(pageInfoList[demarcate].arrowInfo > 3)
 8010360:	4b0e      	ldr	r3, [pc, #56]	; (801039c <demarcatePageBottomClickFunc+0x64>)
 8010362:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8010366:	2b03      	cmp	r3, #3
 8010368:	d910      	bls.n	801038c <demarcatePageBottomClickFunc+0x54>
				pageInfoList[demarcate].arrowInfo = 3;
 801036a:	4b0c      	ldr	r3, [pc, #48]	; (801039c <demarcatePageBottomClickFunc+0x64>)
 801036c:	2203      	movs	r2, #3
 801036e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
 8010372:	e00b      	b.n	801038c <demarcatePageBottomClickFunc+0x54>
		}
	else{
		deviceOwnInfo.spanValue--;
 8010374:	4b0a      	ldr	r3, [pc, #40]	; (80103a0 <demarcatePageBottomClickFunc+0x68>)
 8010376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010378:	3b01      	subs	r3, #1
 801037a:	4a09      	ldr	r2, [pc, #36]	; (80103a0 <demarcatePageBottomClickFunc+0x68>)
 801037c:	63d3      	str	r3, [r2, #60]	; 0x3c
		if(deviceOwnInfo.spanValue < 0)
 801037e:	4b08      	ldr	r3, [pc, #32]	; (80103a0 <demarcatePageBottomClickFunc+0x68>)
 8010380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010382:	2b00      	cmp	r3, #0
 8010384:	da02      	bge.n	801038c <demarcatePageBottomClickFunc+0x54>
			deviceOwnInfo.spanValue = 0;
 8010386:	4b06      	ldr	r3, [pc, #24]	; (80103a0 <demarcatePageBottomClickFunc+0x68>)
 8010388:	2200      	movs	r2, #0
 801038a:	63da      	str	r2, [r3, #60]	; 0x3c
	}
	osDelay(200);
 801038c:	20c8      	movs	r0, #200	; 0xc8
 801038e:	f7f8 fc9b 	bl	8008cc8 <osDelay>
 8010392:	e000      	b.n	8010396 <demarcatePageBottomClickFunc+0x5e>
		return;
 8010394:	bf00      	nop
}
 8010396:	3708      	adds	r7, #8
 8010398:	46bd      	mov	sp, r7
 801039a:	bd80      	pop	{r7, pc}
 801039c:	20000200 	.word	0x20000200
 80103a0:	2000017c 	.word	0x2000017c

080103a4 <demarcateBackClickFunc>:

void demarcateBackClickFunc(int i){
 80103a4:	b580      	push	{r7, lr}
 80103a6:	b082      	sub	sp, #8
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	6078      	str	r0, [r7, #4]
	if(i == 0)
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d010      	beq.n	80103d4 <demarcateBackClickFunc+0x30>
		return;
	if(pageInfoList[demarcate].baseInfo == 1){
 80103b2:	4b0a      	ldr	r3, [pc, #40]	; (80103dc <demarcateBackClickFunc+0x38>)
 80103b4:	f893 3230 	ldrb.w	r3, [r3, #560]	; 0x230
 80103b8:	2b01      	cmp	r3, #1
 80103ba:	d104      	bne.n	80103c6 <demarcateBackClickFunc+0x22>
		pageInfoList[demarcate].baseInfo = 0;
 80103bc:	4b07      	ldr	r3, [pc, #28]	; (80103dc <demarcateBackClickFunc+0x38>)
 80103be:	2200      	movs	r2, #0
 80103c0:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
 80103c4:	e002      	b.n	80103cc <demarcateBackClickFunc+0x28>
	}
	else
		assignPage(setPage1);
 80103c6:	2002      	movs	r0, #2
 80103c8:	f7ff fd10 	bl	800fdec <assignPage>
	osDelay(200);
 80103cc:	20c8      	movs	r0, #200	; 0xc8
 80103ce:	f7f8 fc7b 	bl	8008cc8 <osDelay>
 80103d2:	e000      	b.n	80103d6 <demarcateBackClickFunc+0x32>
		return;
 80103d4:	bf00      	nop
}
 80103d6:	3708      	adds	r7, #8
 80103d8:	46bd      	mov	sp, r7
 80103da:	bd80      	pop	{r7, pc}
 80103dc:	20000200 	.word	0x20000200

080103e0 <demarcateSureClickFunc>:

void demarcateSureClickFunc(int i){
 80103e0:	b580      	push	{r7, lr}
 80103e2:	b082      	sub	sp, #8
 80103e4:	af00      	add	r7, sp, #0
 80103e6:	6078      	str	r0, [r7, #4]
	if(i == 0)
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d030      	beq.n	8010450 <demarcateSureClickFunc+0x70>
		return;
	if(pageInfoList[demarcate].arrowInfo == 1){
 80103ee:	4b1a      	ldr	r3, [pc, #104]	; (8010458 <demarcateSureClickFunc+0x78>)
 80103f0:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80103f4:	2b01      	cmp	r3, #1
 80103f6:	d106      	bne.n	8010406 <demarcateSureClickFunc+0x26>
		uartSendInfo.zeroDemarcateFlag = 0;
 80103f8:	4b18      	ldr	r3, [pc, #96]	; (801045c <demarcateSureClickFunc+0x7c>)
 80103fa:	2200      	movs	r2, #0
 80103fc:	605a      	str	r2, [r3, #4]
		operationRecord(zeroDemarcateRecordValue,0);
 80103fe:	2100      	movs	r1, #0
 8010400:	200d      	movs	r0, #13
 8010402:	f000 ff57 	bl	80112b4 <operationRecord>
	}
	if(pageInfoList[demarcate].arrowInfo == 2){
 8010406:	4b14      	ldr	r3, [pc, #80]	; (8010458 <demarcateSureClickFunc+0x78>)
 8010408:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 801040c:	2b02      	cmp	r3, #2
 801040e:	d10d      	bne.n	801042c <demarcateSureClickFunc+0x4c>
		if(pageInfoList[demarcate].baseInfo == 1){
 8010410:	4b11      	ldr	r3, [pc, #68]	; (8010458 <demarcateSureClickFunc+0x78>)
 8010412:	f893 3230 	ldrb.w	r3, [r3, #560]	; 0x230
 8010416:	2b01      	cmp	r3, #1
 8010418:	d104      	bne.n	8010424 <demarcateSureClickFunc+0x44>
			pageInfoList[demarcate].baseInfo = 0;
 801041a:	4b0f      	ldr	r3, [pc, #60]	; (8010458 <demarcateSureClickFunc+0x78>)
 801041c:	2200      	movs	r2, #0
 801041e:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
 8010422:	e003      	b.n	801042c <demarcateSureClickFunc+0x4c>
		}
		else{
			pageInfoList[demarcate].baseInfo = 1;
 8010424:	4b0c      	ldr	r3, [pc, #48]	; (8010458 <demarcateSureClickFunc+0x78>)
 8010426:	2201      	movs	r2, #1
 8010428:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
		}
	}
	if(pageInfoList[demarcate].arrowInfo == 3){
 801042c:	4b0a      	ldr	r3, [pc, #40]	; (8010458 <demarcateSureClickFunc+0x78>)
 801042e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8010432:	2b03      	cmp	r3, #3
 8010434:	d108      	bne.n	8010448 <demarcateSureClickFunc+0x68>
		uartSendInfo.spanDemarcateFlag = 0;
 8010436:	4b09      	ldr	r3, [pc, #36]	; (801045c <demarcateSureClickFunc+0x7c>)
 8010438:	2200      	movs	r2, #0
 801043a:	609a      	str	r2, [r3, #8]
		operationRecord(spanDemarcateRecordValue,deviceOwnInfo.spanValue);
 801043c:	4b08      	ldr	r3, [pc, #32]	; (8010460 <demarcateSureClickFunc+0x80>)
 801043e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010440:	4619      	mov	r1, r3
 8010442:	200c      	movs	r0, #12
 8010444:	f000 ff36 	bl	80112b4 <operationRecord>
	}

	osDelay(200);
 8010448:	20c8      	movs	r0, #200	; 0xc8
 801044a:	f7f8 fc3d 	bl	8008cc8 <osDelay>
 801044e:	e000      	b.n	8010452 <demarcateSureClickFunc+0x72>
		return;
 8010450:	bf00      	nop
}
 8010452:	3708      	adds	r7, #8
 8010454:	46bd      	mov	sp, r7
 8010456:	bd80      	pop	{r7, pc}
 8010458:	20000200 	.word	0x20000200
 801045c:	2000000c 	.word	0x2000000c
 8010460:	2000017c 	.word	0x2000017c

08010464 <passwordInputPageSureClickFunc>:

extern uint16_t passWord;
void passwordInputPageSureClickFunc(int i){
 8010464:	b590      	push	{r4, r7, lr}
 8010466:	b08d      	sub	sp, #52	; 0x34
 8010468:	af00      	add	r7, sp, #0
 801046a:	6078      	str	r0, [r7, #4]
	if(i == 0)
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	2b00      	cmp	r3, #0
 8010470:	f000 8090 	beq.w	8010594 <passwordInputPageSureClickFunc+0x130>
		return;
	int k = myPop()+myPop()*10+myPop()*100+myPop()*1000;
 8010474:	f7fd fcf8 	bl	800de68 <myPop>
 8010478:	4603      	mov	r3, r0
 801047a:	461c      	mov	r4, r3
 801047c:	f7fd fcf4 	bl	800de68 <myPop>
 8010480:	4603      	mov	r3, r0
 8010482:	461a      	mov	r2, r3
 8010484:	4613      	mov	r3, r2
 8010486:	009b      	lsls	r3, r3, #2
 8010488:	4413      	add	r3, r2
 801048a:	005b      	lsls	r3, r3, #1
 801048c:	441c      	add	r4, r3
 801048e:	f7fd fceb 	bl	800de68 <myPop>
 8010492:	4603      	mov	r3, r0
 8010494:	461a      	mov	r2, r3
 8010496:	2364      	movs	r3, #100	; 0x64
 8010498:	fb03 f302 	mul.w	r3, r3, r2
 801049c:	441c      	add	r4, r3
 801049e:	f7fd fce3 	bl	800de68 <myPop>
 80104a2:	4603      	mov	r3, r0
 80104a4:	461a      	mov	r2, r3
 80104a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80104aa:	fb03 f302 	mul.w	r3, r3, r2
 80104ae:	4423      	add	r3, r4
 80104b0:	627b      	str	r3, [r7, #36]	; 0x24
	if(pageInfoList[1].isDis && k == passWord){
 80104b2:	4b3a      	ldr	r3, [pc, #232]	; (801059c <passwordInputPageSureClickFunc+0x138>)
 80104b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d008      	beq.n	80104ce <passwordInputPageSureClickFunc+0x6a>
 80104bc:	4b38      	ldr	r3, [pc, #224]	; (80105a0 <passwordInputPageSureClickFunc+0x13c>)
 80104be:	881b      	ldrh	r3, [r3, #0]
 80104c0:	461a      	mov	r2, r3
 80104c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104c4:	4293      	cmp	r3, r2
 80104c6:	d102      	bne.n	80104ce <passwordInputPageSureClickFunc+0x6a>
		assignPage(setPage1);
 80104c8:	2002      	movs	r0, #2
 80104ca:	f7ff fc8f 	bl	800fdec <assignPage>
	}
	if(pageInfoList[6].isDis){
 80104ce:	4b33      	ldr	r3, [pc, #204]	; (801059c <passwordInputPageSureClickFunc+0x138>)
 80104d0:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d059      	beq.n	801058c <passwordInputPageSureClickFunc+0x128>
		char newPassWord[10];
		char oldPassWord[10];
		sprintf(oldPassWord, "P%4d.txt", passWord);
 80104d8:	4b31      	ldr	r3, [pc, #196]	; (80105a0 <passwordInputPageSureClickFunc+0x13c>)
 80104da:	881b      	ldrh	r3, [r3, #0]
 80104dc:	461a      	mov	r2, r3
 80104de:	f107 030c 	add.w	r3, r7, #12
 80104e2:	4930      	ldr	r1, [pc, #192]	; (80105a4 <passwordInputPageSureClickFunc+0x140>)
 80104e4:	4618      	mov	r0, r3
 80104e6:	f002 f8a9 	bl	801263c <siprintf>
		clean(oldPassWord);
 80104ea:	2300      	movs	r3, #0
 80104ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80104ee:	e00f      	b.n	8010510 <passwordInputPageSureClickFunc+0xac>
 80104f0:	f107 020c 	add.w	r2, r7, #12
 80104f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104f6:	4413      	add	r3, r2
 80104f8:	781b      	ldrb	r3, [r3, #0]
 80104fa:	2b20      	cmp	r3, #32
 80104fc:	d105      	bne.n	801050a <passwordInputPageSureClickFunc+0xa6>
 80104fe:	f107 020c 	add.w	r2, r7, #12
 8010502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010504:	4413      	add	r3, r2
 8010506:	2230      	movs	r2, #48	; 0x30
 8010508:	701a      	strb	r2, [r3, #0]
 801050a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801050c:	3301      	adds	r3, #1
 801050e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010512:	2b09      	cmp	r3, #9
 8010514:	d9ec      	bls.n	80104f0 <passwordInputPageSureClickFunc+0x8c>
		f_unlink(oldPassWord);
 8010516:	f107 030c 	add.w	r3, r7, #12
 801051a:	4618      	mov	r0, r3
 801051c:	f7f8 f909 	bl	8008732 <f_unlink>
		passWord = k;
 8010520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010522:	b29a      	uxth	r2, r3
 8010524:	4b1e      	ldr	r3, [pc, #120]	; (80105a0 <passwordInputPageSureClickFunc+0x13c>)
 8010526:	801a      	strh	r2, [r3, #0]
		sprintf(newPassWord, "P%4d.txt", passWord);
 8010528:	4b1d      	ldr	r3, [pc, #116]	; (80105a0 <passwordInputPageSureClickFunc+0x13c>)
 801052a:	881b      	ldrh	r3, [r3, #0]
 801052c:	461a      	mov	r2, r3
 801052e:	f107 0318 	add.w	r3, r7, #24
 8010532:	491c      	ldr	r1, [pc, #112]	; (80105a4 <passwordInputPageSureClickFunc+0x140>)
 8010534:	4618      	mov	r0, r3
 8010536:	f002 f881 	bl	801263c <siprintf>
		clean(newPassWord);
 801053a:	2300      	movs	r3, #0
 801053c:	62bb      	str	r3, [r7, #40]	; 0x28
 801053e:	e00f      	b.n	8010560 <passwordInputPageSureClickFunc+0xfc>
 8010540:	f107 0218 	add.w	r2, r7, #24
 8010544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010546:	4413      	add	r3, r2
 8010548:	781b      	ldrb	r3, [r3, #0]
 801054a:	2b20      	cmp	r3, #32
 801054c:	d105      	bne.n	801055a <passwordInputPageSureClickFunc+0xf6>
 801054e:	f107 0218 	add.w	r2, r7, #24
 8010552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010554:	4413      	add	r3, r2
 8010556:	2230      	movs	r2, #48	; 0x30
 8010558:	701a      	strb	r2, [r3, #0]
 801055a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801055c:	3301      	adds	r3, #1
 801055e:	62bb      	str	r3, [r7, #40]	; 0x28
 8010560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010562:	2b09      	cmp	r3, #9
 8010564:	d9ec      	bls.n	8010540 <passwordInputPageSureClickFunc+0xdc>
		f_open(&SDFile, newPassWord, FA_OPEN_ALWAYS | FA_WRITE | FA_READ|FA_OPEN_APPEND);
 8010566:	f107 0318 	add.w	r3, r7, #24
 801056a:	2233      	movs	r2, #51	; 0x33
 801056c:	4619      	mov	r1, r3
 801056e:	480e      	ldr	r0, [pc, #56]	; (80105a8 <passwordInputPageSureClickFunc+0x144>)
 8010570:	f7f7 f816 	bl	80075a0 <f_open>
		f_close(&SDFile);
 8010574:	480c      	ldr	r0, [pc, #48]	; (80105a8 <passwordInputPageSureClickFunc+0x144>)
 8010576:	f7f7 fd73 	bl	8008060 <f_close>
		assignPage(setPage2);
 801057a:	2003      	movs	r0, #3
 801057c:	f7ff fc36 	bl	800fdec <assignPage>
		operationRecord(changePassWordRecordValue, passWord);
 8010580:	4b07      	ldr	r3, [pc, #28]	; (80105a0 <passwordInputPageSureClickFunc+0x13c>)
 8010582:	881b      	ldrh	r3, [r3, #0]
 8010584:	4619      	mov	r1, r3
 8010586:	2007      	movs	r0, #7
 8010588:	f000 fe94 	bl	80112b4 <operationRecord>
	}
	osDelay(200);
 801058c:	20c8      	movs	r0, #200	; 0xc8
 801058e:	f7f8 fb9b 	bl	8008cc8 <osDelay>
 8010592:	e000      	b.n	8010596 <passwordInputPageSureClickFunc+0x132>
		return;
 8010594:	bf00      	nop
}
 8010596:	3734      	adds	r7, #52	; 0x34
 8010598:	46bd      	mov	sp, r7
 801059a:	bd90      	pop	{r4, r7, pc}
 801059c:	20000200 	.word	0x20000200
 80105a0:	20000634 	.word	0x20000634
 80105a4:	08012ffc 	.word	0x08012ffc
 80105a8:	20009744 	.word	0x20009744

080105ac <passwordInputPageTopClickFunc>:
void passwordInputPageTopClickFunc(int i){
 80105ac:	b580      	push	{r7, lr}
 80105ae:	b082      	sub	sp, #8
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	6078      	str	r0, [r7, #4]
	if(i == 0)
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d006      	beq.n	80105c8 <passwordInputPageTopClickFunc+0x1c>
		return;
	myPush(1);
 80105ba:	2001      	movs	r0, #1
 80105bc:	f7fd fc72 	bl	800dea4 <myPush>
	osDelay(200);
 80105c0:	20c8      	movs	r0, #200	; 0xc8
 80105c2:	f7f8 fb81 	bl	8008cc8 <osDelay>
 80105c6:	e000      	b.n	80105ca <passwordInputPageTopClickFunc+0x1e>
		return;
 80105c8:	bf00      	nop
}
 80105ca:	3708      	adds	r7, #8
 80105cc:	46bd      	mov	sp, r7
 80105ce:	bd80      	pop	{r7, pc}

080105d0 <passwordInputPageBottomClickFunc>:
void passwordInputPageBottomClickFunc(int i){
 80105d0:	b580      	push	{r7, lr}
 80105d2:	b082      	sub	sp, #8
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	6078      	str	r0, [r7, #4]
	if(i == 0)
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d006      	beq.n	80105ec <passwordInputPageBottomClickFunc+0x1c>
		return;
	myPush(2);
 80105de:	2002      	movs	r0, #2
 80105e0:	f7fd fc60 	bl	800dea4 <myPush>
	osDelay(200);
 80105e4:	20c8      	movs	r0, #200	; 0xc8
 80105e6:	f7f8 fb6f 	bl	8008cc8 <osDelay>
 80105ea:	e000      	b.n	80105ee <passwordInputPageBottomClickFunc+0x1e>
		return;
 80105ec:	bf00      	nop
}
 80105ee:	3708      	adds	r7, #8
 80105f0:	46bd      	mov	sp, r7
 80105f2:	bd80      	pop	{r7, pc}

080105f4 <passwordInputPageLeftClickFunc>:
void passwordInputPageLeftClickFunc(int i){
 80105f4:	b580      	push	{r7, lr}
 80105f6:	b082      	sub	sp, #8
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	6078      	str	r0, [r7, #4]
	if(i == 0)
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d006      	beq.n	8010610 <passwordInputPageLeftClickFunc+0x1c>
		return;
	myPush(3);
 8010602:	2003      	movs	r0, #3
 8010604:	f7fd fc4e 	bl	800dea4 <myPush>
	osDelay(200);
 8010608:	20c8      	movs	r0, #200	; 0xc8
 801060a:	f7f8 fb5d 	bl	8008cc8 <osDelay>
 801060e:	e000      	b.n	8010612 <passwordInputPageLeftClickFunc+0x1e>
		return;
 8010610:	bf00      	nop
}
 8010612:	3708      	adds	r7, #8
 8010614:	46bd      	mov	sp, r7
 8010616:	bd80      	pop	{r7, pc}

08010618 <passwordInputPageRightClickFunc>:
void passwordInputPageRightClickFunc(int i){
 8010618:	b580      	push	{r7, lr}
 801061a:	b082      	sub	sp, #8
 801061c:	af00      	add	r7, sp, #0
 801061e:	6078      	str	r0, [r7, #4]
	if(i == 0)
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	2b00      	cmp	r3, #0
 8010624:	d006      	beq.n	8010634 <passwordInputPageRightClickFunc+0x1c>
		return;
	myPush(4);
 8010626:	2004      	movs	r0, #4
 8010628:	f7fd fc3c 	bl	800dea4 <myPush>
	osDelay(200);
 801062c:	20c8      	movs	r0, #200	; 0xc8
 801062e:	f7f8 fb4b 	bl	8008cc8 <osDelay>
 8010632:	e000      	b.n	8010636 <passwordInputPageRightClickFunc+0x1e>
		return;
 8010634:	bf00      	nop
}
 8010636:	3708      	adds	r7, #8
 8010638:	46bd      	mov	sp, r7
 801063a:	bd80      	pop	{r7, pc}

0801063c <otherSetPageRightClickFunc>:

void otherSetPageRightClickFunc(int i){
 801063c:	b580      	push	{r7, lr}
 801063e:	b082      	sub	sp, #8
 8010640:	af00      	add	r7, sp, #0
 8010642:	6078      	str	r0, [r7, #4]
	if(i == 0)
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	2b00      	cmp	r3, #0
 8010648:	d00d      	beq.n	8010666 <otherSetPageRightClickFunc+0x2a>
		return;
	if(pageInfoList[otherSet].arrowInfo == 4)
 801064a:	4b09      	ldr	r3, [pc, #36]	; (8010670 <otherSetPageRightClickFunc+0x34>)
 801064c:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8010650:	2b04      	cmp	r3, #4
 8010652:	d104      	bne.n	801065e <otherSetPageRightClickFunc+0x22>
		pageCourseInfo.otherSet++;
 8010654:	4b07      	ldr	r3, [pc, #28]	; (8010674 <otherSetPageRightClickFunc+0x38>)
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	3301      	adds	r3, #1
 801065a:	4a06      	ldr	r2, [pc, #24]	; (8010674 <otherSetPageRightClickFunc+0x38>)
 801065c:	6013      	str	r3, [r2, #0]
	osDelay(200);
 801065e:	20c8      	movs	r0, #200	; 0xc8
 8010660:	f7f8 fb32 	bl	8008cc8 <osDelay>
 8010664:	e000      	b.n	8010668 <otherSetPageRightClickFunc+0x2c>
		return;
 8010666:	bf00      	nop
}
 8010668:	3708      	adds	r7, #8
 801066a:	46bd      	mov	sp, r7
 801066c:	bd80      	pop	{r7, pc}
 801066e:	bf00      	nop
 8010670:	20000200 	.word	0x20000200
 8010674:	200072e0 	.word	0x200072e0

08010678 <otherSetPageLeftClickFunc>:

void otherSetPageLeftClickFunc(int i){
 8010678:	b580      	push	{r7, lr}
 801067a:	b082      	sub	sp, #8
 801067c:	af00      	add	r7, sp, #0
 801067e:	6078      	str	r0, [r7, #4]
	if(i == 0)
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	2b00      	cmp	r3, #0
 8010684:	d00d      	beq.n	80106a2 <otherSetPageLeftClickFunc+0x2a>
		return;
	if(pageInfoList[otherSet].arrowInfo == 4)
 8010686:	4b09      	ldr	r3, [pc, #36]	; (80106ac <otherSetPageLeftClickFunc+0x34>)
 8010688:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 801068c:	2b04      	cmp	r3, #4
 801068e:	d104      	bne.n	801069a <otherSetPageLeftClickFunc+0x22>
		pageCourseInfo.otherSet--;
 8010690:	4b07      	ldr	r3, [pc, #28]	; (80106b0 <otherSetPageLeftClickFunc+0x38>)
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	3b01      	subs	r3, #1
 8010696:	4a06      	ldr	r2, [pc, #24]	; (80106b0 <otherSetPageLeftClickFunc+0x38>)
 8010698:	6013      	str	r3, [r2, #0]
	osDelay(200);
 801069a:	20c8      	movs	r0, #200	; 0xc8
 801069c:	f7f8 fb14 	bl	8008cc8 <osDelay>
 80106a0:	e000      	b.n	80106a4 <otherSetPageLeftClickFunc+0x2c>
		return;
 80106a2:	bf00      	nop
}
 80106a4:	3708      	adds	r7, #8
 80106a6:	46bd      	mov	sp, r7
 80106a8:	bd80      	pop	{r7, pc}
 80106aa:	bf00      	nop
 80106ac:	20000200 	.word	0x20000200
 80106b0:	200072e0 	.word	0x200072e0

080106b4 <otherSetPageTopClickFunc>:
void otherSetPageTopClickFunc(int i){
 80106b4:	b580      	push	{r7, lr}
 80106b6:	b082      	sub	sp, #8
 80106b8:	af00      	add	r7, sp, #0
 80106ba:	6078      	str	r0, [r7, #4]
	if(i == 0)
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	f000 80b0 	beq.w	8010824 <otherSetPageTopClickFunc+0x170>
		return;
	DS1302_ReadTime(&datatime);
 80106c4:	4859      	ldr	r0, [pc, #356]	; (801082c <otherSetPageTopClickFunc+0x178>)
 80106c6:	f7fb febb 	bl	800c440 <DS1302_ReadTime>
	otherSetTime = datatime;
 80106ca:	4b59      	ldr	r3, [pc, #356]	; (8010830 <otherSetPageTopClickFunc+0x17c>)
 80106cc:	4a57      	ldr	r2, [pc, #348]	; (801082c <otherSetPageTopClickFunc+0x178>)
 80106ce:	6811      	ldr	r1, [r2, #0]
 80106d0:	6852      	ldr	r2, [r2, #4]
 80106d2:	6019      	str	r1, [r3, #0]
 80106d4:	605a      	str	r2, [r3, #4]
	otherSetTime.Year = otherSetTime.Year%100;
 80106d6:	4b56      	ldr	r3, [pc, #344]	; (8010830 <otherSetPageTopClickFunc+0x17c>)
 80106d8:	881b      	ldrh	r3, [r3, #0]
 80106da:	4a56      	ldr	r2, [pc, #344]	; (8010834 <otherSetPageTopClickFunc+0x180>)
 80106dc:	fba2 1203 	umull	r1, r2, r2, r3
 80106e0:	0952      	lsrs	r2, r2, #5
 80106e2:	2164      	movs	r1, #100	; 0x64
 80106e4:	fb01 f202 	mul.w	r2, r1, r2
 80106e8:	1a9b      	subs	r3, r3, r2
 80106ea:	b29a      	uxth	r2, r3
 80106ec:	4b50      	ldr	r3, [pc, #320]	; (8010830 <otherSetPageTopClickFunc+0x17c>)
 80106ee:	801a      	strh	r2, [r3, #0]
	if(!pageInfoList[otherSet].baseInfo){
 80106f0:	4b51      	ldr	r3, [pc, #324]	; (8010838 <otherSetPageTopClickFunc+0x184>)
 80106f2:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d111      	bne.n	801071e <otherSetPageTopClickFunc+0x6a>
		pageInfoList[otherSet].arrowInfo--;
 80106fa:	4b4f      	ldr	r3, [pc, #316]	; (8010838 <otherSetPageTopClickFunc+0x184>)
 80106fc:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8010700:	3b01      	subs	r3, #1
 8010702:	b2da      	uxtb	r2, r3
 8010704:	4b4c      	ldr	r3, [pc, #304]	; (8010838 <otherSetPageTopClickFunc+0x184>)
 8010706:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
		if(pageInfoList[otherSet].arrowInfo<1)
 801070a:	4b4b      	ldr	r3, [pc, #300]	; (8010838 <otherSetPageTopClickFunc+0x184>)
 801070c:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8010710:	2b00      	cmp	r3, #0
 8010712:	d178      	bne.n	8010806 <otherSetPageTopClickFunc+0x152>
			pageInfoList[otherSet].arrowInfo = 1;
 8010714:	4b48      	ldr	r3, [pc, #288]	; (8010838 <otherSetPageTopClickFunc+0x184>)
 8010716:	2201      	movs	r2, #1
 8010718:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
 801071c:	e073      	b.n	8010806 <otherSetPageTopClickFunc+0x152>
	}
	else{
			switch(pageInfoList[4].arrowInfo){
 801071e:	4b46      	ldr	r3, [pc, #280]	; (8010838 <otherSetPageTopClickFunc+0x184>)
 8010720:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8010724:	3b01      	subs	r3, #1
 8010726:	2b03      	cmp	r3, #3
 8010728:	d86d      	bhi.n	8010806 <otherSetPageTopClickFunc+0x152>
 801072a:	a201      	add	r2, pc, #4	; (adr r2, 8010730 <otherSetPageTopClickFunc+0x7c>)
 801072c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010730:	08010741 	.word	0x08010741
 8010734:	08010755 	.word	0x08010755
 8010738:	0801076d 	.word	0x0801076d
 801073c:	08010793 	.word	0x08010793
			case 1: if(deviceOwnInfo.addr<65)deviceOwnInfo.addr++; break;
 8010740:	4b3e      	ldr	r3, [pc, #248]	; (801083c <otherSetPageTopClickFunc+0x188>)
 8010742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010744:	2b40      	cmp	r3, #64	; 0x40
 8010746:	dc5b      	bgt.n	8010800 <otherSetPageTopClickFunc+0x14c>
 8010748:	4b3c      	ldr	r3, [pc, #240]	; (801083c <otherSetPageTopClickFunc+0x188>)
 801074a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801074c:	3301      	adds	r3, #1
 801074e:	4a3b      	ldr	r2, [pc, #236]	; (801083c <otherSetPageTopClickFunc+0x188>)
 8010750:	6413      	str	r3, [r2, #64]	; 0x40
 8010752:	e055      	b.n	8010800 <otherSetPageTopClickFunc+0x14c>
			case 2: if(deviceOwnInfo.limit)deviceOwnInfo.limit = 0;else deviceOwnInfo.limit = 1; break;
 8010754:	4b39      	ldr	r3, [pc, #228]	; (801083c <otherSetPageTopClickFunc+0x188>)
 8010756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010758:	2b00      	cmp	r3, #0
 801075a:	d003      	beq.n	8010764 <otherSetPageTopClickFunc+0xb0>
 801075c:	4b37      	ldr	r3, [pc, #220]	; (801083c <otherSetPageTopClickFunc+0x188>)
 801075e:	2200      	movs	r2, #0
 8010760:	645a      	str	r2, [r3, #68]	; 0x44
 8010762:	e050      	b.n	8010806 <otherSetPageTopClickFunc+0x152>
 8010764:	4b35      	ldr	r3, [pc, #212]	; (801083c <otherSetPageTopClickFunc+0x188>)
 8010766:	2201      	movs	r2, #1
 8010768:	645a      	str	r2, [r3, #68]	; 0x44
 801076a:	e04c      	b.n	8010806 <otherSetPageTopClickFunc+0x152>
			case 3: if(deviceOwnInfo.mannerge){
 801076c:	4b33      	ldr	r3, [pc, #204]	; (801083c <otherSetPageTopClickFunc+0x188>)
 801076e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010770:	2b00      	cmp	r3, #0
 8010772:	d00a      	beq.n	801078a <otherSetPageTopClickFunc+0xd6>
						otherPageNum = -1;
 8010774:	4b32      	ldr	r3, [pc, #200]	; (8010840 <otherSetPageTopClickFunc+0x18c>)
 8010776:	f04f 32ff 	mov.w	r2, #4294967295
 801077a:	601a      	str	r2, [r3, #0]
						deviceOwnInfo.mannerge = 0;
 801077c:	4b2f      	ldr	r3, [pc, #188]	; (801083c <otherSetPageTopClickFunc+0x188>)
 801077e:	2200      	movs	r2, #0
 8010780:	649a      	str	r2, [r3, #72]	; 0x48
						deviceInfoP = &deviceOwnInfo;
 8010782:	4b30      	ldr	r3, [pc, #192]	; (8010844 <otherSetPageTopClickFunc+0x190>)
 8010784:	4a2d      	ldr	r2, [pc, #180]	; (801083c <otherSetPageTopClickFunc+0x188>)
 8010786:	601a      	str	r2, [r3, #0]
					}
					else
						deviceOwnInfo.mannerge = 1;
					break;
 8010788:	e03d      	b.n	8010806 <otherSetPageTopClickFunc+0x152>
						deviceOwnInfo.mannerge = 1;
 801078a:	4b2c      	ldr	r3, [pc, #176]	; (801083c <otherSetPageTopClickFunc+0x188>)
 801078c:	2201      	movs	r2, #1
 801078e:	649a      	str	r2, [r3, #72]	; 0x48
					break;
 8010790:	e039      	b.n	8010806 <otherSetPageTopClickFunc+0x152>
			case 4:
				if(pageCourseInfo.otherSet == 0)
 8010792:	4b2d      	ldr	r3, [pc, #180]	; (8010848 <otherSetPageTopClickFunc+0x194>)
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	2b00      	cmp	r3, #0
 8010798:	d106      	bne.n	80107a8 <otherSetPageTopClickFunc+0xf4>
					otherSetTime.Year++;
 801079a:	4b25      	ldr	r3, [pc, #148]	; (8010830 <otherSetPageTopClickFunc+0x17c>)
 801079c:	881b      	ldrh	r3, [r3, #0]
 801079e:	3301      	adds	r3, #1
 80107a0:	b29a      	uxth	r2, r3
 80107a2:	4b23      	ldr	r3, [pc, #140]	; (8010830 <otherSetPageTopClickFunc+0x17c>)
 80107a4:	801a      	strh	r2, [r3, #0]
					otherSetTime.Day++;
				else if(pageCourseInfo.otherSet == 3)
					otherSetTime.Hour++;
				else if(pageCourseInfo.otherSet == 4)
					otherSetTime.Min++;
				break;
 80107a6:	e02d      	b.n	8010804 <otherSetPageTopClickFunc+0x150>
				else if(pageCourseInfo.otherSet == 1)
 80107a8:	4b27      	ldr	r3, [pc, #156]	; (8010848 <otherSetPageTopClickFunc+0x194>)
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	2b01      	cmp	r3, #1
 80107ae:	d106      	bne.n	80107be <otherSetPageTopClickFunc+0x10a>
					otherSetTime.Month++;
 80107b0:	4b1f      	ldr	r3, [pc, #124]	; (8010830 <otherSetPageTopClickFunc+0x17c>)
 80107b2:	789b      	ldrb	r3, [r3, #2]
 80107b4:	3301      	adds	r3, #1
 80107b6:	b2da      	uxtb	r2, r3
 80107b8:	4b1d      	ldr	r3, [pc, #116]	; (8010830 <otherSetPageTopClickFunc+0x17c>)
 80107ba:	709a      	strb	r2, [r3, #2]
				break;
 80107bc:	e022      	b.n	8010804 <otherSetPageTopClickFunc+0x150>
				else if(pageCourseInfo.otherSet == 2)
 80107be:	4b22      	ldr	r3, [pc, #136]	; (8010848 <otherSetPageTopClickFunc+0x194>)
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	2b02      	cmp	r3, #2
 80107c4:	d106      	bne.n	80107d4 <otherSetPageTopClickFunc+0x120>
					otherSetTime.Day++;
 80107c6:	4b1a      	ldr	r3, [pc, #104]	; (8010830 <otherSetPageTopClickFunc+0x17c>)
 80107c8:	78db      	ldrb	r3, [r3, #3]
 80107ca:	3301      	adds	r3, #1
 80107cc:	b2da      	uxtb	r2, r3
 80107ce:	4b18      	ldr	r3, [pc, #96]	; (8010830 <otherSetPageTopClickFunc+0x17c>)
 80107d0:	70da      	strb	r2, [r3, #3]
				break;
 80107d2:	e017      	b.n	8010804 <otherSetPageTopClickFunc+0x150>
				else if(pageCourseInfo.otherSet == 3)
 80107d4:	4b1c      	ldr	r3, [pc, #112]	; (8010848 <otherSetPageTopClickFunc+0x194>)
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	2b03      	cmp	r3, #3
 80107da:	d106      	bne.n	80107ea <otherSetPageTopClickFunc+0x136>
					otherSetTime.Hour++;
 80107dc:	4b14      	ldr	r3, [pc, #80]	; (8010830 <otherSetPageTopClickFunc+0x17c>)
 80107de:	791b      	ldrb	r3, [r3, #4]
 80107e0:	3301      	adds	r3, #1
 80107e2:	b2da      	uxtb	r2, r3
 80107e4:	4b12      	ldr	r3, [pc, #72]	; (8010830 <otherSetPageTopClickFunc+0x17c>)
 80107e6:	711a      	strb	r2, [r3, #4]
				break;
 80107e8:	e00c      	b.n	8010804 <otherSetPageTopClickFunc+0x150>
				else if(pageCourseInfo.otherSet == 4)
 80107ea:	4b17      	ldr	r3, [pc, #92]	; (8010848 <otherSetPageTopClickFunc+0x194>)
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	2b04      	cmp	r3, #4
 80107f0:	d108      	bne.n	8010804 <otherSetPageTopClickFunc+0x150>
					otherSetTime.Min++;
 80107f2:	4b0f      	ldr	r3, [pc, #60]	; (8010830 <otherSetPageTopClickFunc+0x17c>)
 80107f4:	795b      	ldrb	r3, [r3, #5]
 80107f6:	3301      	adds	r3, #1
 80107f8:	b2da      	uxtb	r2, r3
 80107fa:	4b0d      	ldr	r3, [pc, #52]	; (8010830 <otherSetPageTopClickFunc+0x17c>)
 80107fc:	715a      	strb	r2, [r3, #5]
				break;
 80107fe:	e001      	b.n	8010804 <otherSetPageTopClickFunc+0x150>
			case 1: if(deviceOwnInfo.addr<65)deviceOwnInfo.addr++; break;
 8010800:	bf00      	nop
 8010802:	e000      	b.n	8010806 <otherSetPageTopClickFunc+0x152>
				break;
 8010804:	bf00      	nop
			}
	}
	DS1302_SetTime(otherSetTime);
 8010806:	4b0a      	ldr	r3, [pc, #40]	; (8010830 <otherSetPageTopClickFunc+0x17c>)
 8010808:	681a      	ldr	r2, [r3, #0]
 801080a:	2100      	movs	r1, #0
 801080c:	4611      	mov	r1, r2
 801080e:	685b      	ldr	r3, [r3, #4]
 8010810:	2200      	movs	r2, #0
 8010812:	461a      	mov	r2, r3
 8010814:	4608      	mov	r0, r1
 8010816:	4611      	mov	r1, r2
 8010818:	f7fb fcd2 	bl	800c1c0 <DS1302_SetTime>
	osDelay(200);
 801081c:	20c8      	movs	r0, #200	; 0xc8
 801081e:	f7f8 fa53 	bl	8008cc8 <osDelay>
 8010822:	e000      	b.n	8010826 <otherSetPageTopClickFunc+0x172>
		return;
 8010824:	bf00      	nop
}
 8010826:	3708      	adds	r7, #8
 8010828:	46bd      	mov	sp, r7
 801082a:	bd80      	pop	{r7, pc}
 801082c:	20006bd4 	.word	0x20006bd4
 8010830:	20006bc8 	.word	0x20006bc8
 8010834:	51eb851f 	.word	0x51eb851f
 8010838:	20000200 	.word	0x20000200
 801083c:	2000017c 	.word	0x2000017c
 8010840:	200004c0 	.word	0x200004c0
 8010844:	200001fc 	.word	0x200001fc
 8010848:	200072e0 	.word	0x200072e0

0801084c <otherSetPageSureClickFunc>:

void otherSetPageSureClickFunc(int i){
 801084c:	b580      	push	{r7, lr}
 801084e:	b082      	sub	sp, #8
 8010850:	af00      	add	r7, sp, #0
 8010852:	6078      	str	r0, [r7, #4]
	if(i == 0)
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	2b00      	cmp	r3, #0
 8010858:	d038      	beq.n	80108cc <otherSetPageSureClickFunc+0x80>
		return;
	//指明进入只页面
	if(pageInfoList[4].baseInfo == 0){
 801085a:	4b1e      	ldr	r3, [pc, #120]	; (80108d4 <otherSetPageSureClickFunc+0x88>)
 801085c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8010860:	2b00      	cmp	r3, #0
 8010862:	d107      	bne.n	8010874 <otherSetPageSureClickFunc+0x28>
		deviceOwnInfo.isSetting = 1;
 8010864:	4b1c      	ldr	r3, [pc, #112]	; (80108d8 <otherSetPageSureClickFunc+0x8c>)
 8010866:	2201      	movs	r2, #1
 8010868:	65da      	str	r2, [r3, #92]	; 0x5c
		pageInfoList[4].baseInfo = 1;
 801086a:	4b1a      	ldr	r3, [pc, #104]	; (80108d4 <otherSetPageSureClickFunc+0x88>)
 801086c:	2201      	movs	r2, #1
 801086e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 8010872:	e027      	b.n	80108c4 <otherSetPageSureClickFunc+0x78>
	}
	else{
		deviceOwnInfo.isSetting = 0;
 8010874:	4b18      	ldr	r3, [pc, #96]	; (80108d8 <otherSetPageSureClickFunc+0x8c>)
 8010876:	2200      	movs	r2, #0
 8010878:	65da      	str	r2, [r3, #92]	; 0x5c
		pageInfoList[4].baseInfo = 0;
 801087a:	4b16      	ldr	r3, [pc, #88]	; (80108d4 <otherSetPageSureClickFunc+0x88>)
 801087c:	2200      	movs	r2, #0
 801087e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if(pageInfoList[otherSet].arrowInfo == 1){
 8010882:	4b14      	ldr	r3, [pc, #80]	; (80108d4 <otherSetPageSureClickFunc+0x88>)
 8010884:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8010888:	2b01      	cmp	r3, #1
 801088a:	d105      	bne.n	8010898 <otherSetPageSureClickFunc+0x4c>
			operationRecord(changeAddrRecordValue, deviceOwnInfo.addr);
 801088c:	4b12      	ldr	r3, [pc, #72]	; (80108d8 <otherSetPageSureClickFunc+0x8c>)
 801088e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010890:	4619      	mov	r1, r3
 8010892:	200e      	movs	r0, #14
 8010894:	f000 fd0e 	bl	80112b4 <operationRecord>
		}
		if(pageInfoList[otherSet].arrowInfo == 2){
 8010898:	4b0e      	ldr	r3, [pc, #56]	; (80108d4 <otherSetPageSureClickFunc+0x88>)
 801089a:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 801089e:	2b02      	cmp	r3, #2
 80108a0:	d105      	bne.n	80108ae <otherSetPageSureClickFunc+0x62>
			operationRecord(changeDisRecordValue, deviceOwnInfo.limit);
 80108a2:	4b0d      	ldr	r3, [pc, #52]	; (80108d8 <otherSetPageSureClickFunc+0x8c>)
 80108a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80108a6:	4619      	mov	r1, r3
 80108a8:	2010      	movs	r0, #16
 80108aa:	f000 fd03 	bl	80112b4 <operationRecord>
		}
		if(pageInfoList[otherSet].arrowInfo == 3){
 80108ae:	4b09      	ldr	r3, [pc, #36]	; (80108d4 <otherSetPageSureClickFunc+0x88>)
 80108b0:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 80108b4:	2b03      	cmp	r3, #3
 80108b6:	d105      	bne.n	80108c4 <otherSetPageSureClickFunc+0x78>
			operationRecord(changeMangerRecordValue, deviceOwnInfo.mannerge);
 80108b8:	4b07      	ldr	r3, [pc, #28]	; (80108d8 <otherSetPageSureClickFunc+0x8c>)
 80108ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80108bc:	4619      	mov	r1, r3
 80108be:	2011      	movs	r0, #17
 80108c0:	f000 fcf8 	bl	80112b4 <operationRecord>
		}
	}
	osDelay(200);
 80108c4:	20c8      	movs	r0, #200	; 0xc8
 80108c6:	f7f8 f9ff 	bl	8008cc8 <osDelay>
 80108ca:	e000      	b.n	80108ce <otherSetPageSureClickFunc+0x82>
		return;
 80108cc:	bf00      	nop
}
 80108ce:	3708      	adds	r7, #8
 80108d0:	46bd      	mov	sp, r7
 80108d2:	bd80      	pop	{r7, pc}
 80108d4:	20000200 	.word	0x20000200
 80108d8:	2000017c 	.word	0x2000017c

080108dc <otherSetPageBackClickFunc>:
void otherSetPageBackClickFunc(int i){
 80108dc:	b580      	push	{r7, lr}
 80108de:	b082      	sub	sp, #8
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	6078      	str	r0, [r7, #4]
	if(i == 0)
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d013      	beq.n	8010912 <otherSetPageBackClickFunc+0x36>
		return;
	//指明进入只页面
	if(pageInfoList[otherSet].baseInfo == 1){
 80108ea:	4b0c      	ldr	r3, [pc, #48]	; (801091c <otherSetPageBackClickFunc+0x40>)
 80108ec:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80108f0:	2b01      	cmp	r3, #1
 80108f2:	d104      	bne.n	80108fe <otherSetPageBackClickFunc+0x22>
		pageInfoList[otherSet].baseInfo = 0;
 80108f4:	4b09      	ldr	r3, [pc, #36]	; (801091c <otherSetPageBackClickFunc+0x40>)
 80108f6:	2200      	movs	r2, #0
 80108f8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 80108fc:	e002      	b.n	8010904 <otherSetPageBackClickFunc+0x28>
	}
	else{
		assignPage(setPage1);
 80108fe:	2002      	movs	r0, #2
 8010900:	f7ff fa74 	bl	800fdec <assignPage>
	}
	deviceOwnInfo.isSetting = 0;
 8010904:	4b06      	ldr	r3, [pc, #24]	; (8010920 <otherSetPageBackClickFunc+0x44>)
 8010906:	2200      	movs	r2, #0
 8010908:	65da      	str	r2, [r3, #92]	; 0x5c
	osDelay(200);
 801090a:	20c8      	movs	r0, #200	; 0xc8
 801090c:	f7f8 f9dc 	bl	8008cc8 <osDelay>
 8010910:	e000      	b.n	8010914 <otherSetPageBackClickFunc+0x38>
		return;
 8010912:	bf00      	nop
}
 8010914:	3708      	adds	r7, #8
 8010916:	46bd      	mov	sp, r7
 8010918:	bd80      	pop	{r7, pc}
 801091a:	bf00      	nop
 801091c:	20000200 	.word	0x20000200
 8010920:	2000017c 	.word	0x2000017c

08010924 <otherSetPageBottomClickFunc>:

void otherSetPageBottomClickFunc(int i){
 8010924:	b580      	push	{r7, lr}
 8010926:	b082      	sub	sp, #8
 8010928:	af00      	add	r7, sp, #0
 801092a:	6078      	str	r0, [r7, #4]
	if(i == 0)
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	2b00      	cmp	r3, #0
 8010930:	f000 80b0 	beq.w	8010a94 <otherSetPageBottomClickFunc+0x170>
		return;
	//未进入设置项
	DS1302_ReadTime(&datatime);
 8010934:	4859      	ldr	r0, [pc, #356]	; (8010a9c <otherSetPageBottomClickFunc+0x178>)
 8010936:	f7fb fd83 	bl	800c440 <DS1302_ReadTime>
	otherSetTime = datatime;
 801093a:	4b59      	ldr	r3, [pc, #356]	; (8010aa0 <otherSetPageBottomClickFunc+0x17c>)
 801093c:	4a57      	ldr	r2, [pc, #348]	; (8010a9c <otherSetPageBottomClickFunc+0x178>)
 801093e:	6811      	ldr	r1, [r2, #0]
 8010940:	6852      	ldr	r2, [r2, #4]
 8010942:	6019      	str	r1, [r3, #0]
 8010944:	605a      	str	r2, [r3, #4]

	otherSetTime.Year = otherSetTime.Year%100;
 8010946:	4b56      	ldr	r3, [pc, #344]	; (8010aa0 <otherSetPageBottomClickFunc+0x17c>)
 8010948:	881b      	ldrh	r3, [r3, #0]
 801094a:	4a56      	ldr	r2, [pc, #344]	; (8010aa4 <otherSetPageBottomClickFunc+0x180>)
 801094c:	fba2 1203 	umull	r1, r2, r2, r3
 8010950:	0952      	lsrs	r2, r2, #5
 8010952:	2164      	movs	r1, #100	; 0x64
 8010954:	fb01 f202 	mul.w	r2, r1, r2
 8010958:	1a9b      	subs	r3, r3, r2
 801095a:	b29a      	uxth	r2, r3
 801095c:	4b50      	ldr	r3, [pc, #320]	; (8010aa0 <otherSetPageBottomClickFunc+0x17c>)
 801095e:	801a      	strh	r2, [r3, #0]
	if(!pageInfoList[otherSet].baseInfo){
 8010960:	4b51      	ldr	r3, [pc, #324]	; (8010aa8 <otherSetPageBottomClickFunc+0x184>)
 8010962:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8010966:	2b00      	cmp	r3, #0
 8010968:	d111      	bne.n	801098e <otherSetPageBottomClickFunc+0x6a>
			pageInfoList[otherSet].arrowInfo++;
 801096a:	4b4f      	ldr	r3, [pc, #316]	; (8010aa8 <otherSetPageBottomClickFunc+0x184>)
 801096c:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8010970:	3301      	adds	r3, #1
 8010972:	b2da      	uxtb	r2, r3
 8010974:	4b4c      	ldr	r3, [pc, #304]	; (8010aa8 <otherSetPageBottomClickFunc+0x184>)
 8010976:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
			if(pageInfoList[otherSet].arrowInfo>4)
 801097a:	4b4b      	ldr	r3, [pc, #300]	; (8010aa8 <otherSetPageBottomClickFunc+0x184>)
 801097c:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8010980:	2b04      	cmp	r3, #4
 8010982:	d978      	bls.n	8010a76 <otherSetPageBottomClickFunc+0x152>
				pageInfoList[otherSet].arrowInfo = 4;
 8010984:	4b48      	ldr	r3, [pc, #288]	; (8010aa8 <otherSetPageBottomClickFunc+0x184>)
 8010986:	2204      	movs	r2, #4
 8010988:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
 801098c:	e073      	b.n	8010a76 <otherSetPageBottomClickFunc+0x152>
	}
	else{
		switch(pageInfoList[otherSet].arrowInfo){
 801098e:	4b46      	ldr	r3, [pc, #280]	; (8010aa8 <otherSetPageBottomClickFunc+0x184>)
 8010990:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8010994:	3b01      	subs	r3, #1
 8010996:	2b03      	cmp	r3, #3
 8010998:	d86d      	bhi.n	8010a76 <otherSetPageBottomClickFunc+0x152>
 801099a:	a201      	add	r2, pc, #4	; (adr r2, 80109a0 <otherSetPageBottomClickFunc+0x7c>)
 801099c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109a0:	080109b1 	.word	0x080109b1
 80109a4:	080109c5 	.word	0x080109c5
 80109a8:	080109dd 	.word	0x080109dd
 80109ac:	08010a03 	.word	0x08010a03
		case 1: if(deviceOwnInfo.addr>0)deviceOwnInfo.addr--; break;
 80109b0:	4b3e      	ldr	r3, [pc, #248]	; (8010aac <otherSetPageBottomClickFunc+0x188>)
 80109b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	dd5b      	ble.n	8010a70 <otherSetPageBottomClickFunc+0x14c>
 80109b8:	4b3c      	ldr	r3, [pc, #240]	; (8010aac <otherSetPageBottomClickFunc+0x188>)
 80109ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109bc:	3b01      	subs	r3, #1
 80109be:	4a3b      	ldr	r2, [pc, #236]	; (8010aac <otherSetPageBottomClickFunc+0x188>)
 80109c0:	6413      	str	r3, [r2, #64]	; 0x40
 80109c2:	e055      	b.n	8010a70 <otherSetPageBottomClickFunc+0x14c>
		case 2: if(deviceOwnInfo.limit)deviceOwnInfo.limit = 0;else deviceOwnInfo.limit = 1;break;
 80109c4:	4b39      	ldr	r3, [pc, #228]	; (8010aac <otherSetPageBottomClickFunc+0x188>)
 80109c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d003      	beq.n	80109d4 <otherSetPageBottomClickFunc+0xb0>
 80109cc:	4b37      	ldr	r3, [pc, #220]	; (8010aac <otherSetPageBottomClickFunc+0x188>)
 80109ce:	2200      	movs	r2, #0
 80109d0:	645a      	str	r2, [r3, #68]	; 0x44
 80109d2:	e050      	b.n	8010a76 <otherSetPageBottomClickFunc+0x152>
 80109d4:	4b35      	ldr	r3, [pc, #212]	; (8010aac <otherSetPageBottomClickFunc+0x188>)
 80109d6:	2201      	movs	r2, #1
 80109d8:	645a      	str	r2, [r3, #68]	; 0x44
 80109da:	e04c      	b.n	8010a76 <otherSetPageBottomClickFunc+0x152>
		case 3: if(deviceOwnInfo.mannerge){
 80109dc:	4b33      	ldr	r3, [pc, #204]	; (8010aac <otherSetPageBottomClickFunc+0x188>)
 80109de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d00a      	beq.n	80109fa <otherSetPageBottomClickFunc+0xd6>
					otherPageNum = -1;
 80109e4:	4b32      	ldr	r3, [pc, #200]	; (8010ab0 <otherSetPageBottomClickFunc+0x18c>)
 80109e6:	f04f 32ff 	mov.w	r2, #4294967295
 80109ea:	601a      	str	r2, [r3, #0]
					deviceOwnInfo.mannerge = 0;
 80109ec:	4b2f      	ldr	r3, [pc, #188]	; (8010aac <otherSetPageBottomClickFunc+0x188>)
 80109ee:	2200      	movs	r2, #0
 80109f0:	649a      	str	r2, [r3, #72]	; 0x48
					deviceInfoP = &deviceOwnInfo;
 80109f2:	4b30      	ldr	r3, [pc, #192]	; (8010ab4 <otherSetPageBottomClickFunc+0x190>)
 80109f4:	4a2d      	ldr	r2, [pc, #180]	; (8010aac <otherSetPageBottomClickFunc+0x188>)
 80109f6:	601a      	str	r2, [r3, #0]
				}
				else
					deviceOwnInfo.mannerge = 1;
				break;
 80109f8:	e03d      	b.n	8010a76 <otherSetPageBottomClickFunc+0x152>
					deviceOwnInfo.mannerge = 1;
 80109fa:	4b2c      	ldr	r3, [pc, #176]	; (8010aac <otherSetPageBottomClickFunc+0x188>)
 80109fc:	2201      	movs	r2, #1
 80109fe:	649a      	str	r2, [r3, #72]	; 0x48
				break;
 8010a00:	e039      	b.n	8010a76 <otherSetPageBottomClickFunc+0x152>
		case 4:
			if(pageCourseInfo.otherSet == 0)
 8010a02:	4b2d      	ldr	r3, [pc, #180]	; (8010ab8 <otherSetPageBottomClickFunc+0x194>)
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d106      	bne.n	8010a18 <otherSetPageBottomClickFunc+0xf4>
				otherSetTime.Year--;
 8010a0a:	4b25      	ldr	r3, [pc, #148]	; (8010aa0 <otherSetPageBottomClickFunc+0x17c>)
 8010a0c:	881b      	ldrh	r3, [r3, #0]
 8010a0e:	3b01      	subs	r3, #1
 8010a10:	b29a      	uxth	r2, r3
 8010a12:	4b23      	ldr	r3, [pc, #140]	; (8010aa0 <otherSetPageBottomClickFunc+0x17c>)
 8010a14:	801a      	strh	r2, [r3, #0]
				otherSetTime.Day--;
			else if(pageCourseInfo.otherSet == 3)
				otherSetTime.Hour--;
			else if(pageCourseInfo.otherSet == 4)
				otherSetTime.Min--;
			break;
 8010a16:	e02d      	b.n	8010a74 <otherSetPageBottomClickFunc+0x150>
			else if(pageCourseInfo.otherSet == 1)
 8010a18:	4b27      	ldr	r3, [pc, #156]	; (8010ab8 <otherSetPageBottomClickFunc+0x194>)
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	2b01      	cmp	r3, #1
 8010a1e:	d106      	bne.n	8010a2e <otherSetPageBottomClickFunc+0x10a>
				otherSetTime.Month--;
 8010a20:	4b1f      	ldr	r3, [pc, #124]	; (8010aa0 <otherSetPageBottomClickFunc+0x17c>)
 8010a22:	789b      	ldrb	r3, [r3, #2]
 8010a24:	3b01      	subs	r3, #1
 8010a26:	b2da      	uxtb	r2, r3
 8010a28:	4b1d      	ldr	r3, [pc, #116]	; (8010aa0 <otherSetPageBottomClickFunc+0x17c>)
 8010a2a:	709a      	strb	r2, [r3, #2]
			break;
 8010a2c:	e022      	b.n	8010a74 <otherSetPageBottomClickFunc+0x150>
			else if(pageCourseInfo.otherSet == 2)
 8010a2e:	4b22      	ldr	r3, [pc, #136]	; (8010ab8 <otherSetPageBottomClickFunc+0x194>)
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	2b02      	cmp	r3, #2
 8010a34:	d106      	bne.n	8010a44 <otherSetPageBottomClickFunc+0x120>
				otherSetTime.Day--;
 8010a36:	4b1a      	ldr	r3, [pc, #104]	; (8010aa0 <otherSetPageBottomClickFunc+0x17c>)
 8010a38:	78db      	ldrb	r3, [r3, #3]
 8010a3a:	3b01      	subs	r3, #1
 8010a3c:	b2da      	uxtb	r2, r3
 8010a3e:	4b18      	ldr	r3, [pc, #96]	; (8010aa0 <otherSetPageBottomClickFunc+0x17c>)
 8010a40:	70da      	strb	r2, [r3, #3]
			break;
 8010a42:	e017      	b.n	8010a74 <otherSetPageBottomClickFunc+0x150>
			else if(pageCourseInfo.otherSet == 3)
 8010a44:	4b1c      	ldr	r3, [pc, #112]	; (8010ab8 <otherSetPageBottomClickFunc+0x194>)
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	2b03      	cmp	r3, #3
 8010a4a:	d106      	bne.n	8010a5a <otherSetPageBottomClickFunc+0x136>
				otherSetTime.Hour--;
 8010a4c:	4b14      	ldr	r3, [pc, #80]	; (8010aa0 <otherSetPageBottomClickFunc+0x17c>)
 8010a4e:	791b      	ldrb	r3, [r3, #4]
 8010a50:	3b01      	subs	r3, #1
 8010a52:	b2da      	uxtb	r2, r3
 8010a54:	4b12      	ldr	r3, [pc, #72]	; (8010aa0 <otherSetPageBottomClickFunc+0x17c>)
 8010a56:	711a      	strb	r2, [r3, #4]
			break;
 8010a58:	e00c      	b.n	8010a74 <otherSetPageBottomClickFunc+0x150>
			else if(pageCourseInfo.otherSet == 4)
 8010a5a:	4b17      	ldr	r3, [pc, #92]	; (8010ab8 <otherSetPageBottomClickFunc+0x194>)
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	2b04      	cmp	r3, #4
 8010a60:	d108      	bne.n	8010a74 <otherSetPageBottomClickFunc+0x150>
				otherSetTime.Min--;
 8010a62:	4b0f      	ldr	r3, [pc, #60]	; (8010aa0 <otherSetPageBottomClickFunc+0x17c>)
 8010a64:	795b      	ldrb	r3, [r3, #5]
 8010a66:	3b01      	subs	r3, #1
 8010a68:	b2da      	uxtb	r2, r3
 8010a6a:	4b0d      	ldr	r3, [pc, #52]	; (8010aa0 <otherSetPageBottomClickFunc+0x17c>)
 8010a6c:	715a      	strb	r2, [r3, #5]
			break;
 8010a6e:	e001      	b.n	8010a74 <otherSetPageBottomClickFunc+0x150>
		case 1: if(deviceOwnInfo.addr>0)deviceOwnInfo.addr--; break;
 8010a70:	bf00      	nop
 8010a72:	e000      	b.n	8010a76 <otherSetPageBottomClickFunc+0x152>
			break;
 8010a74:	bf00      	nop
		}
	}
	DS1302_SetTime(otherSetTime);
 8010a76:	4b0a      	ldr	r3, [pc, #40]	; (8010aa0 <otherSetPageBottomClickFunc+0x17c>)
 8010a78:	681a      	ldr	r2, [r3, #0]
 8010a7a:	2100      	movs	r1, #0
 8010a7c:	4611      	mov	r1, r2
 8010a7e:	685b      	ldr	r3, [r3, #4]
 8010a80:	2200      	movs	r2, #0
 8010a82:	461a      	mov	r2, r3
 8010a84:	4608      	mov	r0, r1
 8010a86:	4611      	mov	r1, r2
 8010a88:	f7fb fb9a 	bl	800c1c0 <DS1302_SetTime>
	osDelay(200);
 8010a8c:	20c8      	movs	r0, #200	; 0xc8
 8010a8e:	f7f8 f91b 	bl	8008cc8 <osDelay>
 8010a92:	e000      	b.n	8010a96 <otherSetPageBottomClickFunc+0x172>
		return;
 8010a94:	bf00      	nop
}
 8010a96:	3708      	adds	r7, #8
 8010a98:	46bd      	mov	sp, r7
 8010a9a:	bd80      	pop	{r7, pc}
 8010a9c:	20006bd4 	.word	0x20006bd4
 8010aa0:	20006bc8 	.word	0x20006bc8
 8010aa4:	51eb851f 	.word	0x51eb851f
 8010aa8:	20000200 	.word	0x20000200
 8010aac:	2000017c 	.word	0x2000017c
 8010ab0:	200004c0 	.word	0x200004c0
 8010ab4:	200001fc 	.word	0x200001fc
 8010ab8:	200072e0 	.word	0x200072e0

08010abc <detectSetPageTopClickFunc>:

void detectSetPageTopClickFunc(int i){
 8010abc:	b580      	push	{r7, lr}
 8010abe:	b082      	sub	sp, #8
 8010ac0:	af00      	add	r7, sp, #0
 8010ac2:	6078      	str	r0, [r7, #4]
	if(i == 0)
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d047      	beq.n	8010b5a <detectSetPageTopClickFunc+0x9e>
		return;
	//未进入设置项

	if(!pageInfoList[detectSet].baseInfo){
 8010aca:	4b26      	ldr	r3, [pc, #152]	; (8010b64 <detectSetPageTopClickFunc+0xa8>)
 8010acc:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d111      	bne.n	8010af8 <detectSetPageTopClickFunc+0x3c>
			pageInfoList[detectSet].arrowInfo--;
 8010ad4:	4b23      	ldr	r3, [pc, #140]	; (8010b64 <detectSetPageTopClickFunc+0xa8>)
 8010ad6:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 8010ada:	3b01      	subs	r3, #1
 8010adc:	b2da      	uxtb	r2, r3
 8010ade:	4b21      	ldr	r3, [pc, #132]	; (8010b64 <detectSetPageTopClickFunc+0xa8>)
 8010ae0:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
			if(pageInfoList[detectSet].arrowInfo<1)
 8010ae4:	4b1f      	ldr	r3, [pc, #124]	; (8010b64 <detectSetPageTopClickFunc+0xa8>)
 8010ae6:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d131      	bne.n	8010b52 <detectSetPageTopClickFunc+0x96>
				pageInfoList[detectSet].arrowInfo = 1;
 8010aee:	4b1d      	ldr	r3, [pc, #116]	; (8010b64 <detectSetPageTopClickFunc+0xa8>)
 8010af0:	2201      	movs	r2, #1
 8010af2:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
 8010af6:	e02c      	b.n	8010b52 <detectSetPageTopClickFunc+0x96>
	}
	else{
		switch(pageInfoList[detectSet].arrowInfo){
 8010af8:	4b1a      	ldr	r3, [pc, #104]	; (8010b64 <detectSetPageTopClickFunc+0xa8>)
 8010afa:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 8010afe:	2b02      	cmp	r3, #2
 8010b00:	d010      	beq.n	8010b24 <detectSetPageTopClickFunc+0x68>
 8010b02:	2b03      	cmp	r3, #3
 8010b04:	d018      	beq.n	8010b38 <detectSetPageTopClickFunc+0x7c>
 8010b06:	2b01      	cmp	r3, #1
 8010b08:	d000      	beq.n	8010b0c <detectSetPageTopClickFunc+0x50>
				break;
			case 3:
				if(deviceOwnInfo.highPercent<99)
					deviceOwnInfo.highPercent++;
				break;
			default:break;
 8010b0a:	e022      	b.n	8010b52 <detectSetPageTopClickFunc+0x96>
				if(deviceOwnInfo.uint==1)
 8010b0c:	4b16      	ldr	r3, [pc, #88]	; (8010b68 <detectSetPageTopClickFunc+0xac>)
 8010b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b10:	2b01      	cmp	r3, #1
 8010b12:	d103      	bne.n	8010b1c <detectSetPageTopClickFunc+0x60>
					deviceOwnInfo.uint = 2;
 8010b14:	4b14      	ldr	r3, [pc, #80]	; (8010b68 <detectSetPageTopClickFunc+0xac>)
 8010b16:	2202      	movs	r2, #2
 8010b18:	629a      	str	r2, [r3, #40]	; 0x28
				break;
 8010b1a:	e01a      	b.n	8010b52 <detectSetPageTopClickFunc+0x96>
					deviceOwnInfo.uint = 1;
 8010b1c:	4b12      	ldr	r3, [pc, #72]	; (8010b68 <detectSetPageTopClickFunc+0xac>)
 8010b1e:	2201      	movs	r2, #1
 8010b20:	629a      	str	r2, [r3, #40]	; 0x28
				break;
 8010b22:	e016      	b.n	8010b52 <detectSetPageTopClickFunc+0x96>
				if(deviceOwnInfo.lowPercent<99)
 8010b24:	4b10      	ldr	r3, [pc, #64]	; (8010b68 <detectSetPageTopClickFunc+0xac>)
 8010b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b28:	2b62      	cmp	r3, #98	; 0x62
 8010b2a:	dc0f      	bgt.n	8010b4c <detectSetPageTopClickFunc+0x90>
					deviceOwnInfo.lowPercent++;
 8010b2c:	4b0e      	ldr	r3, [pc, #56]	; (8010b68 <detectSetPageTopClickFunc+0xac>)
 8010b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b30:	3301      	adds	r3, #1
 8010b32:	4a0d      	ldr	r2, [pc, #52]	; (8010b68 <detectSetPageTopClickFunc+0xac>)
 8010b34:	6313      	str	r3, [r2, #48]	; 0x30
				break;
 8010b36:	e009      	b.n	8010b4c <detectSetPageTopClickFunc+0x90>
				if(deviceOwnInfo.highPercent<99)
 8010b38:	4b0b      	ldr	r3, [pc, #44]	; (8010b68 <detectSetPageTopClickFunc+0xac>)
 8010b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b3c:	2b62      	cmp	r3, #98	; 0x62
 8010b3e:	dc07      	bgt.n	8010b50 <detectSetPageTopClickFunc+0x94>
					deviceOwnInfo.highPercent++;
 8010b40:	4b09      	ldr	r3, [pc, #36]	; (8010b68 <detectSetPageTopClickFunc+0xac>)
 8010b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b44:	3301      	adds	r3, #1
 8010b46:	4a08      	ldr	r2, [pc, #32]	; (8010b68 <detectSetPageTopClickFunc+0xac>)
 8010b48:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
 8010b4a:	e001      	b.n	8010b50 <detectSetPageTopClickFunc+0x94>
				break;
 8010b4c:	bf00      	nop
 8010b4e:	e000      	b.n	8010b52 <detectSetPageTopClickFunc+0x96>
				break;
 8010b50:	bf00      	nop
		}

	}
	osDelay(200);
 8010b52:	20c8      	movs	r0, #200	; 0xc8
 8010b54:	f7f8 f8b8 	bl	8008cc8 <osDelay>
 8010b58:	e000      	b.n	8010b5c <detectSetPageTopClickFunc+0xa0>
		return;
 8010b5a:	bf00      	nop
}
 8010b5c:	3708      	adds	r7, #8
 8010b5e:	46bd      	mov	sp, r7
 8010b60:	bd80      	pop	{r7, pc}
 8010b62:	bf00      	nop
 8010b64:	20000200 	.word	0x20000200
 8010b68:	2000017c 	.word	0x2000017c

08010b6c <detectSetPageBottomClickFunc>:

void detectSetPageBottomClickFunc(int i){
 8010b6c:	b580      	push	{r7, lr}
 8010b6e:	b082      	sub	sp, #8
 8010b70:	af00      	add	r7, sp, #0
 8010b72:	6078      	str	r0, [r7, #4]
	if(i == 0)
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d047      	beq.n	8010c0a <detectSetPageBottomClickFunc+0x9e>
		return;
	//未进入设置项

	if(!pageInfoList[detectSet].baseInfo){
 8010b7a:	4b26      	ldr	r3, [pc, #152]	; (8010c14 <detectSetPageBottomClickFunc+0xa8>)
 8010b7c:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d111      	bne.n	8010ba8 <detectSetPageBottomClickFunc+0x3c>
			pageInfoList[detectSet].arrowInfo++;
 8010b84:	4b23      	ldr	r3, [pc, #140]	; (8010c14 <detectSetPageBottomClickFunc+0xa8>)
 8010b86:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 8010b8a:	3301      	adds	r3, #1
 8010b8c:	b2da      	uxtb	r2, r3
 8010b8e:	4b21      	ldr	r3, [pc, #132]	; (8010c14 <detectSetPageBottomClickFunc+0xa8>)
 8010b90:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
			if(pageInfoList[detectSet].arrowInfo>4)
 8010b94:	4b1f      	ldr	r3, [pc, #124]	; (8010c14 <detectSetPageBottomClickFunc+0xa8>)
 8010b96:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 8010b9a:	2b04      	cmp	r3, #4
 8010b9c:	d931      	bls.n	8010c02 <detectSetPageBottomClickFunc+0x96>
				pageInfoList[detectSet].arrowInfo = 4;
 8010b9e:	4b1d      	ldr	r3, [pc, #116]	; (8010c14 <detectSetPageBottomClickFunc+0xa8>)
 8010ba0:	2204      	movs	r2, #4
 8010ba2:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
 8010ba6:	e02c      	b.n	8010c02 <detectSetPageBottomClickFunc+0x96>
	}
	else{
		switch(pageInfoList[detectSet].arrowInfo){
 8010ba8:	4b1a      	ldr	r3, [pc, #104]	; (8010c14 <detectSetPageBottomClickFunc+0xa8>)
 8010baa:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 8010bae:	2b02      	cmp	r3, #2
 8010bb0:	d010      	beq.n	8010bd4 <detectSetPageBottomClickFunc+0x68>
 8010bb2:	2b03      	cmp	r3, #3
 8010bb4:	d018      	beq.n	8010be8 <detectSetPageBottomClickFunc+0x7c>
 8010bb6:	2b01      	cmp	r3, #1
 8010bb8:	d000      	beq.n	8010bbc <detectSetPageBottomClickFunc+0x50>
				break;
			case 3:
				if(deviceOwnInfo.highPercent > 0)
					deviceOwnInfo.highPercent--;
				break;
			default:break;
 8010bba:	e022      	b.n	8010c02 <detectSetPageBottomClickFunc+0x96>
				if(deviceOwnInfo.uint==1)
 8010bbc:	4b16      	ldr	r3, [pc, #88]	; (8010c18 <detectSetPageBottomClickFunc+0xac>)
 8010bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010bc0:	2b01      	cmp	r3, #1
 8010bc2:	d103      	bne.n	8010bcc <detectSetPageBottomClickFunc+0x60>
					deviceOwnInfo.uint = 2;
 8010bc4:	4b14      	ldr	r3, [pc, #80]	; (8010c18 <detectSetPageBottomClickFunc+0xac>)
 8010bc6:	2202      	movs	r2, #2
 8010bc8:	629a      	str	r2, [r3, #40]	; 0x28
				break;
 8010bca:	e01a      	b.n	8010c02 <detectSetPageBottomClickFunc+0x96>
					deviceOwnInfo.uint = 1;
 8010bcc:	4b12      	ldr	r3, [pc, #72]	; (8010c18 <detectSetPageBottomClickFunc+0xac>)
 8010bce:	2201      	movs	r2, #1
 8010bd0:	629a      	str	r2, [r3, #40]	; 0x28
				break;
 8010bd2:	e016      	b.n	8010c02 <detectSetPageBottomClickFunc+0x96>
				if(deviceOwnInfo.lowPercent > 0)
 8010bd4:	4b10      	ldr	r3, [pc, #64]	; (8010c18 <detectSetPageBottomClickFunc+0xac>)
 8010bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	dd0f      	ble.n	8010bfc <detectSetPageBottomClickFunc+0x90>
					deviceOwnInfo.lowPercent--;
 8010bdc:	4b0e      	ldr	r3, [pc, #56]	; (8010c18 <detectSetPageBottomClickFunc+0xac>)
 8010bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010be0:	3b01      	subs	r3, #1
 8010be2:	4a0d      	ldr	r2, [pc, #52]	; (8010c18 <detectSetPageBottomClickFunc+0xac>)
 8010be4:	6313      	str	r3, [r2, #48]	; 0x30
				break;
 8010be6:	e009      	b.n	8010bfc <detectSetPageBottomClickFunc+0x90>
				if(deviceOwnInfo.highPercent > 0)
 8010be8:	4b0b      	ldr	r3, [pc, #44]	; (8010c18 <detectSetPageBottomClickFunc+0xac>)
 8010bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	dd07      	ble.n	8010c00 <detectSetPageBottomClickFunc+0x94>
					deviceOwnInfo.highPercent--;
 8010bf0:	4b09      	ldr	r3, [pc, #36]	; (8010c18 <detectSetPageBottomClickFunc+0xac>)
 8010bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010bf4:	3b01      	subs	r3, #1
 8010bf6:	4a08      	ldr	r2, [pc, #32]	; (8010c18 <detectSetPageBottomClickFunc+0xac>)
 8010bf8:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
 8010bfa:	e001      	b.n	8010c00 <detectSetPageBottomClickFunc+0x94>
				break;
 8010bfc:	bf00      	nop
 8010bfe:	e000      	b.n	8010c02 <detectSetPageBottomClickFunc+0x96>
				break;
 8010c00:	bf00      	nop
		}
	}
	osDelay(200);
 8010c02:	20c8      	movs	r0, #200	; 0xc8
 8010c04:	f7f8 f860 	bl	8008cc8 <osDelay>
 8010c08:	e000      	b.n	8010c0c <detectSetPageBottomClickFunc+0xa0>
		return;
 8010c0a:	bf00      	nop
}
 8010c0c:	3708      	adds	r7, #8
 8010c0e:	46bd      	mov	sp, r7
 8010c10:	bd80      	pop	{r7, pc}
 8010c12:	bf00      	nop
 8010c14:	20000200 	.word	0x20000200
 8010c18:	2000017c 	.word	0x2000017c

08010c1c <detectSetPageBackClickFunc>:
		return;
	//未进入设置项
	osDelay(200);
}

void detectSetPageBackClickFunc(int i){
 8010c1c:	b580      	push	{r7, lr}
 8010c1e:	b082      	sub	sp, #8
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	6078      	str	r0, [r7, #4]
	if(i == 0)
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d019      	beq.n	8010c5e <detectSetPageBackClickFunc+0x42>
		return;
	//未进入设置项
	if(pageInfoList[detectSet].baseInfo == 1){
 8010c2a:	4b0f      	ldr	r3, [pc, #60]	; (8010c68 <detectSetPageBackClickFunc+0x4c>)
 8010c2c:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
 8010c30:	2b01      	cmp	r3, #1
 8010c32:	d104      	bne.n	8010c3e <detectSetPageBackClickFunc+0x22>
		pageInfoList[detectSet].baseInfo = 0;
 8010c34:	4b0c      	ldr	r3, [pc, #48]	; (8010c68 <detectSetPageBackClickFunc+0x4c>)
 8010c36:	2200      	movs	r2, #0
 8010c38:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
 8010c3c:	e00b      	b.n	8010c56 <detectSetPageBackClickFunc+0x3a>
	}
	else{
		assignPage(setPage1);
 8010c3e:	2002      	movs	r0, #2
 8010c40:	f7ff f8d4 	bl	800fdec <assignPage>
		uartSendInfo.unitChangeFlag = 0;
 8010c44:	4b09      	ldr	r3, [pc, #36]	; (8010c6c <detectSetPageBackClickFunc+0x50>)
 8010c46:	2200      	movs	r2, #0
 8010c48:	625a      	str	r2, [r3, #36]	; 0x24
		uartSendInfo.highLimitSetFlag =0;
 8010c4a:	4b08      	ldr	r3, [pc, #32]	; (8010c6c <detectSetPageBackClickFunc+0x50>)
 8010c4c:	2200      	movs	r2, #0
 8010c4e:	629a      	str	r2, [r3, #40]	; 0x28
		uartSendInfo.lowLimitSetFlag =0;
 8010c50:	4b06      	ldr	r3, [pc, #24]	; (8010c6c <detectSetPageBackClickFunc+0x50>)
 8010c52:	2200      	movs	r2, #0
 8010c54:	62da      	str	r2, [r3, #44]	; 0x2c

	}
	osDelay(200);
 8010c56:	20c8      	movs	r0, #200	; 0xc8
 8010c58:	f7f8 f836 	bl	8008cc8 <osDelay>
 8010c5c:	e000      	b.n	8010c60 <detectSetPageBackClickFunc+0x44>
		return;
 8010c5e:	bf00      	nop
}
 8010c60:	3708      	adds	r7, #8
 8010c62:	46bd      	mov	sp, r7
 8010c64:	bd80      	pop	{r7, pc}
 8010c66:	bf00      	nop
 8010c68:	20000200 	.word	0x20000200
 8010c6c:	2000000c 	.word	0x2000000c

08010c70 <detectSetPageSureClickFunc>:

void detectSetPageSureClickFunc(int i){
 8010c70:	b580      	push	{r7, lr}
 8010c72:	b082      	sub	sp, #8
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	6078      	str	r0, [r7, #4]
	if(i == 0)
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d03c      	beq.n	8010cf8 <detectSetPageSureClickFunc+0x88>
		return;
	//未进入设置项
	if(pageInfoList[detectSet].baseInfo == 0)
 8010c7e:	4b20      	ldr	r3, [pc, #128]	; (8010d00 <detectSetPageSureClickFunc+0x90>)
 8010c80:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d104      	bne.n	8010c92 <detectSetPageSureClickFunc+0x22>
		pageInfoList[detectSet].baseInfo = 1;
 8010c88:	4b1d      	ldr	r3, [pc, #116]	; (8010d00 <detectSetPageSureClickFunc+0x90>)
 8010c8a:	2201      	movs	r2, #1
 8010c8c:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
 8010c90:	e02e      	b.n	8010cf0 <detectSetPageSureClickFunc+0x80>
	else{
		pageInfoList[detectSet].baseInfo = 0;
 8010c92:	4b1b      	ldr	r3, [pc, #108]	; (8010d00 <detectSetPageSureClickFunc+0x90>)
 8010c94:	2200      	movs	r2, #0
 8010c96:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
		if(pageInfoList[detectSet].arrowInfo == 1){
 8010c9a:	4b19      	ldr	r3, [pc, #100]	; (8010d00 <detectSetPageSureClickFunc+0x90>)
 8010c9c:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 8010ca0:	2b01      	cmp	r3, #1
 8010ca2:	d109      	bne.n	8010cb8 <detectSetPageSureClickFunc+0x48>
			uartSendInfo.unitChangeFlag = 0;
 8010ca4:	4b17      	ldr	r3, [pc, #92]	; (8010d04 <detectSetPageSureClickFunc+0x94>)
 8010ca6:	2200      	movs	r2, #0
 8010ca8:	625a      	str	r2, [r3, #36]	; 0x24
			operationRecord(changeUnitRecordValue, pageInfoList[detectSet].unitInfo);
 8010caa:	4b15      	ldr	r3, [pc, #84]	; (8010d00 <detectSetPageSureClickFunc+0x90>)
 8010cac:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8010cb0:	4619      	mov	r1, r3
 8010cb2:	200f      	movs	r0, #15
 8010cb4:	f000 fafe 	bl	80112b4 <operationRecord>
		}
		if(pageInfoList[detectSet].arrowInfo == 2){
 8010cb8:	4b11      	ldr	r3, [pc, #68]	; (8010d00 <detectSetPageSureClickFunc+0x90>)
 8010cba:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 8010cbe:	2b02      	cmp	r3, #2
 8010cc0:	d108      	bne.n	8010cd4 <detectSetPageSureClickFunc+0x64>
			uartSendInfo.lowLimitSetFlag =0;
 8010cc2:	4b10      	ldr	r3, [pc, #64]	; (8010d04 <detectSetPageSureClickFunc+0x94>)
 8010cc4:	2200      	movs	r2, #0
 8010cc6:	62da      	str	r2, [r3, #44]	; 0x2c
			operationRecord(setHighLimitRecordValue, deviceOwnInfo.highPercent);
 8010cc8:	4b0f      	ldr	r3, [pc, #60]	; (8010d08 <detectSetPageSureClickFunc+0x98>)
 8010cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ccc:	4619      	mov	r1, r3
 8010cce:	2008      	movs	r0, #8
 8010cd0:	f000 faf0 	bl	80112b4 <operationRecord>
		}
		if(pageInfoList[detectSet].arrowInfo == 3){
 8010cd4:	4b0a      	ldr	r3, [pc, #40]	; (8010d00 <detectSetPageSureClickFunc+0x90>)
 8010cd6:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 8010cda:	2b03      	cmp	r3, #3
 8010cdc:	d108      	bne.n	8010cf0 <detectSetPageSureClickFunc+0x80>
			uartSendInfo.highLimitSetFlag =0;
 8010cde:	4b09      	ldr	r3, [pc, #36]	; (8010d04 <detectSetPageSureClickFunc+0x94>)
 8010ce0:	2200      	movs	r2, #0
 8010ce2:	629a      	str	r2, [r3, #40]	; 0x28
			operationRecord(setLowLimitRecordValue, deviceOwnInfo.lowPercent);
 8010ce4:	4b08      	ldr	r3, [pc, #32]	; (8010d08 <detectSetPageSureClickFunc+0x98>)
 8010ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ce8:	4619      	mov	r1, r3
 8010cea:	2009      	movs	r0, #9
 8010cec:	f000 fae2 	bl	80112b4 <operationRecord>
		}
	}
	osDelay(200);
 8010cf0:	20c8      	movs	r0, #200	; 0xc8
 8010cf2:	f7f7 ffe9 	bl	8008cc8 <osDelay>
 8010cf6:	e000      	b.n	8010cfa <detectSetPageSureClickFunc+0x8a>
		return;
 8010cf8:	bf00      	nop
}
 8010cfa:	3708      	adds	r7, #8
 8010cfc:	46bd      	mov	sp, r7
 8010cfe:	bd80      	pop	{r7, pc}
 8010d00:	20000200 	.word	0x20000200
 8010d04:	2000000c 	.word	0x2000000c
 8010d08:	2000017c 	.word	0x2000017c

08010d0c <nullButtonFunc>:

void nullButtonFunc(int i){
 8010d0c:	b480      	push	{r7}
 8010d0e:	b083      	sub	sp, #12
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]
	return;
 8010d14:	bf00      	nop
}
 8010d16:	370c      	adds	r7, #12
 8010d18:	46bd      	mov	sp, r7
 8010d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d1e:	4770      	bx	lr

08010d20 <funcBottom>:

struct myFileInfo myFile;
extern UART_HandleTypeDef huart1;

void funcBottom(int i){
 8010d20:	b580      	push	{r7, lr}
 8010d22:	b082      	sub	sp, #8
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	6078      	str	r0, [r7, #4]
	if(!i)
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d003      	beq.n	8010d36 <funcBottom+0x16>
		return;
	osDelay(200);
 8010d2e:	20c8      	movs	r0, #200	; 0xc8
 8010d30:	f7f7 ffca 	bl	8008cc8 <osDelay>
 8010d34:	e000      	b.n	8010d38 <funcBottom+0x18>
		return;
 8010d36:	bf00      	nop
}
 8010d38:	3708      	adds	r7, #8
 8010d3a:	46bd      	mov	sp, r7
 8010d3c:	bd80      	pop	{r7, pc}
	...

08010d40 <funcRight>:
	canDataNoDemarcate,
	canDatafault,
	canDataAlarmLow,
	canDataAlarmHigh,
};
void funcRight(int i){
 8010d40:	b580      	push	{r7, lr}
 8010d42:	b082      	sub	sp, #8
 8010d44:	af00      	add	r7, sp, #0
 8010d46:	6078      	str	r0, [r7, #4]
	if(!i)
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d01a      	beq.n	8010d84 <funcRight+0x44>
		return;
	if(deviceOwnInfo.mannerge == 0)
 8010d4e:	4b10      	ldr	r3, [pc, #64]	; (8010d90 <funcRight+0x50>)
 8010d50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d018      	beq.n	8010d88 <funcRight+0x48>
		return;
	if(otherPageNum<63){
 8010d56:	4b0f      	ldr	r3, [pc, #60]	; (8010d94 <funcRight+0x54>)
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	2b3e      	cmp	r3, #62	; 0x3e
 8010d5c:	dc0e      	bgt.n	8010d7c <funcRight+0x3c>
		otherPageNum++;
 8010d5e:	4b0d      	ldr	r3, [pc, #52]	; (8010d94 <funcRight+0x54>)
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	3301      	adds	r3, #1
 8010d64:	4a0b      	ldr	r2, [pc, #44]	; (8010d94 <funcRight+0x54>)
 8010d66:	6013      	str	r3, [r2, #0]
		deviceInfoP = &otherDeviceList[otherPageNum];
 8010d68:	4b0a      	ldr	r3, [pc, #40]	; (8010d94 <funcRight+0x54>)
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	01db      	lsls	r3, r3, #7
 8010d6e:	4a0a      	ldr	r2, [pc, #40]	; (8010d98 <funcRight+0x58>)
 8010d70:	4413      	add	r3, r2
 8010d72:	4a0a      	ldr	r2, [pc, #40]	; (8010d9c <funcRight+0x5c>)
 8010d74:	6013      	str	r3, [r2, #0]
		deviceOwnInfo.rollDisplay = 0;
 8010d76:	4b06      	ldr	r3, [pc, #24]	; (8010d90 <funcRight+0x50>)
 8010d78:	2200      	movs	r2, #0
 8010d7a:	669a      	str	r2, [r3, #104]	; 0x68
	}
	osDelay(200);
 8010d7c:	20c8      	movs	r0, #200	; 0xc8
 8010d7e:	f7f7 ffa3 	bl	8008cc8 <osDelay>
 8010d82:	e002      	b.n	8010d8a <funcRight+0x4a>
		return;
 8010d84:	bf00      	nop
 8010d86:	e000      	b.n	8010d8a <funcRight+0x4a>
		return;
 8010d88:	bf00      	nop
}
 8010d8a:	3708      	adds	r7, #8
 8010d8c:	46bd      	mov	sp, r7
 8010d8e:	bd80      	pop	{r7, pc}
 8010d90:	2000017c 	.word	0x2000017c
 8010d94:	200004c0 	.word	0x200004c0
 8010d98:	20007320 	.word	0x20007320
 8010d9c:	200001fc 	.word	0x200001fc

08010da0 <funcLeft>:

void funcLeft(int i){
 8010da0:	b580      	push	{r7, lr}
 8010da2:	b082      	sub	sp, #8
 8010da4:	af00      	add	r7, sp, #0
 8010da6:	6078      	str	r0, [r7, #4]
	if(!i)
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d01a      	beq.n	8010de4 <funcLeft+0x44>
		return;
	if(deviceOwnInfo.mannerge == 0)
 8010dae:	4b10      	ldr	r3, [pc, #64]	; (8010df0 <funcLeft+0x50>)
 8010db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d018      	beq.n	8010de8 <funcLeft+0x48>
		return;
	if(otherPageNum>0){
 8010db6:	4b0f      	ldr	r3, [pc, #60]	; (8010df4 <funcLeft+0x54>)
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	dd0e      	ble.n	8010ddc <funcLeft+0x3c>
		otherPageNum--;
 8010dbe:	4b0d      	ldr	r3, [pc, #52]	; (8010df4 <funcLeft+0x54>)
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	3b01      	subs	r3, #1
 8010dc4:	4a0b      	ldr	r2, [pc, #44]	; (8010df4 <funcLeft+0x54>)
 8010dc6:	6013      	str	r3, [r2, #0]
		deviceInfoP = &otherDeviceList[otherPageNum];
 8010dc8:	4b0a      	ldr	r3, [pc, #40]	; (8010df4 <funcLeft+0x54>)
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	01db      	lsls	r3, r3, #7
 8010dce:	4a0a      	ldr	r2, [pc, #40]	; (8010df8 <funcLeft+0x58>)
 8010dd0:	4413      	add	r3, r2
 8010dd2:	4a0a      	ldr	r2, [pc, #40]	; (8010dfc <funcLeft+0x5c>)
 8010dd4:	6013      	str	r3, [r2, #0]
		deviceOwnInfo.rollDisplay = 0;
 8010dd6:	4b06      	ldr	r3, [pc, #24]	; (8010df0 <funcLeft+0x50>)
 8010dd8:	2200      	movs	r2, #0
 8010dda:	669a      	str	r2, [r3, #104]	; 0x68
	}
	osDelay(200);
 8010ddc:	20c8      	movs	r0, #200	; 0xc8
 8010dde:	f7f7 ff73 	bl	8008cc8 <osDelay>
 8010de2:	e002      	b.n	8010dea <funcLeft+0x4a>
		return;
 8010de4:	bf00      	nop
 8010de6:	e000      	b.n	8010dea <funcLeft+0x4a>
		return;
 8010de8:	bf00      	nop
}
 8010dea:	3708      	adds	r7, #8
 8010dec:	46bd      	mov	sp, r7
 8010dee:	bd80      	pop	{r7, pc}
 8010df0:	2000017c 	.word	0x2000017c
 8010df4:	200004c0 	.word	0x200004c0
 8010df8:	20007320 	.word	0x20007320
 8010dfc:	200001fc 	.word	0x200001fc

08010e00 <funcBack>:

void funcBack(int i){
 8010e00:	b580      	push	{r7, lr}
 8010e02:	b082      	sub	sp, #8
 8010e04:	af00      	add	r7, sp, #0
 8010e06:	6078      	str	r0, [r7, #4]
	if(!i)
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d010      	beq.n	8010e30 <funcBack+0x30>
		return;
	otherPageNum = -1;
 8010e0e:	4b0a      	ldr	r3, [pc, #40]	; (8010e38 <funcBack+0x38>)
 8010e10:	f04f 32ff 	mov.w	r2, #4294967295
 8010e14:	601a      	str	r2, [r3, #0]
	pageInfoList[firstPage].deviceNameInfo = &deviceOwnInfo;
 8010e16:	4b09      	ldr	r3, [pc, #36]	; (8010e3c <funcBack+0x3c>)
 8010e18:	4a09      	ldr	r2, [pc, #36]	; (8010e40 <funcBack+0x40>)
 8010e1a:	621a      	str	r2, [r3, #32]
	deviceInfoP = &deviceOwnInfo;
 8010e1c:	4b09      	ldr	r3, [pc, #36]	; (8010e44 <funcBack+0x44>)
 8010e1e:	4a08      	ldr	r2, [pc, #32]	; (8010e40 <funcBack+0x40>)
 8010e20:	601a      	str	r2, [r3, #0]
	deviceOwnInfo.rollDisplay = 0;
 8010e22:	4b07      	ldr	r3, [pc, #28]	; (8010e40 <funcBack+0x40>)
 8010e24:	2200      	movs	r2, #0
 8010e26:	669a      	str	r2, [r3, #104]	; 0x68
	osDelay(200);
 8010e28:	20c8      	movs	r0, #200	; 0xc8
 8010e2a:	f7f7 ff4d 	bl	8008cc8 <osDelay>
 8010e2e:	e000      	b.n	8010e32 <funcBack+0x32>
		return;
 8010e30:	bf00      	nop
}
 8010e32:	3708      	adds	r7, #8
 8010e34:	46bd      	mov	sp, r7
 8010e36:	bd80      	pop	{r7, pc}
 8010e38:	200004c0 	.word	0x200004c0
 8010e3c:	20000200 	.word	0x20000200
 8010e40:	2000017c 	.word	0x2000017c
 8010e44:	200001fc 	.word	0x200001fc

08010e48 <funcTop>:

char y[50];
void funcTop(int i){
 8010e48:	b580      	push	{r7, lr}
 8010e4a:	b082      	sub	sp, #8
 8010e4c:	af00      	add	r7, sp, #0
 8010e4e:	6078      	str	r0, [r7, #4]
	if(!i)
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d003      	beq.n	8010e5e <funcTop+0x16>
		return;
	osDelay(200);
 8010e56:	20c8      	movs	r0, #200	; 0xc8
 8010e58:	f7f7 ff36 	bl	8008cc8 <osDelay>
 8010e5c:	e000      	b.n	8010e60 <funcTop+0x18>
		return;
 8010e5e:	bf00      	nop
}
 8010e60:	3708      	adds	r7, #8
 8010e62:	46bd      	mov	sp, r7
 8010e64:	bd80      	pop	{r7, pc}
	...

08010e68 <lcdWrReg>:
	},
};



void lcdWrReg(volatile uint16_t regval){
 8010e68:	b480      	push	{r7}
 8010e6a:	b083      	sub	sp, #12
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	4603      	mov	r3, r0
 8010e70:	80fb      	strh	r3, [r7, #6]
	regval=regval;
 8010e72:	88fb      	ldrh	r3, [r7, #6]
 8010e74:	b29b      	uxth	r3, r3
 8010e76:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=regval;
 8010e78:	4b04      	ldr	r3, [pc, #16]	; (8010e8c <lcdWrReg+0x24>)
 8010e7a:	88fa      	ldrh	r2, [r7, #6]
 8010e7c:	b292      	uxth	r2, r2
 8010e7e:	801a      	strh	r2, [r3, #0]
}
 8010e80:	bf00      	nop
 8010e82:	370c      	adds	r7, #12
 8010e84:	46bd      	mov	sp, r7
 8010e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e8a:	4770      	bx	lr
 8010e8c:	6001fffe 	.word	0x6001fffe

08010e90 <lcdWrData>:

void lcdWrData(volatile uint16_t data){
 8010e90:	b480      	push	{r7}
 8010e92:	b083      	sub	sp, #12
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	4603      	mov	r3, r0
 8010e98:	80fb      	strh	r3, [r7, #6]
	data=data;
 8010e9a:	88fb      	ldrh	r3, [r7, #6]
 8010e9c:	b29b      	uxth	r3, r3
 8010e9e:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8010ea0:	4b04      	ldr	r3, [pc, #16]	; (8010eb4 <lcdWrData+0x24>)
 8010ea2:	88fa      	ldrh	r2, [r7, #6]
 8010ea4:	b292      	uxth	r2, r2
 8010ea6:	805a      	strh	r2, [r3, #2]
}
 8010ea8:	bf00      	nop
 8010eaa:	370c      	adds	r7, #12
 8010eac:	46bd      	mov	sp, r7
 8010eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb2:	4770      	bx	lr
 8010eb4:	6001fffe 	.word	0x6001fffe

08010eb8 <lcdWrRegData>:

void lcdWrRegData(uint16_t LCD_Reg,uint16_t LCD_RegValue){
 8010eb8:	b580      	push	{r7, lr}
 8010eba:	b082      	sub	sp, #8
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	4603      	mov	r3, r0
 8010ec0:	460a      	mov	r2, r1
 8010ec2:	80fb      	strh	r3, [r7, #6]
 8010ec4:	4613      	mov	r3, r2
 8010ec6:	80bb      	strh	r3, [r7, #4]
	lcdWrReg(LCD_Reg);
 8010ec8:	88fb      	ldrh	r3, [r7, #6]
 8010eca:	4618      	mov	r0, r3
 8010ecc:	f7ff ffcc 	bl	8010e68 <lcdWrReg>
	lcdWrData(LCD_RegValue);
 8010ed0:	88bb      	ldrh	r3, [r7, #4]
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	f7ff ffdc 	bl	8010e90 <lcdWrData>
}
 8010ed8:	bf00      	nop
 8010eda:	3708      	adds	r7, #8
 8010edc:	46bd      	mov	sp, r7
 8010ede:	bd80      	pop	{r7, pc}

08010ee0 <tftRamColorFill>:

void tftRamColorFill(uint16_t  data, int length){
 8010ee0:	b580      	push	{r7, lr}
 8010ee2:	b084      	sub	sp, #16
 8010ee4:	af00      	add	r7, sp, #0
 8010ee6:	4603      	mov	r3, r0
 8010ee8:	6039      	str	r1, [r7, #0]
 8010eea:	80fb      	strh	r3, [r7, #6]
	lcdWrReg(0x22);
 8010eec:	2022      	movs	r0, #34	; 0x22
 8010eee:	f7ff ffbb 	bl	8010e68 <lcdWrReg>
	for(int i = 0; i < length; i++){
 8010ef2:	2300      	movs	r3, #0
 8010ef4:	60fb      	str	r3, [r7, #12]
 8010ef6:	e006      	b.n	8010f06 <tftRamColorFill+0x26>
		lcdWrData(data);
 8010ef8:	88fb      	ldrh	r3, [r7, #6]
 8010efa:	4618      	mov	r0, r3
 8010efc:	f7ff ffc8 	bl	8010e90 <lcdWrData>
	for(int i = 0; i < length; i++){
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	3301      	adds	r3, #1
 8010f04:	60fb      	str	r3, [r7, #12]
 8010f06:	68fa      	ldr	r2, [r7, #12]
 8010f08:	683b      	ldr	r3, [r7, #0]
 8010f0a:	429a      	cmp	r2, r3
 8010f0c:	dbf4      	blt.n	8010ef8 <tftRamColorFill+0x18>
	}
}
 8010f0e:	bf00      	nop
 8010f10:	3710      	adds	r7, #16
 8010f12:	46bd      	mov	sp, r7
 8010f14:	bd80      	pop	{r7, pc}

08010f16 <tftRamWrite>:

void tftRamWrite(const uint8_t * data, int length){
 8010f16:	b580      	push	{r7, lr}
 8010f18:	b084      	sub	sp, #16
 8010f1a:	af00      	add	r7, sp, #0
 8010f1c:	6078      	str	r0, [r7, #4]
 8010f1e:	6039      	str	r1, [r7, #0]
	lcdWrReg(0x22);
 8010f20:	2022      	movs	r0, #34	; 0x22
 8010f22:	f7ff ffa1 	bl	8010e68 <lcdWrReg>
	for(int i = 0; i < length; i+=2){
 8010f26:	2300      	movs	r3, #0
 8010f28:	60fb      	str	r3, [r7, #12]
 8010f2a:	e014      	b.n	8010f56 <tftRamWrite+0x40>
		lcdWrData(data[i+1]*256+data[i]);
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	3301      	adds	r3, #1
 8010f30:	687a      	ldr	r2, [r7, #4]
 8010f32:	4413      	add	r3, r2
 8010f34:	781b      	ldrb	r3, [r3, #0]
 8010f36:	b29b      	uxth	r3, r3
 8010f38:	021b      	lsls	r3, r3, #8
 8010f3a:	b29a      	uxth	r2, r3
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	6879      	ldr	r1, [r7, #4]
 8010f40:	440b      	add	r3, r1
 8010f42:	781b      	ldrb	r3, [r3, #0]
 8010f44:	b29b      	uxth	r3, r3
 8010f46:	4413      	add	r3, r2
 8010f48:	b29b      	uxth	r3, r3
 8010f4a:	4618      	mov	r0, r3
 8010f4c:	f7ff ffa0 	bl	8010e90 <lcdWrData>
	for(int i = 0; i < length; i+=2){
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	3302      	adds	r3, #2
 8010f54:	60fb      	str	r3, [r7, #12]
 8010f56:	68fa      	ldr	r2, [r7, #12]
 8010f58:	683b      	ldr	r3, [r7, #0]
 8010f5a:	429a      	cmp	r2, r3
 8010f5c:	dbe6      	blt.n	8010f2c <tftRamWrite+0x16>
	}
}
 8010f5e:	bf00      	nop
 8010f60:	3710      	adds	r7, #16
 8010f62:	46bd      	mov	sp, r7
 8010f64:	bd80      	pop	{r7, pc}

08010f66 <tftRamWriteWord>:
void tftRamWriteWord(const uint16_t * data, int length){
 8010f66:	b580      	push	{r7, lr}
 8010f68:	b084      	sub	sp, #16
 8010f6a:	af00      	add	r7, sp, #0
 8010f6c:	6078      	str	r0, [r7, #4]
 8010f6e:	6039      	str	r1, [r7, #0]
	lcdWrReg(0x22);
 8010f70:	2022      	movs	r0, #34	; 0x22
 8010f72:	f7ff ff79 	bl	8010e68 <lcdWrReg>
	for(int i = 0; i < length; i++){
 8010f76:	2300      	movs	r3, #0
 8010f78:	60fb      	str	r3, [r7, #12]
 8010f7a:	e00a      	b.n	8010f92 <tftRamWriteWord+0x2c>
		lcdWrData(data[i]);
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	005b      	lsls	r3, r3, #1
 8010f80:	687a      	ldr	r2, [r7, #4]
 8010f82:	4413      	add	r3, r2
 8010f84:	881b      	ldrh	r3, [r3, #0]
 8010f86:	4618      	mov	r0, r3
 8010f88:	f7ff ff82 	bl	8010e90 <lcdWrData>
	for(int i = 0; i < length; i++){
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	3301      	adds	r3, #1
 8010f90:	60fb      	str	r3, [r7, #12]
 8010f92:	68fa      	ldr	r2, [r7, #12]
 8010f94:	683b      	ldr	r3, [r7, #0]
 8010f96:	429a      	cmp	r2, r3
 8010f98:	dbf0      	blt.n	8010f7c <tftRamWriteWord+0x16>
	}
}
 8010f9a:	bf00      	nop
 8010f9c:	3710      	adds	r7, #16
 8010f9e:	46bd      	mov	sp, r7
 8010fa0:	bd80      	pop	{r7, pc}

08010fa2 <tftRamWriteColorChange>:

void tftRamWriteColorChange(const uint8_t * data, int length, int oldColor, int newColor){
 8010fa2:	b580      	push	{r7, lr}
 8010fa4:	b086      	sub	sp, #24
 8010fa6:	af00      	add	r7, sp, #0
 8010fa8:	60f8      	str	r0, [r7, #12]
 8010faa:	60b9      	str	r1, [r7, #8]
 8010fac:	607a      	str	r2, [r7, #4]
 8010fae:	603b      	str	r3, [r7, #0]
	lcdWrReg(0x22);
 8010fb0:	2022      	movs	r0, #34	; 0x22
 8010fb2:	f7ff ff59 	bl	8010e68 <lcdWrReg>
	for(int i = 0; i < length; i+=2){
 8010fb6:	2300      	movs	r3, #0
 8010fb8:	617b      	str	r3, [r7, #20]
 8010fba:	e01e      	b.n	8010ffa <tftRamWriteColorChange+0x58>
		int color = data[i+1]*256+data[i];
 8010fbc:	697b      	ldr	r3, [r7, #20]
 8010fbe:	3301      	adds	r3, #1
 8010fc0:	68fa      	ldr	r2, [r7, #12]
 8010fc2:	4413      	add	r3, r2
 8010fc4:	781b      	ldrb	r3, [r3, #0]
 8010fc6:	021b      	lsls	r3, r3, #8
 8010fc8:	697a      	ldr	r2, [r7, #20]
 8010fca:	68f9      	ldr	r1, [r7, #12]
 8010fcc:	440a      	add	r2, r1
 8010fce:	7812      	ldrb	r2, [r2, #0]
 8010fd0:	4413      	add	r3, r2
 8010fd2:	613b      	str	r3, [r7, #16]
		if(color == 0x2945)
 8010fd4:	693b      	ldr	r3, [r7, #16]
 8010fd6:	f642 1245 	movw	r2, #10565	; 0x2945
 8010fda:	4293      	cmp	r3, r2
 8010fdc:	d105      	bne.n	8010fea <tftRamWriteColorChange+0x48>
			lcdWrData(color);
 8010fde:	693b      	ldr	r3, [r7, #16]
 8010fe0:	b29b      	uxth	r3, r3
 8010fe2:	4618      	mov	r0, r3
 8010fe4:	f7ff ff54 	bl	8010e90 <lcdWrData>
 8010fe8:	e004      	b.n	8010ff4 <tftRamWriteColorChange+0x52>
		else
			lcdWrData(newColor);
 8010fea:	683b      	ldr	r3, [r7, #0]
 8010fec:	b29b      	uxth	r3, r3
 8010fee:	4618      	mov	r0, r3
 8010ff0:	f7ff ff4e 	bl	8010e90 <lcdWrData>
	for(int i = 0; i < length; i+=2){
 8010ff4:	697b      	ldr	r3, [r7, #20]
 8010ff6:	3302      	adds	r3, #2
 8010ff8:	617b      	str	r3, [r7, #20]
 8010ffa:	697a      	ldr	r2, [r7, #20]
 8010ffc:	68bb      	ldr	r3, [r7, #8]
 8010ffe:	429a      	cmp	r2, r3
 8011000:	dbdc      	blt.n	8010fbc <tftRamWriteColorChange+0x1a>
	}
}
 8011002:	bf00      	nop
 8011004:	3718      	adds	r7, #24
 8011006:	46bd      	mov	sp, r7
 8011008:	bd80      	pop	{r7, pc}
	...

0801100c <lcdReset>:

void lcdReset(void){
 801100c:	b580      	push	{r7, lr}
 801100e:	af00      	add	r7, sp, #0
	RESETVALUESET(1);
 8011010:	2201      	movs	r2, #1
 8011012:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8011016:	480b      	ldr	r0, [pc, #44]	; (8011044 <lcdReset+0x38>)
 8011018:	f7f1 f884 	bl	8002124 <HAL_GPIO_WritePin>
	LCDRESETDELAY();
 801101c:	2014      	movs	r0, #20
 801101e:	f7f7 fe53 	bl	8008cc8 <osDelay>
	RESETVALUESET(0);
 8011022:	2200      	movs	r2, #0
 8011024:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8011028:	4806      	ldr	r0, [pc, #24]	; (8011044 <lcdReset+0x38>)
 801102a:	f7f1 f87b 	bl	8002124 <HAL_GPIO_WritePin>
	LCDRESETDELAY();
 801102e:	2014      	movs	r0, #20
 8011030:	f7f7 fe4a 	bl	8008cc8 <osDelay>
	RESETVALUESET(1);
 8011034:	2201      	movs	r2, #1
 8011036:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801103a:	4802      	ldr	r0, [pc, #8]	; (8011044 <lcdReset+0x38>)
 801103c:	f7f1 f872 	bl	8002124 <HAL_GPIO_WritePin>
}
 8011040:	bf00      	nop
 8011042:	bd80      	pop	{r7, pc}
 8011044:	40020c00 	.word	0x40020c00

08011048 <tftSetWin>:
//y为横
void tftSetWin(uint8_t xStart,uint8_t yStart,uint8_t xEnd,uint8_t yEnd){
 8011048:	b590      	push	{r4, r7, lr}
 801104a:	b091      	sub	sp, #68	; 0x44
 801104c:	af00      	add	r7, sp, #0
 801104e:	4604      	mov	r4, r0
 8011050:	4608      	mov	r0, r1
 8011052:	4611      	mov	r1, r2
 8011054:	461a      	mov	r2, r3
 8011056:	4623      	mov	r3, r4
 8011058:	71fb      	strb	r3, [r7, #7]
 801105a:	4603      	mov	r3, r0
 801105c:	71bb      	strb	r3, [r7, #6]
 801105e:	460b      	mov	r3, r1
 8011060:	717b      	strb	r3, [r7, #5]
 8011062:	4613      	mov	r3, r2
 8011064:	713b      	strb	r3, [r7, #4]
	xEnd += (xStart-1);
 8011066:	79fa      	ldrb	r2, [r7, #7]
 8011068:	797b      	ldrb	r3, [r7, #5]
 801106a:	4413      	add	r3, r2
 801106c:	b2db      	uxtb	r3, r3
 801106e:	3b01      	subs	r3, #1
 8011070:	717b      	strb	r3, [r7, #5]
	yEnd += yStart;
 8011072:	793a      	ldrb	r2, [r7, #4]
 8011074:	79bb      	ldrb	r3, [r7, #6]
 8011076:	4413      	add	r3, r2
 8011078:	713b      	strb	r3, [r7, #4]
	const struct lcdInitArray lcdLocSetArrayList[]={
 801107a:	2336      	movs	r3, #54	; 0x36
 801107c:	60fb      	str	r3, [r7, #12]
 801107e:	793b      	ldrb	r3, [r7, #4]
 8011080:	b29b      	uxth	r3, r3
 8011082:	823b      	strh	r3, [r7, #16]
 8011084:	2337      	movs	r3, #55	; 0x37
 8011086:	617b      	str	r3, [r7, #20]
 8011088:	79bb      	ldrb	r3, [r7, #6]
 801108a:	b29b      	uxth	r3, r3
 801108c:	833b      	strh	r3, [r7, #24]
 801108e:	2338      	movs	r3, #56	; 0x38
 8011090:	61fb      	str	r3, [r7, #28]
 8011092:	797b      	ldrb	r3, [r7, #5]
 8011094:	b29b      	uxth	r3, r3
 8011096:	843b      	strh	r3, [r7, #32]
 8011098:	2339      	movs	r3, #57	; 0x39
 801109a:	627b      	str	r3, [r7, #36]	; 0x24
 801109c:	79fb      	ldrb	r3, [r7, #7]
 801109e:	b29b      	uxth	r3, r3
 80110a0:	853b      	strh	r3, [r7, #40]	; 0x28
 80110a2:	2321      	movs	r3, #33	; 0x21
 80110a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80110a6:	79fb      	ldrb	r3, [r7, #7]
 80110a8:	b29b      	uxth	r3, r3
 80110aa:	863b      	strh	r3, [r7, #48]	; 0x30
 80110ac:	2320      	movs	r3, #32
 80110ae:	637b      	str	r3, [r7, #52]	; 0x34
 80110b0:	79bb      	ldrb	r3, [r7, #6]
 80110b2:	b29b      	uxth	r3, r3
 80110b4:	873b      	strh	r3, [r7, #56]	; 0x38
		{0x36,yEnd},{0x37,yStart},{0x38,xEnd},
		{0x39,xStart},{0x21, xStart},{0x20,yStart},
	};

	for(int i = 0; i < sizeof(lcdLocSetArrayList)/sizeof(lcdLocSetArrayList[0]); i++){
 80110b6:	2300      	movs	r3, #0
 80110b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80110ba:	e015      	b.n	80110e8 <tftSetWin+0xa0>
		lcdWrRegData(lcdLocSetArrayList[i].addr, lcdLocSetArrayList[i].data);
 80110bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110be:	00db      	lsls	r3, r3, #3
 80110c0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80110c4:	4413      	add	r3, r2
 80110c6:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80110ca:	b29a      	uxth	r2, r3
 80110cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110ce:	00db      	lsls	r3, r3, #3
 80110d0:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80110d4:	440b      	add	r3, r1
 80110d6:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 80110da:	4619      	mov	r1, r3
 80110dc:	4610      	mov	r0, r2
 80110de:	f7ff feeb 	bl	8010eb8 <lcdWrRegData>
	for(int i = 0; i < sizeof(lcdLocSetArrayList)/sizeof(lcdLocSetArrayList[0]); i++){
 80110e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110e4:	3301      	adds	r3, #1
 80110e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80110e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110ea:	2b05      	cmp	r3, #5
 80110ec:	d9e6      	bls.n	80110bc <tftSetWin+0x74>
	}
	lcdWrReg(0x22);
 80110ee:	2022      	movs	r0, #34	; 0x22
 80110f0:	f7ff feba 	bl	8010e68 <lcdWrReg>
}
 80110f4:	bf00      	nop
 80110f6:	3744      	adds	r7, #68	; 0x44
 80110f8:	46bd      	mov	sp, r7
 80110fa:	bd90      	pop	{r4, r7, pc}

080110fc <lcdInit>:

void lcdInit(void){
 80110fc:	b580      	push	{r7, lr}
 80110fe:	b0c4      	sub	sp, #272	; 0x110
 8011100:	af00      	add	r7, sp, #0
	const struct lcdInitArray lcdInitArrayList[]={
 8011102:	1d3b      	adds	r3, r7, #4
 8011104:	4a1a      	ldr	r2, [pc, #104]	; (8011170 <lcdInit+0x74>)
 8011106:	4618      	mov	r0, r3
 8011108:	4611      	mov	r1, r2
 801110a:	f44f 7384 	mov.w	r3, #264	; 0x108
 801110e:	461a      	mov	r2, r3
 8011110:	f001 fa81 	bl	8012616 <memcpy>
		{0x0014,0x5A66},{0x0030,0x0000},{0x0031,0x00DB},{0x0032,0x0000},{0x0033,0x0000},
		{0x0034,0x00DB},{0x0035,0x0000},{0x0050,0x0000},{0x0051,0x0109},{0x0052,0x0A02},
		{0x0053,0x0401},{0x0054,0x020A},{0x0055,0x0901},{0x0056,0x0000},{0x0057,0x0104},
		{0x0058,0x0E02},{0x0059,0x020E},{0x0007,0x1017},
	};
	lcdReset();
 8011114:	f7ff ff7a 	bl	801100c <lcdReset>
	for(int i = 0; i < sizeof(lcdInitArrayList)/sizeof(lcdInitArrayList[0]); i++){
 8011118:	2300      	movs	r3, #0
 801111a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801111e:	e01e      	b.n	801115e <lcdInit+0x62>
		if(lcdInitArrayList[i].addr == 0x0)
 8011120:	1d3b      	adds	r3, r7, #4
 8011122:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8011126:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 801112a:	2b00      	cmp	r3, #0
 801112c:	d103      	bne.n	8011136 <lcdInit+0x3a>
			osDelay(120);
 801112e:	2078      	movs	r0, #120	; 0x78
 8011130:	f7f7 fdca 	bl	8008cc8 <osDelay>
 8011134:	e00e      	b.n	8011154 <lcdInit+0x58>
		else
			lcdWrRegData(lcdInitArrayList[i].addr, lcdInitArrayList[i].data);
 8011136:	1d3b      	adds	r3, r7, #4
 8011138:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801113c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8011140:	b298      	uxth	r0, r3
 8011142:	1d3a      	adds	r2, r7, #4
 8011144:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8011148:	00db      	lsls	r3, r3, #3
 801114a:	4413      	add	r3, r2
 801114c:	889b      	ldrh	r3, [r3, #4]
 801114e:	4619      	mov	r1, r3
 8011150:	f7ff feb2 	bl	8010eb8 <lcdWrRegData>
	for(int i = 0; i < sizeof(lcdInitArrayList)/sizeof(lcdInitArrayList[0]); i++){
 8011154:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8011158:	3301      	adds	r3, #1
 801115a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801115e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8011162:	2b20      	cmp	r3, #32
 8011164:	d9dc      	bls.n	8011120 <lcdInit+0x24>
	}
}
 8011166:	bf00      	nop
 8011168:	f507 7788 	add.w	r7, r7, #272	; 0x110
 801116c:	46bd      	mov	sp, r7
 801116e:	bd80      	pop	{r7, pc}
 8011170:	08013008 	.word	0x08013008

08011174 <lcdClean>:

void lcdClean(uint16_t color)
{
 8011174:	b580      	push	{r7, lr}
 8011176:	b084      	sub	sp, #16
 8011178:	af00      	add	r7, sp, #0
 801117a:	4603      	mov	r3, r0
 801117c:	80fb      	strh	r3, [r7, #6]
	tftSetWin(0,0,220,177);
 801117e:	23b1      	movs	r3, #177	; 0xb1
 8011180:	22dc      	movs	r2, #220	; 0xdc
 8011182:	2100      	movs	r1, #0
 8011184:	2000      	movs	r0, #0
 8011186:	f7ff ff5f 	bl	8011048 <tftSetWin>
	for(int i = 0; i < 38720; i++){
 801118a:	2300      	movs	r3, #0
 801118c:	60fb      	str	r3, [r7, #12]
 801118e:	e006      	b.n	801119e <lcdClean+0x2a>
		lcdWrData(color);
 8011190:	88fb      	ldrh	r3, [r7, #6]
 8011192:	4618      	mov	r0, r3
 8011194:	f7ff fe7c 	bl	8010e90 <lcdWrData>
	for(int i = 0; i < 38720; i++){
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	3301      	adds	r3, #1
 801119c:	60fb      	str	r3, [r7, #12]
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	f249 723f 	movw	r2, #38719	; 0x973f
 80111a4:	4293      	cmp	r3, r2
 80111a6:	ddf3      	ble.n	8011190 <lcdClean+0x1c>
	}
}
 80111a8:	bf00      	nop
 80111aa:	3710      	adds	r7, #16
 80111ac:	46bd      	mov	sp, r7
 80111ae:	bd80      	pop	{r7, pc}

080111b0 <recordCheck>:

DIR dir;
FILINFO fno;
uint16_t passWord = 1234;

void recordCheck(void){
 80111b0:	b580      	push	{r7, lr}
 80111b2:	af00      	add	r7, sp, #0
	if(f_opendir(&dir, "0:") == FR_OK){
 80111b4:	4936      	ldr	r1, [pc, #216]	; (8011290 <recordCheck+0xe0>)
 80111b6:	4837      	ldr	r0, [pc, #220]	; (8011294 <recordCheck+0xe4>)
 80111b8:	f7f7 f9d4 	bl	8008564 <f_opendir>
 80111bc:	4603      	mov	r3, r0
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d148      	bne.n	8011254 <recordCheck+0xa4>
		while(f_readdir(&dir, &fno) == FR_OK){
 80111c2:	e040      	b.n	8011246 <recordCheck+0x96>
				//有密码记录文件
			 if(fno.fname[0] == 'P'){
 80111c4:	4b34      	ldr	r3, [pc, #208]	; (8011298 <recordCheck+0xe8>)
 80111c6:	7a5b      	ldrb	r3, [r3, #9]
 80111c8:	2b50      	cmp	r3, #80	; 0x50
 80111ca:	d12f      	bne.n	801122c <recordCheck+0x7c>
				 passWord = (fno.fname[1]-0x30)*1000+(fno.fname[2]-0x30)*100+(fno.fname[3]-0x30)*10+(fno.fname[4]-0x30);
 80111cc:	4b32      	ldr	r3, [pc, #200]	; (8011298 <recordCheck+0xe8>)
 80111ce:	7a9b      	ldrb	r3, [r3, #10]
 80111d0:	3b30      	subs	r3, #48	; 0x30
 80111d2:	b29b      	uxth	r3, r3
 80111d4:	461a      	mov	r2, r3
 80111d6:	0152      	lsls	r2, r2, #5
 80111d8:	1ad2      	subs	r2, r2, r3
 80111da:	0092      	lsls	r2, r2, #2
 80111dc:	4413      	add	r3, r2
 80111de:	00db      	lsls	r3, r3, #3
 80111e0:	b29a      	uxth	r2, r3
 80111e2:	4b2d      	ldr	r3, [pc, #180]	; (8011298 <recordCheck+0xe8>)
 80111e4:	7adb      	ldrb	r3, [r3, #11]
 80111e6:	3b30      	subs	r3, #48	; 0x30
 80111e8:	b29b      	uxth	r3, r3
 80111ea:	4619      	mov	r1, r3
 80111ec:	0089      	lsls	r1, r1, #2
 80111ee:	440b      	add	r3, r1
 80111f0:	4619      	mov	r1, r3
 80111f2:	0088      	lsls	r0, r1, #2
 80111f4:	4619      	mov	r1, r3
 80111f6:	4603      	mov	r3, r0
 80111f8:	440b      	add	r3, r1
 80111fa:	009b      	lsls	r3, r3, #2
 80111fc:	b29b      	uxth	r3, r3
 80111fe:	4413      	add	r3, r2
 8011200:	b29a      	uxth	r2, r3
 8011202:	4b25      	ldr	r3, [pc, #148]	; (8011298 <recordCheck+0xe8>)
 8011204:	7b1b      	ldrb	r3, [r3, #12]
 8011206:	3b30      	subs	r3, #48	; 0x30
 8011208:	b29b      	uxth	r3, r3
 801120a:	4619      	mov	r1, r3
 801120c:	0089      	lsls	r1, r1, #2
 801120e:	440b      	add	r3, r1
 8011210:	005b      	lsls	r3, r3, #1
 8011212:	b29b      	uxth	r3, r3
 8011214:	4413      	add	r3, r2
 8011216:	b29a      	uxth	r2, r3
 8011218:	4b1f      	ldr	r3, [pc, #124]	; (8011298 <recordCheck+0xe8>)
 801121a:	7b5b      	ldrb	r3, [r3, #13]
 801121c:	b29b      	uxth	r3, r3
 801121e:	4413      	add	r3, r2
 8011220:	b29b      	uxth	r3, r3
 8011222:	3b30      	subs	r3, #48	; 0x30
 8011224:	b29a      	uxth	r2, r3
 8011226:	4b1d      	ldr	r3, [pc, #116]	; (801129c <recordCheck+0xec>)
 8011228:	801a      	strh	r2, [r3, #0]
				 break;
 801122a:	e013      	b.n	8011254 <recordCheck+0xa4>
			 }
			 if(fno.fname[0] == 0){
 801122c:	4b1a      	ldr	r3, [pc, #104]	; (8011298 <recordCheck+0xe8>)
 801122e:	7a5b      	ldrb	r3, [r3, #9]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d108      	bne.n	8011246 <recordCheck+0x96>
				 f_open(&SDFile, "P1234.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_READ|FA_OPEN_APPEND);
 8011234:	2233      	movs	r2, #51	; 0x33
 8011236:	491a      	ldr	r1, [pc, #104]	; (80112a0 <recordCheck+0xf0>)
 8011238:	481a      	ldr	r0, [pc, #104]	; (80112a4 <recordCheck+0xf4>)
 801123a:	f7f6 f9b1 	bl	80075a0 <f_open>
				 f_close(&SDFile);
 801123e:	4819      	ldr	r0, [pc, #100]	; (80112a4 <recordCheck+0xf4>)
 8011240:	f7f6 ff0e 	bl	8008060 <f_close>
				 break;
 8011244:	e006      	b.n	8011254 <recordCheck+0xa4>
		while(f_readdir(&dir, &fno) == FR_OK){
 8011246:	4914      	ldr	r1, [pc, #80]	; (8011298 <recordCheck+0xe8>)
 8011248:	4812      	ldr	r0, [pc, #72]	; (8011294 <recordCheck+0xe4>)
 801124a:	f7f7 fa2f 	bl	80086ac <f_readdir>
 801124e:	4603      	mov	r3, r0
 8011250:	2b00      	cmp	r3, #0
 8011252:	d0b7      	beq.n	80111c4 <recordCheck+0x14>
			 }
		}
	}
	f_open(&SDFile, "Opera.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_READ|FA_OPEN_APPEND);
 8011254:	2233      	movs	r2, #51	; 0x33
 8011256:	4914      	ldr	r1, [pc, #80]	; (80112a8 <recordCheck+0xf8>)
 8011258:	4812      	ldr	r0, [pc, #72]	; (80112a4 <recordCheck+0xf4>)
 801125a:	f7f6 f9a1 	bl	80075a0 <f_open>
	f_close(&SDFile);
 801125e:	4811      	ldr	r0, [pc, #68]	; (80112a4 <recordCheck+0xf4>)
 8011260:	f7f6 fefe 	bl	8008060 <f_close>
	f_open(&SDFile, "Fault.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_READ|FA_OPEN_APPEND);
 8011264:	2233      	movs	r2, #51	; 0x33
 8011266:	4911      	ldr	r1, [pc, #68]	; (80112ac <recordCheck+0xfc>)
 8011268:	480e      	ldr	r0, [pc, #56]	; (80112a4 <recordCheck+0xf4>)
 801126a:	f7f6 f999 	bl	80075a0 <f_open>
	f_close(&SDFile);
 801126e:	480d      	ldr	r0, [pc, #52]	; (80112a4 <recordCheck+0xf4>)
 8011270:	f7f6 fef6 	bl	8008060 <f_close>
	f_open(&SDFile, "Warning.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_READ|FA_OPEN_APPEND);
 8011274:	2233      	movs	r2, #51	; 0x33
 8011276:	490e      	ldr	r1, [pc, #56]	; (80112b0 <recordCheck+0x100>)
 8011278:	480a      	ldr	r0, [pc, #40]	; (80112a4 <recordCheck+0xf4>)
 801127a:	f7f6 f991 	bl	80075a0 <f_open>
	f_close(&SDFile);
 801127e:	4809      	ldr	r0, [pc, #36]	; (80112a4 <recordCheck+0xf4>)
 8011280:	f7f6 feee 	bl	8008060 <f_close>
	f_closedir(&dir);
 8011284:	4803      	ldr	r0, [pc, #12]	; (8011294 <recordCheck+0xe4>)
 8011286:	f7f7 f9e6 	bl	8008656 <f_closedir>
}
 801128a:	bf00      	nop
 801128c:	bd80      	pop	{r7, pc}
 801128e:	bf00      	nop
 8011290:	08013110 	.word	0x08013110
 8011294:	200096ec 	.word	0x200096ec
 8011298:	200095e4 	.word	0x200095e4
 801129c:	20000634 	.word	0x20000634
 80112a0:	08013114 	.word	0x08013114
 80112a4:	20009744 	.word	0x20009744
 80112a8:	08013120 	.word	0x08013120
 80112ac:	0801312c 	.word	0x0801312c
 80112b0:	08013138 	.word	0x08013138

080112b4 <operationRecord>:

#define clean(x) for(int i=0; i < sizeof(x); i++){if(x[i] == ' ') x[i] = '0' ;}
void operationRecord(int operationValue, int xx){
 80112b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80112b6:	b097      	sub	sp, #92	; 0x5c
 80112b8:	af06      	add	r7, sp, #24
 80112ba:	6078      	str	r0, [r7, #4]
 80112bc:	6039      	str	r1, [r7, #0]
	char x[50];
	if(datatime.Year == 0)
 80112be:	4b27      	ldr	r3, [pc, #156]	; (801135c <operationRecord+0xa8>)
 80112c0:	881b      	ldrh	r3, [r3, #0]
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d046      	beq.n	8011354 <operationRecord+0xa0>
		return;
	static int oRecordLine;
	oRecordLine++;
 80112c6:	4b26      	ldr	r3, [pc, #152]	; (8011360 <operationRecord+0xac>)
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	3301      	adds	r3, #1
 80112cc:	4a24      	ldr	r2, [pc, #144]	; (8011360 <operationRecord+0xac>)
 80112ce:	6013      	str	r3, [r2, #0]
	sprintf(x, "%4d%2d%2d%2d%2d-%2d-%5d\r\n", datatime.Year,datatime.Month,datatime.Day,datatime.Hour, datatime.Min,operationValue, xx);
 80112d0:	4b22      	ldr	r3, [pc, #136]	; (801135c <operationRecord+0xa8>)
 80112d2:	881b      	ldrh	r3, [r3, #0]
 80112d4:	461d      	mov	r5, r3
 80112d6:	4b21      	ldr	r3, [pc, #132]	; (801135c <operationRecord+0xa8>)
 80112d8:	789b      	ldrb	r3, [r3, #2]
 80112da:	461e      	mov	r6, r3
 80112dc:	4b1f      	ldr	r3, [pc, #124]	; (801135c <operationRecord+0xa8>)
 80112de:	78db      	ldrb	r3, [r3, #3]
 80112e0:	461a      	mov	r2, r3
 80112e2:	4b1e      	ldr	r3, [pc, #120]	; (801135c <operationRecord+0xa8>)
 80112e4:	791b      	ldrb	r3, [r3, #4]
 80112e6:	4619      	mov	r1, r3
 80112e8:	4b1c      	ldr	r3, [pc, #112]	; (801135c <operationRecord+0xa8>)
 80112ea:	795b      	ldrb	r3, [r3, #5]
 80112ec:	461c      	mov	r4, r3
 80112ee:	f107 0008 	add.w	r0, r7, #8
 80112f2:	683b      	ldr	r3, [r7, #0]
 80112f4:	9304      	str	r3, [sp, #16]
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	9303      	str	r3, [sp, #12]
 80112fa:	9402      	str	r4, [sp, #8]
 80112fc:	9101      	str	r1, [sp, #4]
 80112fe:	9200      	str	r2, [sp, #0]
 8011300:	4633      	mov	r3, r6
 8011302:	462a      	mov	r2, r5
 8011304:	4917      	ldr	r1, [pc, #92]	; (8011364 <operationRecord+0xb0>)
 8011306:	f001 f999 	bl	801263c <siprintf>
	clean(x);
 801130a:	2300      	movs	r3, #0
 801130c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801130e:	e00f      	b.n	8011330 <operationRecord+0x7c>
 8011310:	f107 0208 	add.w	r2, r7, #8
 8011314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011316:	4413      	add	r3, r2
 8011318:	781b      	ldrb	r3, [r3, #0]
 801131a:	2b20      	cmp	r3, #32
 801131c:	d105      	bne.n	801132a <operationRecord+0x76>
 801131e:	f107 0208 	add.w	r2, r7, #8
 8011322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011324:	4413      	add	r3, r2
 8011326:	2230      	movs	r2, #48	; 0x30
 8011328:	701a      	strb	r2, [r3, #0]
 801132a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801132c:	3301      	adds	r3, #1
 801132e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011332:	2b31      	cmp	r3, #49	; 0x31
 8011334:	d9ec      	bls.n	8011310 <operationRecord+0x5c>
	f_open(&SDFile, "Opera.txt",FA_OPEN_ALWAYS | FA_WRITE | FA_READ|FA_OPEN_APPEND);
 8011336:	2233      	movs	r2, #51	; 0x33
 8011338:	490b      	ldr	r1, [pc, #44]	; (8011368 <operationRecord+0xb4>)
 801133a:	480c      	ldr	r0, [pc, #48]	; (801136c <operationRecord+0xb8>)
 801133c:	f7f6 f930 	bl	80075a0 <f_open>
	f_puts(x, &SDFile);
 8011340:	f107 0308 	add.w	r3, r7, #8
 8011344:	4909      	ldr	r1, [pc, #36]	; (801136c <operationRecord+0xb8>)
 8011346:	4618      	mov	r0, r3
 8011348:	f7f7 fb5a 	bl	8008a00 <f_puts>
	f_close(&SDFile);
 801134c:	4807      	ldr	r0, [pc, #28]	; (801136c <operationRecord+0xb8>)
 801134e:	f7f6 fe87 	bl	8008060 <f_close>
 8011352:	e000      	b.n	8011356 <operationRecord+0xa2>
		return;
 8011354:	bf00      	nop
}
 8011356:	3744      	adds	r7, #68	; 0x44
 8011358:	46bd      	mov	sp, r7
 801135a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801135c:	20006bd4 	.word	0x20006bd4
 8011360:	200058b0 	.word	0x200058b0
 8011364:	08013144 	.word	0x08013144
 8011368:	08013120 	.word	0x08013120
 801136c:	20009744 	.word	0x20009744

08011370 <warnRecord>:

void warnRecord(int operationValue, int xx){
 8011370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011372:	b097      	sub	sp, #92	; 0x5c
 8011374:	af06      	add	r7, sp, #24
 8011376:	6078      	str	r0, [r7, #4]
 8011378:	6039      	str	r1, [r7, #0]
	char x[50];
	if(datatime.Year == 0)
 801137a:	4b27      	ldr	r3, [pc, #156]	; (8011418 <warnRecord+0xa8>)
 801137c:	881b      	ldrh	r3, [r3, #0]
 801137e:	2b00      	cmp	r3, #0
 8011380:	d046      	beq.n	8011410 <warnRecord+0xa0>
		return;
	static int oRecordLine;
	oRecordLine++;
 8011382:	4b26      	ldr	r3, [pc, #152]	; (801141c <warnRecord+0xac>)
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	3301      	adds	r3, #1
 8011388:	4a24      	ldr	r2, [pc, #144]	; (801141c <warnRecord+0xac>)
 801138a:	6013      	str	r3, [r2, #0]
	sprintf(x, "%4d%2d%2d%2d%2d-%2d-%5d\r\n", datatime.Year,datatime.Month,datatime.Day,datatime.Hour, datatime.Min,operationValue, xx);
 801138c:	4b22      	ldr	r3, [pc, #136]	; (8011418 <warnRecord+0xa8>)
 801138e:	881b      	ldrh	r3, [r3, #0]
 8011390:	461d      	mov	r5, r3
 8011392:	4b21      	ldr	r3, [pc, #132]	; (8011418 <warnRecord+0xa8>)
 8011394:	789b      	ldrb	r3, [r3, #2]
 8011396:	461e      	mov	r6, r3
 8011398:	4b1f      	ldr	r3, [pc, #124]	; (8011418 <warnRecord+0xa8>)
 801139a:	78db      	ldrb	r3, [r3, #3]
 801139c:	461a      	mov	r2, r3
 801139e:	4b1e      	ldr	r3, [pc, #120]	; (8011418 <warnRecord+0xa8>)
 80113a0:	791b      	ldrb	r3, [r3, #4]
 80113a2:	4619      	mov	r1, r3
 80113a4:	4b1c      	ldr	r3, [pc, #112]	; (8011418 <warnRecord+0xa8>)
 80113a6:	795b      	ldrb	r3, [r3, #5]
 80113a8:	461c      	mov	r4, r3
 80113aa:	f107 0008 	add.w	r0, r7, #8
 80113ae:	683b      	ldr	r3, [r7, #0]
 80113b0:	9304      	str	r3, [sp, #16]
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	9303      	str	r3, [sp, #12]
 80113b6:	9402      	str	r4, [sp, #8]
 80113b8:	9101      	str	r1, [sp, #4]
 80113ba:	9200      	str	r2, [sp, #0]
 80113bc:	4633      	mov	r3, r6
 80113be:	462a      	mov	r2, r5
 80113c0:	4917      	ldr	r1, [pc, #92]	; (8011420 <warnRecord+0xb0>)
 80113c2:	f001 f93b 	bl	801263c <siprintf>
	clean(x);
 80113c6:	2300      	movs	r3, #0
 80113c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80113ca:	e00f      	b.n	80113ec <warnRecord+0x7c>
 80113cc:	f107 0208 	add.w	r2, r7, #8
 80113d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113d2:	4413      	add	r3, r2
 80113d4:	781b      	ldrb	r3, [r3, #0]
 80113d6:	2b20      	cmp	r3, #32
 80113d8:	d105      	bne.n	80113e6 <warnRecord+0x76>
 80113da:	f107 0208 	add.w	r2, r7, #8
 80113de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113e0:	4413      	add	r3, r2
 80113e2:	2230      	movs	r2, #48	; 0x30
 80113e4:	701a      	strb	r2, [r3, #0]
 80113e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113e8:	3301      	adds	r3, #1
 80113ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80113ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113ee:	2b31      	cmp	r3, #49	; 0x31
 80113f0:	d9ec      	bls.n	80113cc <warnRecord+0x5c>
	f_open(&SDFile, "Warning.txt",FA_OPEN_ALWAYS | FA_WRITE | FA_READ|FA_OPEN_APPEND);
 80113f2:	2233      	movs	r2, #51	; 0x33
 80113f4:	490b      	ldr	r1, [pc, #44]	; (8011424 <warnRecord+0xb4>)
 80113f6:	480c      	ldr	r0, [pc, #48]	; (8011428 <warnRecord+0xb8>)
 80113f8:	f7f6 f8d2 	bl	80075a0 <f_open>
	f_puts(x, &SDFile);
 80113fc:	f107 0308 	add.w	r3, r7, #8
 8011400:	4909      	ldr	r1, [pc, #36]	; (8011428 <warnRecord+0xb8>)
 8011402:	4618      	mov	r0, r3
 8011404:	f7f7 fafc 	bl	8008a00 <f_puts>
	f_close(&SDFile);
 8011408:	4807      	ldr	r0, [pc, #28]	; (8011428 <warnRecord+0xb8>)
 801140a:	f7f6 fe29 	bl	8008060 <f_close>
 801140e:	e000      	b.n	8011412 <warnRecord+0xa2>
		return;
 8011410:	bf00      	nop
}
 8011412:	3744      	adds	r7, #68	; 0x44
 8011414:	46bd      	mov	sp, r7
 8011416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011418:	20006bd4 	.word	0x20006bd4
 801141c:	200058b4 	.word	0x200058b4
 8011420:	08013144 	.word	0x08013144
 8011424:	08013138 	.word	0x08013138
 8011428:	20009744 	.word	0x20009744

0801142c <faultRecord>:


void faultRecord(int operationValue, int xx){
 801142c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801142e:	b097      	sub	sp, #92	; 0x5c
 8011430:	af06      	add	r7, sp, #24
 8011432:	6078      	str	r0, [r7, #4]
 8011434:	6039      	str	r1, [r7, #0]
	char x[50];
	if(datatime.Year == 0)
 8011436:	4b27      	ldr	r3, [pc, #156]	; (80114d4 <faultRecord+0xa8>)
 8011438:	881b      	ldrh	r3, [r3, #0]
 801143a:	2b00      	cmp	r3, #0
 801143c:	d046      	beq.n	80114cc <faultRecord+0xa0>
		return;
	static int oRecordLine;
	oRecordLine++;
 801143e:	4b26      	ldr	r3, [pc, #152]	; (80114d8 <faultRecord+0xac>)
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	3301      	adds	r3, #1
 8011444:	4a24      	ldr	r2, [pc, #144]	; (80114d8 <faultRecord+0xac>)
 8011446:	6013      	str	r3, [r2, #0]
	sprintf(x, "%4d%2d%2d%2d%2d-%2d-%5d\r\n", datatime.Year,datatime.Month,datatime.Day,datatime.Hour, datatime.Min,operationValue, xx);
 8011448:	4b22      	ldr	r3, [pc, #136]	; (80114d4 <faultRecord+0xa8>)
 801144a:	881b      	ldrh	r3, [r3, #0]
 801144c:	461d      	mov	r5, r3
 801144e:	4b21      	ldr	r3, [pc, #132]	; (80114d4 <faultRecord+0xa8>)
 8011450:	789b      	ldrb	r3, [r3, #2]
 8011452:	461e      	mov	r6, r3
 8011454:	4b1f      	ldr	r3, [pc, #124]	; (80114d4 <faultRecord+0xa8>)
 8011456:	78db      	ldrb	r3, [r3, #3]
 8011458:	461a      	mov	r2, r3
 801145a:	4b1e      	ldr	r3, [pc, #120]	; (80114d4 <faultRecord+0xa8>)
 801145c:	791b      	ldrb	r3, [r3, #4]
 801145e:	4619      	mov	r1, r3
 8011460:	4b1c      	ldr	r3, [pc, #112]	; (80114d4 <faultRecord+0xa8>)
 8011462:	795b      	ldrb	r3, [r3, #5]
 8011464:	461c      	mov	r4, r3
 8011466:	f107 0008 	add.w	r0, r7, #8
 801146a:	683b      	ldr	r3, [r7, #0]
 801146c:	9304      	str	r3, [sp, #16]
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	9303      	str	r3, [sp, #12]
 8011472:	9402      	str	r4, [sp, #8]
 8011474:	9101      	str	r1, [sp, #4]
 8011476:	9200      	str	r2, [sp, #0]
 8011478:	4633      	mov	r3, r6
 801147a:	462a      	mov	r2, r5
 801147c:	4917      	ldr	r1, [pc, #92]	; (80114dc <faultRecord+0xb0>)
 801147e:	f001 f8dd 	bl	801263c <siprintf>
	clean(x);
 8011482:	2300      	movs	r3, #0
 8011484:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011486:	e00f      	b.n	80114a8 <faultRecord+0x7c>
 8011488:	f107 0208 	add.w	r2, r7, #8
 801148c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801148e:	4413      	add	r3, r2
 8011490:	781b      	ldrb	r3, [r3, #0]
 8011492:	2b20      	cmp	r3, #32
 8011494:	d105      	bne.n	80114a2 <faultRecord+0x76>
 8011496:	f107 0208 	add.w	r2, r7, #8
 801149a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801149c:	4413      	add	r3, r2
 801149e:	2230      	movs	r2, #48	; 0x30
 80114a0:	701a      	strb	r2, [r3, #0]
 80114a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114a4:	3301      	adds	r3, #1
 80114a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80114a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114aa:	2b31      	cmp	r3, #49	; 0x31
 80114ac:	d9ec      	bls.n	8011488 <faultRecord+0x5c>
	f_open(&SDFile, "Fault.txt",FA_OPEN_ALWAYS | FA_WRITE | FA_READ|FA_OPEN_APPEND);
 80114ae:	2233      	movs	r2, #51	; 0x33
 80114b0:	490b      	ldr	r1, [pc, #44]	; (80114e0 <faultRecord+0xb4>)
 80114b2:	480c      	ldr	r0, [pc, #48]	; (80114e4 <faultRecord+0xb8>)
 80114b4:	f7f6 f874 	bl	80075a0 <f_open>
	f_puts(x, &SDFile);
 80114b8:	f107 0308 	add.w	r3, r7, #8
 80114bc:	4909      	ldr	r1, [pc, #36]	; (80114e4 <faultRecord+0xb8>)
 80114be:	4618      	mov	r0, r3
 80114c0:	f7f7 fa9e 	bl	8008a00 <f_puts>
	f_close(&SDFile);
 80114c4:	4807      	ldr	r0, [pc, #28]	; (80114e4 <faultRecord+0xb8>)
 80114c6:	f7f6 fdcb 	bl	8008060 <f_close>
 80114ca:	e000      	b.n	80114ce <faultRecord+0xa2>
		return;
 80114cc:	bf00      	nop
}
 80114ce:	3744      	adds	r7, #68	; 0x44
 80114d0:	46bd      	mov	sp, r7
 80114d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80114d4:	20006bd4 	.word	0x20006bd4
 80114d8:	200058b8 	.word	0x200058b8
 80114dc:	08013144 	.word	0x08013144
 80114e0:	0801312c 	.word	0x0801312c
 80114e4:	20009744 	.word	0x20009744

080114e8 <fileGetLine>:

FIL bak;
char xxxx[200];
int fileGetLine(char * fileName, int i, struct recordInfo * p){
 80114e8:	b580      	push	{r7, lr}
 80114ea:	b086      	sub	sp, #24
 80114ec:	af00      	add	r7, sp, #0
 80114ee:	60f8      	str	r0, [r7, #12]
 80114f0:	60b9      	str	r1, [r7, #8]
 80114f2:	607a      	str	r2, [r7, #4]
	p->operationValue = 0;
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	2200      	movs	r2, #0
 80114f8:	611a      	str	r2, [r3, #16]
	memset(xxxx, 0, 200);
 80114fa:	22c8      	movs	r2, #200	; 0xc8
 80114fc:	2100      	movs	r1, #0
 80114fe:	4832      	ldr	r0, [pc, #200]	; (80115c8 <fileGetLine+0xe0>)
 8011500:	f001 f894 	bl	801262c <memset>
	f_open(&bak, fileName, FA_OPEN_ALWAYS | FA_WRITE | FA_READ | FA_OPEN_APPEND);
 8011504:	2233      	movs	r2, #51	; 0x33
 8011506:	68f9      	ldr	r1, [r7, #12]
 8011508:	4830      	ldr	r0, [pc, #192]	; (80115cc <fileGetLine+0xe4>)
 801150a:	f7f6 f849 	bl	80075a0 <f_open>

	if(bak.fptr > 24*i-1)
 801150e:	4b2f      	ldr	r3, [pc, #188]	; (80115cc <fileGetLine+0xe4>)
 8011510:	6999      	ldr	r1, [r3, #24]
 8011512:	68ba      	ldr	r2, [r7, #8]
 8011514:	4613      	mov	r3, r2
 8011516:	005b      	lsls	r3, r3, #1
 8011518:	4413      	add	r3, r2
 801151a:	00db      	lsls	r3, r3, #3
 801151c:	3b01      	subs	r3, #1
 801151e:	4299      	cmp	r1, r3
 8011520:	d90b      	bls.n	801153a <fileGetLine+0x52>
		f_lseek(&bak, bak.fptr - 24*i);
 8011522:	4b2a      	ldr	r3, [pc, #168]	; (80115cc <fileGetLine+0xe4>)
 8011524:	6999      	ldr	r1, [r3, #24]
 8011526:	68ba      	ldr	r2, [r7, #8]
 8011528:	4613      	mov	r3, r2
 801152a:	005b      	lsls	r3, r3, #1
 801152c:	4413      	add	r3, r2
 801152e:	00db      	lsls	r3, r3, #3
 8011530:	1acb      	subs	r3, r1, r3
 8011532:	4619      	mov	r1, r3
 8011534:	4825      	ldr	r0, [pc, #148]	; (80115cc <fileGetLine+0xe4>)
 8011536:	f7f6 fdc2 	bl	80080be <f_lseek>
	f_gets(xxxx, 200, &bak);
 801153a:	4a24      	ldr	r2, [pc, #144]	; (80115cc <fileGetLine+0xe4>)
 801153c:	21c8      	movs	r1, #200	; 0xc8
 801153e:	4822      	ldr	r0, [pc, #136]	; (80115c8 <fileGetLine+0xe0>)
 8011540:	f7f7 f9a9 	bl	8008896 <f_gets>
	f_close(&bak);
 8011544:	4821      	ldr	r0, [pc, #132]	; (80115cc <fileGetLine+0xe4>)
 8011546:	f7f6 fd8b 	bl	8008060 <f_close>
	p->operationFunc = (xxxx[13]-0x30)*10+xxxx[14]-0x30;
 801154a:	4b1f      	ldr	r3, [pc, #124]	; (80115c8 <fileGetLine+0xe0>)
 801154c:	7b5b      	ldrb	r3, [r3, #13]
 801154e:	3b30      	subs	r3, #48	; 0x30
 8011550:	b2db      	uxtb	r3, r3
 8011552:	461a      	mov	r2, r3
 8011554:	0092      	lsls	r2, r2, #2
 8011556:	4413      	add	r3, r2
 8011558:	005b      	lsls	r3, r3, #1
 801155a:	b2da      	uxtb	r2, r3
 801155c:	4b1a      	ldr	r3, [pc, #104]	; (80115c8 <fileGetLine+0xe0>)
 801155e:	7b9b      	ldrb	r3, [r3, #14]
 8011560:	4413      	add	r3, r2
 8011562:	b2db      	uxtb	r3, r3
 8011564:	3b30      	subs	r3, #48	; 0x30
 8011566:	b2da      	uxtb	r2, r3
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	731a      	strb	r2, [r3, #12]
	if(xxxx[0] == 0)
 801156c:	4b16      	ldr	r3, [pc, #88]	; (80115c8 <fileGetLine+0xe0>)
 801156e:	781b      	ldrb	r3, [r3, #0]
 8011570:	2b00      	cmp	r3, #0
 8011572:	d102      	bne.n	801157a <fileGetLine+0x92>
		return -1;
 8011574:	f04f 33ff 	mov.w	r3, #4294967295
 8011578:	e022      	b.n	80115c0 <fileGetLine+0xd8>
	for(int i = 16; xxxx[i] != '\n'; i++){
 801157a:	2310      	movs	r3, #16
 801157c:	617b      	str	r3, [r7, #20]
 801157e:	e012      	b.n	80115a6 <fileGetLine+0xbe>
		p->operationValue = xxxx[i]-0x30 + (p->operationValue*10);
 8011580:	4a11      	ldr	r2, [pc, #68]	; (80115c8 <fileGetLine+0xe0>)
 8011582:	697b      	ldr	r3, [r7, #20]
 8011584:	4413      	add	r3, r2
 8011586:	781b      	ldrb	r3, [r3, #0]
 8011588:	4619      	mov	r1, r3
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	691a      	ldr	r2, [r3, #16]
 801158e:	4613      	mov	r3, r2
 8011590:	009b      	lsls	r3, r3, #2
 8011592:	4413      	add	r3, r2
 8011594:	005b      	lsls	r3, r3, #1
 8011596:	440b      	add	r3, r1
 8011598:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	611a      	str	r2, [r3, #16]
	for(int i = 16; xxxx[i] != '\n'; i++){
 80115a0:	697b      	ldr	r3, [r7, #20]
 80115a2:	3301      	adds	r3, #1
 80115a4:	617b      	str	r3, [r7, #20]
 80115a6:	4a08      	ldr	r2, [pc, #32]	; (80115c8 <fileGetLine+0xe0>)
 80115a8:	697b      	ldr	r3, [r7, #20]
 80115aa:	4413      	add	r3, r2
 80115ac:	781b      	ldrb	r3, [r3, #0]
 80115ae:	2b0a      	cmp	r3, #10
 80115b0:	d1e6      	bne.n	8011580 <fileGetLine+0x98>
	}
	memcpy(p->time, xxxx, 12);
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	220c      	movs	r2, #12
 80115b6:	4904      	ldr	r1, [pc, #16]	; (80115c8 <fileGetLine+0xe0>)
 80115b8:	4618      	mov	r0, r3
 80115ba:	f001 f82c 	bl	8012616 <memcpy>
	return 0;
 80115be:	2300      	movs	r3, #0
}
 80115c0:	4618      	mov	r0, r3
 80115c2:	3718      	adds	r7, #24
 80115c4:	46bd      	mov	sp, r7
 80115c6:	bd80      	pop	{r7, pc}
 80115c8:	200095fc 	.word	0x200095fc
 80115cc:	200093b4 	.word	0x200093b4

080115d0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80115d0:	b580      	push	{r7, lr}
 80115d2:	b084      	sub	sp, #16
 80115d4:	af00      	add	r7, sp, #0
 80115d6:	6078      	str	r0, [r7, #4]
  uint32_t timer = osKernelSysTick();
 80115d8:	f7f7 fb1a 	bl	8008c10 <osKernelSysTick>
 80115dc:	60f8      	str	r0, [r7, #12]
  /* block until SDIO peripherial is ready again or a timeout occur */
  while( osKernelSysTick() - timer < timeout)
 80115de:	e006      	b.n	80115ee <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80115e0:	f7fa fffc 	bl	800c5dc <BSP_SD_GetCardState>
 80115e4:	4603      	mov	r3, r0
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d101      	bne.n	80115ee <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80115ea:	2300      	movs	r3, #0
 80115ec:	e009      	b.n	8011602 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 80115ee:	f7f7 fb0f 	bl	8008c10 <osKernelSysTick>
 80115f2:	4602      	mov	r2, r0
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	1ad3      	subs	r3, r2, r3
 80115f8:	687a      	ldr	r2, [r7, #4]
 80115fa:	429a      	cmp	r2, r3
 80115fc:	d8f0      	bhi.n	80115e0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80115fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011602:	4618      	mov	r0, r3
 8011604:	3710      	adds	r7, #16
 8011606:	46bd      	mov	sp, r7
 8011608:	bd80      	pop	{r7, pc}
	...

0801160c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 801160c:	b580      	push	{r7, lr}
 801160e:	b082      	sub	sp, #8
 8011610:	af00      	add	r7, sp, #0
 8011612:	4603      	mov	r3, r0
 8011614:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8011616:	4b0b      	ldr	r3, [pc, #44]	; (8011644 <SD_CheckStatus+0x38>)
 8011618:	2201      	movs	r2, #1
 801161a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801161c:	f7fa ffde 	bl	800c5dc <BSP_SD_GetCardState>
 8011620:	4603      	mov	r3, r0
 8011622:	2b00      	cmp	r3, #0
 8011624:	d107      	bne.n	8011636 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8011626:	4b07      	ldr	r3, [pc, #28]	; (8011644 <SD_CheckStatus+0x38>)
 8011628:	781b      	ldrb	r3, [r3, #0]
 801162a:	b2db      	uxtb	r3, r3
 801162c:	f023 0301 	bic.w	r3, r3, #1
 8011630:	b2da      	uxtb	r2, r3
 8011632:	4b04      	ldr	r3, [pc, #16]	; (8011644 <SD_CheckStatus+0x38>)
 8011634:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8011636:	4b03      	ldr	r3, [pc, #12]	; (8011644 <SD_CheckStatus+0x38>)
 8011638:	781b      	ldrb	r3, [r3, #0]
 801163a:	b2db      	uxtb	r3, r3
}
 801163c:	4618      	mov	r0, r3
 801163e:	3708      	adds	r7, #8
 8011640:	46bd      	mov	sp, r7
 8011642:	bd80      	pop	{r7, pc}
 8011644:	20000636 	.word	0x20000636

08011648 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8011648:	b590      	push	{r4, r7, lr}
 801164a:	b087      	sub	sp, #28
 801164c:	af00      	add	r7, sp, #0
 801164e:	4603      	mov	r3, r0
 8011650:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 8011652:	4b1a      	ldr	r3, [pc, #104]	; (80116bc <SD_initialize+0x74>)
 8011654:	2201      	movs	r2, #1
 8011656:	701a      	strb	r2, [r3, #0]

  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
  if(osKernelRunning())
 8011658:	f7f7 face 	bl	8008bf8 <osKernelRunning>
 801165c:	4603      	mov	r3, r0
 801165e:	2b00      	cmp	r3, #0
 8011660:	d024      	beq.n	80116ac <SD_initialize+0x64>
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8011662:	f7fa ff61 	bl	800c528 <BSP_SD_Init>
 8011666:	4603      	mov	r3, r0
 8011668:	2b00      	cmp	r3, #0
 801166a:	d107      	bne.n	801167c <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 801166c:	79fb      	ldrb	r3, [r7, #7]
 801166e:	4618      	mov	r0, r3
 8011670:	f7ff ffcc 	bl	801160c <SD_CheckStatus>
 8011674:	4603      	mov	r3, r0
 8011676:	461a      	mov	r2, r3
 8011678:	4b10      	ldr	r3, [pc, #64]	; (80116bc <SD_initialize+0x74>)
 801167a:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if ((Stat != STA_NOINIT) && (SDQueueID == NULL))
 801167c:	4b0f      	ldr	r3, [pc, #60]	; (80116bc <SD_initialize+0x74>)
 801167e:	781b      	ldrb	r3, [r3, #0]
 8011680:	b2db      	uxtb	r3, r3
 8011682:	2b01      	cmp	r3, #1
 8011684:	d012      	beq.n	80116ac <SD_initialize+0x64>
 8011686:	4b0e      	ldr	r3, [pc, #56]	; (80116c0 <SD_initialize+0x78>)
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	2b00      	cmp	r3, #0
 801168c:	d10e      	bne.n	80116ac <SD_initialize+0x64>
    {
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 801168e:	4b0d      	ldr	r3, [pc, #52]	; (80116c4 <SD_initialize+0x7c>)
 8011690:	f107 0408 	add.w	r4, r7, #8
 8011694:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011696:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 801169a:	f107 0308 	add.w	r3, r7, #8
 801169e:	2100      	movs	r1, #0
 80116a0:	4618      	mov	r0, r3
 80116a2:	f7f7 fbf0 	bl	8008e86 <osMessageCreate>
 80116a6:	4602      	mov	r2, r0
 80116a8:	4b05      	ldr	r3, [pc, #20]	; (80116c0 <SD_initialize+0x78>)
 80116aa:	601a      	str	r2, [r3, #0]
    }
  }
  return Stat;
 80116ac:	4b03      	ldr	r3, [pc, #12]	; (80116bc <SD_initialize+0x74>)
 80116ae:	781b      	ldrb	r3, [r3, #0]
 80116b0:	b2db      	uxtb	r3, r3
}
 80116b2:	4618      	mov	r0, r3
 80116b4:	371c      	adds	r7, #28
 80116b6:	46bd      	mov	sp, r7
 80116b8:	bd90      	pop	{r4, r7, pc}
 80116ba:	bf00      	nop
 80116bc:	20000636 	.word	0x20000636
 80116c0:	20005abc 	.word	0x20005abc
 80116c4:	08013160 	.word	0x08013160

080116c8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80116c8:	b580      	push	{r7, lr}
 80116ca:	b082      	sub	sp, #8
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	4603      	mov	r3, r0
 80116d0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80116d2:	79fb      	ldrb	r3, [r7, #7]
 80116d4:	4618      	mov	r0, r3
 80116d6:	f7ff ff99 	bl	801160c <SD_CheckStatus>
 80116da:	4603      	mov	r3, r0
}
 80116dc:	4618      	mov	r0, r3
 80116de:	3708      	adds	r7, #8
 80116e0:	46bd      	mov	sp, r7
 80116e2:	bd80      	pop	{r7, pc}

080116e4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80116e4:	b580      	push	{r7, lr}
 80116e6:	b08e      	sub	sp, #56	; 0x38
 80116e8:	af00      	add	r7, sp, #0
 80116ea:	61b9      	str	r1, [r7, #24]
 80116ec:	617a      	str	r2, [r7, #20]
 80116ee:	613b      	str	r3, [r7, #16]
 80116f0:	4603      	mov	r3, r0
 80116f2:	77fb      	strb	r3, [r7, #31]
  DRESULT res = RES_ERROR;
 80116f4:	2301      	movs	r3, #1
 80116f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80116fa:	f247 5030 	movw	r0, #30000	; 0x7530
 80116fe:	f7ff ff67 	bl	80115d0 <SD_CheckStatusWithTimeout>
 8011702:	4603      	mov	r3, r0
 8011704:	2b00      	cmp	r3, #0
 8011706:	da02      	bge.n	801170e <SD_read+0x2a>
  {
    return res;
 8011708:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801170c:	e06c      	b.n	80117e8 <SD_read+0x104>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 801170e:	69bb      	ldr	r3, [r7, #24]
 8011710:	f003 0303 	and.w	r3, r3, #3
 8011714:	2b00      	cmp	r3, #0
 8011716:	d11e      	bne.n	8011756 <SD_read+0x72>
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8011718:	693a      	ldr	r2, [r7, #16]
 801171a:	6979      	ldr	r1, [r7, #20]
 801171c:	69b8      	ldr	r0, [r7, #24]
 801171e:	f7fa ff29 	bl	800c574 <BSP_SD_ReadBlocks_DMA>
 8011722:	4603      	mov	r3, r0
 8011724:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    if (ret == MSD_OK) {
 8011728:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801172c:	2b00      	cmp	r3, #0
 801172e:	d159      	bne.n	80117e4 <SD_read+0x100>
      /* wait for a message from the queue or a timeout */
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8011730:	4b2f      	ldr	r3, [pc, #188]	; (80117f0 <SD_read+0x10c>)
 8011732:	6819      	ldr	r1, [r3, #0]
 8011734:	f107 0320 	add.w	r3, r7, #32
 8011738:	f247 5230 	movw	r2, #30000	; 0x7530
 801173c:	4618      	mov	r0, r3
 801173e:	f7f7 fc0b 	bl	8008f58 <osMessageGet>
      if (event.status == osEventMessage) {
 8011742:	6a3b      	ldr	r3, [r7, #32]
 8011744:	2b10      	cmp	r3, #16
 8011746:	d14d      	bne.n	80117e4 <SD_read+0x100>
        if (event.value.v == READ_CPLT_MSG) {
 8011748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801174a:	2b01      	cmp	r3, #1
 801174c:	d14a      	bne.n	80117e4 <SD_read+0x100>
          res = RES_OK;
 801174e:	2300      	movs	r3, #0
 8011750:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011754:	e046      	b.n	80117e4 <SD_read+0x100>
#if defined(ENABLE_SCRATCH_BUFFER)
  } else {
    /* Slow path, fetch each sector a part and memcpy to destination buffer */
    int i;
    uint8_t ret;
    for (i = 0; i < count; i++) {
 8011756:	2300      	movs	r3, #0
 8011758:	633b      	str	r3, [r7, #48]	; 0x30
 801175a:	e032      	b.n	80117c2 <SD_read+0xde>
      ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 801175c:	697b      	ldr	r3, [r7, #20]
 801175e:	1c5a      	adds	r2, r3, #1
 8011760:	617a      	str	r2, [r7, #20]
 8011762:	2201      	movs	r2, #1
 8011764:	4619      	mov	r1, r3
 8011766:	4823      	ldr	r0, [pc, #140]	; (80117f4 <SD_read+0x110>)
 8011768:	f7fa ff04 	bl	800c574 <BSP_SD_ReadBlocks_DMA>
 801176c:	4603      	mov	r3, r0
 801176e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      if (ret == MSD_OK) {
 8011772:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011776:	2b00      	cmp	r3, #0
 8011778:	d128      	bne.n	80117cc <SD_read+0xe8>
        /* wait for a message from the queue or a timeout */
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 801177a:	4b1d      	ldr	r3, [pc, #116]	; (80117f0 <SD_read+0x10c>)
 801177c:	6819      	ldr	r1, [r3, #0]
 801177e:	463b      	mov	r3, r7
 8011780:	f247 5230 	movw	r2, #30000	; 0x7530
 8011784:	4618      	mov	r0, r3
 8011786:	f7f7 fbe7 	bl	8008f58 <osMessageGet>
 801178a:	f107 0320 	add.w	r3, r7, #32
 801178e:	463a      	mov	r2, r7
 8011790:	ca07      	ldmia	r2, {r0, r1, r2}
 8011792:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        if (event.status == osEventMessage) {
 8011796:	6a3b      	ldr	r3, [r7, #32]
 8011798:	2b10      	cmp	r3, #16
 801179a:	d10f      	bne.n	80117bc <SD_read+0xd8>
          if (event.value.v == READ_CPLT_MSG) {
 801179c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801179e:	2b01      	cmp	r3, #1
 80117a0:	d10c      	bne.n	80117bc <SD_read+0xd8>
            *
            * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
            */
            SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
            memcpy(buff, scratch, BLOCKSIZE);
 80117a2:	69bb      	ldr	r3, [r7, #24]
 80117a4:	4a13      	ldr	r2, [pc, #76]	; (80117f4 <SD_read+0x110>)
 80117a6:	4618      	mov	r0, r3
 80117a8:	4611      	mov	r1, r2
 80117aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80117ae:	461a      	mov	r2, r3
 80117b0:	f000 ff31 	bl	8012616 <memcpy>
            buff += BLOCKSIZE;
 80117b4:	69bb      	ldr	r3, [r7, #24]
 80117b6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80117ba:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < count; i++) {
 80117bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117be:	3301      	adds	r3, #1
 80117c0:	633b      	str	r3, [r7, #48]	; 0x30
 80117c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117c4:	693a      	ldr	r2, [r7, #16]
 80117c6:	429a      	cmp	r2, r3
 80117c8:	d8c8      	bhi.n	801175c <SD_read+0x78>
 80117ca:	e000      	b.n	80117ce <SD_read+0xea>
          }
        }
      }
      else
      {
        break;
 80117cc:	bf00      	nop
      }
    }

    if ((i == count) && (ret == MSD_OK))
 80117ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117d0:	693a      	ldr	r2, [r7, #16]
 80117d2:	429a      	cmp	r2, r3
 80117d4:	d106      	bne.n	80117e4 <SD_read+0x100>
 80117d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d102      	bne.n	80117e4 <SD_read+0x100>
      res = RES_OK;
 80117de:	2300      	movs	r3, #0
 80117e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

#endif

  return res;
 80117e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
} 
 80117e8:	4618      	mov	r0, r3
 80117ea:	3738      	adds	r7, #56	; 0x38
 80117ec:	46bd      	mov	sp, r7
 80117ee:	bd80      	pop	{r7, pc}
 80117f0:	20005abc 	.word	0x20005abc
 80117f4:	200058bc 	.word	0x200058bc

080117f8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80117f8:	b580      	push	{r7, lr}
 80117fa:	b090      	sub	sp, #64	; 0x40
 80117fc:	af00      	add	r7, sp, #0
 80117fe:	61b9      	str	r1, [r7, #24]
 8011800:	617a      	str	r2, [r7, #20]
 8011802:	613b      	str	r3, [r7, #16]
 8011804:	4603      	mov	r3, r0
 8011806:	77fb      	strb	r3, [r7, #31]
  osEvent event;
  DRESULT res = RES_ERROR;
 8011808:	2301      	movs	r3, #1
 801180a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801180e:	f247 5030 	movw	r0, #30000	; 0x7530
 8011812:	f7ff fedd 	bl	80115d0 <SD_CheckStatusWithTimeout>
 8011816:	4603      	mov	r3, r0
 8011818:	2b00      	cmp	r3, #0
 801181a:	da02      	bge.n	8011822 <SD_write+0x2a>
  {
    return res;
 801181c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011820:	e07c      	b.n	801191c <SD_write+0x124>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8011822:	69bb      	ldr	r3, [r7, #24]
 8011824:	f003 0303 	and.w	r3, r3, #3
 8011828:	2b00      	cmp	r3, #0
 801182a:	d12e      	bne.n	801188a <SD_write+0x92>
    * This is not needed if the memory region is configured as W/T.
    */
    alignedAddr = (uint32_t)buff & ~0x1F;
    SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 801182c:	693a      	ldr	r2, [r7, #16]
 801182e:	6979      	ldr	r1, [r7, #20]
 8011830:	69b8      	ldr	r0, [r7, #24]
 8011832:	f7fa feb9 	bl	800c5a8 <BSP_SD_WriteBlocks_DMA>
 8011836:	4603      	mov	r3, r0
 8011838:	2b00      	cmp	r3, #0
 801183a:	d16d      	bne.n	8011918 <SD_write+0x120>
                              (uint32_t) (sector),
                              count) == MSD_OK)
    {
      /* Get the message from the queue */
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 801183c:	4b39      	ldr	r3, [pc, #228]	; (8011924 <SD_write+0x12c>)
 801183e:	6819      	ldr	r1, [r3, #0]
 8011840:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011844:	f247 5230 	movw	r2, #30000	; 0x7530
 8011848:	4618      	mov	r0, r3
 801184a:	f7f7 fb85 	bl	8008f58 <osMessageGet>

      if (event.status == osEventMessage)
 801184e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011850:	2b10      	cmp	r3, #16
 8011852:	d161      	bne.n	8011918 <SD_write+0x120>
      {
        if (event.value.v == WRITE_CPLT_MSG)
 8011854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011856:	2b02      	cmp	r3, #2
 8011858:	d15e      	bne.n	8011918 <SD_write+0x120>
        {
          timer = osKernelSysTick() + SD_TIMEOUT;
 801185a:	f7f7 f9d9 	bl	8008c10 <osKernelSysTick>
 801185e:	4603      	mov	r3, r0
 8011860:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 8011864:	3330      	adds	r3, #48	; 0x30
 8011866:	633b      	str	r3, [r7, #48]	; 0x30
          /* block until SDIO IP is ready or a timeout occur */
          while(timer > osKernelSysTick())
 8011868:	e008      	b.n	801187c <SD_write+0x84>
          {
            if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801186a:	f7fa feb7 	bl	800c5dc <BSP_SD_GetCardState>
 801186e:	4603      	mov	r3, r0
 8011870:	2b00      	cmp	r3, #0
 8011872:	d103      	bne.n	801187c <SD_write+0x84>
            {
              res = RES_OK;
 8011874:	2300      	movs	r3, #0
 8011876:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              break;
 801187a:	e04d      	b.n	8011918 <SD_write+0x120>
          while(timer > osKernelSysTick())
 801187c:	f7f7 f9c8 	bl	8008c10 <osKernelSysTick>
 8011880:	4602      	mov	r2, r0
 8011882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011884:	4293      	cmp	r3, r2
 8011886:	d8f0      	bhi.n	801186a <SD_write+0x72>
 8011888:	e046      	b.n	8011918 <SD_write+0x120>
    * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
    */
    SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

    for (i = 0; i < count; i++) {
 801188a:	2300      	movs	r3, #0
 801188c:	63bb      	str	r3, [r7, #56]	; 0x38
 801188e:	e032      	b.n	80118f6 <SD_write+0xfe>
      ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8011890:	697b      	ldr	r3, [r7, #20]
 8011892:	1c5a      	adds	r2, r3, #1
 8011894:	617a      	str	r2, [r7, #20]
 8011896:	2201      	movs	r2, #1
 8011898:	4619      	mov	r1, r3
 801189a:	4823      	ldr	r0, [pc, #140]	; (8011928 <SD_write+0x130>)
 801189c:	f7fa fe84 	bl	800c5a8 <BSP_SD_WriteBlocks_DMA>
 80118a0:	4603      	mov	r3, r0
 80118a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (ret == MSD_OK) {
 80118a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d128      	bne.n	8011900 <SD_write+0x108>
        /* wait for a message from the queue or a timeout */
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80118ae:	4b1d      	ldr	r3, [pc, #116]	; (8011924 <SD_write+0x12c>)
 80118b0:	6819      	ldr	r1, [r3, #0]
 80118b2:	463b      	mov	r3, r7
 80118b4:	f247 5230 	movw	r2, #30000	; 0x7530
 80118b8:	4618      	mov	r0, r3
 80118ba:	f7f7 fb4d 	bl	8008f58 <osMessageGet>
 80118be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80118c2:	463a      	mov	r2, r7
 80118c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80118c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        if (event.status == osEventMessage) {
 80118ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118cc:	2b10      	cmp	r3, #16
 80118ce:	d10f      	bne.n	80118f0 <SD_write+0xf8>
          if (event.value.v == WRITE_CPLT_MSG) {
 80118d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118d2:	2b02      	cmp	r3, #2
 80118d4:	d10c      	bne.n	80118f0 <SD_write+0xf8>
            memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 80118d6:	69bb      	ldr	r3, [r7, #24]
 80118d8:	4a13      	ldr	r2, [pc, #76]	; (8011928 <SD_write+0x130>)
 80118da:	4618      	mov	r0, r3
 80118dc:	4611      	mov	r1, r2
 80118de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80118e2:	461a      	mov	r2, r3
 80118e4:	f000 fe97 	bl	8012616 <memcpy>
            buff += BLOCKSIZE;
 80118e8:	69bb      	ldr	r3, [r7, #24]
 80118ea:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80118ee:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < count; i++) {
 80118f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118f2:	3301      	adds	r3, #1
 80118f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80118f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118f8:	693a      	ldr	r2, [r7, #16]
 80118fa:	429a      	cmp	r2, r3
 80118fc:	d8c8      	bhi.n	8011890 <SD_write+0x98>
 80118fe:	e000      	b.n	8011902 <SD_write+0x10a>
          }
        }
      }
      else
      {
        break;
 8011900:	bf00      	nop
      }
    }

    if ((i == count) && (ret == MSD_OK))
 8011902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011904:	693a      	ldr	r2, [r7, #16]
 8011906:	429a      	cmp	r2, r3
 8011908:	d106      	bne.n	8011918 <SD_write+0x120>
 801190a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801190e:	2b00      	cmp	r3, #0
 8011910:	d102      	bne.n	8011918 <SD_write+0x120>
      res = RES_OK;
 8011912:	2300      	movs	r3, #0
 8011914:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }
#endif
  return res;
 8011918:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
} 
 801191c:	4618      	mov	r0, r3
 801191e:	3740      	adds	r7, #64	; 0x40
 8011920:	46bd      	mov	sp, r7
 8011922:	bd80      	pop	{r7, pc}
 8011924:	20005abc 	.word	0x20005abc
 8011928:	200058bc 	.word	0x200058bc

0801192c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 801192c:	b580      	push	{r7, lr}
 801192e:	b08c      	sub	sp, #48	; 0x30
 8011930:	af00      	add	r7, sp, #0
 8011932:	4603      	mov	r3, r0
 8011934:	603a      	str	r2, [r7, #0]
 8011936:	71fb      	strb	r3, [r7, #7]
 8011938:	460b      	mov	r3, r1
 801193a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 801193c:	2301      	movs	r3, #1
 801193e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8011942:	4b25      	ldr	r3, [pc, #148]	; (80119d8 <SD_ioctl+0xac>)
 8011944:	781b      	ldrb	r3, [r3, #0]
 8011946:	b2db      	uxtb	r3, r3
 8011948:	f003 0301 	and.w	r3, r3, #1
 801194c:	2b00      	cmp	r3, #0
 801194e:	d001      	beq.n	8011954 <SD_ioctl+0x28>
 8011950:	2303      	movs	r3, #3
 8011952:	e03c      	b.n	80119ce <SD_ioctl+0xa2>

  switch (cmd)
 8011954:	79bb      	ldrb	r3, [r7, #6]
 8011956:	2b03      	cmp	r3, #3
 8011958:	d834      	bhi.n	80119c4 <SD_ioctl+0x98>
 801195a:	a201      	add	r2, pc, #4	; (adr r2, 8011960 <SD_ioctl+0x34>)
 801195c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011960:	08011971 	.word	0x08011971
 8011964:	08011979 	.word	0x08011979
 8011968:	08011991 	.word	0x08011991
 801196c:	080119ab 	.word	0x080119ab
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8011970:	2300      	movs	r3, #0
 8011972:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011976:	e028      	b.n	80119ca <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8011978:	f107 030c 	add.w	r3, r7, #12
 801197c:	4618      	mov	r0, r3
 801197e:	f7fa fe3d 	bl	800c5fc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8011982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011984:	683b      	ldr	r3, [r7, #0]
 8011986:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011988:	2300      	movs	r3, #0
 801198a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801198e:	e01c      	b.n	80119ca <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011990:	f107 030c 	add.w	r3, r7, #12
 8011994:	4618      	mov	r0, r3
 8011996:	f7fa fe31 	bl	800c5fc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801199a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801199c:	b29a      	uxth	r2, r3
 801199e:	683b      	ldr	r3, [r7, #0]
 80119a0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80119a2:	2300      	movs	r3, #0
 80119a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80119a8:	e00f      	b.n	80119ca <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80119aa:	f107 030c 	add.w	r3, r7, #12
 80119ae:	4618      	mov	r0, r3
 80119b0:	f7fa fe24 	bl	800c5fc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80119b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119b6:	0a5a      	lsrs	r2, r3, #9
 80119b8:	683b      	ldr	r3, [r7, #0]
 80119ba:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80119bc:	2300      	movs	r3, #0
 80119be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80119c2:	e002      	b.n	80119ca <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80119c4:	2304      	movs	r3, #4
 80119c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80119ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80119ce:	4618      	mov	r0, r3
 80119d0:	3730      	adds	r7, #48	; 0x30
 80119d2:	46bd      	mov	sp, r7
 80119d4:	bd80      	pop	{r7, pc}
 80119d6:	bf00      	nop
 80119d8:	20000636 	.word	0x20000636

080119dc <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80119dc:	b580      	push	{r7, lr}
 80119de:	af00      	add	r7, sp, #0
  
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
  osMessagePut(SDQueueID, WRITE_CPLT_MSG, osWaitForever);
 80119e0:	4b04      	ldr	r3, [pc, #16]	; (80119f4 <BSP_SD_WriteCpltCallback+0x18>)
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	f04f 32ff 	mov.w	r2, #4294967295
 80119e8:	2102      	movs	r1, #2
 80119ea:	4618      	mov	r0, r3
 80119ec:	f7f7 fa74 	bl	8008ed8 <osMessagePut>
}
 80119f0:	bf00      	nop
 80119f2:	bd80      	pop	{r7, pc}
 80119f4:	20005abc 	.word	0x20005abc

080119f8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80119f8:	b580      	push	{r7, lr}
 80119fa:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
  osMessagePut(SDQueueID, READ_CPLT_MSG, osWaitForever);
 80119fc:	4b04      	ldr	r3, [pc, #16]	; (8011a10 <BSP_SD_ReadCpltCallback+0x18>)
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	f04f 32ff 	mov.w	r2, #4294967295
 8011a04:	2101      	movs	r1, #1
 8011a06:	4618      	mov	r0, r3
 8011a08:	f7f7 fa66 	bl	8008ed8 <osMessagePut>
}
 8011a0c:	bf00      	nop
 8011a0e:	bd80      	pop	{r7, pc}
 8011a10:	20005abc 	.word	0x20005abc

08011a14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8011a14:	b580      	push	{r7, lr}
 8011a16:	b082      	sub	sp, #8
 8011a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011a1a:	2300      	movs	r3, #0
 8011a1c:	607b      	str	r3, [r7, #4]
 8011a1e:	4b12      	ldr	r3, [pc, #72]	; (8011a68 <HAL_MspInit+0x54>)
 8011a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011a22:	4a11      	ldr	r2, [pc, #68]	; (8011a68 <HAL_MspInit+0x54>)
 8011a24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011a28:	6453      	str	r3, [r2, #68]	; 0x44
 8011a2a:	4b0f      	ldr	r3, [pc, #60]	; (8011a68 <HAL_MspInit+0x54>)
 8011a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011a32:	607b      	str	r3, [r7, #4]
 8011a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8011a36:	2300      	movs	r3, #0
 8011a38:	603b      	str	r3, [r7, #0]
 8011a3a:	4b0b      	ldr	r3, [pc, #44]	; (8011a68 <HAL_MspInit+0x54>)
 8011a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a3e:	4a0a      	ldr	r2, [pc, #40]	; (8011a68 <HAL_MspInit+0x54>)
 8011a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011a44:	6413      	str	r3, [r2, #64]	; 0x40
 8011a46:	4b08      	ldr	r3, [pc, #32]	; (8011a68 <HAL_MspInit+0x54>)
 8011a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011a4e:	603b      	str	r3, [r7, #0]
 8011a50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8011a52:	2200      	movs	r2, #0
 8011a54:	210f      	movs	r1, #15
 8011a56:	f06f 0001 	mvn.w	r0, #1
 8011a5a:	f7ef fde2 	bl	8001622 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8011a5e:	bf00      	nop
 8011a60:	3708      	adds	r7, #8
 8011a62:	46bd      	mov	sp, r7
 8011a64:	bd80      	pop	{r7, pc}
 8011a66:	bf00      	nop
 8011a68:	40023800 	.word	0x40023800

08011a6c <HAL_CAN_MspInit>:
* @param hcan: CAN handle pointer
* @retval None
*/
extern CAN_HandleTypeDef hcan1;
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8011a6c:	b580      	push	{r7, lr}
 8011a6e:	b08a      	sub	sp, #40	; 0x28
 8011a70:	af00      	add	r7, sp, #0
 8011a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011a74:	f107 0314 	add.w	r3, r7, #20
 8011a78:	2200      	movs	r2, #0
 8011a7a:	601a      	str	r2, [r3, #0]
 8011a7c:	605a      	str	r2, [r3, #4]
 8011a7e:	609a      	str	r2, [r3, #8]
 8011a80:	60da      	str	r2, [r3, #12]
 8011a82:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	4a21      	ldr	r2, [pc, #132]	; (8011b10 <HAL_CAN_MspInit+0xa4>)
 8011a8a:	4293      	cmp	r3, r2
 8011a8c:	d13c      	bne.n	8011b08 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8011a8e:	2300      	movs	r3, #0
 8011a90:	613b      	str	r3, [r7, #16]
 8011a92:	4b20      	ldr	r3, [pc, #128]	; (8011b14 <HAL_CAN_MspInit+0xa8>)
 8011a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a96:	4a1f      	ldr	r2, [pc, #124]	; (8011b14 <HAL_CAN_MspInit+0xa8>)
 8011a98:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8011a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8011a9e:	4b1d      	ldr	r3, [pc, #116]	; (8011b14 <HAL_CAN_MspInit+0xa8>)
 8011aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011aa6:	613b      	str	r3, [r7, #16]
 8011aa8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011aaa:	2300      	movs	r3, #0
 8011aac:	60fb      	str	r3, [r7, #12]
 8011aae:	4b19      	ldr	r3, [pc, #100]	; (8011b14 <HAL_CAN_MspInit+0xa8>)
 8011ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ab2:	4a18      	ldr	r2, [pc, #96]	; (8011b14 <HAL_CAN_MspInit+0xa8>)
 8011ab4:	f043 0301 	orr.w	r3, r3, #1
 8011ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8011aba:	4b16      	ldr	r3, [pc, #88]	; (8011b14 <HAL_CAN_MspInit+0xa8>)
 8011abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011abe:	f003 0301 	and.w	r3, r3, #1
 8011ac2:	60fb      	str	r3, [r7, #12]
 8011ac4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8011ac6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8011aca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011acc:	2302      	movs	r3, #2
 8011ace:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011ad0:	2300      	movs	r3, #0
 8011ad2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011ad4:	2303      	movs	r3, #3
 8011ad6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8011ad8:	2309      	movs	r3, #9
 8011ada:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011adc:	f107 0314 	add.w	r3, r7, #20
 8011ae0:	4619      	mov	r1, r3
 8011ae2:	480d      	ldr	r0, [pc, #52]	; (8011b18 <HAL_CAN_MspInit+0xac>)
 8011ae4:	f7f0 f96c 	bl	8001dc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

    __HAL_CAN_ENABLE_IT(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING);
 8011ae8:	4b0c      	ldr	r3, [pc, #48]	; (8011b1c <HAL_CAN_MspInit+0xb0>)
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	695a      	ldr	r2, [r3, #20]
 8011aee:	4b0b      	ldr	r3, [pc, #44]	; (8011b1c <HAL_CAN_MspInit+0xb0>)
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	f042 0202 	orr.w	r2, r2, #2
 8011af6:	615a      	str	r2, [r3, #20]
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 3, 0);
 8011af8:	2200      	movs	r2, #0
 8011afa:	2103      	movs	r1, #3
 8011afc:	2014      	movs	r0, #20
 8011afe:	f7ef fd90 	bl	8001622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8011b02:	2014      	movs	r0, #20
 8011b04:	f7ef fda9 	bl	800165a <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8011b08:	bf00      	nop
 8011b0a:	3728      	adds	r7, #40	; 0x28
 8011b0c:	46bd      	mov	sp, r7
 8011b0e:	bd80      	pop	{r7, pc}
 8011b10:	40006400 	.word	0x40006400
 8011b14:	40023800 	.word	0x40023800
 8011b18:	40020000 	.word	0x40020000
 8011b1c:	20007008 	.word	0x20007008

08011b20 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8011b20:	b580      	push	{r7, lr}
 8011b22:	b08a      	sub	sp, #40	; 0x28
 8011b24:	af00      	add	r7, sp, #0
 8011b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011b28:	f107 0314 	add.w	r3, r7, #20
 8011b2c:	2200      	movs	r2, #0
 8011b2e:	601a      	str	r2, [r3, #0]
 8011b30:	605a      	str	r2, [r3, #4]
 8011b32:	609a      	str	r2, [r3, #8]
 8011b34:	60da      	str	r2, [r3, #12]
 8011b36:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	4a68      	ldr	r2, [pc, #416]	; (8011ce0 <HAL_SD_MspInit+0x1c0>)
 8011b3e:	4293      	cmp	r3, r2
 8011b40:	f040 80c9 	bne.w	8011cd6 <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8011b44:	2300      	movs	r3, #0
 8011b46:	613b      	str	r3, [r7, #16]
 8011b48:	4b66      	ldr	r3, [pc, #408]	; (8011ce4 <HAL_SD_MspInit+0x1c4>)
 8011b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011b4c:	4a65      	ldr	r2, [pc, #404]	; (8011ce4 <HAL_SD_MspInit+0x1c4>)
 8011b4e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8011b52:	6453      	str	r3, [r2, #68]	; 0x44
 8011b54:	4b63      	ldr	r3, [pc, #396]	; (8011ce4 <HAL_SD_MspInit+0x1c4>)
 8011b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011b58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011b5c:	613b      	str	r3, [r7, #16]
 8011b5e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011b60:	2300      	movs	r3, #0
 8011b62:	60fb      	str	r3, [r7, #12]
 8011b64:	4b5f      	ldr	r3, [pc, #380]	; (8011ce4 <HAL_SD_MspInit+0x1c4>)
 8011b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b68:	4a5e      	ldr	r2, [pc, #376]	; (8011ce4 <HAL_SD_MspInit+0x1c4>)
 8011b6a:	f043 0304 	orr.w	r3, r3, #4
 8011b6e:	6313      	str	r3, [r2, #48]	; 0x30
 8011b70:	4b5c      	ldr	r3, [pc, #368]	; (8011ce4 <HAL_SD_MspInit+0x1c4>)
 8011b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b74:	f003 0304 	and.w	r3, r3, #4
 8011b78:	60fb      	str	r3, [r7, #12]
 8011b7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8011b7c:	2300      	movs	r3, #0
 8011b7e:	60bb      	str	r3, [r7, #8]
 8011b80:	4b58      	ldr	r3, [pc, #352]	; (8011ce4 <HAL_SD_MspInit+0x1c4>)
 8011b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b84:	4a57      	ldr	r2, [pc, #348]	; (8011ce4 <HAL_SD_MspInit+0x1c4>)
 8011b86:	f043 0308 	orr.w	r3, r3, #8
 8011b8a:	6313      	str	r3, [r2, #48]	; 0x30
 8011b8c:	4b55      	ldr	r3, [pc, #340]	; (8011ce4 <HAL_SD_MspInit+0x1c4>)
 8011b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b90:	f003 0308 	and.w	r3, r3, #8
 8011b94:	60bb      	str	r3, [r7, #8]
 8011b96:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8011b98:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8011b9c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011b9e:	2302      	movs	r3, #2
 8011ba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011ba2:	2300      	movs	r3, #0
 8011ba4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011ba6:	2303      	movs	r3, #3
 8011ba8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8011baa:	230c      	movs	r3, #12
 8011bac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011bae:	f107 0314 	add.w	r3, r7, #20
 8011bb2:	4619      	mov	r1, r3
 8011bb4:	484c      	ldr	r0, [pc, #304]	; (8011ce8 <HAL_SD_MspInit+0x1c8>)
 8011bb6:	f7f0 f903 	bl	8001dc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8011bba:	2304      	movs	r3, #4
 8011bbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011bbe:	2302      	movs	r3, #2
 8011bc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011bc2:	2300      	movs	r3, #0
 8011bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011bc6:	2303      	movs	r3, #3
 8011bc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8011bca:	230c      	movs	r3, #12
 8011bcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8011bce:	f107 0314 	add.w	r3, r7, #20
 8011bd2:	4619      	mov	r1, r3
 8011bd4:	4845      	ldr	r0, [pc, #276]	; (8011cec <HAL_SD_MspInit+0x1cc>)
 8011bd6:	f7f0 f8f3 	bl	8001dc0 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8011bda:	4b45      	ldr	r3, [pc, #276]	; (8011cf0 <HAL_SD_MspInit+0x1d0>)
 8011bdc:	4a45      	ldr	r2, [pc, #276]	; (8011cf4 <HAL_SD_MspInit+0x1d4>)
 8011bde:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8011be0:	4b43      	ldr	r3, [pc, #268]	; (8011cf0 <HAL_SD_MspInit+0x1d0>)
 8011be2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8011be6:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8011be8:	4b41      	ldr	r3, [pc, #260]	; (8011cf0 <HAL_SD_MspInit+0x1d0>)
 8011bea:	2200      	movs	r2, #0
 8011bec:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8011bee:	4b40      	ldr	r3, [pc, #256]	; (8011cf0 <HAL_SD_MspInit+0x1d0>)
 8011bf0:	2200      	movs	r2, #0
 8011bf2:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8011bf4:	4b3e      	ldr	r3, [pc, #248]	; (8011cf0 <HAL_SD_MspInit+0x1d0>)
 8011bf6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011bfa:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8011bfc:	4b3c      	ldr	r3, [pc, #240]	; (8011cf0 <HAL_SD_MspInit+0x1d0>)
 8011bfe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011c02:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8011c04:	4b3a      	ldr	r3, [pc, #232]	; (8011cf0 <HAL_SD_MspInit+0x1d0>)
 8011c06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8011c0a:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8011c0c:	4b38      	ldr	r3, [pc, #224]	; (8011cf0 <HAL_SD_MspInit+0x1d0>)
 8011c0e:	2220      	movs	r2, #32
 8011c10:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8011c12:	4b37      	ldr	r3, [pc, #220]	; (8011cf0 <HAL_SD_MspInit+0x1d0>)
 8011c14:	2200      	movs	r2, #0
 8011c16:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8011c18:	4b35      	ldr	r3, [pc, #212]	; (8011cf0 <HAL_SD_MspInit+0x1d0>)
 8011c1a:	2204      	movs	r2, #4
 8011c1c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8011c1e:	4b34      	ldr	r3, [pc, #208]	; (8011cf0 <HAL_SD_MspInit+0x1d0>)
 8011c20:	2203      	movs	r2, #3
 8011c22:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8011c24:	4b32      	ldr	r3, [pc, #200]	; (8011cf0 <HAL_SD_MspInit+0x1d0>)
 8011c26:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8011c2a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8011c2c:	4b30      	ldr	r3, [pc, #192]	; (8011cf0 <HAL_SD_MspInit+0x1d0>)
 8011c2e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8011c32:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8011c34:	482e      	ldr	r0, [pc, #184]	; (8011cf0 <HAL_SD_MspInit+0x1d0>)
 8011c36:	f7ef fd2b 	bl	8001690 <HAL_DMA_Init>
 8011c3a:	4603      	mov	r3, r0
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d001      	beq.n	8011c44 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8011c40:	f7fc f8da 	bl	800ddf8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	4a2a      	ldr	r2, [pc, #168]	; (8011cf0 <HAL_SD_MspInit+0x1d0>)
 8011c48:	63da      	str	r2, [r3, #60]	; 0x3c
 8011c4a:	4a29      	ldr	r2, [pc, #164]	; (8011cf0 <HAL_SD_MspInit+0x1d0>)
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8011c50:	4b29      	ldr	r3, [pc, #164]	; (8011cf8 <HAL_SD_MspInit+0x1d8>)
 8011c52:	4a2a      	ldr	r2, [pc, #168]	; (8011cfc <HAL_SD_MspInit+0x1dc>)
 8011c54:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8011c56:	4b28      	ldr	r3, [pc, #160]	; (8011cf8 <HAL_SD_MspInit+0x1d8>)
 8011c58:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8011c5c:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8011c5e:	4b26      	ldr	r3, [pc, #152]	; (8011cf8 <HAL_SD_MspInit+0x1d8>)
 8011c60:	2240      	movs	r2, #64	; 0x40
 8011c62:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8011c64:	4b24      	ldr	r3, [pc, #144]	; (8011cf8 <HAL_SD_MspInit+0x1d8>)
 8011c66:	2200      	movs	r2, #0
 8011c68:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8011c6a:	4b23      	ldr	r3, [pc, #140]	; (8011cf8 <HAL_SD_MspInit+0x1d8>)
 8011c6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011c70:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8011c72:	4b21      	ldr	r3, [pc, #132]	; (8011cf8 <HAL_SD_MspInit+0x1d8>)
 8011c74:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011c78:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8011c7a:	4b1f      	ldr	r3, [pc, #124]	; (8011cf8 <HAL_SD_MspInit+0x1d8>)
 8011c7c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8011c80:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8011c82:	4b1d      	ldr	r3, [pc, #116]	; (8011cf8 <HAL_SD_MspInit+0x1d8>)
 8011c84:	2220      	movs	r2, #32
 8011c86:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8011c88:	4b1b      	ldr	r3, [pc, #108]	; (8011cf8 <HAL_SD_MspInit+0x1d8>)
 8011c8a:	2200      	movs	r2, #0
 8011c8c:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8011c8e:	4b1a      	ldr	r3, [pc, #104]	; (8011cf8 <HAL_SD_MspInit+0x1d8>)
 8011c90:	2204      	movs	r2, #4
 8011c92:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8011c94:	4b18      	ldr	r3, [pc, #96]	; (8011cf8 <HAL_SD_MspInit+0x1d8>)
 8011c96:	2203      	movs	r2, #3
 8011c98:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8011c9a:	4b17      	ldr	r3, [pc, #92]	; (8011cf8 <HAL_SD_MspInit+0x1d8>)
 8011c9c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8011ca0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8011ca2:	4b15      	ldr	r3, [pc, #84]	; (8011cf8 <HAL_SD_MspInit+0x1d8>)
 8011ca4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8011ca8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8011caa:	4813      	ldr	r0, [pc, #76]	; (8011cf8 <HAL_SD_MspInit+0x1d8>)
 8011cac:	f7ef fcf0 	bl	8001690 <HAL_DMA_Init>
 8011cb0:	4603      	mov	r3, r0
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d001      	beq.n	8011cba <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 8011cb6:	f7fc f89f 	bl	800ddf8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	4a0e      	ldr	r2, [pc, #56]	; (8011cf8 <HAL_SD_MspInit+0x1d8>)
 8011cbe:	641a      	str	r2, [r3, #64]	; 0x40
 8011cc0:	4a0d      	ldr	r2, [pc, #52]	; (8011cf8 <HAL_SD_MspInit+0x1d8>)
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8011cc6:	2200      	movs	r2, #0
 8011cc8:	2105      	movs	r1, #5
 8011cca:	2031      	movs	r0, #49	; 0x31
 8011ccc:	f7ef fca9 	bl	8001622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8011cd0:	2031      	movs	r0, #49	; 0x31
 8011cd2:	f7ef fcc2 	bl	800165a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8011cd6:	bf00      	nop
 8011cd8:	3728      	adds	r7, #40	; 0x28
 8011cda:	46bd      	mov	sp, r7
 8011cdc:	bd80      	pop	{r7, pc}
 8011cde:	bf00      	nop
 8011ce0:	40012c00 	.word	0x40012c00
 8011ce4:	40023800 	.word	0x40023800
 8011ce8:	40020800 	.word	0x40020800
 8011cec:	40020c00 	.word	0x40020c00
 8011cf0:	20006bdc 	.word	0x20006bdc
 8011cf4:	40026458 	.word	0x40026458
 8011cf8:	20006da4 	.word	0x20006da4
 8011cfc:	400264a0 	.word	0x400264a0

08011d00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8011d00:	b580      	push	{r7, lr}
 8011d02:	b08c      	sub	sp, #48	; 0x30
 8011d04:	af00      	add	r7, sp, #0
 8011d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011d08:	f107 031c 	add.w	r3, r7, #28
 8011d0c:	2200      	movs	r2, #0
 8011d0e:	601a      	str	r2, [r3, #0]
 8011d10:	605a      	str	r2, [r3, #4]
 8011d12:	609a      	str	r2, [r3, #8]
 8011d14:	60da      	str	r2, [r3, #12]
 8011d16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	681b      	ldr	r3, [r3, #0]
 8011d1c:	4a3a      	ldr	r2, [pc, #232]	; (8011e08 <HAL_UART_MspInit+0x108>)
 8011d1e:	4293      	cmp	r3, r2
 8011d20:	d135      	bne.n	8011d8e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8011d22:	2300      	movs	r3, #0
 8011d24:	61bb      	str	r3, [r7, #24]
 8011d26:	4b39      	ldr	r3, [pc, #228]	; (8011e0c <HAL_UART_MspInit+0x10c>)
 8011d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011d2a:	4a38      	ldr	r2, [pc, #224]	; (8011e0c <HAL_UART_MspInit+0x10c>)
 8011d2c:	f043 0310 	orr.w	r3, r3, #16
 8011d30:	6453      	str	r3, [r2, #68]	; 0x44
 8011d32:	4b36      	ldr	r3, [pc, #216]	; (8011e0c <HAL_UART_MspInit+0x10c>)
 8011d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011d36:	f003 0310 	and.w	r3, r3, #16
 8011d3a:	61bb      	str	r3, [r7, #24]
 8011d3c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011d3e:	2300      	movs	r3, #0
 8011d40:	617b      	str	r3, [r7, #20]
 8011d42:	4b32      	ldr	r3, [pc, #200]	; (8011e0c <HAL_UART_MspInit+0x10c>)
 8011d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d46:	4a31      	ldr	r2, [pc, #196]	; (8011e0c <HAL_UART_MspInit+0x10c>)
 8011d48:	f043 0301 	orr.w	r3, r3, #1
 8011d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8011d4e:	4b2f      	ldr	r3, [pc, #188]	; (8011e0c <HAL_UART_MspInit+0x10c>)
 8011d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d52:	f003 0301 	and.w	r3, r3, #1
 8011d56:	617b      	str	r3, [r7, #20]
 8011d58:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8011d5a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8011d5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011d60:	2302      	movs	r3, #2
 8011d62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8011d64:	2301      	movs	r3, #1
 8011d66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011d68:	2303      	movs	r3, #3
 8011d6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8011d6c:	2307      	movs	r3, #7
 8011d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011d70:	f107 031c 	add.w	r3, r7, #28
 8011d74:	4619      	mov	r1, r3
 8011d76:	4826      	ldr	r0, [pc, #152]	; (8011e10 <HAL_UART_MspInit+0x110>)
 8011d78:	f7f0 f822 	bl	8001dc0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8011d7c:	2200      	movs	r2, #0
 8011d7e:	2105      	movs	r1, #5
 8011d80:	2025      	movs	r0, #37	; 0x25
 8011d82:	f7ef fc4e 	bl	8001622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8011d86:	2025      	movs	r0, #37	; 0x25
 8011d88:	f7ef fc67 	bl	800165a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8011d8c:	e038      	b.n	8011e00 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	4a20      	ldr	r2, [pc, #128]	; (8011e14 <HAL_UART_MspInit+0x114>)
 8011d94:	4293      	cmp	r3, r2
 8011d96:	d133      	bne.n	8011e00 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8011d98:	2300      	movs	r3, #0
 8011d9a:	613b      	str	r3, [r7, #16]
 8011d9c:	4b1b      	ldr	r3, [pc, #108]	; (8011e0c <HAL_UART_MspInit+0x10c>)
 8011d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011da0:	4a1a      	ldr	r2, [pc, #104]	; (8011e0c <HAL_UART_MspInit+0x10c>)
 8011da2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011da6:	6413      	str	r3, [r2, #64]	; 0x40
 8011da8:	4b18      	ldr	r3, [pc, #96]	; (8011e0c <HAL_UART_MspInit+0x10c>)
 8011daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011db0:	613b      	str	r3, [r7, #16]
 8011db2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011db4:	2300      	movs	r3, #0
 8011db6:	60fb      	str	r3, [r7, #12]
 8011db8:	4b14      	ldr	r3, [pc, #80]	; (8011e0c <HAL_UART_MspInit+0x10c>)
 8011dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011dbc:	4a13      	ldr	r2, [pc, #76]	; (8011e0c <HAL_UART_MspInit+0x10c>)
 8011dbe:	f043 0301 	orr.w	r3, r3, #1
 8011dc2:	6313      	str	r3, [r2, #48]	; 0x30
 8011dc4:	4b11      	ldr	r3, [pc, #68]	; (8011e0c <HAL_UART_MspInit+0x10c>)
 8011dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011dc8:	f003 0301 	and.w	r3, r3, #1
 8011dcc:	60fb      	str	r3, [r7, #12]
 8011dce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8011dd0:	230c      	movs	r3, #12
 8011dd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011dd4:	2302      	movs	r3, #2
 8011dd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8011dd8:	2301      	movs	r3, #1
 8011dda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011ddc:	2303      	movs	r3, #3
 8011dde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8011de0:	2307      	movs	r3, #7
 8011de2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011de4:	f107 031c 	add.w	r3, r7, #28
 8011de8:	4619      	mov	r1, r3
 8011dea:	4809      	ldr	r0, [pc, #36]	; (8011e10 <HAL_UART_MspInit+0x110>)
 8011dec:	f7ef ffe8 	bl	8001dc0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8011df0:	2200      	movs	r2, #0
 8011df2:	2105      	movs	r1, #5
 8011df4:	2026      	movs	r0, #38	; 0x26
 8011df6:	f7ef fc14 	bl	8001622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8011dfa:	2026      	movs	r0, #38	; 0x26
 8011dfc:	f7ef fc2d 	bl	800165a <HAL_NVIC_EnableIRQ>
}
 8011e00:	bf00      	nop
 8011e02:	3730      	adds	r7, #48	; 0x30
 8011e04:	46bd      	mov	sp, r7
 8011e06:	bd80      	pop	{r7, pc}
 8011e08:	40011000 	.word	0x40011000
 8011e0c:	40023800 	.word	0x40023800
 8011e10:	40020000 	.word	0x40020000
 8011e14:	40004400 	.word	0x40004400

08011e18 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8011e18:	b580      	push	{r7, lr}
 8011e1a:	b086      	sub	sp, #24
 8011e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8011e1e:	1d3b      	adds	r3, r7, #4
 8011e20:	2200      	movs	r2, #0
 8011e22:	601a      	str	r2, [r3, #0]
 8011e24:	605a      	str	r2, [r3, #4]
 8011e26:	609a      	str	r2, [r3, #8]
 8011e28:	60da      	str	r2, [r3, #12]
 8011e2a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8011e2c:	4b1c      	ldr	r3, [pc, #112]	; (8011ea0 <HAL_FSMC_MspInit+0x88>)
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d131      	bne.n	8011e98 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8011e34:	4b1a      	ldr	r3, [pc, #104]	; (8011ea0 <HAL_FSMC_MspInit+0x88>)
 8011e36:	2201      	movs	r2, #1
 8011e38:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8011e3a:	2300      	movs	r3, #0
 8011e3c:	603b      	str	r3, [r7, #0]
 8011e3e:	4b19      	ldr	r3, [pc, #100]	; (8011ea4 <HAL_FSMC_MspInit+0x8c>)
 8011e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e42:	4a18      	ldr	r2, [pc, #96]	; (8011ea4 <HAL_FSMC_MspInit+0x8c>)
 8011e44:	f043 0301 	orr.w	r3, r3, #1
 8011e48:	6393      	str	r3, [r2, #56]	; 0x38
 8011e4a:	4b16      	ldr	r3, [pc, #88]	; (8011ea4 <HAL_FSMC_MspInit+0x8c>)
 8011e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e4e:	f003 0301 	and.w	r3, r3, #1
 8011e52:	603b      	str	r3, [r7, #0]
 8011e54:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 8011e56:	f64f 7380 	movw	r3, #65408	; 0xff80
 8011e5a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011e5c:	2302      	movs	r3, #2
 8011e5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011e60:	2300      	movs	r3, #0
 8011e62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011e64:	2303      	movs	r3, #3
 8011e66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8011e68:	230c      	movs	r3, #12
 8011e6a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8011e6c:	1d3b      	adds	r3, r7, #4
 8011e6e:	4619      	mov	r1, r3
 8011e70:	480d      	ldr	r0, [pc, #52]	; (8011ea8 <HAL_FSMC_MspInit+0x90>)
 8011e72:	f7ef ffa5 	bl	8001dc0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8011e76:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8011e7a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011e7c:	2302      	movs	r3, #2
 8011e7e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011e80:	2300      	movs	r3, #0
 8011e82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011e84:	2303      	movs	r3, #3
 8011e86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8011e88:	230c      	movs	r3, #12
 8011e8a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8011e8c:	1d3b      	adds	r3, r7, #4
 8011e8e:	4619      	mov	r1, r3
 8011e90:	4806      	ldr	r0, [pc, #24]	; (8011eac <HAL_FSMC_MspInit+0x94>)
 8011e92:	f7ef ff95 	bl	8001dc0 <HAL_GPIO_Init>
 8011e96:	e000      	b.n	8011e9a <HAL_FSMC_MspInit+0x82>
    return;
 8011e98:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8011e9a:	3718      	adds	r7, #24
 8011e9c:	46bd      	mov	sp, r7
 8011e9e:	bd80      	pop	{r7, pc}
 8011ea0:	20005ac0 	.word	0x20005ac0
 8011ea4:	40023800 	.word	0x40023800
 8011ea8:	40021000 	.word	0x40021000
 8011eac:	40020c00 	.word	0x40020c00

08011eb0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8011eb0:	b580      	push	{r7, lr}
 8011eb2:	b082      	sub	sp, #8
 8011eb4:	af00      	add	r7, sp, #0
 8011eb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8011eb8:	f7ff ffae 	bl	8011e18 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8011ebc:	bf00      	nop
 8011ebe:	3708      	adds	r7, #8
 8011ec0:	46bd      	mov	sp, r7
 8011ec2:	bd80      	pop	{r7, pc}

08011ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8011ec4:	b480      	push	{r7}
 8011ec6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8011ec8:	bf00      	nop
 8011eca:	46bd      	mov	sp, r7
 8011ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ed0:	4770      	bx	lr

08011ed2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8011ed2:	b480      	push	{r7}
 8011ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8011ed6:	e7fe      	b.n	8011ed6 <HardFault_Handler+0x4>

08011ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8011ed8:	b480      	push	{r7}
 8011eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8011edc:	e7fe      	b.n	8011edc <MemManage_Handler+0x4>

08011ede <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8011ede:	b480      	push	{r7}
 8011ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8011ee2:	e7fe      	b.n	8011ee2 <BusFault_Handler+0x4>

08011ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8011ee4:	b480      	push	{r7}
 8011ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8011ee8:	e7fe      	b.n	8011ee8 <UsageFault_Handler+0x4>

08011eea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8011eea:	b480      	push	{r7}
 8011eec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8011eee:	bf00      	nop
 8011ef0:	46bd      	mov	sp, r7
 8011ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ef6:	4770      	bx	lr

08011ef8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8011ef8:	b580      	push	{r7, lr}
 8011efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8011efc:	f7ee fb8a 	bl	8000614 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8011f00:	f7f8 fe50 	bl	800aba4 <xTaskGetSchedulerState>
 8011f04:	4603      	mov	r3, r0
 8011f06:	2b01      	cmp	r3, #1
 8011f08:	d001      	beq.n	8011f0e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8011f0a:	f7f9 fa3d 	bl	800b388 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8011f0e:	bf00      	nop
 8011f10:	bd80      	pop	{r7, pc}
	...

08011f14 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8011f14:	b580      	push	{r7, lr}
 8011f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8011f18:	4802      	ldr	r0, [pc, #8]	; (8011f24 <USART1_IRQHandler+0x10>)
 8011f1a:	f7f2 f9cd 	bl	80042b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8011f1e:	bf00      	nop
 8011f20:	bd80      	pop	{r7, pc}
 8011f22:	bf00      	nop
 8011f24:	20006c90 	.word	0x20006c90

08011f28 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8011f28:	b580      	push	{r7, lr}
 8011f2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8011f2c:	4802      	ldr	r0, [pc, #8]	; (8011f38 <USART2_IRQHandler+0x10>)
 8011f2e:	f7f2 f9c3 	bl	80042b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8011f32:	bf00      	nop
 8011f34:	bd80      	pop	{r7, pc}
 8011f36:	bf00      	nop
 8011f38:	20006fc8 	.word	0x20006fc8

08011f3c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8011f3c:	b580      	push	{r7, lr}
 8011f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8011f40:	4802      	ldr	r0, [pc, #8]	; (8011f4c <SDIO_IRQHandler+0x10>)
 8011f42:	f7f0 ff71 	bl	8002e28 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8011f46:	bf00      	nop
 8011f48:	bd80      	pop	{r7, pc}
 8011f4a:	bf00      	nop
 8011f4c:	20006ecc 	.word	0x20006ecc

08011f50 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8011f50:	b580      	push	{r7, lr}
 8011f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8011f54:	4802      	ldr	r0, [pc, #8]	; (8011f60 <DMA2_Stream3_IRQHandler+0x10>)
 8011f56:	f7ef fccb 	bl	80018f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8011f5a:	bf00      	nop
 8011f5c:	bd80      	pop	{r7, pc}
 8011f5e:	bf00      	nop
 8011f60:	20006bdc 	.word	0x20006bdc

08011f64 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8011f64:	b580      	push	{r7, lr}
 8011f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8011f68:	4802      	ldr	r0, [pc, #8]	; (8011f74 <DMA2_Stream6_IRQHandler+0x10>)
 8011f6a:	f7ef fcc1 	bl	80018f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8011f6e:	bf00      	nop
 8011f70:	bd80      	pop	{r7, pc}
 8011f72:	bf00      	nop
 8011f74:	20006da4 	.word	0x20006da4

08011f78 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8011f78:	b580      	push	{r7, lr}
 8011f7a:	b084      	sub	sp, #16
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8011f80:	4b11      	ldr	r3, [pc, #68]	; (8011fc8 <_sbrk+0x50>)
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d102      	bne.n	8011f8e <_sbrk+0x16>
		heap_end = &end;
 8011f88:	4b0f      	ldr	r3, [pc, #60]	; (8011fc8 <_sbrk+0x50>)
 8011f8a:	4a10      	ldr	r2, [pc, #64]	; (8011fcc <_sbrk+0x54>)
 8011f8c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8011f8e:	4b0e      	ldr	r3, [pc, #56]	; (8011fc8 <_sbrk+0x50>)
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8011f94:	4b0c      	ldr	r3, [pc, #48]	; (8011fc8 <_sbrk+0x50>)
 8011f96:	681a      	ldr	r2, [r3, #0]
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	4413      	add	r3, r2
 8011f9c:	466a      	mov	r2, sp
 8011f9e:	4293      	cmp	r3, r2
 8011fa0:	d907      	bls.n	8011fb2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8011fa2:	f000 faff 	bl	80125a4 <__errno>
 8011fa6:	4602      	mov	r2, r0
 8011fa8:	230c      	movs	r3, #12
 8011faa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8011fac:	f04f 33ff 	mov.w	r3, #4294967295
 8011fb0:	e006      	b.n	8011fc0 <_sbrk+0x48>
	}

	heap_end += incr;
 8011fb2:	4b05      	ldr	r3, [pc, #20]	; (8011fc8 <_sbrk+0x50>)
 8011fb4:	681a      	ldr	r2, [r3, #0]
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	4413      	add	r3, r2
 8011fba:	4a03      	ldr	r2, [pc, #12]	; (8011fc8 <_sbrk+0x50>)
 8011fbc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8011fbe:	68fb      	ldr	r3, [r7, #12]
}
 8011fc0:	4618      	mov	r0, r3
 8011fc2:	3710      	adds	r7, #16
 8011fc4:	46bd      	mov	sp, r7
 8011fc6:	bd80      	pop	{r7, pc}
 8011fc8:	20005ac4 	.word	0x20005ac4
 8011fcc:	20009cc8 	.word	0x20009cc8

08011fd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8011fd0:	b480      	push	{r7}
 8011fd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8011fd4:	4b16      	ldr	r3, [pc, #88]	; (8012030 <SystemInit+0x60>)
 8011fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011fda:	4a15      	ldr	r2, [pc, #84]	; (8012030 <SystemInit+0x60>)
 8011fdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011fe0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8011fe4:	4b13      	ldr	r3, [pc, #76]	; (8012034 <SystemInit+0x64>)
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	4a12      	ldr	r2, [pc, #72]	; (8012034 <SystemInit+0x64>)
 8011fea:	f043 0301 	orr.w	r3, r3, #1
 8011fee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8011ff0:	4b10      	ldr	r3, [pc, #64]	; (8012034 <SystemInit+0x64>)
 8011ff2:	2200      	movs	r2, #0
 8011ff4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8011ff6:	4b0f      	ldr	r3, [pc, #60]	; (8012034 <SystemInit+0x64>)
 8011ff8:	681b      	ldr	r3, [r3, #0]
 8011ffa:	4a0e      	ldr	r2, [pc, #56]	; (8012034 <SystemInit+0x64>)
 8011ffc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8012000:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012004:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8012006:	4b0b      	ldr	r3, [pc, #44]	; (8012034 <SystemInit+0x64>)
 8012008:	4a0b      	ldr	r2, [pc, #44]	; (8012038 <SystemInit+0x68>)
 801200a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */

  RCC->CR &= (uint32_t)0xFFFBFFFF;
 801200c:	4b09      	ldr	r3, [pc, #36]	; (8012034 <SystemInit+0x64>)
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	4a08      	ldr	r2, [pc, #32]	; (8012034 <SystemInit+0x64>)
 8012012:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8012016:	6013      	str	r3, [r2, #0]
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8012018:	4b06      	ldr	r3, [pc, #24]	; (8012034 <SystemInit+0x64>)
 801201a:	2200      	movs	r2, #0
 801201c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 801201e:	4b04      	ldr	r3, [pc, #16]	; (8012030 <SystemInit+0x60>)
 8012020:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8012024:	609a      	str	r2, [r3, #8]
#endif
}
 8012026:	bf00      	nop
 8012028:	46bd      	mov	sp, r7
 801202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801202e:	4770      	bx	lr
 8012030:	e000ed00 	.word	0xe000ed00
 8012034:	40023800 	.word	0x40023800
 8012038:	24003010 	.word	0x24003010

0801203c <WORDInit>:
	{
	  Font_Map[i]=0;
	}
}
void WORDInit(void)
{
 801203c:	b580      	push	{r7, lr}
 801203e:	b086      	sub	sp, #24
 8012040:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8012042:	2300      	movs	r3, #0
 8012044:	603b      	str	r3, [r7, #0]
 8012046:	4b18      	ldr	r3, [pc, #96]	; (80120a8 <WORDInit+0x6c>)
 8012048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801204a:	4a17      	ldr	r2, [pc, #92]	; (80120a8 <WORDInit+0x6c>)
 801204c:	f043 0301 	orr.w	r3, r3, #1
 8012050:	6313      	str	r3, [r2, #48]	; 0x30
 8012052:	4b15      	ldr	r3, [pc, #84]	; (80120a8 <WORDInit+0x6c>)
 8012054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012056:	f003 0301 	and.w	r3, r3, #1
 801205a:	603b      	str	r3, [r7, #0]
 801205c:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 801205e:	1d3b      	adds	r3, r7, #4
 8012060:	2200      	movs	r2, #0
 8012062:	601a      	str	r2, [r3, #0]
 8012064:	605a      	str	r2, [r3, #4]
 8012066:	609a      	str	r2, [r3, #8]
 8012068:	60da      	str	r2, [r3, #12]
 801206a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4;
 801206c:	23b0      	movs	r3, #176	; 0xb0
 801206e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012070:	2301      	movs	r3, #1
 8012072:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8012074:	2301      	movs	r3, #1
 8012076:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012078:	2300      	movs	r3, #0
 801207a:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801207c:	1d3b      	adds	r3, r7, #4
 801207e:	4619      	mov	r1, r3
 8012080:	480a      	ldr	r0, [pc, #40]	; (80120ac <WORDInit+0x70>)
 8012082:	f7ef fe9d 	bl	8001dc0 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_6 ;
 8012086:	2340      	movs	r3, #64	; 0x40
 8012088:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801208a:	2300      	movs	r3, #0
 801208c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_MODE_INPUT;
 801208e:	2300      	movs	r3, #0
 8012090:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012092:	2300      	movs	r3, #0
 8012094:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012096:	1d3b      	adds	r3, r7, #4
 8012098:	4619      	mov	r1, r3
 801209a:	4804      	ldr	r0, [pc, #16]	; (80120ac <WORDInit+0x70>)
 801209c:	f7ef fe90 	bl	8001dc0 <HAL_GPIO_Init>
}
 80120a0:	bf00      	nop
 80120a2:	3718      	adds	r7, #24
 80120a4:	46bd      	mov	sp, r7
 80120a6:	bd80      	pop	{r7, pc}
 80120a8:	40023800 	.word	0x40023800
 80120ac:	40020000 	.word	0x40020000

080120b0 <send_command_to_ZK>:
void send_command_to_ZK( uint8_t dat )
{
 80120b0:	b580      	push	{r7, lr}
 80120b2:	b084      	sub	sp, #16
 80120b4:	af00      	add	r7, sp, #0
 80120b6:	4603      	mov	r3, r0
 80120b8:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for(i=0;i<8;i++ )
 80120ba:	2300      	movs	r3, #0
 80120bc:	73fb      	strb	r3, [r7, #15]
 80120be:	e01e      	b.n	80120fe <send_command_to_ZK+0x4e>
	{
		if(dat&0x80){
 80120c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	da05      	bge.n	80120d4 <send_command_to_ZK+0x24>
			Rom_INH;
 80120c8:	2201      	movs	r2, #1
 80120ca:	2180      	movs	r1, #128	; 0x80
 80120cc:	480f      	ldr	r0, [pc, #60]	; (801210c <send_command_to_ZK+0x5c>)
 80120ce:	f7f0 f829 	bl	8002124 <HAL_GPIO_WritePin>
 80120d2:	e004      	b.n	80120de <send_command_to_ZK+0x2e>
		}
		else
			Rom_INL;
 80120d4:	2200      	movs	r2, #0
 80120d6:	2180      	movs	r1, #128	; 0x80
 80120d8:	480c      	ldr	r0, [pc, #48]	; (801210c <send_command_to_ZK+0x5c>)
 80120da:	f7f0 f823 	bl	8002124 <HAL_GPIO_WritePin>
		dat = dat<<1;
 80120de:	79fb      	ldrb	r3, [r7, #7]
 80120e0:	005b      	lsls	r3, r3, #1
 80120e2:	71fb      	strb	r3, [r7, #7]
		Rom_SCKL;
 80120e4:	2200      	movs	r2, #0
 80120e6:	2120      	movs	r1, #32
 80120e8:	4808      	ldr	r0, [pc, #32]	; (801210c <send_command_to_ZK+0x5c>)
 80120ea:	f7f0 f81b 	bl	8002124 <HAL_GPIO_WritePin>
		Rom_SCKH;
 80120ee:	2201      	movs	r2, #1
 80120f0:	2120      	movs	r1, #32
 80120f2:	4806      	ldr	r0, [pc, #24]	; (801210c <send_command_to_ZK+0x5c>)
 80120f4:	f7f0 f816 	bl	8002124 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++ )
 80120f8:	7bfb      	ldrb	r3, [r7, #15]
 80120fa:	3301      	adds	r3, #1
 80120fc:	73fb      	strb	r3, [r7, #15]
 80120fe:	7bfb      	ldrb	r3, [r7, #15]
 8012100:	2b07      	cmp	r3, #7
 8012102:	d9dd      	bls.n	80120c0 <send_command_to_ZK+0x10>
	}
}
 8012104:	bf00      	nop
 8012106:	3710      	adds	r7, #16
 8012108:	46bd      	mov	sp, r7
 801210a:	bd80      	pop	{r7, pc}
 801210c:	40020000 	.word	0x40020000

08012110 <ZK_read>:

uint8_t ZK_read()
{
 8012110:	b580      	push	{r7, lr}
 8012112:	b082      	sub	sp, #8
 8012114:	af00      	add	r7, sp, #0
	unsigned char cnt_clk;
	unsigned char ret_data=0;
 8012116:	2300      	movs	r3, #0
 8012118:	71bb      	strb	r3, [r7, #6]

	for( cnt_clk = 0; cnt_clk < 8; cnt_clk++ )
 801211a:	2300      	movs	r3, #0
 801211c:	71fb      	strb	r3, [r7, #7]
 801211e:	e019      	b.n	8012154 <ZK_read+0x44>
	{
		Rom_SCKL;  //字库时钟拉低
 8012120:	2200      	movs	r2, #0
 8012122:	2120      	movs	r1, #32
 8012124:	480f      	ldr	r0, [pc, #60]	; (8012164 <ZK_read+0x54>)
 8012126:	f7ef fffd 	bl	8002124 <HAL_GPIO_WritePin>
		ret_data=ret_data<<1;
 801212a:	79bb      	ldrb	r3, [r7, #6]
 801212c:	005b      	lsls	r3, r3, #1
 801212e:	71bb      	strb	r3, [r7, #6]
		if( SDO_ZK ){
 8012130:	2140      	movs	r1, #64	; 0x40
 8012132:	480c      	ldr	r0, [pc, #48]	; (8012164 <ZK_read+0x54>)
 8012134:	f7ef ffde 	bl	80020f4 <HAL_GPIO_ReadPin>
 8012138:	4603      	mov	r3, r0
 801213a:	2b00      	cmp	r3, #0
 801213c:	d002      	beq.n	8012144 <ZK_read+0x34>
			ret_data=ret_data+1;
 801213e:	79bb      	ldrb	r3, [r7, #6]
 8012140:	3301      	adds	r3, #1
 8012142:	71bb      	strb	r3, [r7, #6]
		}
		else{
			ret_data=ret_data+0;
		}

		Rom_SCKH; //字库时钟拉高
 8012144:	2201      	movs	r2, #1
 8012146:	2120      	movs	r1, #32
 8012148:	4806      	ldr	r0, [pc, #24]	; (8012164 <ZK_read+0x54>)
 801214a:	f7ef ffeb 	bl	8002124 <HAL_GPIO_WritePin>
	for( cnt_clk = 0; cnt_clk < 8; cnt_clk++ )
 801214e:	79fb      	ldrb	r3, [r7, #7]
 8012150:	3301      	adds	r3, #1
 8012152:	71fb      	strb	r3, [r7, #7]
 8012154:	79fb      	ldrb	r3, [r7, #7]
 8012156:	2b07      	cmp	r3, #7
 8012158:	d9e2      	bls.n	8012120 <ZK_read+0x10>
	 	}
	return(ret_data);
 801215a:	79bb      	ldrb	r3, [r7, #6]
}
 801215c:	4618      	mov	r0, r3
 801215e:	3708      	adds	r7, #8
 8012160:	46bd      	mov	sp, r7
 8012162:	bd80      	pop	{r7, pc}
 8012164:	40020000 	.word	0x40020000

08012168 <ZK_Read_1_n>:

void ZK_Read_1_n(uint8_t addrHigh,uint8_t addrMid,uint8_t addrLow,uint8_t *pBuff,uint8_t DataLen )
{
 8012168:	b590      	push	{r4, r7, lr}
 801216a:	b085      	sub	sp, #20
 801216c:	af00      	add	r7, sp, #0
 801216e:	603b      	str	r3, [r7, #0]
 8012170:	4603      	mov	r3, r0
 8012172:	71fb      	strb	r3, [r7, #7]
 8012174:	460b      	mov	r3, r1
 8012176:	71bb      	strb	r3, [r7, #6]
 8012178:	4613      	mov	r3, r2
 801217a:	717b      	strb	r3, [r7, #5]
	unsigned char i;
	CSL;
 801217c:	2200      	movs	r2, #0
 801217e:	2110      	movs	r1, #16
 8012180:	4818      	ldr	r0, [pc, #96]	; (80121e4 <ZK_Read_1_n+0x7c>)
 8012182:	f7ef ffcf 	bl	8002124 <HAL_GPIO_WritePin>
	Rom_SCKL;
 8012186:	2200      	movs	r2, #0
 8012188:	2120      	movs	r1, #32
 801218a:	4816      	ldr	r0, [pc, #88]	; (80121e4 <ZK_Read_1_n+0x7c>)
 801218c:	f7ef ffca 	bl	8002124 <HAL_GPIO_WritePin>
	send_command_to_ZK(0x03);
 8012190:	2003      	movs	r0, #3
 8012192:	f7ff ff8d 	bl	80120b0 <send_command_to_ZK>
	send_command_to_ZK(addrHigh);
 8012196:	79fb      	ldrb	r3, [r7, #7]
 8012198:	4618      	mov	r0, r3
 801219a:	f7ff ff89 	bl	80120b0 <send_command_to_ZK>
	send_command_to_ZK(addrMid);
 801219e:	79bb      	ldrb	r3, [r7, #6]
 80121a0:	4618      	mov	r0, r3
 80121a2:	f7ff ff85 	bl	80120b0 <send_command_to_ZK>
	send_command_to_ZK(addrLow);
 80121a6:	797b      	ldrb	r3, [r7, #5]
 80121a8:	4618      	mov	r0, r3
 80121aa:	f7ff ff81 	bl	80120b0 <send_command_to_ZK>
	for(i = 0; i < DataLen; i++ )
 80121ae:	2300      	movs	r3, #0
 80121b0:	73fb      	strb	r3, [r7, #15]
 80121b2:	e009      	b.n	80121c8 <ZK_Read_1_n+0x60>
  		 *(pBuff+i)=ZK_read();
 80121b4:	7bfb      	ldrb	r3, [r7, #15]
 80121b6:	683a      	ldr	r2, [r7, #0]
 80121b8:	18d4      	adds	r4, r2, r3
 80121ba:	f7ff ffa9 	bl	8012110 <ZK_read>
 80121be:	4603      	mov	r3, r0
 80121c0:	7023      	strb	r3, [r4, #0]
	for(i = 0; i < DataLen; i++ )
 80121c2:	7bfb      	ldrb	r3, [r7, #15]
 80121c4:	3301      	adds	r3, #1
 80121c6:	73fb      	strb	r3, [r7, #15]
 80121c8:	7bfa      	ldrb	r2, [r7, #15]
 80121ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80121ce:	429a      	cmp	r2, r3
 80121d0:	d3f0      	bcc.n	80121b4 <ZK_Read_1_n+0x4c>
	CSH;
 80121d2:	2201      	movs	r2, #1
 80121d4:	2110      	movs	r1, #16
 80121d6:	4803      	ldr	r0, [pc, #12]	; (80121e4 <ZK_Read_1_n+0x7c>)
 80121d8:	f7ef ffa4 	bl	8002124 <HAL_GPIO_WritePin>
}
 80121dc:	bf00      	nop
 80121de:	3714      	adds	r7, #20
 80121e0:	46bd      	mov	sp, r7
 80121e2:	bd90      	pop	{r4, r7, pc}
 80121e4:	40020000 	.word	0x40020000

080121e8 <zk_map>:

uint16_t word[32*32] = {};
uint16_t wordBak[32*32] = {};

void zk_map(  uint8_t *getdate, uint8_t *putdata, int oop)	 //byte
{
 80121e8:	b480      	push	{r7}
 80121ea:	b08b      	sub	sp, #44	; 0x2c
 80121ec:	af00      	add	r7, sp, #0
 80121ee:	60f8      	str	r0, [r7, #12]
 80121f0:	60b9      	str	r1, [r7, #8]
 80121f2:	607a      	str	r2, [r7, #4]
	for(int j = 0; j < oop*oop; j++)
 80121f4:	2300      	movs	r3, #0
 80121f6:	627b      	str	r3, [r7, #36]	; 0x24
 80121f8:	e008      	b.n	801220c <zk_map+0x24>
		wordBak[j] = 0x2945;
 80121fa:	4a3c      	ldr	r2, [pc, #240]	; (80122ec <zk_map+0x104>)
 80121fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121fe:	f642 1145 	movw	r1, #10565	; 0x2945
 8012202:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int j = 0; j < oop*oop; j++)
 8012206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012208:	3301      	adds	r3, #1
 801220a:	627b      	str	r3, [r7, #36]	; 0x24
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	687a      	ldr	r2, [r7, #4]
 8012210:	fb02 f303 	mul.w	r3, r2, r3
 8012214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012216:	429a      	cmp	r2, r3
 8012218:	dbef      	blt.n	80121fa <zk_map+0x12>
	for(int j = 0; j < oop*oop/8; j++)
 801221a:	2300      	movs	r3, #0
 801221c:	623b      	str	r3, [r7, #32]
 801221e:	e02a      	b.n	8012276 <zk_map+0x8e>
		for(int i = 0; i < 8; i++)
 8012220:	2300      	movs	r3, #0
 8012222:	61fb      	str	r3, [r7, #28]
 8012224:	e021      	b.n	801226a <zk_map+0x82>
		{
			if(putdata[j]&(0x80>>i))
 8012226:	6a3b      	ldr	r3, [r7, #32]
 8012228:	68ba      	ldr	r2, [r7, #8]
 801222a:	4413      	add	r3, r2
 801222c:	781b      	ldrb	r3, [r3, #0]
 801222e:	4619      	mov	r1, r3
 8012230:	2280      	movs	r2, #128	; 0x80
 8012232:	69fb      	ldr	r3, [r7, #28]
 8012234:	fa42 f303 	asr.w	r3, r2, r3
 8012238:	400b      	ands	r3, r1
 801223a:	2b00      	cmp	r3, #0
 801223c:	d009      	beq.n	8012252 <zk_map+0x6a>
				wordBak[i+j*8] = 0xffff;
 801223e:	6a3b      	ldr	r3, [r7, #32]
 8012240:	00da      	lsls	r2, r3, #3
 8012242:	69fb      	ldr	r3, [r7, #28]
 8012244:	4413      	add	r3, r2
 8012246:	4a29      	ldr	r2, [pc, #164]	; (80122ec <zk_map+0x104>)
 8012248:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801224c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8012250:	e008      	b.n	8012264 <zk_map+0x7c>
			else
				wordBak[i+j*8] = 0x2945;
 8012252:	6a3b      	ldr	r3, [r7, #32]
 8012254:	00da      	lsls	r2, r3, #3
 8012256:	69fb      	ldr	r3, [r7, #28]
 8012258:	4413      	add	r3, r2
 801225a:	4a24      	ldr	r2, [pc, #144]	; (80122ec <zk_map+0x104>)
 801225c:	f642 1145 	movw	r1, #10565	; 0x2945
 8012260:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i = 0; i < 8; i++)
 8012264:	69fb      	ldr	r3, [r7, #28]
 8012266:	3301      	adds	r3, #1
 8012268:	61fb      	str	r3, [r7, #28]
 801226a:	69fb      	ldr	r3, [r7, #28]
 801226c:	2b07      	cmp	r3, #7
 801226e:	ddda      	ble.n	8012226 <zk_map+0x3e>
	for(int j = 0; j < oop*oop/8; j++)
 8012270:	6a3b      	ldr	r3, [r7, #32]
 8012272:	3301      	adds	r3, #1
 8012274:	623b      	str	r3, [r7, #32]
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	687a      	ldr	r2, [r7, #4]
 801227a:	fb02 f303 	mul.w	r3, r2, r3
 801227e:	2b00      	cmp	r3, #0
 8012280:	da00      	bge.n	8012284 <zk_map+0x9c>
 8012282:	3307      	adds	r3, #7
 8012284:	10db      	asrs	r3, r3, #3
 8012286:	461a      	mov	r2, r3
 8012288:	6a3b      	ldr	r3, [r7, #32]
 801228a:	4293      	cmp	r3, r2
 801228c:	dbc8      	blt.n	8012220 <zk_map+0x38>
		}
	for(int j = 0; j < oop; j++)
 801228e:	2300      	movs	r3, #0
 8012290:	61bb      	str	r3, [r7, #24]
 8012292:	e020      	b.n	80122d6 <zk_map+0xee>
		for(int i = 0; i < oop; i++){
 8012294:	2300      	movs	r3, #0
 8012296:	617b      	str	r3, [r7, #20]
 8012298:	e016      	b.n	80122c8 <zk_map+0xe0>
			word[i*oop+oop-j-1] = wordBak[j*oop+i];
 801229a:	69bb      	ldr	r3, [r7, #24]
 801229c:	687a      	ldr	r2, [r7, #4]
 801229e:	fb02 f203 	mul.w	r2, r2, r3
 80122a2:	697b      	ldr	r3, [r7, #20]
 80122a4:	441a      	add	r2, r3
 80122a6:	697b      	ldr	r3, [r7, #20]
 80122a8:	3301      	adds	r3, #1
 80122aa:	6879      	ldr	r1, [r7, #4]
 80122ac:	fb01 f103 	mul.w	r1, r1, r3
 80122b0:	69bb      	ldr	r3, [r7, #24]
 80122b2:	1acb      	subs	r3, r1, r3
 80122b4:	3b01      	subs	r3, #1
 80122b6:	490d      	ldr	r1, [pc, #52]	; (80122ec <zk_map+0x104>)
 80122b8:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80122bc:	4a0c      	ldr	r2, [pc, #48]	; (80122f0 <zk_map+0x108>)
 80122be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i = 0; i < oop; i++){
 80122c2:	697b      	ldr	r3, [r7, #20]
 80122c4:	3301      	adds	r3, #1
 80122c6:	617b      	str	r3, [r7, #20]
 80122c8:	697a      	ldr	r2, [r7, #20]
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	429a      	cmp	r2, r3
 80122ce:	dbe4      	blt.n	801229a <zk_map+0xb2>
	for(int j = 0; j < oop; j++)
 80122d0:	69bb      	ldr	r3, [r7, #24]
 80122d2:	3301      	adds	r3, #1
 80122d4:	61bb      	str	r3, [r7, #24]
 80122d6:	69ba      	ldr	r2, [r7, #24]
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	429a      	cmp	r2, r3
 80122dc:	dbda      	blt.n	8012294 <zk_map+0xac>
	}
}
 80122de:	bf00      	nop
 80122e0:	372c      	adds	r7, #44	; 0x2c
 80122e2:	46bd      	mov	sp, r7
 80122e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122e8:	4770      	bx	lr
 80122ea:	bf00      	nop
 80122ec:	200062c8 	.word	0x200062c8
 80122f0:	20005ac8 	.word	0x20005ac8

080122f4 <getGB2312Word>:

//HAL_CAN_Transmit
char * getGB2312Word(uint32_t  x,uint32_t  y, uint8_t * text, int size)
{
 80122f4:	b580      	push	{r7, lr}
 80122f6:	b08c      	sub	sp, #48	; 0x30
 80122f8:	af02      	add	r7, sp, #8
 80122fa:	60f8      	str	r0, [r7, #12]
 80122fc:	60b9      	str	r1, [r7, #8]
 80122fe:	607a      	str	r2, [r7, #4]
 8012300:	603b      	str	r3, [r7, #0]

	uint8_t  i= 0;
 8012302:	2300      	movs	r3, #0
 8012304:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint8_t  AddrHigh,AddrMid,AddrLow ; //字高、中、低地址

	unsigned long  FontAddr=0; //字地址
 8012308:	2300      	movs	r3, #0
 801230a:	61fb      	str	r3, [r7, #28]
	unsigned long  BaseAdd=0; //字库基地址
 801230c:	2300      	movs	r3, #0
 801230e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t  n,h,w,d;// 不同点阵字库的计算变量
	switch(size)
 8012310:	683b      	ldr	r3, [r7, #0]
 8012312:	3b0c      	subs	r3, #12
 8012314:	2b14      	cmp	r3, #20
 8012316:	d861      	bhi.n	80123dc <getGB2312Word+0xe8>
 8012318:	a201      	add	r2, pc, #4	; (adr r2, 8012320 <getGB2312Word+0x2c>)
 801231a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801231e:	bf00      	nop
 8012320:	08012375 	.word	0x08012375
 8012324:	080123dd 	.word	0x080123dd
 8012328:	080123dd 	.word	0x080123dd
 801232c:	080123dd 	.word	0x080123dd
 8012330:	0801238f 	.word	0x0801238f
 8012334:	080123dd 	.word	0x080123dd
 8012338:	080123dd 	.word	0x080123dd
 801233c:	080123dd 	.word	0x080123dd
 8012340:	080123dd 	.word	0x080123dd
 8012344:	080123dd 	.word	0x080123dd
 8012348:	080123dd 	.word	0x080123dd
 801234c:	080123dd 	.word	0x080123dd
 8012350:	080123a9 	.word	0x080123a9
 8012354:	080123dd 	.word	0x080123dd
 8012358:	080123dd 	.word	0x080123dd
 801235c:	080123dd 	.word	0x080123dd
 8012360:	080123dd 	.word	0x080123dd
 8012364:	080123dd 	.word	0x080123dd
 8012368:	080123dd 	.word	0x080123dd
 801236c:	080123dd 	.word	0x080123dd
 8012370:	080123c3 	.word	0x080123c3
	{  // n个数，h：字高度，w：字宽度， d：字间距，c：页大小
		case 12:  BaseAdd=0x0;     n=24;  h=12; w=12; d=12;   break;  // 12*12
 8012374:	2300      	movs	r3, #0
 8012376:	627b      	str	r3, [r7, #36]	; 0x24
 8012378:	2318      	movs	r3, #24
 801237a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801237e:	230c      	movs	r3, #12
 8012380:	76fb      	strb	r3, [r7, #27]
 8012382:	230c      	movs	r3, #12
 8012384:	76bb      	strb	r3, [r7, #26]
 8012386:	230c      	movs	r3, #12
 8012388:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801238c:	e026      	b.n	80123dc <getGB2312Word+0xe8>
		case 16:  BaseAdd=0x2C9D0; n=32;  h=16; w=16; d=16;   break;   // 15*16
 801238e:	4b6a      	ldr	r3, [pc, #424]	; (8012538 <getGB2312Word+0x244>)
 8012390:	627b      	str	r3, [r7, #36]	; 0x24
 8012392:	2320      	movs	r3, #32
 8012394:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8012398:	2310      	movs	r3, #16
 801239a:	76fb      	strb	r3, [r7, #27]
 801239c:	2310      	movs	r3, #16
 801239e:	76bb      	strb	r3, [r7, #26]
 80123a0:	2310      	movs	r3, #16
 80123a2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80123a6:	e019      	b.n	80123dc <getGB2312Word+0xe8>
		case 24:  BaseAdd=0x68190; n=72;  h=24; w=24; d=24;   break;   // 24*24
 80123a8:	4b64      	ldr	r3, [pc, #400]	; (801253c <getGB2312Word+0x248>)
 80123aa:	627b      	str	r3, [r7, #36]	; 0x24
 80123ac:	2348      	movs	r3, #72	; 0x48
 80123ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80123b2:	2318      	movs	r3, #24
 80123b4:	76fb      	strb	r3, [r7, #27]
 80123b6:	2318      	movs	r3, #24
 80123b8:	76bb      	strb	r3, [r7, #26]
 80123ba:	2318      	movs	r3, #24
 80123bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80123c0:	e00c      	b.n	80123dc <getGB2312Word+0xe8>
		case 32:  BaseAdd=0xEDF00; n=128; h=32; w=32; d=32;   break;   // 32*32
 80123c2:	4b5f      	ldr	r3, [pc, #380]	; (8012540 <getGB2312Word+0x24c>)
 80123c4:	627b      	str	r3, [r7, #36]	; 0x24
 80123c6:	2380      	movs	r3, #128	; 0x80
 80123c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80123cc:	2320      	movs	r3, #32
 80123ce:	76fb      	strb	r3, [r7, #27]
 80123d0:	2320      	movs	r3, #32
 80123d2:	76bb      	strb	r3, [r7, #26]
 80123d4:	2320      	movs	r3, #32
 80123d6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80123da:	bf00      	nop
	}

	if(((text[i]>=0xA1) &&(text[i]<=0xA9))&&(text[i+1]>=0xA1))
 80123dc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80123e0:	687a      	ldr	r2, [r7, #4]
 80123e2:	4413      	add	r3, r2
 80123e4:	781b      	ldrb	r3, [r3, #0]
 80123e6:	2ba0      	cmp	r3, #160	; 0xa0
 80123e8:	d94c      	bls.n	8012484 <getGB2312Word+0x190>
 80123ea:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80123ee:	687a      	ldr	r2, [r7, #4]
 80123f0:	4413      	add	r3, r2
 80123f2:	781b      	ldrb	r3, [r3, #0]
 80123f4:	2ba9      	cmp	r3, #169	; 0xa9
 80123f6:	d845      	bhi.n	8012484 <getGB2312Word+0x190>
 80123f8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80123fc:	3301      	adds	r3, #1
 80123fe:	687a      	ldr	r2, [r7, #4]
 8012400:	4413      	add	r3, r2
 8012402:	781b      	ldrb	r3, [r3, #0]
 8012404:	2ba0      	cmp	r3, #160	; 0xa0
 8012406:	d93d      	bls.n	8012484 <getGB2312Word+0x190>
	{
		/*国标简体（GB2312）汉字在 字库IC中的地址由以下公式来计算：*/
		/*Address = ((MSB - 0xA1) * 94 + (LSB - 0xA1))*n+ BaseAdd; 分三部取地址*/
		FontAddr = (text[i]- 0xA1)*94;
 8012408:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801240c:	687a      	ldr	r2, [r7, #4]
 801240e:	4413      	add	r3, r2
 8012410:	781b      	ldrb	r3, [r3, #0]
 8012412:	3ba1      	subs	r3, #161	; 0xa1
 8012414:	225e      	movs	r2, #94	; 0x5e
 8012416:	fb02 f303 	mul.w	r3, r2, r3
 801241a:	61fb      	str	r3, [r7, #28]
		FontAddr += (text[i+1]-0xA1);
 801241c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8012420:	3301      	adds	r3, #1
 8012422:	687a      	ldr	r2, [r7, #4]
 8012424:	4413      	add	r3, r2
 8012426:	781b      	ldrb	r3, [r3, #0]
 8012428:	461a      	mov	r2, r3
 801242a:	69fb      	ldr	r3, [r7, #28]
 801242c:	4413      	add	r3, r2
 801242e:	3ba1      	subs	r3, #161	; 0xa1
 8012430:	61fb      	str	r3, [r7, #28]
		FontAddr = (unsigned long)((FontAddr*n)+BaseAdd);
 8012432:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012436:	69fa      	ldr	r2, [r7, #28]
 8012438:	fb02 f303 	mul.w	r3, r2, r3
 801243c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801243e:	4413      	add	r3, r2
 8012440:	61fb      	str	r3, [r7, #28]

		AddrHigh = (FontAddr&0xff0000)>>16;  /*地址的高8位,共24位*/
 8012442:	69fb      	ldr	r3, [r7, #28]
 8012444:	0c1b      	lsrs	r3, r3, #16
 8012446:	767b      	strb	r3, [r7, #25]
		AddrMid = (FontAddr&0xff00)>>8;      /*地址的中8位,共24位*/
 8012448:	69fb      	ldr	r3, [r7, #28]
 801244a:	0a1b      	lsrs	r3, r3, #8
 801244c:	763b      	strb	r3, [r7, #24]
		AddrLow = FontAddr&0xff;	     /*地址的低8位,共24位*/
 801244e:	69fb      	ldr	r3, [r7, #28]
 8012450:	75fb      	strb	r3, [r7, #23]
		ZK_Read_1_n(AddrHigh,AddrMid,AddrLow,FontBuf,n );/*取一个汉字的数据，存到"FontBuf[]"*/
 8012452:	7dfa      	ldrb	r2, [r7, #23]
 8012454:	7e39      	ldrb	r1, [r7, #24]
 8012456:	7e78      	ldrb	r0, [r7, #25]
 8012458:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801245c:	9300      	str	r3, [sp, #0]
 801245e:	4b39      	ldr	r3, [pc, #228]	; (8012544 <getGB2312Word+0x250>)
 8012460:	f7ff fe82 	bl	8012168 <ZK_Read_1_n>
		zk_map(Font_Map,FontBuf,size);//字符转换
 8012464:	683a      	ldr	r2, [r7, #0]
 8012466:	4937      	ldr	r1, [pc, #220]	; (8012544 <getGB2312Word+0x250>)
 8012468:	4837      	ldr	r0, [pc, #220]	; (8012548 <getGB2312Word+0x254>)
 801246a:	f7ff febd 	bl	80121e8 <zk_map>
		x=x+d; //下一个字坐标
 801246e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012472:	68fa      	ldr	r2, [r7, #12]
 8012474:	4413      	add	r3, r2
 8012476:	60fb      	str	r3, [r7, #12]
		i+=2;  //下个字符
 8012478:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801247c:	3302      	adds	r3, #2
 801247e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8012482:	e053      	b.n	801252c <getGB2312Word+0x238>
	}
	else if(((text[i]>=0xB0) &&(text[i]<=0xF7))&&(text[i+1]>=0xA1))
 8012484:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8012488:	687a      	ldr	r2, [r7, #4]
 801248a:	4413      	add	r3, r2
 801248c:	781b      	ldrb	r3, [r3, #0]
 801248e:	2baf      	cmp	r3, #175	; 0xaf
 8012490:	d94c      	bls.n	801252c <getGB2312Word+0x238>
 8012492:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8012496:	687a      	ldr	r2, [r7, #4]
 8012498:	4413      	add	r3, r2
 801249a:	781b      	ldrb	r3, [r3, #0]
 801249c:	2bf7      	cmp	r3, #247	; 0xf7
 801249e:	d845      	bhi.n	801252c <getGB2312Word+0x238>
 80124a0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80124a4:	3301      	adds	r3, #1
 80124a6:	687a      	ldr	r2, [r7, #4]
 80124a8:	4413      	add	r3, r2
 80124aa:	781b      	ldrb	r3, [r3, #0]
 80124ac:	2ba0      	cmp	r3, #160	; 0xa0
 80124ae:	d93d      	bls.n	801252c <getGB2312Word+0x238>
	{
		/*国标简体（GB2312） 字库IC中的地址由以下公式来计算：*/
		/*Address = ((MSB - 0xB0) * 94 + (LSB - 0xA1)+846)*n+ BaseAdd; 分三部取地址*/

		FontAddr = (text[i]- 0xB0)*94;
 80124b0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80124b4:	687a      	ldr	r2, [r7, #4]
 80124b6:	4413      	add	r3, r2
 80124b8:	781b      	ldrb	r3, [r3, #0]
 80124ba:	3bb0      	subs	r3, #176	; 0xb0
 80124bc:	225e      	movs	r2, #94	; 0x5e
 80124be:	fb02 f303 	mul.w	r3, r2, r3
 80124c2:	61fb      	str	r3, [r7, #28]
		FontAddr += (text[i+1]-0xA1)+846;
 80124c4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80124c8:	3301      	adds	r3, #1
 80124ca:	687a      	ldr	r2, [r7, #4]
 80124cc:	4413      	add	r3, r2
 80124ce:	781b      	ldrb	r3, [r3, #0]
 80124d0:	461a      	mov	r2, r3
 80124d2:	69fb      	ldr	r3, [r7, #28]
 80124d4:	4413      	add	r3, r2
 80124d6:	f203 23ad 	addw	r3, r3, #685	; 0x2ad
 80124da:	61fb      	str	r3, [r7, #28]
		FontAddr = (unsigned long)((FontAddr*n)+BaseAdd);
 80124dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80124e0:	69fa      	ldr	r2, [r7, #28]
 80124e2:	fb02 f303 	mul.w	r3, r2, r3
 80124e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80124e8:	4413      	add	r3, r2
 80124ea:	61fb      	str	r3, [r7, #28]

		AddrHigh = (FontAddr&0xff0000)>>16;  /*地址的高8位,共24位*/
 80124ec:	69fb      	ldr	r3, [r7, #28]
 80124ee:	0c1b      	lsrs	r3, r3, #16
 80124f0:	767b      	strb	r3, [r7, #25]
		AddrMid = (FontAddr&0xff00)>>8;      /*地址的中8位,共24位*/
 80124f2:	69fb      	ldr	r3, [r7, #28]
 80124f4:	0a1b      	lsrs	r3, r3, #8
 80124f6:	763b      	strb	r3, [r7, #24]
		AddrLow = FontAddr&0xff;	     /*地址的低8位,共24位*/
 80124f8:	69fb      	ldr	r3, [r7, #28]
 80124fa:	75fb      	strb	r3, [r7, #23]
		ZK_Read_1_n(AddrHigh,AddrMid,AddrLow,FontBuf,n );/*取一个汉字的数据，存到"FontBuf[ ]"*/
 80124fc:	7dfa      	ldrb	r2, [r7, #23]
 80124fe:	7e39      	ldrb	r1, [r7, #24]
 8012500:	7e78      	ldrb	r0, [r7, #25]
 8012502:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012506:	9300      	str	r3, [sp, #0]
 8012508:	4b0e      	ldr	r3, [pc, #56]	; (8012544 <getGB2312Word+0x250>)
 801250a:	f7ff fe2d 	bl	8012168 <ZK_Read_1_n>
		zk_map(Font_Map,FontBuf,size);//字符转换
 801250e:	683a      	ldr	r2, [r7, #0]
 8012510:	490c      	ldr	r1, [pc, #48]	; (8012544 <getGB2312Word+0x250>)
 8012512:	480d      	ldr	r0, [pc, #52]	; (8012548 <getGB2312Word+0x254>)
 8012514:	f7ff fe68 	bl	80121e8 <zk_map>
		x=x+d; //下一个字坐标
 8012518:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801251c:	68fa      	ldr	r2, [r7, #12]
 801251e:	4413      	add	r3, r2
 8012520:	60fb      	str	r3, [r7, #12]
		i+=2;  //下个字符
 8012522:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8012526:	3302      	adds	r3, #2
 8012528:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	}
	return word;
 801252c:	4b07      	ldr	r3, [pc, #28]	; (801254c <getGB2312Word+0x258>)
}
 801252e:	4618      	mov	r0, r3
 8012530:	3728      	adds	r7, #40	; 0x28
 8012532:	46bd      	mov	sp, r7
 8012534:	bd80      	pop	{r7, pc}
 8012536:	bf00      	nop
 8012538:	0002c9d0 	.word	0x0002c9d0
 801253c:	00068190 	.word	0x00068190
 8012540:	000edf00 	.word	0x000edf00
 8012544:	20009c40 	.word	0x20009c40
 8012548:	20009bc0 	.word	0x20009bc0
 801254c:	20005ac8 	.word	0x20005ac8

08012550 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8012550:	f8df d034 	ldr.w	sp, [pc, #52]	; 8012588 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8012554:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8012556:	e003      	b.n	8012560 <LoopCopyDataInit>

08012558 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8012558:	4b0c      	ldr	r3, [pc, #48]	; (801258c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 801255a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 801255c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 801255e:	3104      	adds	r1, #4

08012560 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8012560:	480b      	ldr	r0, [pc, #44]	; (8012590 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8012562:	4b0c      	ldr	r3, [pc, #48]	; (8012594 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8012564:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8012566:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8012568:	d3f6      	bcc.n	8012558 <CopyDataInit>
  ldr  r2, =_sbss
 801256a:	4a0b      	ldr	r2, [pc, #44]	; (8012598 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 801256c:	e002      	b.n	8012574 <LoopFillZerobss>

0801256e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 801256e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8012570:	f842 3b04 	str.w	r3, [r2], #4

08012574 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8012574:	4b09      	ldr	r3, [pc, #36]	; (801259c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8012576:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8012578:	d3f9      	bcc.n	801256e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801257a:	f7ff fd29 	bl	8011fd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801257e:	f000 f817 	bl	80125b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8012582:	f7fa faa1 	bl	800cac8 <main>
  bx  lr    
 8012586:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8012588:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 801258c:	0806e02c 	.word	0x0806e02c
  ldr  r0, =_sdata
 8012590:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8012594:	200006a0 	.word	0x200006a0
  ldr  r2, =_sbss
 8012598:	200006a0 	.word	0x200006a0
  ldr  r3, = _ebss
 801259c:	20009cc4 	.word	0x20009cc4

080125a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80125a0:	e7fe      	b.n	80125a0 <ADC_IRQHandler>
	...

080125a4 <__errno>:
 80125a4:	4b01      	ldr	r3, [pc, #4]	; (80125ac <__errno+0x8>)
 80125a6:	6818      	ldr	r0, [r3, #0]
 80125a8:	4770      	bx	lr
 80125aa:	bf00      	nop
 80125ac:	2000063c 	.word	0x2000063c

080125b0 <__libc_init_array>:
 80125b0:	b570      	push	{r4, r5, r6, lr}
 80125b2:	4e0d      	ldr	r6, [pc, #52]	; (80125e8 <__libc_init_array+0x38>)
 80125b4:	4c0d      	ldr	r4, [pc, #52]	; (80125ec <__libc_init_array+0x3c>)
 80125b6:	1ba4      	subs	r4, r4, r6
 80125b8:	10a4      	asrs	r4, r4, #2
 80125ba:	2500      	movs	r5, #0
 80125bc:	42a5      	cmp	r5, r4
 80125be:	d109      	bne.n	80125d4 <__libc_init_array+0x24>
 80125c0:	4e0b      	ldr	r6, [pc, #44]	; (80125f0 <__libc_init_array+0x40>)
 80125c2:	4c0c      	ldr	r4, [pc, #48]	; (80125f4 <__libc_init_array+0x44>)
 80125c4:	f000 fc36 	bl	8012e34 <_init>
 80125c8:	1ba4      	subs	r4, r4, r6
 80125ca:	10a4      	asrs	r4, r4, #2
 80125cc:	2500      	movs	r5, #0
 80125ce:	42a5      	cmp	r5, r4
 80125d0:	d105      	bne.n	80125de <__libc_init_array+0x2e>
 80125d2:	bd70      	pop	{r4, r5, r6, pc}
 80125d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80125d8:	4798      	blx	r3
 80125da:	3501      	adds	r5, #1
 80125dc:	e7ee      	b.n	80125bc <__libc_init_array+0xc>
 80125de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80125e2:	4798      	blx	r3
 80125e4:	3501      	adds	r5, #1
 80125e6:	e7f2      	b.n	80125ce <__libc_init_array+0x1e>
 80125e8:	0806e024 	.word	0x0806e024
 80125ec:	0806e024 	.word	0x0806e024
 80125f0:	0806e024 	.word	0x0806e024
 80125f4:	0806e028 	.word	0x0806e028

080125f8 <memcmp>:
 80125f8:	b530      	push	{r4, r5, lr}
 80125fa:	2400      	movs	r4, #0
 80125fc:	42a2      	cmp	r2, r4
 80125fe:	d101      	bne.n	8012604 <memcmp+0xc>
 8012600:	2000      	movs	r0, #0
 8012602:	e007      	b.n	8012614 <memcmp+0x1c>
 8012604:	5d03      	ldrb	r3, [r0, r4]
 8012606:	3401      	adds	r4, #1
 8012608:	190d      	adds	r5, r1, r4
 801260a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801260e:	42ab      	cmp	r3, r5
 8012610:	d0f4      	beq.n	80125fc <memcmp+0x4>
 8012612:	1b58      	subs	r0, r3, r5
 8012614:	bd30      	pop	{r4, r5, pc}

08012616 <memcpy>:
 8012616:	b510      	push	{r4, lr}
 8012618:	1e43      	subs	r3, r0, #1
 801261a:	440a      	add	r2, r1
 801261c:	4291      	cmp	r1, r2
 801261e:	d100      	bne.n	8012622 <memcpy+0xc>
 8012620:	bd10      	pop	{r4, pc}
 8012622:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012626:	f803 4f01 	strb.w	r4, [r3, #1]!
 801262a:	e7f7      	b.n	801261c <memcpy+0x6>

0801262c <memset>:
 801262c:	4402      	add	r2, r0
 801262e:	4603      	mov	r3, r0
 8012630:	4293      	cmp	r3, r2
 8012632:	d100      	bne.n	8012636 <memset+0xa>
 8012634:	4770      	bx	lr
 8012636:	f803 1b01 	strb.w	r1, [r3], #1
 801263a:	e7f9      	b.n	8012630 <memset+0x4>

0801263c <siprintf>:
 801263c:	b40e      	push	{r1, r2, r3}
 801263e:	b500      	push	{lr}
 8012640:	b09c      	sub	sp, #112	; 0x70
 8012642:	ab1d      	add	r3, sp, #116	; 0x74
 8012644:	9002      	str	r0, [sp, #8]
 8012646:	9006      	str	r0, [sp, #24]
 8012648:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801264c:	4809      	ldr	r0, [pc, #36]	; (8012674 <siprintf+0x38>)
 801264e:	9107      	str	r1, [sp, #28]
 8012650:	9104      	str	r1, [sp, #16]
 8012652:	4909      	ldr	r1, [pc, #36]	; (8012678 <siprintf+0x3c>)
 8012654:	f853 2b04 	ldr.w	r2, [r3], #4
 8012658:	9105      	str	r1, [sp, #20]
 801265a:	6800      	ldr	r0, [r0, #0]
 801265c:	9301      	str	r3, [sp, #4]
 801265e:	a902      	add	r1, sp, #8
 8012660:	f000 f866 	bl	8012730 <_svfiprintf_r>
 8012664:	9b02      	ldr	r3, [sp, #8]
 8012666:	2200      	movs	r2, #0
 8012668:	701a      	strb	r2, [r3, #0]
 801266a:	b01c      	add	sp, #112	; 0x70
 801266c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012670:	b003      	add	sp, #12
 8012672:	4770      	bx	lr
 8012674:	2000063c 	.word	0x2000063c
 8012678:	ffff0208 	.word	0xffff0208

0801267c <__ssputs_r>:
 801267c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012680:	688e      	ldr	r6, [r1, #8]
 8012682:	429e      	cmp	r6, r3
 8012684:	4682      	mov	sl, r0
 8012686:	460c      	mov	r4, r1
 8012688:	4690      	mov	r8, r2
 801268a:	4699      	mov	r9, r3
 801268c:	d837      	bhi.n	80126fe <__ssputs_r+0x82>
 801268e:	898a      	ldrh	r2, [r1, #12]
 8012690:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012694:	d031      	beq.n	80126fa <__ssputs_r+0x7e>
 8012696:	6825      	ldr	r5, [r4, #0]
 8012698:	6909      	ldr	r1, [r1, #16]
 801269a:	1a6f      	subs	r7, r5, r1
 801269c:	6965      	ldr	r5, [r4, #20]
 801269e:	2302      	movs	r3, #2
 80126a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80126a4:	fb95 f5f3 	sdiv	r5, r5, r3
 80126a8:	f109 0301 	add.w	r3, r9, #1
 80126ac:	443b      	add	r3, r7
 80126ae:	429d      	cmp	r5, r3
 80126b0:	bf38      	it	cc
 80126b2:	461d      	movcc	r5, r3
 80126b4:	0553      	lsls	r3, r2, #21
 80126b6:	d530      	bpl.n	801271a <__ssputs_r+0x9e>
 80126b8:	4629      	mov	r1, r5
 80126ba:	f000 fb21 	bl	8012d00 <_malloc_r>
 80126be:	4606      	mov	r6, r0
 80126c0:	b950      	cbnz	r0, 80126d8 <__ssputs_r+0x5c>
 80126c2:	230c      	movs	r3, #12
 80126c4:	f8ca 3000 	str.w	r3, [sl]
 80126c8:	89a3      	ldrh	r3, [r4, #12]
 80126ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80126ce:	81a3      	strh	r3, [r4, #12]
 80126d0:	f04f 30ff 	mov.w	r0, #4294967295
 80126d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126d8:	463a      	mov	r2, r7
 80126da:	6921      	ldr	r1, [r4, #16]
 80126dc:	f7ff ff9b 	bl	8012616 <memcpy>
 80126e0:	89a3      	ldrh	r3, [r4, #12]
 80126e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80126e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80126ea:	81a3      	strh	r3, [r4, #12]
 80126ec:	6126      	str	r6, [r4, #16]
 80126ee:	6165      	str	r5, [r4, #20]
 80126f0:	443e      	add	r6, r7
 80126f2:	1bed      	subs	r5, r5, r7
 80126f4:	6026      	str	r6, [r4, #0]
 80126f6:	60a5      	str	r5, [r4, #8]
 80126f8:	464e      	mov	r6, r9
 80126fa:	454e      	cmp	r6, r9
 80126fc:	d900      	bls.n	8012700 <__ssputs_r+0x84>
 80126fe:	464e      	mov	r6, r9
 8012700:	4632      	mov	r2, r6
 8012702:	4641      	mov	r1, r8
 8012704:	6820      	ldr	r0, [r4, #0]
 8012706:	f000 fa93 	bl	8012c30 <memmove>
 801270a:	68a3      	ldr	r3, [r4, #8]
 801270c:	1b9b      	subs	r3, r3, r6
 801270e:	60a3      	str	r3, [r4, #8]
 8012710:	6823      	ldr	r3, [r4, #0]
 8012712:	441e      	add	r6, r3
 8012714:	6026      	str	r6, [r4, #0]
 8012716:	2000      	movs	r0, #0
 8012718:	e7dc      	b.n	80126d4 <__ssputs_r+0x58>
 801271a:	462a      	mov	r2, r5
 801271c:	f000 fb4a 	bl	8012db4 <_realloc_r>
 8012720:	4606      	mov	r6, r0
 8012722:	2800      	cmp	r0, #0
 8012724:	d1e2      	bne.n	80126ec <__ssputs_r+0x70>
 8012726:	6921      	ldr	r1, [r4, #16]
 8012728:	4650      	mov	r0, sl
 801272a:	f000 fa9b 	bl	8012c64 <_free_r>
 801272e:	e7c8      	b.n	80126c2 <__ssputs_r+0x46>

08012730 <_svfiprintf_r>:
 8012730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012734:	461d      	mov	r5, r3
 8012736:	898b      	ldrh	r3, [r1, #12]
 8012738:	061f      	lsls	r7, r3, #24
 801273a:	b09d      	sub	sp, #116	; 0x74
 801273c:	4680      	mov	r8, r0
 801273e:	460c      	mov	r4, r1
 8012740:	4616      	mov	r6, r2
 8012742:	d50f      	bpl.n	8012764 <_svfiprintf_r+0x34>
 8012744:	690b      	ldr	r3, [r1, #16]
 8012746:	b96b      	cbnz	r3, 8012764 <_svfiprintf_r+0x34>
 8012748:	2140      	movs	r1, #64	; 0x40
 801274a:	f000 fad9 	bl	8012d00 <_malloc_r>
 801274e:	6020      	str	r0, [r4, #0]
 8012750:	6120      	str	r0, [r4, #16]
 8012752:	b928      	cbnz	r0, 8012760 <_svfiprintf_r+0x30>
 8012754:	230c      	movs	r3, #12
 8012756:	f8c8 3000 	str.w	r3, [r8]
 801275a:	f04f 30ff 	mov.w	r0, #4294967295
 801275e:	e0c8      	b.n	80128f2 <_svfiprintf_r+0x1c2>
 8012760:	2340      	movs	r3, #64	; 0x40
 8012762:	6163      	str	r3, [r4, #20]
 8012764:	2300      	movs	r3, #0
 8012766:	9309      	str	r3, [sp, #36]	; 0x24
 8012768:	2320      	movs	r3, #32
 801276a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801276e:	2330      	movs	r3, #48	; 0x30
 8012770:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012774:	9503      	str	r5, [sp, #12]
 8012776:	f04f 0b01 	mov.w	fp, #1
 801277a:	4637      	mov	r7, r6
 801277c:	463d      	mov	r5, r7
 801277e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012782:	b10b      	cbz	r3, 8012788 <_svfiprintf_r+0x58>
 8012784:	2b25      	cmp	r3, #37	; 0x25
 8012786:	d13e      	bne.n	8012806 <_svfiprintf_r+0xd6>
 8012788:	ebb7 0a06 	subs.w	sl, r7, r6
 801278c:	d00b      	beq.n	80127a6 <_svfiprintf_r+0x76>
 801278e:	4653      	mov	r3, sl
 8012790:	4632      	mov	r2, r6
 8012792:	4621      	mov	r1, r4
 8012794:	4640      	mov	r0, r8
 8012796:	f7ff ff71 	bl	801267c <__ssputs_r>
 801279a:	3001      	adds	r0, #1
 801279c:	f000 80a4 	beq.w	80128e8 <_svfiprintf_r+0x1b8>
 80127a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80127a2:	4453      	add	r3, sl
 80127a4:	9309      	str	r3, [sp, #36]	; 0x24
 80127a6:	783b      	ldrb	r3, [r7, #0]
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	f000 809d 	beq.w	80128e8 <_svfiprintf_r+0x1b8>
 80127ae:	2300      	movs	r3, #0
 80127b0:	f04f 32ff 	mov.w	r2, #4294967295
 80127b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80127b8:	9304      	str	r3, [sp, #16]
 80127ba:	9307      	str	r3, [sp, #28]
 80127bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80127c0:	931a      	str	r3, [sp, #104]	; 0x68
 80127c2:	462f      	mov	r7, r5
 80127c4:	2205      	movs	r2, #5
 80127c6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80127ca:	4850      	ldr	r0, [pc, #320]	; (801290c <_svfiprintf_r+0x1dc>)
 80127cc:	f7ed fd00 	bl	80001d0 <memchr>
 80127d0:	9b04      	ldr	r3, [sp, #16]
 80127d2:	b9d0      	cbnz	r0, 801280a <_svfiprintf_r+0xda>
 80127d4:	06d9      	lsls	r1, r3, #27
 80127d6:	bf44      	itt	mi
 80127d8:	2220      	movmi	r2, #32
 80127da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80127de:	071a      	lsls	r2, r3, #28
 80127e0:	bf44      	itt	mi
 80127e2:	222b      	movmi	r2, #43	; 0x2b
 80127e4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80127e8:	782a      	ldrb	r2, [r5, #0]
 80127ea:	2a2a      	cmp	r2, #42	; 0x2a
 80127ec:	d015      	beq.n	801281a <_svfiprintf_r+0xea>
 80127ee:	9a07      	ldr	r2, [sp, #28]
 80127f0:	462f      	mov	r7, r5
 80127f2:	2000      	movs	r0, #0
 80127f4:	250a      	movs	r5, #10
 80127f6:	4639      	mov	r1, r7
 80127f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80127fc:	3b30      	subs	r3, #48	; 0x30
 80127fe:	2b09      	cmp	r3, #9
 8012800:	d94d      	bls.n	801289e <_svfiprintf_r+0x16e>
 8012802:	b1b8      	cbz	r0, 8012834 <_svfiprintf_r+0x104>
 8012804:	e00f      	b.n	8012826 <_svfiprintf_r+0xf6>
 8012806:	462f      	mov	r7, r5
 8012808:	e7b8      	b.n	801277c <_svfiprintf_r+0x4c>
 801280a:	4a40      	ldr	r2, [pc, #256]	; (801290c <_svfiprintf_r+0x1dc>)
 801280c:	1a80      	subs	r0, r0, r2
 801280e:	fa0b f000 	lsl.w	r0, fp, r0
 8012812:	4318      	orrs	r0, r3
 8012814:	9004      	str	r0, [sp, #16]
 8012816:	463d      	mov	r5, r7
 8012818:	e7d3      	b.n	80127c2 <_svfiprintf_r+0x92>
 801281a:	9a03      	ldr	r2, [sp, #12]
 801281c:	1d11      	adds	r1, r2, #4
 801281e:	6812      	ldr	r2, [r2, #0]
 8012820:	9103      	str	r1, [sp, #12]
 8012822:	2a00      	cmp	r2, #0
 8012824:	db01      	blt.n	801282a <_svfiprintf_r+0xfa>
 8012826:	9207      	str	r2, [sp, #28]
 8012828:	e004      	b.n	8012834 <_svfiprintf_r+0x104>
 801282a:	4252      	negs	r2, r2
 801282c:	f043 0302 	orr.w	r3, r3, #2
 8012830:	9207      	str	r2, [sp, #28]
 8012832:	9304      	str	r3, [sp, #16]
 8012834:	783b      	ldrb	r3, [r7, #0]
 8012836:	2b2e      	cmp	r3, #46	; 0x2e
 8012838:	d10c      	bne.n	8012854 <_svfiprintf_r+0x124>
 801283a:	787b      	ldrb	r3, [r7, #1]
 801283c:	2b2a      	cmp	r3, #42	; 0x2a
 801283e:	d133      	bne.n	80128a8 <_svfiprintf_r+0x178>
 8012840:	9b03      	ldr	r3, [sp, #12]
 8012842:	1d1a      	adds	r2, r3, #4
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	9203      	str	r2, [sp, #12]
 8012848:	2b00      	cmp	r3, #0
 801284a:	bfb8      	it	lt
 801284c:	f04f 33ff 	movlt.w	r3, #4294967295
 8012850:	3702      	adds	r7, #2
 8012852:	9305      	str	r3, [sp, #20]
 8012854:	4d2e      	ldr	r5, [pc, #184]	; (8012910 <_svfiprintf_r+0x1e0>)
 8012856:	7839      	ldrb	r1, [r7, #0]
 8012858:	2203      	movs	r2, #3
 801285a:	4628      	mov	r0, r5
 801285c:	f7ed fcb8 	bl	80001d0 <memchr>
 8012860:	b138      	cbz	r0, 8012872 <_svfiprintf_r+0x142>
 8012862:	2340      	movs	r3, #64	; 0x40
 8012864:	1b40      	subs	r0, r0, r5
 8012866:	fa03 f000 	lsl.w	r0, r3, r0
 801286a:	9b04      	ldr	r3, [sp, #16]
 801286c:	4303      	orrs	r3, r0
 801286e:	3701      	adds	r7, #1
 8012870:	9304      	str	r3, [sp, #16]
 8012872:	7839      	ldrb	r1, [r7, #0]
 8012874:	4827      	ldr	r0, [pc, #156]	; (8012914 <_svfiprintf_r+0x1e4>)
 8012876:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801287a:	2206      	movs	r2, #6
 801287c:	1c7e      	adds	r6, r7, #1
 801287e:	f7ed fca7 	bl	80001d0 <memchr>
 8012882:	2800      	cmp	r0, #0
 8012884:	d038      	beq.n	80128f8 <_svfiprintf_r+0x1c8>
 8012886:	4b24      	ldr	r3, [pc, #144]	; (8012918 <_svfiprintf_r+0x1e8>)
 8012888:	bb13      	cbnz	r3, 80128d0 <_svfiprintf_r+0x1a0>
 801288a:	9b03      	ldr	r3, [sp, #12]
 801288c:	3307      	adds	r3, #7
 801288e:	f023 0307 	bic.w	r3, r3, #7
 8012892:	3308      	adds	r3, #8
 8012894:	9303      	str	r3, [sp, #12]
 8012896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012898:	444b      	add	r3, r9
 801289a:	9309      	str	r3, [sp, #36]	; 0x24
 801289c:	e76d      	b.n	801277a <_svfiprintf_r+0x4a>
 801289e:	fb05 3202 	mla	r2, r5, r2, r3
 80128a2:	2001      	movs	r0, #1
 80128a4:	460f      	mov	r7, r1
 80128a6:	e7a6      	b.n	80127f6 <_svfiprintf_r+0xc6>
 80128a8:	2300      	movs	r3, #0
 80128aa:	3701      	adds	r7, #1
 80128ac:	9305      	str	r3, [sp, #20]
 80128ae:	4619      	mov	r1, r3
 80128b0:	250a      	movs	r5, #10
 80128b2:	4638      	mov	r0, r7
 80128b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80128b8:	3a30      	subs	r2, #48	; 0x30
 80128ba:	2a09      	cmp	r2, #9
 80128bc:	d903      	bls.n	80128c6 <_svfiprintf_r+0x196>
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d0c8      	beq.n	8012854 <_svfiprintf_r+0x124>
 80128c2:	9105      	str	r1, [sp, #20]
 80128c4:	e7c6      	b.n	8012854 <_svfiprintf_r+0x124>
 80128c6:	fb05 2101 	mla	r1, r5, r1, r2
 80128ca:	2301      	movs	r3, #1
 80128cc:	4607      	mov	r7, r0
 80128ce:	e7f0      	b.n	80128b2 <_svfiprintf_r+0x182>
 80128d0:	ab03      	add	r3, sp, #12
 80128d2:	9300      	str	r3, [sp, #0]
 80128d4:	4622      	mov	r2, r4
 80128d6:	4b11      	ldr	r3, [pc, #68]	; (801291c <_svfiprintf_r+0x1ec>)
 80128d8:	a904      	add	r1, sp, #16
 80128da:	4640      	mov	r0, r8
 80128dc:	f3af 8000 	nop.w
 80128e0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80128e4:	4681      	mov	r9, r0
 80128e6:	d1d6      	bne.n	8012896 <_svfiprintf_r+0x166>
 80128e8:	89a3      	ldrh	r3, [r4, #12]
 80128ea:	065b      	lsls	r3, r3, #25
 80128ec:	f53f af35 	bmi.w	801275a <_svfiprintf_r+0x2a>
 80128f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80128f2:	b01d      	add	sp, #116	; 0x74
 80128f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128f8:	ab03      	add	r3, sp, #12
 80128fa:	9300      	str	r3, [sp, #0]
 80128fc:	4622      	mov	r2, r4
 80128fe:	4b07      	ldr	r3, [pc, #28]	; (801291c <_svfiprintf_r+0x1ec>)
 8012900:	a904      	add	r1, sp, #16
 8012902:	4640      	mov	r0, r8
 8012904:	f000 f882 	bl	8012a0c <_printf_i>
 8012908:	e7ea      	b.n	80128e0 <_svfiprintf_r+0x1b0>
 801290a:	bf00      	nop
 801290c:	0806dfe8 	.word	0x0806dfe8
 8012910:	0806dfee 	.word	0x0806dfee
 8012914:	0806dff2 	.word	0x0806dff2
 8012918:	00000000 	.word	0x00000000
 801291c:	0801267d 	.word	0x0801267d

08012920 <_printf_common>:
 8012920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012924:	4691      	mov	r9, r2
 8012926:	461f      	mov	r7, r3
 8012928:	688a      	ldr	r2, [r1, #8]
 801292a:	690b      	ldr	r3, [r1, #16]
 801292c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012930:	4293      	cmp	r3, r2
 8012932:	bfb8      	it	lt
 8012934:	4613      	movlt	r3, r2
 8012936:	f8c9 3000 	str.w	r3, [r9]
 801293a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801293e:	4606      	mov	r6, r0
 8012940:	460c      	mov	r4, r1
 8012942:	b112      	cbz	r2, 801294a <_printf_common+0x2a>
 8012944:	3301      	adds	r3, #1
 8012946:	f8c9 3000 	str.w	r3, [r9]
 801294a:	6823      	ldr	r3, [r4, #0]
 801294c:	0699      	lsls	r1, r3, #26
 801294e:	bf42      	ittt	mi
 8012950:	f8d9 3000 	ldrmi.w	r3, [r9]
 8012954:	3302      	addmi	r3, #2
 8012956:	f8c9 3000 	strmi.w	r3, [r9]
 801295a:	6825      	ldr	r5, [r4, #0]
 801295c:	f015 0506 	ands.w	r5, r5, #6
 8012960:	d107      	bne.n	8012972 <_printf_common+0x52>
 8012962:	f104 0a19 	add.w	sl, r4, #25
 8012966:	68e3      	ldr	r3, [r4, #12]
 8012968:	f8d9 2000 	ldr.w	r2, [r9]
 801296c:	1a9b      	subs	r3, r3, r2
 801296e:	42ab      	cmp	r3, r5
 8012970:	dc28      	bgt.n	80129c4 <_printf_common+0xa4>
 8012972:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8012976:	6822      	ldr	r2, [r4, #0]
 8012978:	3300      	adds	r3, #0
 801297a:	bf18      	it	ne
 801297c:	2301      	movne	r3, #1
 801297e:	0692      	lsls	r2, r2, #26
 8012980:	d42d      	bmi.n	80129de <_printf_common+0xbe>
 8012982:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012986:	4639      	mov	r1, r7
 8012988:	4630      	mov	r0, r6
 801298a:	47c0      	blx	r8
 801298c:	3001      	adds	r0, #1
 801298e:	d020      	beq.n	80129d2 <_printf_common+0xb2>
 8012990:	6823      	ldr	r3, [r4, #0]
 8012992:	68e5      	ldr	r5, [r4, #12]
 8012994:	f8d9 2000 	ldr.w	r2, [r9]
 8012998:	f003 0306 	and.w	r3, r3, #6
 801299c:	2b04      	cmp	r3, #4
 801299e:	bf08      	it	eq
 80129a0:	1aad      	subeq	r5, r5, r2
 80129a2:	68a3      	ldr	r3, [r4, #8]
 80129a4:	6922      	ldr	r2, [r4, #16]
 80129a6:	bf0c      	ite	eq
 80129a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80129ac:	2500      	movne	r5, #0
 80129ae:	4293      	cmp	r3, r2
 80129b0:	bfc4      	itt	gt
 80129b2:	1a9b      	subgt	r3, r3, r2
 80129b4:	18ed      	addgt	r5, r5, r3
 80129b6:	f04f 0900 	mov.w	r9, #0
 80129ba:	341a      	adds	r4, #26
 80129bc:	454d      	cmp	r5, r9
 80129be:	d11a      	bne.n	80129f6 <_printf_common+0xd6>
 80129c0:	2000      	movs	r0, #0
 80129c2:	e008      	b.n	80129d6 <_printf_common+0xb6>
 80129c4:	2301      	movs	r3, #1
 80129c6:	4652      	mov	r2, sl
 80129c8:	4639      	mov	r1, r7
 80129ca:	4630      	mov	r0, r6
 80129cc:	47c0      	blx	r8
 80129ce:	3001      	adds	r0, #1
 80129d0:	d103      	bne.n	80129da <_printf_common+0xba>
 80129d2:	f04f 30ff 	mov.w	r0, #4294967295
 80129d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80129da:	3501      	adds	r5, #1
 80129dc:	e7c3      	b.n	8012966 <_printf_common+0x46>
 80129de:	18e1      	adds	r1, r4, r3
 80129e0:	1c5a      	adds	r2, r3, #1
 80129e2:	2030      	movs	r0, #48	; 0x30
 80129e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80129e8:	4422      	add	r2, r4
 80129ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80129ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80129f2:	3302      	adds	r3, #2
 80129f4:	e7c5      	b.n	8012982 <_printf_common+0x62>
 80129f6:	2301      	movs	r3, #1
 80129f8:	4622      	mov	r2, r4
 80129fa:	4639      	mov	r1, r7
 80129fc:	4630      	mov	r0, r6
 80129fe:	47c0      	blx	r8
 8012a00:	3001      	adds	r0, #1
 8012a02:	d0e6      	beq.n	80129d2 <_printf_common+0xb2>
 8012a04:	f109 0901 	add.w	r9, r9, #1
 8012a08:	e7d8      	b.n	80129bc <_printf_common+0x9c>
	...

08012a0c <_printf_i>:
 8012a0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012a10:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8012a14:	460c      	mov	r4, r1
 8012a16:	7e09      	ldrb	r1, [r1, #24]
 8012a18:	b085      	sub	sp, #20
 8012a1a:	296e      	cmp	r1, #110	; 0x6e
 8012a1c:	4617      	mov	r7, r2
 8012a1e:	4606      	mov	r6, r0
 8012a20:	4698      	mov	r8, r3
 8012a22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012a24:	f000 80b3 	beq.w	8012b8e <_printf_i+0x182>
 8012a28:	d822      	bhi.n	8012a70 <_printf_i+0x64>
 8012a2a:	2963      	cmp	r1, #99	; 0x63
 8012a2c:	d036      	beq.n	8012a9c <_printf_i+0x90>
 8012a2e:	d80a      	bhi.n	8012a46 <_printf_i+0x3a>
 8012a30:	2900      	cmp	r1, #0
 8012a32:	f000 80b9 	beq.w	8012ba8 <_printf_i+0x19c>
 8012a36:	2958      	cmp	r1, #88	; 0x58
 8012a38:	f000 8083 	beq.w	8012b42 <_printf_i+0x136>
 8012a3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012a40:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8012a44:	e032      	b.n	8012aac <_printf_i+0xa0>
 8012a46:	2964      	cmp	r1, #100	; 0x64
 8012a48:	d001      	beq.n	8012a4e <_printf_i+0x42>
 8012a4a:	2969      	cmp	r1, #105	; 0x69
 8012a4c:	d1f6      	bne.n	8012a3c <_printf_i+0x30>
 8012a4e:	6820      	ldr	r0, [r4, #0]
 8012a50:	6813      	ldr	r3, [r2, #0]
 8012a52:	0605      	lsls	r5, r0, #24
 8012a54:	f103 0104 	add.w	r1, r3, #4
 8012a58:	d52a      	bpl.n	8012ab0 <_printf_i+0xa4>
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	6011      	str	r1, [r2, #0]
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	da03      	bge.n	8012a6a <_printf_i+0x5e>
 8012a62:	222d      	movs	r2, #45	; 0x2d
 8012a64:	425b      	negs	r3, r3
 8012a66:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8012a6a:	486f      	ldr	r0, [pc, #444]	; (8012c28 <_printf_i+0x21c>)
 8012a6c:	220a      	movs	r2, #10
 8012a6e:	e039      	b.n	8012ae4 <_printf_i+0xd8>
 8012a70:	2973      	cmp	r1, #115	; 0x73
 8012a72:	f000 809d 	beq.w	8012bb0 <_printf_i+0x1a4>
 8012a76:	d808      	bhi.n	8012a8a <_printf_i+0x7e>
 8012a78:	296f      	cmp	r1, #111	; 0x6f
 8012a7a:	d020      	beq.n	8012abe <_printf_i+0xb2>
 8012a7c:	2970      	cmp	r1, #112	; 0x70
 8012a7e:	d1dd      	bne.n	8012a3c <_printf_i+0x30>
 8012a80:	6823      	ldr	r3, [r4, #0]
 8012a82:	f043 0320 	orr.w	r3, r3, #32
 8012a86:	6023      	str	r3, [r4, #0]
 8012a88:	e003      	b.n	8012a92 <_printf_i+0x86>
 8012a8a:	2975      	cmp	r1, #117	; 0x75
 8012a8c:	d017      	beq.n	8012abe <_printf_i+0xb2>
 8012a8e:	2978      	cmp	r1, #120	; 0x78
 8012a90:	d1d4      	bne.n	8012a3c <_printf_i+0x30>
 8012a92:	2378      	movs	r3, #120	; 0x78
 8012a94:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012a98:	4864      	ldr	r0, [pc, #400]	; (8012c2c <_printf_i+0x220>)
 8012a9a:	e055      	b.n	8012b48 <_printf_i+0x13c>
 8012a9c:	6813      	ldr	r3, [r2, #0]
 8012a9e:	1d19      	adds	r1, r3, #4
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	6011      	str	r1, [r2, #0]
 8012aa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012aa8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012aac:	2301      	movs	r3, #1
 8012aae:	e08c      	b.n	8012bca <_printf_i+0x1be>
 8012ab0:	681b      	ldr	r3, [r3, #0]
 8012ab2:	6011      	str	r1, [r2, #0]
 8012ab4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012ab8:	bf18      	it	ne
 8012aba:	b21b      	sxthne	r3, r3
 8012abc:	e7cf      	b.n	8012a5e <_printf_i+0x52>
 8012abe:	6813      	ldr	r3, [r2, #0]
 8012ac0:	6825      	ldr	r5, [r4, #0]
 8012ac2:	1d18      	adds	r0, r3, #4
 8012ac4:	6010      	str	r0, [r2, #0]
 8012ac6:	0628      	lsls	r0, r5, #24
 8012ac8:	d501      	bpl.n	8012ace <_printf_i+0xc2>
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	e002      	b.n	8012ad4 <_printf_i+0xc8>
 8012ace:	0668      	lsls	r0, r5, #25
 8012ad0:	d5fb      	bpl.n	8012aca <_printf_i+0xbe>
 8012ad2:	881b      	ldrh	r3, [r3, #0]
 8012ad4:	4854      	ldr	r0, [pc, #336]	; (8012c28 <_printf_i+0x21c>)
 8012ad6:	296f      	cmp	r1, #111	; 0x6f
 8012ad8:	bf14      	ite	ne
 8012ada:	220a      	movne	r2, #10
 8012adc:	2208      	moveq	r2, #8
 8012ade:	2100      	movs	r1, #0
 8012ae0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012ae4:	6865      	ldr	r5, [r4, #4]
 8012ae6:	60a5      	str	r5, [r4, #8]
 8012ae8:	2d00      	cmp	r5, #0
 8012aea:	f2c0 8095 	blt.w	8012c18 <_printf_i+0x20c>
 8012aee:	6821      	ldr	r1, [r4, #0]
 8012af0:	f021 0104 	bic.w	r1, r1, #4
 8012af4:	6021      	str	r1, [r4, #0]
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d13d      	bne.n	8012b76 <_printf_i+0x16a>
 8012afa:	2d00      	cmp	r5, #0
 8012afc:	f040 808e 	bne.w	8012c1c <_printf_i+0x210>
 8012b00:	4665      	mov	r5, ip
 8012b02:	2a08      	cmp	r2, #8
 8012b04:	d10b      	bne.n	8012b1e <_printf_i+0x112>
 8012b06:	6823      	ldr	r3, [r4, #0]
 8012b08:	07db      	lsls	r3, r3, #31
 8012b0a:	d508      	bpl.n	8012b1e <_printf_i+0x112>
 8012b0c:	6923      	ldr	r3, [r4, #16]
 8012b0e:	6862      	ldr	r2, [r4, #4]
 8012b10:	429a      	cmp	r2, r3
 8012b12:	bfde      	ittt	le
 8012b14:	2330      	movle	r3, #48	; 0x30
 8012b16:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012b1a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012b1e:	ebac 0305 	sub.w	r3, ip, r5
 8012b22:	6123      	str	r3, [r4, #16]
 8012b24:	f8cd 8000 	str.w	r8, [sp]
 8012b28:	463b      	mov	r3, r7
 8012b2a:	aa03      	add	r2, sp, #12
 8012b2c:	4621      	mov	r1, r4
 8012b2e:	4630      	mov	r0, r6
 8012b30:	f7ff fef6 	bl	8012920 <_printf_common>
 8012b34:	3001      	adds	r0, #1
 8012b36:	d14d      	bne.n	8012bd4 <_printf_i+0x1c8>
 8012b38:	f04f 30ff 	mov.w	r0, #4294967295
 8012b3c:	b005      	add	sp, #20
 8012b3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012b42:	4839      	ldr	r0, [pc, #228]	; (8012c28 <_printf_i+0x21c>)
 8012b44:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8012b48:	6813      	ldr	r3, [r2, #0]
 8012b4a:	6821      	ldr	r1, [r4, #0]
 8012b4c:	1d1d      	adds	r5, r3, #4
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	6015      	str	r5, [r2, #0]
 8012b52:	060a      	lsls	r2, r1, #24
 8012b54:	d50b      	bpl.n	8012b6e <_printf_i+0x162>
 8012b56:	07ca      	lsls	r2, r1, #31
 8012b58:	bf44      	itt	mi
 8012b5a:	f041 0120 	orrmi.w	r1, r1, #32
 8012b5e:	6021      	strmi	r1, [r4, #0]
 8012b60:	b91b      	cbnz	r3, 8012b6a <_printf_i+0x15e>
 8012b62:	6822      	ldr	r2, [r4, #0]
 8012b64:	f022 0220 	bic.w	r2, r2, #32
 8012b68:	6022      	str	r2, [r4, #0]
 8012b6a:	2210      	movs	r2, #16
 8012b6c:	e7b7      	b.n	8012ade <_printf_i+0xd2>
 8012b6e:	064d      	lsls	r5, r1, #25
 8012b70:	bf48      	it	mi
 8012b72:	b29b      	uxthmi	r3, r3
 8012b74:	e7ef      	b.n	8012b56 <_printf_i+0x14a>
 8012b76:	4665      	mov	r5, ip
 8012b78:	fbb3 f1f2 	udiv	r1, r3, r2
 8012b7c:	fb02 3311 	mls	r3, r2, r1, r3
 8012b80:	5cc3      	ldrb	r3, [r0, r3]
 8012b82:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8012b86:	460b      	mov	r3, r1
 8012b88:	2900      	cmp	r1, #0
 8012b8a:	d1f5      	bne.n	8012b78 <_printf_i+0x16c>
 8012b8c:	e7b9      	b.n	8012b02 <_printf_i+0xf6>
 8012b8e:	6813      	ldr	r3, [r2, #0]
 8012b90:	6825      	ldr	r5, [r4, #0]
 8012b92:	6961      	ldr	r1, [r4, #20]
 8012b94:	1d18      	adds	r0, r3, #4
 8012b96:	6010      	str	r0, [r2, #0]
 8012b98:	0628      	lsls	r0, r5, #24
 8012b9a:	681b      	ldr	r3, [r3, #0]
 8012b9c:	d501      	bpl.n	8012ba2 <_printf_i+0x196>
 8012b9e:	6019      	str	r1, [r3, #0]
 8012ba0:	e002      	b.n	8012ba8 <_printf_i+0x19c>
 8012ba2:	066a      	lsls	r2, r5, #25
 8012ba4:	d5fb      	bpl.n	8012b9e <_printf_i+0x192>
 8012ba6:	8019      	strh	r1, [r3, #0]
 8012ba8:	2300      	movs	r3, #0
 8012baa:	6123      	str	r3, [r4, #16]
 8012bac:	4665      	mov	r5, ip
 8012bae:	e7b9      	b.n	8012b24 <_printf_i+0x118>
 8012bb0:	6813      	ldr	r3, [r2, #0]
 8012bb2:	1d19      	adds	r1, r3, #4
 8012bb4:	6011      	str	r1, [r2, #0]
 8012bb6:	681d      	ldr	r5, [r3, #0]
 8012bb8:	6862      	ldr	r2, [r4, #4]
 8012bba:	2100      	movs	r1, #0
 8012bbc:	4628      	mov	r0, r5
 8012bbe:	f7ed fb07 	bl	80001d0 <memchr>
 8012bc2:	b108      	cbz	r0, 8012bc8 <_printf_i+0x1bc>
 8012bc4:	1b40      	subs	r0, r0, r5
 8012bc6:	6060      	str	r0, [r4, #4]
 8012bc8:	6863      	ldr	r3, [r4, #4]
 8012bca:	6123      	str	r3, [r4, #16]
 8012bcc:	2300      	movs	r3, #0
 8012bce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012bd2:	e7a7      	b.n	8012b24 <_printf_i+0x118>
 8012bd4:	6923      	ldr	r3, [r4, #16]
 8012bd6:	462a      	mov	r2, r5
 8012bd8:	4639      	mov	r1, r7
 8012bda:	4630      	mov	r0, r6
 8012bdc:	47c0      	blx	r8
 8012bde:	3001      	adds	r0, #1
 8012be0:	d0aa      	beq.n	8012b38 <_printf_i+0x12c>
 8012be2:	6823      	ldr	r3, [r4, #0]
 8012be4:	079b      	lsls	r3, r3, #30
 8012be6:	d413      	bmi.n	8012c10 <_printf_i+0x204>
 8012be8:	68e0      	ldr	r0, [r4, #12]
 8012bea:	9b03      	ldr	r3, [sp, #12]
 8012bec:	4298      	cmp	r0, r3
 8012bee:	bfb8      	it	lt
 8012bf0:	4618      	movlt	r0, r3
 8012bf2:	e7a3      	b.n	8012b3c <_printf_i+0x130>
 8012bf4:	2301      	movs	r3, #1
 8012bf6:	464a      	mov	r2, r9
 8012bf8:	4639      	mov	r1, r7
 8012bfa:	4630      	mov	r0, r6
 8012bfc:	47c0      	blx	r8
 8012bfe:	3001      	adds	r0, #1
 8012c00:	d09a      	beq.n	8012b38 <_printf_i+0x12c>
 8012c02:	3501      	adds	r5, #1
 8012c04:	68e3      	ldr	r3, [r4, #12]
 8012c06:	9a03      	ldr	r2, [sp, #12]
 8012c08:	1a9b      	subs	r3, r3, r2
 8012c0a:	42ab      	cmp	r3, r5
 8012c0c:	dcf2      	bgt.n	8012bf4 <_printf_i+0x1e8>
 8012c0e:	e7eb      	b.n	8012be8 <_printf_i+0x1dc>
 8012c10:	2500      	movs	r5, #0
 8012c12:	f104 0919 	add.w	r9, r4, #25
 8012c16:	e7f5      	b.n	8012c04 <_printf_i+0x1f8>
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d1ac      	bne.n	8012b76 <_printf_i+0x16a>
 8012c1c:	7803      	ldrb	r3, [r0, #0]
 8012c1e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012c22:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012c26:	e76c      	b.n	8012b02 <_printf_i+0xf6>
 8012c28:	0806dff9 	.word	0x0806dff9
 8012c2c:	0806e00a 	.word	0x0806e00a

08012c30 <memmove>:
 8012c30:	4288      	cmp	r0, r1
 8012c32:	b510      	push	{r4, lr}
 8012c34:	eb01 0302 	add.w	r3, r1, r2
 8012c38:	d807      	bhi.n	8012c4a <memmove+0x1a>
 8012c3a:	1e42      	subs	r2, r0, #1
 8012c3c:	4299      	cmp	r1, r3
 8012c3e:	d00a      	beq.n	8012c56 <memmove+0x26>
 8012c40:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012c44:	f802 4f01 	strb.w	r4, [r2, #1]!
 8012c48:	e7f8      	b.n	8012c3c <memmove+0xc>
 8012c4a:	4283      	cmp	r3, r0
 8012c4c:	d9f5      	bls.n	8012c3a <memmove+0xa>
 8012c4e:	1881      	adds	r1, r0, r2
 8012c50:	1ad2      	subs	r2, r2, r3
 8012c52:	42d3      	cmn	r3, r2
 8012c54:	d100      	bne.n	8012c58 <memmove+0x28>
 8012c56:	bd10      	pop	{r4, pc}
 8012c58:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012c5c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8012c60:	e7f7      	b.n	8012c52 <memmove+0x22>
	...

08012c64 <_free_r>:
 8012c64:	b538      	push	{r3, r4, r5, lr}
 8012c66:	4605      	mov	r5, r0
 8012c68:	2900      	cmp	r1, #0
 8012c6a:	d045      	beq.n	8012cf8 <_free_r+0x94>
 8012c6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012c70:	1f0c      	subs	r4, r1, #4
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	bfb8      	it	lt
 8012c76:	18e4      	addlt	r4, r4, r3
 8012c78:	f000 f8d2 	bl	8012e20 <__malloc_lock>
 8012c7c:	4a1f      	ldr	r2, [pc, #124]	; (8012cfc <_free_r+0x98>)
 8012c7e:	6813      	ldr	r3, [r2, #0]
 8012c80:	4610      	mov	r0, r2
 8012c82:	b933      	cbnz	r3, 8012c92 <_free_r+0x2e>
 8012c84:	6063      	str	r3, [r4, #4]
 8012c86:	6014      	str	r4, [r2, #0]
 8012c88:	4628      	mov	r0, r5
 8012c8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012c8e:	f000 b8c8 	b.w	8012e22 <__malloc_unlock>
 8012c92:	42a3      	cmp	r3, r4
 8012c94:	d90c      	bls.n	8012cb0 <_free_r+0x4c>
 8012c96:	6821      	ldr	r1, [r4, #0]
 8012c98:	1862      	adds	r2, r4, r1
 8012c9a:	4293      	cmp	r3, r2
 8012c9c:	bf04      	itt	eq
 8012c9e:	681a      	ldreq	r2, [r3, #0]
 8012ca0:	685b      	ldreq	r3, [r3, #4]
 8012ca2:	6063      	str	r3, [r4, #4]
 8012ca4:	bf04      	itt	eq
 8012ca6:	1852      	addeq	r2, r2, r1
 8012ca8:	6022      	streq	r2, [r4, #0]
 8012caa:	6004      	str	r4, [r0, #0]
 8012cac:	e7ec      	b.n	8012c88 <_free_r+0x24>
 8012cae:	4613      	mov	r3, r2
 8012cb0:	685a      	ldr	r2, [r3, #4]
 8012cb2:	b10a      	cbz	r2, 8012cb8 <_free_r+0x54>
 8012cb4:	42a2      	cmp	r2, r4
 8012cb6:	d9fa      	bls.n	8012cae <_free_r+0x4a>
 8012cb8:	6819      	ldr	r1, [r3, #0]
 8012cba:	1858      	adds	r0, r3, r1
 8012cbc:	42a0      	cmp	r0, r4
 8012cbe:	d10b      	bne.n	8012cd8 <_free_r+0x74>
 8012cc0:	6820      	ldr	r0, [r4, #0]
 8012cc2:	4401      	add	r1, r0
 8012cc4:	1858      	adds	r0, r3, r1
 8012cc6:	4282      	cmp	r2, r0
 8012cc8:	6019      	str	r1, [r3, #0]
 8012cca:	d1dd      	bne.n	8012c88 <_free_r+0x24>
 8012ccc:	6810      	ldr	r0, [r2, #0]
 8012cce:	6852      	ldr	r2, [r2, #4]
 8012cd0:	605a      	str	r2, [r3, #4]
 8012cd2:	4401      	add	r1, r0
 8012cd4:	6019      	str	r1, [r3, #0]
 8012cd6:	e7d7      	b.n	8012c88 <_free_r+0x24>
 8012cd8:	d902      	bls.n	8012ce0 <_free_r+0x7c>
 8012cda:	230c      	movs	r3, #12
 8012cdc:	602b      	str	r3, [r5, #0]
 8012cde:	e7d3      	b.n	8012c88 <_free_r+0x24>
 8012ce0:	6820      	ldr	r0, [r4, #0]
 8012ce2:	1821      	adds	r1, r4, r0
 8012ce4:	428a      	cmp	r2, r1
 8012ce6:	bf04      	itt	eq
 8012ce8:	6811      	ldreq	r1, [r2, #0]
 8012cea:	6852      	ldreq	r2, [r2, #4]
 8012cec:	6062      	str	r2, [r4, #4]
 8012cee:	bf04      	itt	eq
 8012cf0:	1809      	addeq	r1, r1, r0
 8012cf2:	6021      	streq	r1, [r4, #0]
 8012cf4:	605c      	str	r4, [r3, #4]
 8012cf6:	e7c7      	b.n	8012c88 <_free_r+0x24>
 8012cf8:	bd38      	pop	{r3, r4, r5, pc}
 8012cfa:	bf00      	nop
 8012cfc:	20006ac8 	.word	0x20006ac8

08012d00 <_malloc_r>:
 8012d00:	b570      	push	{r4, r5, r6, lr}
 8012d02:	1ccd      	adds	r5, r1, #3
 8012d04:	f025 0503 	bic.w	r5, r5, #3
 8012d08:	3508      	adds	r5, #8
 8012d0a:	2d0c      	cmp	r5, #12
 8012d0c:	bf38      	it	cc
 8012d0e:	250c      	movcc	r5, #12
 8012d10:	2d00      	cmp	r5, #0
 8012d12:	4606      	mov	r6, r0
 8012d14:	db01      	blt.n	8012d1a <_malloc_r+0x1a>
 8012d16:	42a9      	cmp	r1, r5
 8012d18:	d903      	bls.n	8012d22 <_malloc_r+0x22>
 8012d1a:	230c      	movs	r3, #12
 8012d1c:	6033      	str	r3, [r6, #0]
 8012d1e:	2000      	movs	r0, #0
 8012d20:	bd70      	pop	{r4, r5, r6, pc}
 8012d22:	f000 f87d 	bl	8012e20 <__malloc_lock>
 8012d26:	4a21      	ldr	r2, [pc, #132]	; (8012dac <_malloc_r+0xac>)
 8012d28:	6814      	ldr	r4, [r2, #0]
 8012d2a:	4621      	mov	r1, r4
 8012d2c:	b991      	cbnz	r1, 8012d54 <_malloc_r+0x54>
 8012d2e:	4c20      	ldr	r4, [pc, #128]	; (8012db0 <_malloc_r+0xb0>)
 8012d30:	6823      	ldr	r3, [r4, #0]
 8012d32:	b91b      	cbnz	r3, 8012d3c <_malloc_r+0x3c>
 8012d34:	4630      	mov	r0, r6
 8012d36:	f000 f863 	bl	8012e00 <_sbrk_r>
 8012d3a:	6020      	str	r0, [r4, #0]
 8012d3c:	4629      	mov	r1, r5
 8012d3e:	4630      	mov	r0, r6
 8012d40:	f000 f85e 	bl	8012e00 <_sbrk_r>
 8012d44:	1c43      	adds	r3, r0, #1
 8012d46:	d124      	bne.n	8012d92 <_malloc_r+0x92>
 8012d48:	230c      	movs	r3, #12
 8012d4a:	6033      	str	r3, [r6, #0]
 8012d4c:	4630      	mov	r0, r6
 8012d4e:	f000 f868 	bl	8012e22 <__malloc_unlock>
 8012d52:	e7e4      	b.n	8012d1e <_malloc_r+0x1e>
 8012d54:	680b      	ldr	r3, [r1, #0]
 8012d56:	1b5b      	subs	r3, r3, r5
 8012d58:	d418      	bmi.n	8012d8c <_malloc_r+0x8c>
 8012d5a:	2b0b      	cmp	r3, #11
 8012d5c:	d90f      	bls.n	8012d7e <_malloc_r+0x7e>
 8012d5e:	600b      	str	r3, [r1, #0]
 8012d60:	50cd      	str	r5, [r1, r3]
 8012d62:	18cc      	adds	r4, r1, r3
 8012d64:	4630      	mov	r0, r6
 8012d66:	f000 f85c 	bl	8012e22 <__malloc_unlock>
 8012d6a:	f104 000b 	add.w	r0, r4, #11
 8012d6e:	1d23      	adds	r3, r4, #4
 8012d70:	f020 0007 	bic.w	r0, r0, #7
 8012d74:	1ac3      	subs	r3, r0, r3
 8012d76:	d0d3      	beq.n	8012d20 <_malloc_r+0x20>
 8012d78:	425a      	negs	r2, r3
 8012d7a:	50e2      	str	r2, [r4, r3]
 8012d7c:	e7d0      	b.n	8012d20 <_malloc_r+0x20>
 8012d7e:	428c      	cmp	r4, r1
 8012d80:	684b      	ldr	r3, [r1, #4]
 8012d82:	bf16      	itet	ne
 8012d84:	6063      	strne	r3, [r4, #4]
 8012d86:	6013      	streq	r3, [r2, #0]
 8012d88:	460c      	movne	r4, r1
 8012d8a:	e7eb      	b.n	8012d64 <_malloc_r+0x64>
 8012d8c:	460c      	mov	r4, r1
 8012d8e:	6849      	ldr	r1, [r1, #4]
 8012d90:	e7cc      	b.n	8012d2c <_malloc_r+0x2c>
 8012d92:	1cc4      	adds	r4, r0, #3
 8012d94:	f024 0403 	bic.w	r4, r4, #3
 8012d98:	42a0      	cmp	r0, r4
 8012d9a:	d005      	beq.n	8012da8 <_malloc_r+0xa8>
 8012d9c:	1a21      	subs	r1, r4, r0
 8012d9e:	4630      	mov	r0, r6
 8012da0:	f000 f82e 	bl	8012e00 <_sbrk_r>
 8012da4:	3001      	adds	r0, #1
 8012da6:	d0cf      	beq.n	8012d48 <_malloc_r+0x48>
 8012da8:	6025      	str	r5, [r4, #0]
 8012daa:	e7db      	b.n	8012d64 <_malloc_r+0x64>
 8012dac:	20006ac8 	.word	0x20006ac8
 8012db0:	20006acc 	.word	0x20006acc

08012db4 <_realloc_r>:
 8012db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012db6:	4607      	mov	r7, r0
 8012db8:	4614      	mov	r4, r2
 8012dba:	460e      	mov	r6, r1
 8012dbc:	b921      	cbnz	r1, 8012dc8 <_realloc_r+0x14>
 8012dbe:	4611      	mov	r1, r2
 8012dc0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012dc4:	f7ff bf9c 	b.w	8012d00 <_malloc_r>
 8012dc8:	b922      	cbnz	r2, 8012dd4 <_realloc_r+0x20>
 8012dca:	f7ff ff4b 	bl	8012c64 <_free_r>
 8012dce:	4625      	mov	r5, r4
 8012dd0:	4628      	mov	r0, r5
 8012dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012dd4:	f000 f826 	bl	8012e24 <_malloc_usable_size_r>
 8012dd8:	42a0      	cmp	r0, r4
 8012dda:	d20f      	bcs.n	8012dfc <_realloc_r+0x48>
 8012ddc:	4621      	mov	r1, r4
 8012dde:	4638      	mov	r0, r7
 8012de0:	f7ff ff8e 	bl	8012d00 <_malloc_r>
 8012de4:	4605      	mov	r5, r0
 8012de6:	2800      	cmp	r0, #0
 8012de8:	d0f2      	beq.n	8012dd0 <_realloc_r+0x1c>
 8012dea:	4631      	mov	r1, r6
 8012dec:	4622      	mov	r2, r4
 8012dee:	f7ff fc12 	bl	8012616 <memcpy>
 8012df2:	4631      	mov	r1, r6
 8012df4:	4638      	mov	r0, r7
 8012df6:	f7ff ff35 	bl	8012c64 <_free_r>
 8012dfa:	e7e9      	b.n	8012dd0 <_realloc_r+0x1c>
 8012dfc:	4635      	mov	r5, r6
 8012dfe:	e7e7      	b.n	8012dd0 <_realloc_r+0x1c>

08012e00 <_sbrk_r>:
 8012e00:	b538      	push	{r3, r4, r5, lr}
 8012e02:	4c06      	ldr	r4, [pc, #24]	; (8012e1c <_sbrk_r+0x1c>)
 8012e04:	2300      	movs	r3, #0
 8012e06:	4605      	mov	r5, r0
 8012e08:	4608      	mov	r0, r1
 8012e0a:	6023      	str	r3, [r4, #0]
 8012e0c:	f7ff f8b4 	bl	8011f78 <_sbrk>
 8012e10:	1c43      	adds	r3, r0, #1
 8012e12:	d102      	bne.n	8012e1a <_sbrk_r+0x1a>
 8012e14:	6823      	ldr	r3, [r4, #0]
 8012e16:	b103      	cbz	r3, 8012e1a <_sbrk_r+0x1a>
 8012e18:	602b      	str	r3, [r5, #0]
 8012e1a:	bd38      	pop	{r3, r4, r5, pc}
 8012e1c:	20009cc0 	.word	0x20009cc0

08012e20 <__malloc_lock>:
 8012e20:	4770      	bx	lr

08012e22 <__malloc_unlock>:
 8012e22:	4770      	bx	lr

08012e24 <_malloc_usable_size_r>:
 8012e24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012e28:	1f18      	subs	r0, r3, #4
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	bfbc      	itt	lt
 8012e2e:	580b      	ldrlt	r3, [r1, r0]
 8012e30:	18c0      	addlt	r0, r0, r3
 8012e32:	4770      	bx	lr

08012e34 <_init>:
 8012e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e36:	bf00      	nop
 8012e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e3a:	bc08      	pop	{r3}
 8012e3c:	469e      	mov	lr, r3
 8012e3e:	4770      	bx	lr

08012e40 <_fini>:
 8012e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e42:	bf00      	nop
 8012e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e46:	bc08      	pop	{r3}
 8012e48:	469e      	mov	lr, r3
 8012e4a:	4770      	bx	lr
